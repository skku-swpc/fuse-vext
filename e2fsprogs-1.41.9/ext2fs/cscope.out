cscope 15 $HOME/workspace/fuse-ext2-0.0.7/e2fsprogs-1.41.9/ext2fs -q 0000010700 0001360093
	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/alloc.c

13 
	~<°dio.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<time.h
>

18 
	~<°rög.h
>

19 #i‡
HAVE_SYS_STAT_H


20 
	~<sys/°©.h
>

22 #i‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 
	~"ext2_fs.h
"

27 
	~"ext2fs.h
"

32 
	$check_block_unöô
(
ext2_fûsys
 
fs
, 
ext2fs_block_bôm≠
 
m≠
,

33 
dgΩ_t
 
group
)

35 
blk_t
 
i
;

36 
blk_t
 
blk
, 
su≥r_blk
, 
ﬁd_desc_blk
, 
√w_desc_blk
;

37 
ﬁd_desc_blocks
;

39 i‡(!(
	`EXT2_HAS_RO_COMPAT_FEATURE
(
fs
->
su≥r
,

40 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
)) ||

41 !(
fs
->
group_desc
[
group
].
bg_Êags
 & 
EXT2_BG_BLOCK_UNINIT
))

44 
blk
 = (
group
 * 
fs
->
su≥r
->
s_blocks_≥r_group
) +

45 
fs
->
su≥r
->
s_fú°_d©a_block
;

47 
	`ext2fs_su≥r_™d_bgd_loc
(
fs
, 
group
, &
su≥r_blk
,

48 &
ﬁd_desc_blk
, &
√w_desc_blk
, 0);

50 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 &

51 
EXT2_FEATURE_INCOMPAT_META_BG
)

52 
ﬁd_desc_blocks
 = 
fs
->
su≥r
->
s_fú°_mëa_bg
;

54 
ﬁd_desc_blocks
 = 
fs
->
desc_blocks
 + fs->
su≥r
->
s_ª£rved_gdt_blocks
;

56 
i
=0; i < 
fs
->
su≥r
->
s_blocks_≥r_group
; i++, 
blk
++) {

57 i‡((
blk
 =
su≥r_blk
) ||

58 (
ﬁd_desc_blk
 && 
ﬁd_desc_blocks
 &&

59 (
blk
 >
ﬁd_desc_blk
) &&

60 (
blk
 < 
ﬁd_desc_blk
 + 
ﬁd_desc_blocks
)) ||

61 (
√w_desc_blk
 && (
blk
 ==Çew_desc_blk)) ||

62 (
blk
 =
fs
->
group_desc
[
group
].
bg_block_bôm≠
) ||

63 (
blk
 =
fs
->
group_desc
[
group
].
bg_öode_bôm≠
) ||

64 (
blk
 >
fs
->
group_desc
[
group
].
bg_öode_èbÀ
 &&

65 (
blk
 < 
fs
->
group_desc
[
group
].
bg_öode_èbÀ


66 + 
fs
->
öode_blocks_≥r_group
)))

67 
	`ext2fs_Á°_m¨k_block_bôm≠
(
m≠
, 
blk
);

69 
	`ext2fs_Á°_unm¨k_block_bôm≠
(
m≠
, 
blk
);

71 
fs
->
group_desc
[
group
].
bg_Êags
 &~
EXT2_BG_BLOCK_UNINIT
;

72 
	`ext2fs_group_desc_csum_£t
(
fs
, 
group
);

73 
	}
}

78 
	$check_öode_unöô
(
ext2_fûsys
 
fs
, 
ext2fs_öode_bôm≠
 
m≠
,

79 
dgΩ_t
 
group
)

81 
ext2_öo_t
 
i
, 
öo
;

83 i‡(!(
	`EXT2_HAS_RO_COMPAT_FEATURE
(
fs
->
su≥r
,

84 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
)) ||

85 !(
fs
->
group_desc
[
group
].
bg_Êags
 & 
EXT2_BG_INODE_UNINIT
))

88 
öo
 = (
group
 * 
fs
->
su≥r
->
s_öodes_≥r_group
) + 1;

89 
i
=0; i < 
fs
->
su≥r
->
s_öodes_≥r_group
; i++, 
öo
++)

90 
	`ext2fs_Á°_unm¨k_öode_bôm≠
(
m≠
, 
öo
);

92 
fs
->
group_desc
[
group
].
bg_Êags
 &~
EXT2_BG_INODE_UNINIT
;

93 
	`check_block_unöô
(
fs
, fs->
block_m≠
, 
group
);

94 
	}
}

102 
îrcode_t
 
ext2fs_√w_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
,

103 
mode
 
EXT2FS_ATTR
((
unu£d
)),

104 
ext2fs_öode_bôm≠
 
m≠
, 
ext2_öo_t
 *
ªt
)

106 
ext2_öo_t
 
	gdú_group
 = 0;

107 
ext2_öo_t
 
	gi
;

108 
ext2_öo_t
 
	g°¨t_öode
;

110 
EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

112 i‡(!
	gm≠
)

113 
	gm≠
 = 
fs
->
öode_m≠
;

114 i‡(!
	gm≠
)

115  
	gEXT2_ET_NO_INODE_BITMAP
;

117 i‡(
	gdú
 > 0)

118 
	gdú_group
 = (
dú
 - 1Ë/ 
EXT2_INODES_PER_GROUP
(
fs
->
su≥r
);

120 
	g°¨t_öode
 = (
dú_group
 * 
EXT2_INODES_PER_GROUP
(
fs
->
su≥r
)) + 1;

121 i‡(
	g°¨t_öode
 < 
EXT2_FIRST_INODE
(
fs
->
su≥r
))

122 
	g°¨t_öode
 = 
EXT2_FIRST_INODE
(
fs
->
su≥r
);

123 i‡(
	g°¨t_öode
 > 
	gfs
->
	gsu≥r
->
	gs_öodes_cou¡
)

124  
	gEXT2_ET_INODE_ALLOC_FAIL
;

125 
	gi
 = 
°¨t_öode
;

128 i‡(((
	gi
 - 1Ë% 
EXT2_INODES_PER_GROUP
(
fs
->
su≥r
)) == 0)

129 
check_öode_unöô
(
fs
, 
m≠
, (
i
 - 1) /

130 
EXT2_INODES_PER_GROUP
(
fs
->
su≥r
));

132 i‡(!
ext2fs_Á°_ã°_öode_bôm≠
(
m≠
, 
i
))

134 
	gi
++;

135 i‡(
	gi
 > 
	gfs
->
	gsu≥r
->
	gs_öodes_cou¡
)

136 
	gi
 = 
EXT2_FIRST_INODE
(
fs
->
su≥r
);

137 } 
	gi
 !
°¨t_öode
);

139 i‡(
ext2fs_ã°_öode_bôm≠
(
m≠
, 
i
))

140  
	gEXT2_ET_INODE_ALLOC_FAIL
;

141 *
	gªt
 = 
i
;

149 
îrcode_t
 
	$ext2fs_√w_block
(
ext2_fûsys
 
fs
, 
blk_t
 
gﬂl
,

150 
ext2fs_block_bôm≠
 
m≠
, 
blk_t
 *
ªt
)

152 
blk_t
 
i
;

154 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

156 i‡(!
m≠
)

157 
m≠
 = 
fs
->
block_m≠
;

158 i‡(!
m≠
)

159  
EXT2_ET_NO_BLOCK_BITMAP
;

160 i‡(!
gﬂl
 || (gﬂ»>
fs
->
su≥r
->
s_blocks_cou¡
))

161 
gﬂl
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

162 
i
 = 
gﬂl
;

163 
	`check_block_unöô
(
fs
, 
m≠
,

164 (
i
 - 
fs
->
su≥r
->
s_fú°_d©a_block
) /

165 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
));

167 i‡(((
i
 - 
fs
->
su≥r
->
s_fú°_d©a_block
) %

168 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
)) == 0)

169 
	`check_block_unöô
(
fs
, 
m≠
,

170 (
i
 - 
fs
->
su≥r
->
s_fú°_d©a_block
) /

171 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
));

173 i‡(!
	`ext2fs_Á°_ã°_block_bôm≠
(
m≠
, 
i
)) {

174 *
ªt
 = 
i
;

177 
i
++;

178 i‡(
i
 >
fs
->
su≥r
->
s_blocks_cou¡
)

179 
i
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

180 } 
i
 !
gﬂl
);

181  
EXT2_ET_BLOCK_ALLOC_FAIL
;

182 
	}
}

188 
îrcode_t
 
	$ext2fs_Æloc_block
(
ext2_fûsys
 
fs
, 
blk_t
 
gﬂl
,

189 *
block_buf
, 
blk_t
 *
ªt
)

191 
îrcode_t
 
ªtvÆ
;

192 
blk_t
 
block
;

193 *
buf
 = 0;

195 i‡(!
block_buf
) {

196 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
buf
);

197 i‡(
ªtvÆ
)

198  
ªtvÆ
;

199 
block_buf
 = 
buf
;

201 
	`mem£t
(
block_buf
, 0, 
fs
->
blocksize
);

203 i‡(
fs
->
gë_Æloc_block
) {

204 
blk64_t
 
√w
;

206 
ªtvÆ
 = (
fs
->
gë_Æloc_block
)(fs, (
blk64_t
Ë
gﬂl
, &
√w
);

207 i‡(
ªtvÆ
)

208 
Áû
;

209 
block
 = (
blk_t
Ë
√w
;

211 i‡(!
fs
->
block_m≠
) {

212 
ªtvÆ
 = 
	`ext2fs_ªad_block_bôm≠
(
fs
);

213 i‡(
ªtvÆ
)

214 
Áû
;

217 
ªtvÆ
 = 
	`ext2fs_√w_block
(
fs
, 
gﬂl
, 0, &
block
);

218 i‡(
ªtvÆ
)

219 
Áû
;

222 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
block
, 1, 
block_buf
);

223 i‡(
ªtvÆ
)

224 
Áû
;

226 
	`ext2fs_block_Æloc_°©s
(
fs
, 
block
, +1);

227 *
ªt
 = 
block
;

229 
Áû
:

230 i‡(
buf
)

231 
	`ext2fs_‰ì_mem
(&
buf
);

232  
ªtvÆ
;

233 
	}
}

235 
îrcode_t
 
	$ext2fs_gë_‰ì_blocks
(
ext2_fûsys
 
fs
, 
blk_t
 
°¨t
, blk_à
föish
,

236 
num
, 
ext2fs_block_bôm≠
 
m≠
, 
blk_t
 *
ªt
)

238 
blk_t
 
b
 = 
°¨t
;

240 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

242 i‡(!
m≠
)

243 
m≠
 = 
fs
->
block_m≠
;

244 i‡(!
m≠
)

245  
EXT2_ET_NO_BLOCK_BITMAP
;

246 i‡(!
b
)

247 
b
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

248 i‡(!
föish
)

249 
föish
 = 
°¨t
;

250 i‡(!
num
)

251 
num
 = 1;

253 i‡(
b
+
num
-1 > 
fs
->
su≥r
->
s_blocks_cou¡
)

254 
b
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

255 i‡(
	`ext2fs_Á°_ã°_block_bôm≠_ønge
(
m≠
, 
b
, 
num
)) {

256 *
ªt
 = 
b
;

259 
b
++;

260 } 
b
 !
föish
);

261  
EXT2_ET_BLOCK_ALLOC_FAIL
;

262 
	}
}

264 
ext2fs_£t_Æloc_block_ˇŒback
(
ext2_fûsys
 
fs
,

265 
	$îrcode_t
 (*
func
)(
ext2_fûsys
 
fs
,

266 
blk64_t
 
gﬂl
,

267 
blk64_t
 *
ªt
),

268 
	$îrcode_t
 (**
ﬁd
)(
ext2_fûsys
 
fs
,

269 
blk64_t
 
gﬂl
,

270 
blk64_t
 *
ªt
))

272 i‡(!
fs
 || fs->
magic
 !
EXT2_ET_MAGIC_EXT2FS_FILSYS
)

275 i‡(
ﬁd
)

276 *
ﬁd
 = 
fs
->
gë_Æloc_block
;

278 
fs
->
gë_Æloc_block
 = 
func
;

279 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/alloc_sb.c

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 #i‡
HAVE_UNISTD_H


16 
	~<uni°d.h
>

18 
	~<f˙é.h
>

19 
	~<time.h
>

20 #i‡
HAVE_SYS_STAT_H


21 
	~<sys/°©.h
>

23 #i‡
HAVE_SYS_TYPES_H


24 
	~<sys/ty≥s.h
>

27 
	~"ext2_fs.h
"

28 
	~"ext2fs.h
"

43 
	$ext2fs_ª£rve_su≥r_™d_bgd
(
ext2_fûsys
 
fs
,

44 
dgΩ_t
 
group
,

45 
ext2fs_block_bôm≠
 
bm≠
)

47 
blk_t
 
su≥r_blk
, 
ﬁd_desc_blk
, 
√w_desc_blk
;

48 
j
, 
ﬁd_desc_blocks
, 
num_blocks
;

50 
num_blocks
 = 
	`ext2fs_su≥r_™d_bgd_loc
(
fs
, 
group
, &
su≥r_blk
,

51 &
ﬁd_desc_blk
, &
√w_desc_blk
, 0);

53 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 & 
EXT2_FEATURE_INCOMPAT_META_BG
)

54 
ﬁd_desc_blocks
 = 
fs
->
su≥r
->
s_fú°_mëa_bg
;

56 
ﬁd_desc_blocks
 =

57 
fs
->
desc_blocks
 + fs->
su≥r
->
s_ª£rved_gdt_blocks
;

59 i‡(
su≥r_blk
 || (
group
 == 0))

60 
	`ext2fs_m¨k_block_bôm≠
(
bm≠
, 
su≥r_blk
);

62 i‡(
ﬁd_desc_blk
) {

63 i‡(
fs
->
su≥r
->
s_ª£rved_gdt_blocks
 && fs->
block_m≠
 =
bm≠
)

64 
fs
->
group_desc
[
group
].
bg_Êags
 &~
EXT2_BG_BLOCK_UNINIT
;

65 
j
=0; j < 
ﬁd_desc_blocks
; j++)

66 i‡(
ﬁd_desc_blk
 + 
j
 < 
fs
->
su≥r
->
s_blocks_cou¡
)

67 
	`ext2fs_m¨k_block_bôm≠
(
bm≠
,

68 
ﬁd_desc_blk
 + 
j
);

70 i‡(
√w_desc_blk
)

71 
	`ext2fs_m¨k_block_bôm≠
(
bm≠
, 
√w_desc_blk
);

73  
num_blocks
;

74 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/alloc_stats.c

13 
	~<°dio.h
>

15 
	~"ext2_fs.h
"

16 
	~"ext2fs.h
"

18 
	$ext2fs_öode_Æloc_°©s2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

19 
öu£
, 
isdú
)

21 
group
 = 
	`ext2fs_group_of_öo
(
fs
, 
öo
);

23 #i‚de‡
OMIT_COM_ERR


24 i‡(
öo
 > 
fs
->
su≥r
->
s_öodes_cou¡
) {

25 
	`com_îr
("ext2fs_inode_alloc_stats2", 0,

26 "IŒegÆ inodênumbî: %lu", (Ë
öo
);

30 i‡(
öu£
 > 0)

31 
	`ext2fs_m¨k_öode_bôm≠
(
fs
->
öode_m≠
, 
öo
);

33 
	`ext2fs_unm¨k_öode_bôm≠
(
fs
->
öode_m≠
, 
öo
);

34 
fs
->
group_desc
[
group
].
bg_‰ì_öodes_cou¡
 -
öu£
;

35 i‡(
isdú
)

36 
fs
->
group_desc
[
group
].
bg_u£d_dús_cou¡
 +
öu£
;

40 
fs
->
group_desc
[
group
].
bg_Êags
 &~
EXT2_BG_INODE_UNINIT
;

41 i‡(
	`EXT2_HAS_RO_COMPAT_FEATURE
(
fs
->
su≥r
,

42 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
)) {

43 
ext2_öo_t
 
fú°_unu£d_öode
 = 
fs
->
su≥r
->
s_öodes_≥r_group
 -

44 
fs
->
group_desc
[
group
].
bg_ôabÀ_unu£d
 +

45 
group
 * 
fs
->
su≥r
->
s_öodes_≥r_group
 + 1;

47 i‡(
öo
 >
fú°_unu£d_öode
)

48 
fs
->
group_desc
[
group
].
bg_ôabÀ_unu£d
 =

49 
group
 * 
fs
->
su≥r
->
s_öodes_≥r_group
 +

50 
fs
->
su≥r
->
s_öodes_≥r_group
 - 
öo
;

51 
	`ext2fs_group_desc_csum_£t
(
fs
, 
group
);

54 
fs
->
su≥r
->
s_‰ì_öodes_cou¡
 -
öu£
;

55 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

56 
	`ext2fs_m¨k_ib_dúty
(
fs
);

57 
	}
}

59 
	$ext2fs_öode_Æloc_°©s
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
öu£
)

61 
	`ext2fs_öode_Æloc_°©s2
(
fs
, 
öo
, 
öu£
, 0);

62 
	}
}

64 
	$ext2fs_block_Æloc_°©s
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, 
öu£
)

66 
group
 = 
	`ext2fs_group_of_blk
(
fs
, 
blk
);

68 #i‚de‡
OMIT_COM_ERR


69 i‡(
blk
 >
fs
->
su≥r
->
s_blocks_cou¡
) {

70 
	`com_îr
("ext2fs_block_alloc_stats", 0,

71 "IŒegÆ blockÇumbî: %lu", (Ë
blk
);

75 i‡(
öu£
 > 0)

76 
	`ext2fs_m¨k_block_bôm≠
(
fs
->
block_m≠
, 
blk
);

78 
	`ext2fs_unm¨k_block_bôm≠
(
fs
->
block_m≠
, 
blk
);

79 
fs
->
group_desc
[
group
].
bg_‰ì_blocks_cou¡
 -
öu£
;

80 
fs
->
group_desc
[
group
].
bg_Êags
 &~
EXT2_BG_BLOCK_UNINIT
;

81 
	`ext2fs_group_desc_csum_£t
(
fs
, 
group
);

83 
fs
->
su≥r
->
s_‰ì_blocks_cou¡
 -
öu£
;

84 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

85 
	`ext2fs_m¨k_bb_dúty
(
fs
);

86 i‡(
fs
->
block_Æloc_°©s
)

87 (
fs
->
block_Æloc_°©s
)(fs, (
blk64_t
Ë
blk
, 
öu£
);

88 
	}
}

90 
ext2fs_£t_block_Æloc_°©s_ˇŒback
(
ext2_fûsys
 
fs
,

91 (*
func
)(
ext2_fûsys
 
fs
,

92 
blk64_t
 
blk
,

93 
öu£
),

94 (**
ﬁd
)(
ext2_fûsys
 
fs
,

95 
blk64_t
 
blk
,

96 
öu£
))

98 i‡(!
fs
 || fs->
magic
 !
EXT2_ET_MAGIC_EXT2FS_FILSYS
)

100 i‡(
ﬁd
)

101 *
ﬁd
 = 
fs
->
block_Æloc_°©s
;

103 
fs
->
block_Æloc_°©s
 = 
func
;

104 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/alloc_tables.c

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 #i‡
HAVE_UNISTD_H


16 
	~<uni°d.h
>

18 
	~<f˙é.h
>

19 
	~<time.h
>

20 #i‡
HAVE_SYS_STAT_H


21 
	~<sys/°©.h
>

23 #i‡
HAVE_SYS_TYPES_H


24 
	~<sys/ty≥s.h
>

27 
	~"ext2_fs.h
"

28 
	~"ext2fs.h
"

36 
blk_t
 
	$Êexbg_off£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
, 
blk_t
 
°¨t_blk
,

37 
ext2fs_block_bôm≠
 
bm≠
, 
off£t
, 
size
,

38 
ñem_size
)

40 
Êexbg
, 
Êexbg_size
;

41 
blk_t
 
œ°_blk
, 
fú°_‰ì
 = 0;

42 
dgΩ_t
 
œ°_gΩ
;

44 
Êexbg_size
 = 1 << 
fs
->
su≥r
->
s_log_groups_≥r_Êex
;

45 
Êexbg
 = 
group
 / 
Êexbg_size
;

47 i‡(
size
 > (Ë(
fs
->
su≥r
->
s_blocks_≥r_group
 / 8))

48 
size
 = (Ë
fs
->
su≥r
->
s_blocks_≥r_group
 / 8;

50 i‡(
off£t
)

51 
off£t
 -= 1;

57 i‡(
°¨t_blk
 && 
group
 % 
Êexbg_size
) {

58 i‡(
	`ext2fs_ã°_block_bôm≠_ønge
(
bm≠
, 
°¨t_blk
 + 
ñem_size
,

59 
size
))

60  
°¨t_blk
 + 
ñem_size
;

63 
°¨t_blk
 = 
	`ext2fs_group_fú°_block
(
fs
, 
Êexbg_size
 * 
Êexbg
);

64 
œ°_gΩ
 = 
group
 | (
Êexbg_size
 - 1);

65 i‡(
œ°_gΩ
 > 
fs
->
group_desc_cou¡
)

66 
œ°_gΩ
 = 
fs
->
group_desc_cou¡
;

67 
œ°_blk
 = 
	`ext2fs_group_œ°_block
(
fs
, 
œ°_gΩ
);

70 i‡(
	`ext2fs_gë_‰ì_blocks
(
fs
, 
°¨t_blk
, 
œ°_blk
, 1, 
bm≠
,

71 &
fú°_‰ì
))

72  
fú°_‰ì
;

74 i‡(
	`ext2fs_gë_‰ì_blocks
(
fs
, 
fú°_‰ì
 + 
off£t
, 
œ°_blk
, 
size
,

75 
bm≠
, &
fú°_‰ì
))

76  
fú°_‰ì
;

78  
fú°_‰ì
;

79 
	}
}

81 
îrcode_t
 
	$ext2fs_Æloˇã_group_èbÀ
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
,

82 
ext2fs_block_bôm≠
 
bm≠
)

84 
îrcode_t
 
ªtvÆ
;

85 
blk_t
 
group_blk
, 
°¨t_blk
, 
œ°_blk
, 
√w_blk
, 
blk
;

86 
dgΩ_t
 
œ°_gΩ
 = 0;

87 
j
, 
ªm_gΩs
 = 0, 
Êexbg_size
 = 0;

89 
group_blk
 = 
	`ext2fs_group_fú°_block
(
fs
, 
group
);

90 
œ°_blk
 = 
	`ext2fs_group_œ°_block
(
fs
, 
group
);

92 i‡(!
bm≠
)

93 
bm≠
 = 
fs
->
block_m≠
;

95 i‡(
	`EXT2_HAS_INCOMPAT_FEATURE
(
fs
->
su≥r
,

96 
EXT4_FEATURE_INCOMPAT_FLEX_BG
) &&

97 
fs
->
su≥r
->
s_log_groups_≥r_Êex
) {

98 
Êexbg_size
 = 1 << 
fs
->
su≥r
->
s_log_groups_≥r_Êex
;

99 
œ°_gΩ
 = 
group
 | (
Êexbg_size
 - 1);

100 
ªm_gΩs
 = 
œ°_gΩ
 - 
group
;

101 i‡(
œ°_gΩ
 > 
fs
->
group_desc_cou¡
)

102 
œ°_gΩ
 = 
fs
->
group_desc_cou¡
;

108 i‡(
fs
->
°ride
) {

109 
ªtvÆ
 = 
	`ext2fs_gë_‰ì_blocks
(
fs
, 
group_blk
, 
œ°_blk
,

110 1, 
bm≠
, &
°¨t_blk
);

111 i‡(
ªtvÆ
)

112  
ªtvÆ
;

113 
°¨t_blk
 +
fs
->
öode_blocks_≥r_group
;

114 
°¨t_blk
 +((
fs
->
°ride
 * 
group
) %

115 (
œ°_blk
 - 
°¨t_blk
 + 1));

116 i‡(
°¨t_blk
 >
œ°_blk
)

117 
°¨t_blk
 = 
group_blk
;

119 
°¨t_blk
 = 
group_blk
;

121 i‡(
Êexbg_size
) {

122 
blk_t
 
¥ev_block
 = 0;

123 i‡(
group
 && 
fs
->
group_desc
[group-1].
bg_block_bôm≠
)

124 
¥ev_block
 = 
fs
->
group_desc
[
group
-1].
bg_block_bôm≠
;

125 
°¨t_blk
 = 
	`Êexbg_off£t
(
fs
, 
group
, 
¥ev_block
, 
bm≠
,

126 0, 
ªm_gΩs
, 1);

127 
œ°_blk
 = 
	`ext2fs_group_œ°_block
(
fs
, 
œ°_gΩ
);

130 i‡(!
fs
->
group_desc
[
group
].
bg_block_bôm≠
) {

131 
ªtvÆ
 = 
	`ext2fs_gë_‰ì_blocks
(
fs
, 
°¨t_blk
, 
œ°_blk
,

132 1, 
bm≠
, &
√w_blk
);

133 i‡(
ªtvÆ
 =
EXT2_ET_BLOCK_ALLOC_FAIL
)

134 
ªtvÆ
 = 
	`ext2fs_gë_‰ì_blocks
(
fs
, 
group_blk
,

135 
œ°_blk
, 1, 
bm≠
, &
√w_blk
);

136 i‡(
ªtvÆ
)

137  
ªtvÆ
;

138 
	`ext2fs_m¨k_block_bôm≠
(
bm≠
, 
√w_blk
);

139 
fs
->
group_desc
[
group
].
bg_block_bôm≠
 = 
√w_blk
;

140 i‡(
Êexbg_size
) {

141 
dgΩ_t
 
gr
 = 
	`ext2fs_group_of_blk
(
fs
, 
√w_blk
);

142 
fs
->
group_desc
[
gr
].
bg_‰ì_blocks_cou¡
--;

143 
fs
->
su≥r
->
s_‰ì_blocks_cou¡
--;

144 
fs
->
group_desc
[
gr
].
bg_Êags
 &~
EXT2_BG_BLOCK_UNINIT
;

145 
	`ext2fs_group_desc_csum_£t
(
fs
, 
gr
);

149 i‡(
Êexbg_size
) {

150 
blk_t
 
¥ev_block
 = 0;

151 i‡(
group
 && 
fs
->
group_desc
[group-1].
bg_öode_bôm≠
)

152 
¥ev_block
 = 
fs
->
group_desc
[
group
-1].
bg_öode_bôm≠
;

153 
°¨t_blk
 = 
	`Êexbg_off£t
(
fs
, 
group
, 
¥ev_block
, 
bm≠
,

154 
Êexbg_size
, 
ªm_gΩs
, 1);

155 
œ°_blk
 = 
	`ext2fs_group_œ°_block
(
fs
, 
œ°_gΩ
);

158 i‡(!
fs
->
group_desc
[
group
].
bg_öode_bôm≠
) {

159 
ªtvÆ
 = 
	`ext2fs_gë_‰ì_blocks
(
fs
, 
°¨t_blk
, 
œ°_blk
,

160 1, 
bm≠
, &
√w_blk
);

161 i‡(
ªtvÆ
 =
EXT2_ET_BLOCK_ALLOC_FAIL
)

162 
ªtvÆ
 = 
	`ext2fs_gë_‰ì_blocks
(
fs
, 
group_blk
,

163 
œ°_blk
, 1, 
bm≠
, &
√w_blk
);

164 i‡(
ªtvÆ
)

165  
ªtvÆ
;

166 
	`ext2fs_m¨k_block_bôm≠
(
bm≠
, 
√w_blk
);

167 
fs
->
group_desc
[
group
].
bg_öode_bôm≠
 = 
√w_blk
;

168 i‡(
Êexbg_size
) {

169 
dgΩ_t
 
gr
 = 
	`ext2fs_group_of_blk
(
fs
, 
√w_blk
);

170 
fs
->
group_desc
[
gr
].
bg_‰ì_blocks_cou¡
--;

171 
fs
->
su≥r
->
s_‰ì_blocks_cou¡
--;

172 
fs
->
group_desc
[
gr
].
bg_Êags
 &~
EXT2_BG_BLOCK_UNINIT
;

173 
	`ext2fs_group_desc_csum_£t
(
fs
, 
gr
);

180 i‡(
Êexbg_size
) {

181 
blk_t
 
¥ev_block
 = 0;

182 i‡(
group
 && 
fs
->
group_desc
[group-1].
bg_öode_èbÀ
)

183 
¥ev_block
 = 
fs
->
group_desc
[
group
-1].
bg_öode_èbÀ
;

184 
group_blk
 = 
	`Êexbg_off£t
(
fs
, 
group
, 
¥ev_block
, 
bm≠
,

185 
Êexbg_size
 * 2,

186 
fs
->
öode_blocks_≥r_group
 *

187 
ªm_gΩs
,

188 
fs
->
öode_blocks_≥r_group
);

189 
œ°_blk
 = 
	`ext2fs_group_œ°_block
(
fs
, 
œ°_gΩ
);

192 i‡(!
fs
->
group_desc
[
group
].
bg_öode_èbÀ
) {

193 
ªtvÆ
 = 
	`ext2fs_gë_‰ì_blocks
(
fs
, 
group_blk
, 
œ°_blk
,

194 
fs
->
öode_blocks_≥r_group
,

195 
bm≠
, &
√w_blk
);

196 i‡(
ªtvÆ
)

197  
ªtvÆ
;

198 
j
=0, 
blk
 = 
√w_blk
;

199 
j
 < 
fs
->
öode_blocks_≥r_group
;

200 
j
++, 
blk
++) {

201 
	`ext2fs_m¨k_block_bôm≠
(
bm≠
, 
blk
);

202 i‡(
Êexbg_size
) {

203 
dgΩ_t
 
gr
 = 
	`ext2fs_group_of_blk
(
fs
, 
blk
);

204 
fs
->
group_desc
[
gr
].
bg_‰ì_blocks_cou¡
--;

205 
fs
->
su≥r
->
s_‰ì_blocks_cou¡
--;

206 
fs
->
group_desc
[
gr
].
bg_Êags
 &~
EXT2_BG_BLOCK_UNINIT
;

207 
	`ext2fs_group_desc_csum_£t
(
fs
, 
gr
);

210 
fs
->
group_desc
[
group
].
bg_öode_èbÀ
 = 
√w_blk
;

212 
	`ext2fs_group_desc_csum_£t
(
fs
, 
group
);

214 
	}
}

216 
îrcode_t
 
	$ext2fs_Æloˇã_èbÀs
(
ext2_fûsys
 
fs
)

218 
îrcode_t
 
ªtvÆ
;

219 
dgΩ_t
 
i
;

221 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++) {

222 
ªtvÆ
 = 
	`ext2fs_Æloˇã_group_èbÀ
(
fs
, 
i
, fs->
block_m≠
);

223 i‡(
ªtvÆ
)

224  
ªtvÆ
;

227 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/badblocks.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<f˙é.h
>

18 
	~<time.h
>

19 #i‡
HAVE_SYS_STAT_H


20 
	~<sys/°©.h
>

22 #i‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 
	~"ext2_fs.h
"

27 
	~"ext2fsP.h
"

32 
îrcode_t
 
	$make_u32_li°
(
size
, 
num
, 
__u32
 *
li°
,

33 
ext2_u32_li°
 *
ªt
)

35 
ext2_u32_li°
 
bb
;

36 
îrcode_t
 
ªtvÆ
;

38 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ext2_°ru˘_u32_li°
), &
bb
);

39 i‡(
ªtvÆ
)

40  
ªtvÆ
;

41 
	`mem£t
(
bb
, 0, (
ext2_°ru˘_u32_li°
));

42 
bb
->
magic
 = 
EXT2_ET_MAGIC_BADBLOCKS_LIST
;

43 
bb
->
size
 = size ? size : 10;

44 
bb
->
num
 =Çum;

45 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(
bb
->
size
, (
blk_t
), &bb->
li°
);

46 i‡(
ªtvÆ
) {

47 
	`ext2fs_‰ì_mem
(&
bb
);

48  
ªtvÆ
;

50 i‡(
li°
)

51 
	`mem˝y
(
bb
->
li°
,Üi°, bb->
size
 * (
blk_t
));

53 
	`mem£t
(
bb
->
li°
, 0, bb->
size
 * (
blk_t
));

54 *
ªt
 = 
bb
;

56 
	}
}

62 
îrcode_t
 
	$ext2fs_u32_li°_¸óã
(
ext2_u32_li°
 *
ªt
, 
size
)

64  
	`make_u32_li°
(
size
, 0, 0, 
ªt
);

65 
	}
}

70 
îrcode_t
 
	$ext2fs_badblocks_li°_¸óã
(
ext2_badblocks_li°
 *
ªt
, 
size
)

72  
	`make_u32_li°
(
size
, 0, 0, (
ext2_badblocks_li°
 *Ë
ªt
);

73 
	}
}

79 
îrcode_t
 
	$ext2fs_u32_c›y
(
ext2_u32_li°
 
§c
,Éxt2_u32_li° *
de°
)

81 
îrcode_t
 
ªtvÆ
;

83 
ªtvÆ
 = 
	`make_u32_li°
(
§c
->
size
, src->
num
, src->
li°
, 
de°
);

84 i‡(
ªtvÆ
)

85  
ªtvÆ
;

86 (*
de°
)->
badblocks_Êags
 = 
§c
->badblocks_flags;

88 
	}
}

90 
îrcode_t
 
	$ext2fs_badblocks_c›y
(
ext2_badblocks_li°
 
§c
,

91 
ext2_badblocks_li°
 *
de°
)

93  
	`ext2fs_u32_c›y
((
ext2_u32_li°
Ë
§c
,

94 (
ext2_u32_li°
 *Ë
de°
);

95 
	}
}

107 
îrcode_t
 
	$ext2fs_u32_li°_add
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
)

109 
îrcode_t
 
ªtvÆ
;

110 
i
, 
j
;

111 
ﬁd_size
;

113 
	`EXT2_CHECK_MAGIC
(
bb
, 
EXT2_ET_MAGIC_BADBLOCKS_LIST
);

115 i‡(
bb
->
num
 >bb->
size
) {

116 
ﬁd_size
 = 
bb
->
size
 * (
__u32
);

117 
bb
->
size
 += 100;

118 
ªtvÆ
 = 
	`ext2fs_ªsize_mem
(
ﬁd_size
, 
bb
->
size
 * (
__u32
),

119 &
bb
->
li°
);

120 i‡(
ªtvÆ
) {

121 
bb
->
size
 -= 100;

122  
ªtvÆ
;

129 
i
 = 
bb
->
num
-1;

130 i‡((
bb
->
num
 !0Ë&& (bb->
li°
[
i
] =
blk
))

132 i‡((
bb
->
num
 =0Ë|| (bb->
li°
[
i
] < 
blk
)) {

133 
bb
->
li°
[bb->
num
++] = 
blk
;

137 
j
 = 
bb
->
num
;

138 
i
=0; i < 
bb
->
num
; i++) {

139 i‡(
bb
->
li°
[
i
] =
blk
)

141 i‡(
bb
->
li°
[
i
] > 
blk
) {

142 
j
 = 
i
;

146 
i
=
bb
->
num
; i > 
j
; i--)

147 
bb
->
li°
[
i
] = bb->list[i-1];

148 
bb
->
li°
[
j
] = 
blk
;

149 
bb
->
num
++;

151 
	}
}

153 
îrcode_t
 
	$ext2fs_badblocks_li°_add
(
ext2_badblocks_li°
 
bb
, 
blk_t
 
blk
)

155  
	`ext2fs_u32_li°_add
((
ext2_u32_li°
Ë
bb
, (
__u32
Ë
blk
);

156 
	}
}

162 
	$ext2fs_u32_li°_föd
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
)

164 
low
, 
high
, 
mid
;

166 i‡(
bb
->
magic
 !
EXT2_ET_MAGIC_BADBLOCKS_LIST
)

169 i‡(
bb
->
num
 == 0)

172 
low
 = 0;

173 
high
 = 
bb
->
num
-1;

174 i‡(
blk
 =
bb
->
li°
[
low
])

175  
low
;

176 i‡(
blk
 =
bb
->
li°
[
high
])

177  
high
;

179 
low
 < 
high
) {

180 
mid
 = (
low
+
high
)/2;

181 i‡(
mid
 =
low
 || mid =
high
)

183 i‡(
blk
 =
bb
->
li°
[
mid
])

184  
mid
;

185 i‡(
blk
 < 
bb
->
li°
[
mid
])

186 
high
 = 
mid
;

188 
low
 = 
mid
;

191 
	}
}

197 
	$ext2fs_u32_li°_ã°
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
)

199 i‡(
	`ext2fs_u32_li°_föd
(
bb
, 
blk
) < 0)

203 
	}
}

205 
	$ext2fs_badblocks_li°_ã°
(
ext2_badblocks_li°
 
bb
, 
blk_t
 
blk
)

207  
	`ext2fs_u32_li°_ã°
((
ext2_u32_li°
Ë
bb
, (
__u32
Ë
blk
);

208 
	}
}

214 
	$ext2fs_u32_li°_dñ
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
)

216 
ªmloc
, 
i
;

218 i‡(
bb
->
num
 == 0)

221 
ªmloc
 = 
	`ext2fs_u32_li°_föd
(
bb
, 
blk
);

222 i‡(
ªmloc
 < 0)

225 
i
 = 
ªmloc
 ; i < 
bb
->
num
-1; i++)

226 
bb
->
li°
[
i
] = bb->list[i+1];

227 
bb
->
num
--;

229 
	}
}

231 
	$ext2fs_badblocks_li°_dñ
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
)

233 
	`ext2fs_u32_li°_dñ
(
bb
, 
blk
);

234 
	}
}

236 
îrcode_t
 
	$ext2fs_u32_li°_ôî©e_begö
(
ext2_u32_li°
 
bb
,

237 
ext2_u32_ôî©e
 *
ªt
)

239 
ext2_u32_ôî©e
 
ôî
;

240 
îrcode_t
 
ªtvÆ
;

242 
	`EXT2_CHECK_MAGIC
(
bb
, 
EXT2_ET_MAGIC_BADBLOCKS_LIST
);

244 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ext2_°ru˘_u32_ôî©e
), &
ôî
);

245 i‡(
ªtvÆ
)

246  
ªtvÆ
;

248 
ôî
->
magic
 = 
EXT2_ET_MAGIC_BADBLOCKS_ITERATE
;

249 
ôî
->
bb
 = bb;

250 
ôî
->
±r
 = 0;

251 *
ªt
 = 
ôî
;

253 
	}
}

255 
îrcode_t
 
	$ext2fs_badblocks_li°_ôî©e_begö
(
ext2_badblocks_li°
 
bb
,

256 
ext2_badblocks_ôî©e
 *
ªt
)

258  
	`ext2fs_u32_li°_ôî©e_begö
((
ext2_u32_li°
Ë
bb
,

259 (
ext2_u32_ôî©e
 *Ë
ªt
);

260 
	}
}

263 
	$ext2fs_u32_li°_ôî©e
(
ext2_u32_ôî©e
 
ôî
, 
__u32
 *
blk
)

265 
ext2_u32_li°
 
bb
;

267 i‡(
ôî
->
magic
 !
EXT2_ET_MAGIC_BADBLOCKS_ITERATE
)

270 
bb
 = 
ôî
->bb;

272 i‡(
bb
->
magic
 !
EXT2_ET_MAGIC_BADBLOCKS_LIST
)

275 i‡(
ôî
->
±r
 < 
bb
->
num
) {

276 *
blk
 = 
bb
->
li°
[
ôî
->
±r
++];

279 *
blk
 = 0;

281 
	}
}

283 
	$ext2fs_badblocks_li°_ôî©e
(
ext2_badblocks_ôî©e
 
ôî
, 
blk_t
 *
blk
)

285  
	`ext2fs_u32_li°_ôî©e
((
ext2_u32_ôî©e
Ë
ôî
,

286 (
__u32
 *Ë
blk
);

287 
	}
}

290 
	$ext2fs_u32_li°_ôî©e_íd
(
ext2_u32_ôî©e
 
ôî
)

292 i‡(!
ôî
 || (ôî->
magic
 !
EXT2_ET_MAGIC_BADBLOCKS_ITERATE
))

295 
ôî
->
bb
 = 0;

296 
	`ext2fs_‰ì_mem
(&
ôî
);

297 
	}
}

299 
	$ext2fs_badblocks_li°_ôî©e_íd
(
ext2_badblocks_ôî©e
 
ôî
)

301 
	`ext2fs_u32_li°_ôî©e_íd
((
ext2_u32_ôî©e
Ë
ôî
);

302 
	}
}

305 
	$ext2fs_u32_li°_equÆ
(
ext2_u32_li°
 
bb1
,Éxt2_u32_li° 
bb2
)

307 
	`EXT2_CHECK_MAGIC
(
bb1
, 
EXT2_ET_MAGIC_BADBLOCKS_LIST
);

308 
	`EXT2_CHECK_MAGIC
(
bb2
, 
EXT2_ET_MAGIC_BADBLOCKS_LIST
);

310 i‡(
bb1
->
num
 !
bb2
->num)

313 i‡(
	`memcmp
(
bb1
->
li°
, 
bb2
->li°, bb1->
num
 * (
blk_t
)) != 0)

316 
	}
}

318 
	$ext2fs_badblocks_equÆ
(
ext2_badblocks_li°
 
bb1
,Éxt2_badblocks_li° 
bb2
)

320  
	`ext2fs_u32_li°_equÆ
((
ext2_u32_li°
Ë
bb1
,

321 (
ext2_u32_li°
Ë
bb2
);

322 
	}
}

324 
	$ext2fs_u32_li°_cou¡
(
ext2_u32_li°
 
bb
)

326  
bb
->
num
;

327 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/bb_compat.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<f˙é.h
>

18 
	~<time.h
>

19 #i‡
HAVE_SYS_STAT_H


20 
	~<sys/°©.h
>

22 #i‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 
	~"ext2_fs.h
"

27 
	~"ext2fsP.h
"

29 
îrcode_t
 
	$badblocks_li°_¸óã
(
badblocks_li°
 *
ªt
, 
size
)

31  
	`ext2fs_badblocks_li°_¸óã
(
ªt
, 
size
);

32 
	}
}

34 
	$badblocks_li°_‰ì
(
badblocks_li°
 
bb
)

36 
	`ext2fs_badblocks_li°_‰ì
(
bb
);

37 
	}
}

39 
îrcode_t
 
	$badblocks_li°_add
(
badblocks_li°
 
bb
, 
blk_t
 
blk
)

41  
	`ext2fs_badblocks_li°_add
(
bb
, 
blk
);

42 
	}
}

44 
	$badblocks_li°_ã°
(
badblocks_li°
 
bb
, 
blk_t
 
blk
)

46  
	`ext2fs_badblocks_li°_ã°
(
bb
, 
blk
);

47 
	}
}

49 
îrcode_t
 
	$badblocks_li°_ôî©e_begö
(
badblocks_li°
 
bb
,

50 
badblocks_ôî©e
 *
ªt
)

52  
	`ext2fs_badblocks_li°_ôî©e_begö
(
bb
, 
ªt
);

53 
	}
}

55 
	$badblocks_li°_ôî©e
(
badblocks_ôî©e
 
ôî
, 
blk_t
 *
blk
)

57  
	`ext2fs_badblocks_li°_ôî©e
(
ôî
, 
blk
);

58 
	}
}

60 
	$badblocks_li°_ôî©e_íd
(
badblocks_ôî©e
 
ôî
)

62 
	`ext2fs_badblocks_li°_ôî©e_íd
(
ôî
);

63 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/bb_inode.c

16 
	~<°dio.h
>

17 
	~<°rög.h
>

18 #i‡
HAVE_UNISTD_H


19 
	~<uni°d.h
>

21 
	~<f˙é.h
>

22 
	~<time.h
>

23 #i‡
HAVE_SYS_STAT_H


24 
	~<sys/°©.h
>

26 #i‡
HAVE_SYS_TYPES_H


27 
	~<sys/ty≥s.h
>

30 
	~"ext2_fs.h
"

31 
	~"ext2fs.h
"

33 
	s£t_badblock_ªc‹d
 {

34 
ext2_badblocks_ôî©e
 
	mbb_ôî
;

35 
	mbad_block_cou¡
;

36 
blk_t
 *
	möd_blocks
;

37 
	mmax_öd_blocks
;

38 
	möd_blocks_size
;

39 
	möd_blocks_±r
;

40 *
	mblock_buf
;

41 
îrcode_t
 
	mîr
;

44 
£t_bad_block_¥oc
(
ext2_fûsys
 
fs
, 
blk_t
 *
block_ƒ
,

45 
e2_blk˙t_t
 
block˙t
,

46 
blk_t
 
ªf_block
, 
ªf_off£t
,

47 *
¥iv_d©a
);

48 
˛ór_bad_block_¥oc
(
ext2_fûsys
 
fs
, 
blk_t
 *
block_ƒ
,

49 
e2_blk˙t_t
 
block˙t
,

50 
blk_t
 
ªf_block
, 
ªf_off£t
,

51 *
¥iv_d©a
);

57 
îrcode_t
 
	$ext2fs_upd©e_bb_öode
(
ext2_fûsys
 
fs
, 
ext2_badblocks_li°
 
bb_li°
)

59 
îrcode_t
 
ªtvÆ
;

60 
£t_badblock_ªc‹d
 
ªc
;

61 
ext2_öode
 
öode
;

63 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

65 i‡(!
fs
->
block_m≠
)

66  
EXT2_ET_NO_BLOCK_BITMAP
;

68 
ªc
.
bad_block_cou¡
 = 0;

69 
ªc
.
öd_blocks_size
 =Ñec.
öd_blocks_±r
 = 0;

70 
ªc
.
max_öd_blocks
 = 10;

71 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(
ªc
.
max_öd_blocks
, (
blk_t
),

72 &
ªc
.
öd_blocks
);

73 i‡(
ªtvÆ
)

74  
ªtvÆ
;

75 
	`mem£t
(
ªc
.
öd_blocks
, 0,Ñec.
max_öd_blocks
 * (
blk_t
));

76 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
ªc
.
block_buf
);

77 i‡(
ªtvÆ
)

78 
˛ónup
;

79 
	`mem£t
(
ªc
.
block_buf
, 0, 
fs
->
blocksize
);

80 
ªc
.
îr
 = 0;

85 
ªtvÆ
 = 
	`ext2fs_block_ôî©e2
(
fs
, 
EXT2_BAD_INO
,

86 
BLOCK_FLAG_DEPTH_TRAVERSE
, 0,

87 
˛ór_bad_block_¥oc
, &
ªc
);

88 i‡(
ªtvÆ
)

89 
˛ónup
;

90 i‡(
ªc
.
îr
) {

91 
ªtvÆ
 = 
ªc
.
îr
;

92 
˛ónup
;

102 i‡(
bb_li°
) {

103 
ªtvÆ
 = 
	`ext2fs_badblocks_li°_ôî©e_begö
(
bb_li°
,

104 &
ªc
.
bb_ôî
);

105 i‡(
ªtvÆ
)

106 
˛ónup
;

107 
ªtvÆ
 = 
	`ext2fs_block_ôî©e2
(
fs
, 
EXT2_BAD_INO
,

108 
BLOCK_FLAG_APPEND
, 0,

109 
£t_bad_block_¥oc
, &
ªc
);

110 
	`ext2fs_badblocks_li°_ôî©e_íd
(
ªc
.
bb_ôî
);

111 i‡(
ªtvÆ
)

112 
˛ónup
;

113 i‡(
ªc
.
îr
) {

114 
ªtvÆ
 = 
ªc
.
îr
;

115 
˛ónup
;

123 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
EXT2_BAD_INO
, &
öode
);

124 i‡(
ªtvÆ
)

125 
˛ónup
;

127 
öode
.
i_©ime
 = inode.
i_mtime
 = 
fs
->
now
 ? fs->now : 
	`time
(0);

128 i‡(!
öode
.
i_˘ime
)

129 
öode
.
i_˘ime
 = 
fs
->
now
 ? fs->now : 
	`time
(0);

130 
	`ext2fs_iblk_£t
(
fs
, &
öode
, 
ªc
.
bad_block_cou¡
);

131 
öode
.
i_size
 = 
ªc
.
bad_block_cou¡
 * 
fs
->
blocksize
;

133 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fs
, 
EXT2_BAD_INO
, &
öode
);

134 i‡(
ªtvÆ
)

135 
˛ónup
;

137 
˛ónup
:

138 
	`ext2fs_‰ì_mem
(&
ªc
.
öd_blocks
);

139 
	`ext2fs_‰ì_mem
(&
ªc
.
block_buf
);

140  
ªtvÆ
;

141 
	}
}

149 #ifde‡
__TURBOC__


150 #¥agm®
¨gsu£d


152 
˛ór_bad_block_¥oc
(
ext2_fûsys
 
fs
, 
blk_t
 *
block_ƒ
,

153 
e2_blk˙t_t
 
block˙t
,

154 
blk_t
 
ªf_block
 
EXT2FS_ATTR
((
unu£d
)),

155 
ªf_off£t
 
EXT2FS_ATTR
((
unu£d
)),

156 *
¥iv_d©a
)

158 
£t_badblock_ªc‹d
 *
	gªc
 = (set_badblock_record *)

159 
¥iv_d©a
;

160 
îrcode_t
 
	gªtvÆ
;

161 
	gﬁd_size
;

163 i‡(!*
	gblock_ƒ
)

169 i‡(*
	gblock_ƒ
 >
fs
->
su≥r
->
s_blocks_cou¡
 ||

170 *
block_ƒ
 < 
fs
->
su≥r
->
s_fú°_d©a_block
) {

171 *
block_ƒ
 = 0;

172  
	gBLOCK_CHANGED
;

175 i‡(
	gblock˙t
 < 0) {

176 i‡(
	gªc
->
	göd_blocks_size
 >
ªc
->
max_öd_blocks
) {

177 
ﬁd_size
 = 
ªc
->
max_öd_blocks
 * (
blk_t
);

178 
	gªc
->
	gmax_öd_blocks
 += 10;

179 
	gªtvÆ
 = 
ext2fs_ªsize_mem
(
ﬁd_size
,

180 
ªc
->
max_öd_blocks
 * (
blk_t
),

181 &
ªc
->
öd_blocks
);

182 i‡(
	gªtvÆ
) {

183 
	gªc
->
	gmax_öd_blocks
 -= 10;

184 
	gªc
->
	gîr
 = 
ªtvÆ
;

185  
	gBLOCK_ABORT
;

188 
	gªc
->
	göd_blocks
[
ªc
->
öd_blocks_size
++] = *
block_ƒ
;

194 
ext2fs_block_Æloc_°©s
(
fs
, *
block_ƒ
, -1);

196 *
	gblock_ƒ
 = 0;

197  
	gBLOCK_CHANGED
;

206 #ifde‡
__TURBOC__


207 #¥agm®
¨gsu£d


209 
£t_bad_block_¥oc
(
ext2_fûsys
 
fs
, 
blk_t
 *
block_ƒ
,

210 
e2_blk˙t_t
 
block˙t
,

211 
blk_t
 
ªf_block
 
EXT2FS_ATTR
((
unu£d
)),

212 
ªf_off£t
 
EXT2FS_ATTR
((
unu£d
)),

213 *
¥iv_d©a
)

215 
£t_badblock_ªc‹d
 *
	gªc
 = (set_badblock_record *)

216 
¥iv_d©a
;

217 
îrcode_t
 
	gªtvÆ
;

218 
blk_t
 
	gblk
;

220 i‡(
	gblock˙t
 >= 0) {

224 i‡(!
ext2fs_badblocks_li°_ôî©e
(
ªc
->
bb_ôî
, &
blk
))

225  
BLOCK_ABORT
;

226 
	gªc
->
	gbad_block_cou¡
++;

235 
	gªåy
:

236 i‡(
ªc
->
öd_blocks_±r
 <Ñec->
öd_blocks_size
) {

237 
blk
 = 
ªc
->
öd_blocks
[ªc->
öd_blocks_±r
++];

238 i‡(
ext2fs_ã°_block_bôm≠
(
fs
->
block_m≠
, 
blk
))

239 
	gªåy
;

241 
	gªtvÆ
 = 
ext2fs_√w_block
(
fs
, 0, 0, &
blk
);

242 i‡(
	gªtvÆ
) {

243 
	gªc
->
	gîr
 = 
ªtvÆ
;

244  
	gBLOCK_ABORT
;

247 
	gªtvÆ
 = 
io_ch™√l_wrôe_blk
(
fs
->
io
, 
blk
, 1, 
ªc
->
block_buf
);

248 i‡(
	gªtvÆ
) {

249 
	gªc
->
	gîr
 = 
ªtvÆ
;

250  
	gBLOCK_ABORT
;

257 
ext2fs_block_Æloc_°©s
(
fs
, 
blk
, +1);

259 *
	gblock_ƒ
 = 
blk
;

260  
	gBLOCK_CHANGED
;

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/bitmaps.c

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 #i‡
HAVE_UNISTD_H


16 
	~<uni°d.h
>

18 
	~<f˙é.h
>

19 
	~<time.h
>

20 #i‡
HAVE_SYS_STAT_H


21 
	~<sys/°©.h
>

23 #i‡
HAVE_SYS_TYPES_H


24 
	~<sys/ty≥s.h
>

27 
	~"ext2_fs.h
"

28 
	~"ext2fs.h
"

30 
	$ext2fs_‰ì_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
)

32 
	`ext2fs_‰ì_gíîic_bôm≠
(
bôm≠
);

33 
	}
}

35 
	$ext2fs_‰ì_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
)

37 
	`ext2fs_‰ì_gíîic_bôm≠
(
bôm≠
);

38 
	}
}

40 
îrcode_t
 
	$ext2fs_c›y_bôm≠
(
ext2fs_gíîic_bôm≠
 
§c
,

41 
ext2fs_gíîic_bôm≠
 *
de°
)

43  (
	`ext2fs_c›y_gíîic_bôm≠
(
§c
, 
de°
));

44 
	}
}

46 
	$ext2fs_£t_bôm≠_∑ddög
(
ext2fs_gíîic_bôm≠
 
m≠
)

48 
	`ext2fs_£t_gíîic_bôm≠_∑ddög
(
m≠
);

49 
	}
}

51 
îrcode_t
 
	$ext2fs_Æloˇã_öode_bôm≠
(
ext2_fûsys
 
fs
,

52 c⁄° *
des¸
,

53 
ext2fs_öode_bôm≠
 *
ªt
)

55 
__u32
 
°¨t
, 
íd
, 
ªÆ_íd
;

57 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

59 
fs
->
wrôe_bôm≠s
 = 
ext2fs_wrôe_bôm≠s
;

61 
°¨t
 = 1;

62 
íd
 = 
fs
->
su≥r
->
s_öodes_cou¡
;

63 
ªÆ_íd
 = (
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
Ë* fs->
group_desc_cou¡
);

65  (
	`ext2fs_make_gíîic_bôm≠
(
EXT2_ET_MAGIC_INODE_BITMAP
, 
fs
,

66 
°¨t
, 
íd
, 
ªÆ_íd
,

67 
des¸
, 0, 
ªt
));

68 
	}
}

70 
îrcode_t
 
	$ext2fs_Æloˇã_block_bôm≠
(
ext2_fûsys
 
fs
,

71 c⁄° *
des¸
,

72 
ext2fs_block_bôm≠
 *
ªt
)

74 
__u32
 
°¨t
, 
íd
, 
ªÆ_íd
;

76 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

78 
fs
->
wrôe_bôm≠s
 = 
ext2fs_wrôe_bôm≠s
;

80 
°¨t
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

81 
íd
 = 
fs
->
su≥r
->
s_blocks_cou¡
-1;

82 
ªÆ_íd
 = (
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
)

83 * 
fs
->
group_desc_cou¡
)-1 + 
°¨t
;

85  (
	`ext2fs_make_gíîic_bôm≠
(
EXT2_ET_MAGIC_BLOCK_BITMAP
, 
fs
,

86 
°¨t
, 
íd
, 
ªÆ_íd
,

87 
des¸
, 0, 
ªt
));

88 
	}
}

90 
îrcode_t
 
	$ext2fs_fudge_öode_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
,

91 
ext2_öo_t
 
íd
,Éxt2_öo_à*
€nd
)

94  (
	`ext2fs_fudge_gíîic_bôm≠_íd
(
bôm≠
,

95 
EXT2_ET_MAGIC_INODE_BITMAP
,

96 
EXT2_ET_FUDGE_INODE_BITMAP_END
,

97 
íd
, 
€nd
));

98 
	}
}

100 
îrcode_t
 
	$ext2fs_fudge_block_bôm≠_íd
(
ext2fs_block_bôm≠
 
bôm≠
,

101 
blk_t
 
íd
, blk_à*
€nd
)

103  (
	`ext2fs_fudge_gíîic_bôm≠_íd
(
bôm≠
,

104 
EXT2_ET_MAGIC_BLOCK_BITMAP
,

105 
EXT2_ET_FUDGE_BLOCK_BITMAP_END
,

106 
íd
, 
€nd
));

107 
	}
}

109 
	$ext2fs_˛ór_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
)

111 
	`ext2fs_˛ór_gíîic_bôm≠
(
bôm≠
);

112 
	}
}

114 
	$ext2fs_˛ór_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
)

116 
	`ext2fs_˛ór_gíîic_bôm≠
(
bôm≠
);

117 
	}
}

119 
îrcode_t
 
	$ext2fs_ªsize_öode_bôm≠
(
__u32
 
√w_íd
, __u32 
√w_ªÆ_íd
,

120 
ext2fs_öode_bôm≠
 
bm≠
)

122  (
	`ext2fs_ªsize_gíîic_bôm≠
(
EXT2_ET_MAGIC_INODE_BITMAP
,

123 
√w_íd
, 
√w_ªÆ_íd
, 
bm≠
));

124 
	}
}

126 
îrcode_t
 
	$ext2fs_ªsize_block_bôm≠
(
__u32
 
√w_íd
, __u32 
√w_ªÆ_íd
,

127 
ext2fs_block_bôm≠
 
bm≠
)

129  (
	`ext2fs_ªsize_gíîic_bôm≠
(
EXT2_ET_MAGIC_BLOCK_BITMAP
,

130 
√w_íd
, 
√w_ªÆ_íd
, 
bm≠
));

131 
	}
}

133 
îrcode_t
 
	$ext2fs_com∑ª_block_bôm≠
(
ext2fs_block_bôm≠
 
bm1
,

134 
ext2fs_block_bôm≠
 
bm2
)

136  (
	`ext2fs_com∑ª_gíîic_bôm≠
(
EXT2_ET_MAGIC_BLOCK_BITMAP
,

137 
EXT2_ET_NEQ_BLOCK_BITMAP
,

138 
bm1
, 
bm2
));

139 
	}
}

141 
îrcode_t
 
	$ext2fs_com∑ª_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bm1
,

142 
ext2fs_öode_bôm≠
 
bm2
)

144  (
	`ext2fs_com∑ª_gíîic_bôm≠
(
EXT2_ET_MAGIC_INODE_BITMAP
,

145 
EXT2_ET_NEQ_INODE_BITMAP
,

146 
bm1
, 
bm2
));

147 
	}
}

149 
îrcode_t
 
	$ext2fs_£t_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bm≠
,

150 
ext2_öo_t
 
°¨t
, 
num
,

151 *
ö
)

153  (
	`ext2fs_£t_gíîic_bôm≠_ønge
(
bm≠
,

154 
EXT2_ET_MAGIC_INODE_BITMAP
,

155 
°¨t
, 
num
, 
ö
));

156 
	}
}

158 
îrcode_t
 
	$ext2fs_gë_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bm≠
,

159 
ext2_öo_t
 
°¨t
, 
num
,

160 *
out
)

162  (
	`ext2fs_gë_gíîic_bôm≠_ønge
(
bm≠
,

163 
EXT2_ET_MAGIC_INODE_BITMAP
,

164 
°¨t
, 
num
, 
out
));

165 
	}
}

167 
îrcode_t
 
	$ext2fs_£t_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bm≠
,

168 
blk_t
 
°¨t
, 
num
,

169 *
ö
)

171  (
	`ext2fs_£t_gíîic_bôm≠_ønge
(
bm≠
,

172 
EXT2_ET_MAGIC_BLOCK_BITMAP
,

173 
°¨t
, 
num
, 
ö
));

174 
	}
}

176 
îrcode_t
 
	$ext2fs_gë_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bm≠
,

177 
blk_t
 
°¨t
, 
num
,

178 *
out
)

180  (
	`ext2fs_gë_gíîic_bôm≠_ønge
(
bm≠
,

181 
EXT2_ET_MAGIC_BLOCK_BITMAP
,

182 
°¨t
, 
num
, 
out
));

183 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/bitops.c

13 
	~<°dio.h
>

14 #i‡
HAVE_SYS_TYPES_H


15 
	~<sys/ty≥s.h
>

18 
	~"ext2_fs.h
"

19 
	~"ext2fs.h
"

21 #i‚de‡
_EXT2_HAVE_ASM_BITOPS_


33 
	$ext2fs_£t_bô
(
ƒ
,* 
addr
)

35 
mask
, 
ªtvÆ
;

36 *
ADDR
 = (*Ë
addr
;

38 
ADDR
 +
ƒ
 >> 3;

39 
mask
 = 1 << (
ƒ
 & 0x07);

40 
ªtvÆ
 = 
mask
 & *
ADDR
;

41 *
ADDR
 |
mask
;

42  
ªtvÆ
;

43 
	}
}

45 
	$ext2fs_˛ór_bô
(
ƒ
, * 
addr
)

47 
mask
, 
ªtvÆ
;

48 *
ADDR
 = (*Ë
addr
;

50 
ADDR
 +
ƒ
 >> 3;

51 
mask
 = 1 << (
ƒ
 & 0x07);

52 
ªtvÆ
 = 
mask
 & *
ADDR
;

53 *
ADDR
 &~
mask
;

54  
ªtvÆ
;

55 
	}
}

57 
	$ext2fs_ã°_bô
(
ƒ
, c⁄° * 
addr
)

59 
mask
;

60 c⁄° *
ADDR
 = (c⁄° *Ë
addr
;

62 
ADDR
 +
ƒ
 >> 3;

63 
mask
 = 1 << (
ƒ
 & 0x07);

64  (
mask
 & *
ADDR
);

65 
	}
}

69 
	$ext2fs_w¨n_bôm≠
(
îrcode_t
 
îrcode
, 
¨g
,

70 c⁄° *
des¸ùti⁄
)

72 #i‚de‡
OMIT_COM_ERR


73 i‡(
des¸ùti⁄
)

74 
	`com_îr
(0, 
îrcode
, "#%lu f‹ %s", 
¨g
, 
des¸ùti⁄
);

76 
	`com_îr
(0, 
îrcode
, "#%lu", 
¨g
);

78 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/bitops.h

17 
ext2fs_£t_bô
(
ƒ
,* 
addr
);

18 
ext2fs_˛ór_bô
(
ƒ
, * 
addr
);

19 
ext2fs_ã°_bô
(
ƒ
, c⁄° * 
addr
);

20 
ext2fs_Á°_£t_bô
(
ƒ
,* 
addr
);

21 
ext2fs_Á°_˛ór_bô
(
ƒ
, * 
addr
);

22 
__u16
 
ext2fs_swab16
(__u16 
vÆ
);

23 
__u32
 
ext2fs_swab32
(__u32 
vÆ
);

24 
__u64
 
ext2fs_swab64
(__u64 
vÆ
);

26 #i‡
deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

27 
	#ext2fs_˝u_to_À64
(
x
Ë
	`ext2fs_swab64
((x))

	)

28 
	#ext2fs_À64_to_˝u
(
x
Ë
	`ext2fs_swab64
((x))

	)

29 
	#ext2fs_˝u_to_À32
(
x
Ë
	`ext2fs_swab32
((x))

	)

30 
	#ext2fs_À32_to_˝u
(
x
Ë
	`ext2fs_swab32
((x))

	)

31 
	#ext2fs_˝u_to_À16
(
x
Ë
	`ext2fs_swab16
((x))

	)

32 
	#ext2fs_À16_to_˝u
(
x
Ë
	`ext2fs_swab16
((x))

	)

33 
	#ext2fs_˝u_to_be32
(
x
Ë((
__u32
)(x))

	)

34 
	#ext2fs_be32_to_˝u
(
x
Ë((
__u32
)(x))

	)

35 
	#ext2fs_˝u_to_be16
(
x
Ë((
__u16
)(x))

	)

36 
	#ext2fs_be16_to_˝u
(
x
Ë((
__u16
)(x))

	)

38 
	#ext2fs_˝u_to_À64
(
x
Ë((
__u64
)(x))

	)

39 
	#ext2fs_À64_to_˝u
(
x
Ë((
__u64
)(x))

	)

40 
	#ext2fs_˝u_to_À32
(
x
Ë((
__u32
)(x))

	)

41 
	#ext2fs_À32_to_˝u
(
x
Ë((
__u32
)(x))

	)

42 
	#ext2fs_˝u_to_À16
(
x
Ë((
__u16
)(x))

	)

43 
	#ext2fs_À16_to_˝u
(
x
Ë((
__u16
)(x))

	)

44 
	#ext2fs_˝u_to_be32
(
x
Ë
	`ext2fs_swab32
((x))

	)

45 
	#ext2fs_be32_to_˝u
(
x
Ë
	`ext2fs_swab32
((x))

	)

46 
	#ext2fs_˝u_to_be16
(
x
Ë
	`ext2fs_swab16
((x))

	)

47 
	#ext2fs_be16_to_˝u
(
x
Ë
	`ext2fs_swab16
((x))

	)

55 c⁄° *
ext2fs_block_°rög
;

56 c⁄° *
ext2fs_öode_°rög
;

57 c⁄° *
ext2fs_m¨k_°rög
;

58 c⁄° *
ext2fs_unm¨k_°rög
;

59 c⁄° *
ext2fs_ã°_°rög
;

60 
ext2fs_w¨n_bôm≠
(
îrcode_t
 
îrcode
, 
¨g
,

61 c⁄° *
des¸ùti⁄
);

62 
ext2fs_w¨n_bôm≠2
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

63 
code
, 
¨g
);

65 
ext2fs_m¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
, 
blk_t
 
block
);

66 
ext2fs_unm¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

67 
blk_t
 
block
);

68 
ext2fs_ã°_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
, 
blk_t
 
block
);

70 
ext2fs_m¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
, 
ext2_öo_t
 
öode
);

71 
ext2fs_unm¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

72 
ext2_öo_t
 
öode
);

73 
ext2fs_ã°_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
, 
ext2_öo_t
 
öode
);

75 
ext2fs_Á°_m¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

76 
blk_t
 
block
);

77 
ext2fs_Á°_unm¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

78 
blk_t
 
block
);

79 
ext2fs_Á°_ã°_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

80 
blk_t
 
block
);

82 
ext2fs_Á°_m¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

83 
ext2_öo_t
 
öode
);

84 
ext2fs_Á°_unm¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

85 
ext2_öo_t
 
öode
);

86 
ext2fs_Á°_ã°_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

87 
ext2_öo_t
 
öode
);

88 
blk_t
 
ext2fs_gë_block_bôm≠_°¨t
(
ext2fs_block_bôm≠
 
bôm≠
);

89 
ext2_öo_t
 
ext2fs_gë_öode_bôm≠_°¨t
(
ext2fs_öode_bôm≠
 
bôm≠
);

90 
blk_t
 
ext2fs_gë_block_bôm≠_íd
(
ext2fs_block_bôm≠
 
bôm≠
);

91 
ext2_öo_t
 
ext2fs_gë_öode_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
);

93 
ext2fs_m¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

94 
blk_t
 
block
, 
num
);

95 
ext2fs_unm¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

96 
blk_t
 
block
, 
num
);

97 
ext2fs_ã°_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

98 
blk_t
 
block
, 
num
);

99 
ext2fs_ã°_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bôm≠
,

100 
öo_t
 
öode
, 
num
);

101 
ext2fs_Á°_m¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

102 
blk_t
 
block
, 
num
);

103 
ext2fs_Á°_unm¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

104 
blk_t
 
block
, 
num
);

105 
ext2fs_Á°_ã°_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

106 
blk_t
 
block
, 
num
);

107 
ext2fs_£t_bôm≠_∑ddög
(
ext2fs_gíîic_bôm≠
 
m≠
);

110 
ext2fs_m¨k_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

111 
__u32
 
bôno
);

112 
ext2fs_unm¨k_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

113 
blk_t
 
bôno
);

114 
ext2fs_ã°_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

115 
blk_t
 
bôno
);

116 
ext2fs_ã°_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

117 
blk_t
 
block
, 
num
);

118 
__u32
 
ext2fs_gë_gíîic_bôm≠_°¨t
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

119 
__u32
 
ext2fs_gë_gíîic_bôm≠_íd
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

128 #ifde‡
NO_INLINE_FUNCS


129 #i‡(
deföed
(
__GNUC__
Ë&& (deföed(
__i386__
Ë|| deföed(
__i486__
) || \

130 
deföed
(
__i586__
Ë|| 
	$deföed
(
__mc68000__
)))

133 
	#_EXT2_HAVE_ASM_BITOPS_


	)

137 #i‡(
	`deföed
(
INCLUDE_INLINE_FUNCS
Ë|| !deföed(
NO_INLINE_FUNCS
))

138 #ifde‡
INCLUDE_INLINE_FUNCS


139 
	#_INLINE_
 

	)

141 #ifde‡
__GNUC__


142 
	#_INLINE_
 
__ölöe__


	)

144 
	#_INLINE_
 
ölöe


	)

153 
_INLINE_
 
	$ext2fs_Á°_£t_bô
(
ƒ
,* 
addr
)

155 *
ADDR
 = (*Ë
addr
;

157 
ADDR
 +
ƒ
 >> 3;

158 *
ADDR
 |(1 << (
ƒ
 & 0x07));

159 
	}
}

161 
_INLINE_
 
	$ext2fs_Á°_˛ór_bô
(
ƒ
, * 
addr
)

163 *
ADDR
 = (*Ë
addr
;

165 
ADDR
 +
ƒ
 >> 3;

166 *
ADDR
 &~(1 << (
ƒ
 & 0x07));

167 
	}
}

170 #i‡((
deföed
 
__GNUC__
Ë&& !deföed(
_EXT2_USE_C_VERSIONS_
) && \

171 (
deföed
(
__i386__
Ë|| deföed(
__i486__
Ë|| 
	$deföed
(
__i586__
)))

173 
	#_EXT2_HAVE_ASM_BITOPS_


	)

174 
	#_EXT2_HAVE_ASM_SWAB_


	)

187 
	s__dummy_h
 { 
a
[100]; };

188 
	#EXT2FS_ADDR
 (*(
__dummy_h
 *Ë
addr
)

	)

189 
	#EXT2FS_CONST_ADDR
 (*(c⁄° 
__dummy_h
 *Ë
addr
)

	)

191 
_INLINE_
 
	$ext2fs_£t_bô
(
ƒ
, * 
addr
)

193 
ﬁdbô
;

195 
addr
 = (*Ë(((*ËaddrË+ (
ƒ
 >> 3));

196 
__asm__
 
	`__vﬁ©ûe__
("btsl %2,%1\n\tsbbl %0,%0"

197 :"Ù" (
ﬁdbô
),"+m" (
EXT2FS_ADDR
)

198 :"r" (
ƒ
 & 7));

199  
ﬁdbô
;

200 
	}
}

202 
_INLINE_
 
	$ext2fs_˛ór_bô
(
ƒ
, * 
addr
)

204 
ﬁdbô
;

206 
addr
 = (*Ë(((*ËaddrË+ (
ƒ
 >> 3));

207 
__asm__
 
	`__vﬁ©ûe__
("btrl %2,%1\n\tsbbl %0,%0"

208 :"Ù" (
ﬁdbô
),"+m" (
EXT2FS_ADDR
)

209 :"r" (
ƒ
 & 7));

210  
ﬁdbô
;

211 
	}
}

213 
_INLINE_
 
	$ext2fs_ã°_bô
(
ƒ
, c⁄° * 
addr
)

215 
ﬁdbô
;

217 
addr
 = (c⁄° *Ë(((c⁄° *ËaddrË+ (
ƒ
 >> 3));

218 
__asm__
 
	`__vﬁ©ûe__
("btl %2,%1\n\tsbbl %0,%0"

219 :"Ù" (
ﬁdbô
)

220 :"m" (
EXT2FS_CONST_ADDR
),"r" (
ƒ
 & 7));

221  
ﬁdbô
;

222 
	}
}

224 
_INLINE_
 
__u32
 
	$ext2fs_swab32
(
__u32
 
vÆ
)

226 #ifde‡
EXT2FS_REQUIRE_486


227 
	`__asm__
("bsw≠ %0" : "Ù" (
vÆ
) : "0" (val));

229 
	`__asm__
("xchgb %b0,%h0\n\t"

232 :"=q" (
vÆ
)

233 : "0" (
vÆ
));

235  
vÆ
;

236 
	}
}

238 
_INLINE_
 
__u16
 
	$ext2fs_swab16
(
__u16
 
vÆ
)

240 
	`__asm__
("xchgb %b0,%h0" \

241 : "=q" (
vÆ
) \

242 : "0" (
vÆ
)); \

243  
vÆ
;

244 
	}
}

246 #unde‡
EXT2FS_ADDR


250 #i‡((
deföed
 
__GNUC__
Ë&& !deföed(
_EXT2_USE_C_VERSIONS_
) && \

251 (
	$deföed
(
__mc68000__
)))

253 
	#_EXT2_HAVE_ASM_BITOPS_


	)

255 
_INLINE_
 
	$ext2fs_£t_bô
(
ƒ
,* 
addr
)

257 
ªtvÆ
;

259 
__asm__
 
	`__vﬁ©ûe__
 ("bfset %2@{%1:#1}; sne %0"

260 : "=d" (
ªtvÆ
Ë: "d" (
ƒ
^7), "a" (
addr
));

262  
ªtvÆ
;

263 
	}
}

265 
_INLINE_
 
	$ext2fs_˛ór_bô
(
ƒ
, * 
addr
)

267 
ªtvÆ
;

269 
__asm__
 
	`__vﬁ©ûe__
 ("bfclr %2@{%1:#1}; sne %0"

270 : "=d" (
ªtvÆ
Ë: "d" (
ƒ
^7), "a" (
addr
));

272  
ªtvÆ
;

273 
	}
}

275 
_INLINE_
 
	$ext2fs_ã°_bô
(
ƒ
, c⁄° * 
addr
)

277 
ªtvÆ
;

279 
__asm__
 
	`__vﬁ©ûe__
 ("bftst %2@{%1:#1}; sne %0"

280 : "=d" (
ªtvÆ
Ë: "d" (
ƒ
^7), "a" (
addr
));

282  
ªtvÆ
;

283 
	}
}

288 #i‡!
deföed
(
_EXT2_HAVE_ASM_SWAB_
)

290 
_INLINE_
 
__u16
 
	$ext2fs_swab16
(
__u16
 
vÆ
)

292  (
vÆ
 >> 8) | (val << 8);

293 
	}
}

295 
_INLINE_
 
__u32
 
	$ext2fs_swab32
(
__u32
 
vÆ
)

297  ((
vÆ
>>24) | ((val>>8)&0xFF00) |

298 ((
vÆ
<<8)&0xFF0000) | (val<<24));

299 
	}
}

303 
_INLINE_
 
__u64
 
	$ext2fs_swab64
(
__u64
 
vÆ
)

305  (
	`ext2fs_swab32
(
vÆ
 >> 32) |

306 (((
__u64
)
	`ext2fs_swab32
(
vÆ
 & 0xFFFFFFFFUL)) << 32));

307 
	}
}

309 
_INLINE_
 
	$ext2fs_m¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

310 
blk_t
 
block
)

312  
	`ext2fs_m¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

313 
block
);

314 
	}
}

316 
_INLINE_
 
	$ext2fs_unm¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

317 
blk_t
 
block
)

319  
	`ext2fs_unm¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

320 
block
);

321 
	}
}

323 
_INLINE_
 
	$ext2fs_ã°_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

324 
blk_t
 
block
)

326  
	`ext2fs_ã°_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

327 
block
);

328 
	}
}

330 
_INLINE_
 
	$ext2fs_m¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

331 
ext2_öo_t
 
öode
)

333  
	`ext2fs_m¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

334 
öode
);

335 
	}
}

337 
_INLINE_
 
	$ext2fs_unm¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

338 
ext2_öo_t
 
öode
)

340  
	`ext2fs_unm¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

341 
öode
);

342 
	}
}

344 
_INLINE_
 
	$ext2fs_ã°_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

345 
ext2_öo_t
 
öode
)

347  
	`ext2fs_ã°_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

348 
öode
);

349 
	}
}

351 
_INLINE_
 
	$ext2fs_Á°_m¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

352 
blk_t
 
block
)

354 
	`ext2fs_m¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
block
);

355 
	}
}

357 
_INLINE_
 
	$ext2fs_Á°_unm¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

358 
blk_t
 
block
)

360 
	`ext2fs_unm¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
block
);

361 
	}
}

363 
_INLINE_
 
	$ext2fs_Á°_ã°_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

364 
blk_t
 
block
)

366  
	`ext2fs_ã°_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

367 
block
);

368 
	}
}

370 
_INLINE_
 
	$ext2fs_Á°_m¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

371 
ext2_öo_t
 
öode
)

373 
	`ext2fs_m¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
öode
);

374 
	}
}

376 
_INLINE_
 
	$ext2fs_Á°_unm¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

377 
ext2_öo_t
 
öode
)

379 
	`ext2fs_unm¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
öode
);

380 
	}
}

382 
_INLINE_
 
	$ext2fs_Á°_ã°_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

383 
ext2_öo_t
 
öode
)

385  
	`ext2fs_ã°_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

386 
öode
);

387 
	}
}

389 
_INLINE_
 
blk_t
 
	$ext2fs_gë_block_bôm≠_°¨t
(
ext2fs_block_bôm≠
 
bôm≠
)

391  
	`ext2fs_gë_gíîic_bôm≠_°¨t
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

392 
	}
}

394 
_INLINE_
 
ext2_öo_t
 
	$ext2fs_gë_öode_bôm≠_°¨t
(
ext2fs_öode_bôm≠
 
bôm≠
)

396  
	`ext2fs_gë_gíîic_bôm≠_°¨t
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

397 
	}
}

399 
_INLINE_
 
blk_t
 
	$ext2fs_gë_block_bôm≠_íd
(
ext2fs_block_bôm≠
 
bôm≠
)

401  
	`ext2fs_gë_gíîic_bôm≠_íd
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

402 
	}
}

404 
_INLINE_
 
ext2_öo_t
 
	$ext2fs_gë_öode_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
)

406  
	`ext2fs_gë_gíîic_bôm≠_íd
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

407 
	}
}

409 
_INLINE_
 
	$ext2fs_Á°_ã°_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

410 
blk_t
 
block
, 
num
)

412  
	`ext2fs_ã°_block_bôm≠_ønge
(
bôm≠
, 
block
, 
num
);

413 
	}
}

415 
_INLINE_
 
	$ext2fs_Á°_m¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

416 
blk_t
 
block
, 
num
)

418 
	`ext2fs_m¨k_block_bôm≠_ønge
(
bôm≠
, 
block
, 
num
);

419 
	}
}

421 
_INLINE_
 
	$ext2fs_Á°_unm¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

422 
blk_t
 
block
, 
num
)

424 
	`ext2fs_unm¨k_block_bôm≠_ønge
(
bôm≠
, 
block
, 
num
);

425 
	}
}

426 #unde‡
_INLINE_


	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/block.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

18 
	~"ext2_fs.h
"

19 
	~"ext2fs.h
"

21 
	sblock_c⁄ãxt
 {

22 
ext2_fûsys
 
	mfs
;

23 (*
	mfunc
)(
ext2_fûsys
 
	mfs
,

24 
blk_t
 *
	mblockƒ
,

25 
e2_blk˙t_t
 
	mbcou¡
,

26 
blk_t
 
	mªf_blk
,

27 
	mªf_off£t
,

28 *
	m¥iv_d©a
);

29 
e2_blk˙t_t
 
	mbcou¡
;

30 
	mbsize
;

31 
	mÊags
;

32 
îrcode_t
 
	mîrcode
;

33 *
	möd_buf
;

34 *
	mdöd_buf
;

35 *
	mtöd_buf
;

36 *
	m¥iv_d©a
;

39 
	#check_f‹_ro_viﬁ©i⁄_ªtu∫
(
˘x
, 
ªt
) \

41 i‡(((
˘x
)->
Êags
 & 
BLOCK_FLAG_READ_ONLY
) && \

42 ((
ªt
Ë& 
BLOCK_CHANGED
)) { \

43 (
˘x
)->
îrcode
 = 
EXT2_ET_RO_BLOCK_ITERATE
; \

44 
ªt
 |
BLOCK_ABORT
 | 
BLOCK_ERROR
; \

45  
ªt
; \

47 } 0)

	)

49 
	#check_f‹_ro_viﬁ©i⁄_gŸo
(
˘x
, 
ªt
, 
œbñ
) \

51 i‡(((
˘x
)->
Êags
 & 
BLOCK_FLAG_READ_ONLY
) && \

52 ((
ªt
Ë& 
BLOCK_CHANGED
)) { \

53 (
˘x
)->
îrcode
 = 
EXT2_ET_RO_BLOCK_ITERATE
; \

54 
ªt
 |
BLOCK_ABORT
 | 
BLOCK_ERROR
; \

55 
œbñ
; \

57 } 0)

	)

59 
	$block_ôî©e_öd
(
blk_t
 *
öd_block
, blk_à
ªf_block
,

60 
ªf_off£t
, 
block_c⁄ãxt
 *
˘x
)

62 
ªt
 = 0, 
ch™ged
 = 0;

63 
i
, 
Êags
, 
limô
, 
off£t
;

64 
blk_t
 *
block_ƒ
;

66 
limô
 = 
˘x
->
fs
->
blocksize
 >> 2;

67 i‡(!(
˘x
->
Êags
 & 
BLOCK_FLAG_DEPTH_TRAVERSE
) &&

68 !(
˘x
->
Êags
 & 
BLOCK_FLAG_DATA_ONLY
))

69 
ªt
 = (*
˘x
->
func
)(˘x->
fs
, 
öd_block
,

70 
BLOCK_COUNT_IND
, 
ªf_block
,

71 
ªf_off£t
, 
˘x
->
¥iv_d©a
);

72 
	`check_f‹_ro_viﬁ©i⁄_ªtu∫
(
˘x
, 
ªt
);

73 i‡(!*
öd_block
 || (
ªt
 & 
BLOCK_ABORT
)) {

74 
˘x
->
bcou¡
 +
limô
;

75  
ªt
;

77 i‡(*
öd_block
 >
˘x
->
fs
->
su≥r
->
s_blocks_cou¡
 ||

78 *
öd_block
 < 
˘x
->
fs
->
su≥r
->
s_fú°_d©a_block
) {

79 
˘x
->
îrcode
 = 
EXT2_ET_BAD_IND_BLOCK
;

80 
ªt
 |
BLOCK_ERROR
;

81  
ªt
;

83 
˘x
->
îrcode
 = 
	`ext2fs_ªad_öd_block
(˘x->
fs
, *
öd_block
,

84 
˘x
->
öd_buf
);

85 i‡(
˘x
->
îrcode
) {

86 
ªt
 |
BLOCK_ERROR
;

87  
ªt
;

90 
block_ƒ
 = (
blk_t
 *Ë
˘x
->
öd_buf
;

91 
off£t
 = 0;

92 i‡(
˘x
->
Êags
 & 
BLOCK_FLAG_APPEND
) {

93 
i
 = 0; i < 
limô
; i++, 
˘x
->
bcou¡
++, 
block_ƒ
++) {

94 
Êags
 = (*
˘x
->
func
)(˘x->
fs
, 
block_ƒ
, ctx->
bcou¡
,

95 *
öd_block
, 
off£t
,

96 
˘x
->
¥iv_d©a
);

97 
ch™ged
 |
Êags
;

98 i‡(
Êags
 & 
BLOCK_ABORT
) {

99 
ªt
 |
BLOCK_ABORT
;

102 
off£t
 +(
blk_t
);

105 
i
 = 0; i < 
limô
; i++, 
˘x
->
bcou¡
++, 
block_ƒ
++) {

106 i‡(*
block_ƒ
 == 0)

108 
Êags
 = (*
˘x
->
func
)(˘x->
fs
, 
block_ƒ
, ctx->
bcou¡
,

109 *
öd_block
, 
off£t
,

110 
˘x
->
¥iv_d©a
);

111 
ch™ged
 |
Êags
;

112 i‡(
Êags
 & 
BLOCK_ABORT
) {

113 
ªt
 |
BLOCK_ABORT
;

116 
off£t
 +(
blk_t
);

119 
	`check_f‹_ro_viﬁ©i⁄_ªtu∫
(
˘x
, 
ch™ged
);

120 i‡(
ch™ged
 & 
BLOCK_CHANGED
) {

121 
˘x
->
îrcode
 = 
	`ext2fs_wrôe_öd_block
(˘x->
fs
, *
öd_block
,

122 
˘x
->
öd_buf
);

123 i‡(
˘x
->
îrcode
)

124 
ªt
 |
BLOCK_ERROR
 | 
BLOCK_ABORT
;

126 i‡((
˘x
->
Êags
 & 
BLOCK_FLAG_DEPTH_TRAVERSE
) &&

127 !(
˘x
->
Êags
 & 
BLOCK_FLAG_DATA_ONLY
) &&

128 !(
ªt
 & 
BLOCK_ABORT
))

129 
ªt
 |(*
˘x
->
func
)(˘x->
fs
, 
öd_block
,

130 
BLOCK_COUNT_IND
, 
ªf_block
,

131 
ªf_off£t
, 
˘x
->
¥iv_d©a
);

132 
	`check_f‹_ro_viﬁ©i⁄_ªtu∫
(
˘x
, 
ªt
);

133  
ªt
;

134 
	}
}

136 
	$block_ôî©e_död
(
blk_t
 *
död_block
, blk_à
ªf_block
,

137 
ªf_off£t
, 
block_c⁄ãxt
 *
˘x
)

139 
ªt
 = 0, 
ch™ged
 = 0;

140 
i
, 
Êags
, 
limô
, 
off£t
;

141 
blk_t
 *
block_ƒ
;

143 
limô
 = 
˘x
->
fs
->
blocksize
 >> 2;

144 i‡(!(
˘x
->
Êags
 & (
BLOCK_FLAG_DEPTH_TRAVERSE
 |

145 
BLOCK_FLAG_DATA_ONLY
)))

146 
ªt
 = (*
˘x
->
func
)(˘x->
fs
, 
död_block
,

147 
BLOCK_COUNT_DIND
, 
ªf_block
,

148 
ªf_off£t
, 
˘x
->
¥iv_d©a
);

149 
	`check_f‹_ro_viﬁ©i⁄_ªtu∫
(
˘x
, 
ªt
);

150 i‡(!*
död_block
 || (
ªt
 & 
BLOCK_ABORT
)) {

151 
˘x
->
bcou¡
 +
limô
*limit;

152  
ªt
;

154 i‡(*
död_block
 >
˘x
->
fs
->
su≥r
->
s_blocks_cou¡
 ||

155 *
död_block
 < 
˘x
->
fs
->
su≥r
->
s_fú°_d©a_block
) {

156 
˘x
->
îrcode
 = 
EXT2_ET_BAD_DIND_BLOCK
;

157 
ªt
 |
BLOCK_ERROR
;

158  
ªt
;

160 
˘x
->
îrcode
 = 
	`ext2fs_ªad_öd_block
(˘x->
fs
, *
död_block
,

161 
˘x
->
död_buf
);

162 i‡(
˘x
->
îrcode
) {

163 
ªt
 |
BLOCK_ERROR
;

164  
ªt
;

167 
block_ƒ
 = (
blk_t
 *Ë
˘x
->
död_buf
;

168 
off£t
 = 0;

169 i‡(
˘x
->
Êags
 & 
BLOCK_FLAG_APPEND
) {

170 
i
 = 0; i < 
limô
; i++, 
block_ƒ
++) {

171 
Êags
 = 
	`block_ôî©e_öd
(
block_ƒ
,

172 *
död_block
, 
off£t
,

173 
˘x
);

174 
ch™ged
 |
Êags
;

175 i‡(
Êags
 & (
BLOCK_ABORT
 | 
BLOCK_ERROR
)) {

176 
ªt
 |
Êags
 & (
BLOCK_ABORT
 | 
BLOCK_ERROR
);

179 
off£t
 +(
blk_t
);

182 
i
 = 0; i < 
limô
; i++, 
block_ƒ
++) {

183 i‡(*
block_ƒ
 == 0) {

184 
˘x
->
bcou¡
 +
limô
;

187 
Êags
 = 
	`block_ôî©e_öd
(
block_ƒ
,

188 *
död_block
, 
off£t
,

189 
˘x
);

190 
ch™ged
 |
Êags
;

191 i‡(
Êags
 & (
BLOCK_ABORT
 | 
BLOCK_ERROR
)) {

192 
ªt
 |
Êags
 & (
BLOCK_ABORT
 | 
BLOCK_ERROR
);

195 
off£t
 +(
blk_t
);

198 
	`check_f‹_ro_viﬁ©i⁄_ªtu∫
(
˘x
, 
ch™ged
);

199 i‡(
ch™ged
 & 
BLOCK_CHANGED
) {

200 
˘x
->
îrcode
 = 
	`ext2fs_wrôe_öd_block
(˘x->
fs
, *
död_block
,

201 
˘x
->
död_buf
);

202 i‡(
˘x
->
îrcode
)

203 
ªt
 |
BLOCK_ERROR
 | 
BLOCK_ABORT
;

205 i‡((
˘x
->
Êags
 & 
BLOCK_FLAG_DEPTH_TRAVERSE
) &&

206 !(
˘x
->
Êags
 & 
BLOCK_FLAG_DATA_ONLY
) &&

207 !(
ªt
 & 
BLOCK_ABORT
))

208 
ªt
 |(*
˘x
->
func
)(˘x->
fs
, 
död_block
,

209 
BLOCK_COUNT_DIND
, 
ªf_block
,

210 
ªf_off£t
, 
˘x
->
¥iv_d©a
);

211 
	`check_f‹_ro_viﬁ©i⁄_ªtu∫
(
˘x
, 
ªt
);

212  
ªt
;

213 
	}
}

215 
	$block_ôî©e_töd
(
blk_t
 *
töd_block
, blk_à
ªf_block
,

216 
ªf_off£t
, 
block_c⁄ãxt
 *
˘x
)

218 
ªt
 = 0, 
ch™ged
 = 0;

219 
i
, 
Êags
, 
limô
, 
off£t
;

220 
blk_t
 *
block_ƒ
;

222 
limô
 = 
˘x
->
fs
->
blocksize
 >> 2;

223 i‡(!(
˘x
->
Êags
 & (
BLOCK_FLAG_DEPTH_TRAVERSE
 |

224 
BLOCK_FLAG_DATA_ONLY
)))

225 
ªt
 = (*
˘x
->
func
)(˘x->
fs
, 
töd_block
,

226 
BLOCK_COUNT_TIND
, 
ªf_block
,

227 
ªf_off£t
, 
˘x
->
¥iv_d©a
);

228 
	`check_f‹_ro_viﬁ©i⁄_ªtu∫
(
˘x
, 
ªt
);

229 i‡(!*
töd_block
 || (
ªt
 & 
BLOCK_ABORT
)) {

230 
˘x
->
bcou¡
 +
limô
*limit*limit;

231  
ªt
;

233 i‡(*
töd_block
 >
˘x
->
fs
->
su≥r
->
s_blocks_cou¡
 ||

234 *
töd_block
 < 
˘x
->
fs
->
su≥r
->
s_fú°_d©a_block
) {

235 
˘x
->
îrcode
 = 
EXT2_ET_BAD_TIND_BLOCK
;

236 
ªt
 |
BLOCK_ERROR
;

237  
ªt
;

239 
˘x
->
îrcode
 = 
	`ext2fs_ªad_öd_block
(˘x->
fs
, *
töd_block
,

240 
˘x
->
töd_buf
);

241 i‡(
˘x
->
îrcode
) {

242 
ªt
 |
BLOCK_ERROR
;

243  
ªt
;

246 
block_ƒ
 = (
blk_t
 *Ë
˘x
->
töd_buf
;

247 
off£t
 = 0;

248 i‡(
˘x
->
Êags
 & 
BLOCK_FLAG_APPEND
) {

249 
i
 = 0; i < 
limô
; i++, 
block_ƒ
++) {

250 
Êags
 = 
	`block_ôî©e_död
(
block_ƒ
,

251 *
töd_block
,

252 
off£t
, 
˘x
);

253 
ch™ged
 |
Êags
;

254 i‡(
Êags
 & (
BLOCK_ABORT
 | 
BLOCK_ERROR
)) {

255 
ªt
 |
Êags
 & (
BLOCK_ABORT
 | 
BLOCK_ERROR
);

258 
off£t
 +(
blk_t
);

261 
i
 = 0; i < 
limô
; i++, 
block_ƒ
++) {

262 i‡(*
block_ƒ
 == 0) {

263 
˘x
->
bcou¡
 +
limô
*limit;

266 
Êags
 = 
	`block_ôî©e_död
(
block_ƒ
,

267 *
töd_block
,

268 
off£t
, 
˘x
);

269 
ch™ged
 |
Êags
;

270 i‡(
Êags
 & (
BLOCK_ABORT
 | 
BLOCK_ERROR
)) {

271 
ªt
 |
Êags
 & (
BLOCK_ABORT
 | 
BLOCK_ERROR
);

274 
off£t
 +(
blk_t
);

277 
	`check_f‹_ro_viﬁ©i⁄_ªtu∫
(
˘x
, 
ch™ged
);

278 i‡(
ch™ged
 & 
BLOCK_CHANGED
) {

279 
˘x
->
îrcode
 = 
	`ext2fs_wrôe_öd_block
(˘x->
fs
, *
töd_block
,

280 
˘x
->
töd_buf
);

281 i‡(
˘x
->
îrcode
)

282 
ªt
 |
BLOCK_ERROR
 | 
BLOCK_ABORT
;

284 i‡((
˘x
->
Êags
 & 
BLOCK_FLAG_DEPTH_TRAVERSE
) &&

285 !(
˘x
->
Êags
 & 
BLOCK_FLAG_DATA_ONLY
) &&

286 !(
ªt
 & 
BLOCK_ABORT
))

287 
ªt
 |(*
˘x
->
func
)(˘x->
fs
, 
töd_block
,

288 
BLOCK_COUNT_TIND
, 
ªf_block
,

289 
ªf_off£t
, 
˘x
->
¥iv_d©a
);

290 
	`check_f‹_ro_viﬁ©i⁄_ªtu∫
(
˘x
, 
ªt
);

291  
ªt
;

292 
	}
}

294 
îrcode_t
 
ext2fs_block_ôî©e2
(
ext2_fûsys
 
fs
,

295 
ext2_öo_t
 
öo
,

296 
Êags
,

297 *
block_buf
,

298 (*
func
)(
ext2_fûsys
 
fs
,

299 
blk_t
 *
blockƒ
,

300 
e2_blk˙t_t
 
block˙t
,

301 
blk_t
 
ªf_blk
,

302 
ªf_off£t
,

303 *
¥iv_d©a
),

304 *
¥iv_d©a
)

306 
i
;

307 
r
, 
ªt
 = 0;

308 
ext2_öode
 
öode
;

309 
îrcode_t
 
ªtvÆ
;

310 
block_c⁄ãxt
 
˘x
;

311 
limô
;

313 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

315 
˘x
.
îrcode
 = 
	`ext2fs_ªad_öode
(
fs
, 
öo
, &
öode
);

316 i‡(
˘x
.
îrcode
)

317  
˘x
.
îrcode
;

322 i‡(
Êags
 & 
BLOCK_FLAG_NO_LARGE
) {

323 i‡(!
	`LINUX_S_ISDIR
(
öode
.
i_mode
) &&

324 (
öode
.
i_size_high
 != 0))

325  
EXT2_ET_FILE_TOO_BIG
;

328 
limô
 = 
fs
->
blocksize
 >> 2;

330 
˘x
.
fs
 = fs;

331 
˘x
.
func
 = func;

332 
˘x
.
¥iv_d©a
 =Öriv_data;

333 
˘x
.
Êags
 = flags;

334 
˘x
.
bcou¡
 = 0;

335 i‡(
block_buf
) {

336 
˘x
.
öd_buf
 = 
block_buf
;

338 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(3, 
fs
->
blocksize
, &
˘x
.
öd_buf
);

339 i‡(
ªtvÆ
)

340  
ªtvÆ
;

342 
˘x
.
död_buf
 = ctx.
öd_buf
 + 
fs
->
blocksize
;

343 
˘x
.
töd_buf
 = ctx.
död_buf
 + 
fs
->
blocksize
;

348 i‡((
fs
->
su≥r
->
s_¸ót‹_os
 =
EXT2_OS_HURD
) &&

349 !(
Êags
 & 
BLOCK_FLAG_DATA_ONLY
)) {

350 i‡(
öode
.
osd1
.
hurd1
.
h_i_å™¶©‹
) {

351 
ªt
 |(*
˘x
.
func
)(
fs
,

352 &
öode
.
osd1
.
hurd1
.
h_i_å™¶©‹
,

353 
BLOCK_COUNT_TRANSLATOR
,

354 0, 0, 
¥iv_d©a
);

355 i‡(
ªt
 & 
BLOCK_ABORT
)

356 
ab‹t_exô
;

357 
	`check_f‹_ro_viﬁ©i⁄_gŸo
(&
˘x
, 
ªt
, 
ab‹t_exô
);

361 i‡(
öode
.
i_Êags
 & 
EXT4_EXTENTS_FL
) {

362 
ext2_exã¡_h™dÀ_t
 
h™dÀ
;

363 
ext2fs_exã¡
 
exã¡
;

364 
e2_blk˙t_t
 
block˙t
 = 0;

365 
blk_t
 
blk
, 
√w_blk
;

366 
›
 = 
EXT2_EXTENT_ROOT
;

367 
unöô
;

368 
j
;

370 
˘x
.
îrcode
 = 
	`ext2fs_exã¡_›í2
(
fs
, 
öo
, &
öode
, &
h™dÀ
);

371 i‡(
˘x
.
îrcode
)

372 
ab‹t_exô
;

375 
˘x
.
îrcode
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
›
, &
exã¡
);

376 i‡(
˘x
.
îrcode
) {

377 i‡(
˘x
.
îrcode
 !
EXT2_ET_EXTENT_NO_NEXT
)

379 
˘x
.
îrcode
 = 0;

380 i‡(!(
Êags
 & 
BLOCK_FLAG_APPEND
))

382 
blk
 = 0;

383 
r
 = (*
˘x
.
func
)(
fs
, &
blk
, 
block˙t
,

384 0, 0, 
¥iv_d©a
);

385 
ªt
 |
r
;

386 
	`check_f‹_ro_viﬁ©i⁄_gŸo
(&
˘x
, 
ªt
,

387 
exã¡_îrout
);

388 i‡(
r
 & 
BLOCK_CHANGED
) {

389 
˘x
.
îrcode
 =

390 
	`ext2fs_exã¡_£t_bm≠
(
h™dÀ
,

391 (
blk64_t
Ë
block˙t
++,

392 (
blk64_t
Ë
blk
, 0);

393 i‡(
˘x
.
îrcode
 || (
ªt
 & 
BLOCK_ABORT
))

400 
›
 = 
EXT2_EXTENT_NEXT
;

401 
blk
 = 
exã¡
.
e_pblk
;

402 i‡(!(
exã¡
.
e_Êags
 & 
EXT2_EXTENT_FLAGS_LEAF
)) {

403 i‡(
˘x
.
Êags
 & 
BLOCK_FLAG_DATA_ONLY
)

405 i‡((!(
exã¡
.
e_Êags
 &

406 
EXT2_EXTENT_FLAGS_SECOND_VISIT
) &&

407 !(
˘x
.
Êags
 & 
BLOCK_FLAG_DEPTH_TRAVERSE
)) ||

408 ((
exã¡
.
e_Êags
 &

409 
EXT2_EXTENT_FLAGS_SECOND_VISIT
) &&

410 (
˘x
.
Êags
 & 
BLOCK_FLAG_DEPTH_TRAVERSE
))) {

411 
ªt
 |(*
˘x
.
func
)(
fs
, &
blk
,

412 -1, 0, 0, 
¥iv_d©a
);

413 i‡(
ªt
 & 
BLOCK_CHANGED
) {

414 
exã¡
.
e_pblk
 = 
blk
;

415 
˘x
.
îrcode
 =

416 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0, &
exã¡
);

417 i‡(
˘x
.
îrcode
)

423 
unöô
 = 0;

424 i‡(
exã¡
.
e_Êags
 & 
EXT2_EXTENT_FLAGS_UNINIT
)

425 
unöô
 = 
EXT2_EXTENT_SET_BMAP_UNINIT
;

426 
block˙t
 = 
exã¡
.
e_lblk
, 
j
 = 0;

427 
j
 < 
exã¡
.
e_Àn
;

428 
blk
++, 
block˙t
++, 
j
++) {

429 
√w_blk
 = 
blk
;

430 
r
 = (*
˘x
.
func
)(
fs
, &
√w_blk
, 
block˙t
,

431 0, 0, 
¥iv_d©a
);

432 
ªt
 |
r
;

433 
	`check_f‹_ro_viﬁ©i⁄_gŸo
(&
˘x
, 
ªt
,

434 
exã¡_îrout
);

435 i‡(
r
 & 
BLOCK_CHANGED
) {

436 
˘x
.
îrcode
 =

437 
	`ext2fs_exã¡_£t_bm≠
(
h™dÀ
,

438 (
blk64_t
Ë
block˙t
,

439 (
blk64_t
Ë
√w_blk
,

440 
unöô
);

441 i‡(
˘x
.
îrcode
)

442 
exã¡_îrout
;

444 i‡(
ªt
 & 
BLOCK_ABORT
)

449 
exã¡_îrout
:

450 
	`ext2fs_exã¡_‰ì
(
h™dÀ
);

451 
ªt
 |
BLOCK_ERROR
 | 
BLOCK_ABORT
;

452 
îrout
;

458 
i
 = 0; i < 
EXT2_NDIR_BLOCKS
 ; i++, 
˘x
.
bcou¡
++) {

459 i‡(
öode
.
i_block
[
i
] || (
Êags
 & 
BLOCK_FLAG_APPEND
)) {

460 
ªt
 |(*
˘x
.
func
)(
fs
, &
öode
.
i_block
[
i
],

461 
˘x
.
bcou¡
, 0, 
i
, 
¥iv_d©a
);

462 i‡(
ªt
 & 
BLOCK_ABORT
)

463 
ab‹t_exô
;

466 
	`check_f‹_ro_viﬁ©i⁄_gŸo
(&
˘x
, 
ªt
, 
ab‹t_exô
);

467 i‡(
öode
.
i_block
[
EXT2_IND_BLOCK
] || (
Êags
 & 
BLOCK_FLAG_APPEND
)) {

468 
ªt
 |
	`block_ôî©e_öd
(&
öode
.
i_block
[
EXT2_IND_BLOCK
],

469 0, 
EXT2_IND_BLOCK
, &
˘x
);

470 i‡(
ªt
 & 
BLOCK_ABORT
)

471 
ab‹t_exô
;

473 
˘x
.
bcou¡
 +
limô
;

474 i‡(
öode
.
i_block
[
EXT2_DIND_BLOCK
] || (
Êags
 & 
BLOCK_FLAG_APPEND
)) {

475 
ªt
 |
	`block_ôî©e_död
(&
öode
.
i_block
[
EXT2_DIND_BLOCK
],

476 0, 
EXT2_DIND_BLOCK
, &
˘x
);

477 i‡(
ªt
 & 
BLOCK_ABORT
)

478 
ab‹t_exô
;

480 
˘x
.
bcou¡
 +
limô
 *Üimit;

481 i‡(
öode
.
i_block
[
EXT2_TIND_BLOCK
] || (
Êags
 & 
BLOCK_FLAG_APPEND
)) {

482 
ªt
 |
	`block_ôî©e_töd
(&
öode
.
i_block
[
EXT2_TIND_BLOCK
],

483 0, 
EXT2_TIND_BLOCK
, &
˘x
);

484 i‡(
ªt
 & 
BLOCK_ABORT
)

485 
ab‹t_exô
;

488 
ab‹t_exô
:

489 i‡(
ªt
 & 
BLOCK_CHANGED
) {

490 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fs
, 
öo
, &
öode
);

491 i‡(
ªtvÆ
) {

492 
ªt
 |
BLOCK_ERROR
;

493 
˘x
.
îrcode
 = 
ªtvÆ
;

496 
îrout
:

497 i‡(!
block_buf
)

498 
	`ext2fs_‰ì_mem
(&
˘x
.
öd_buf
);

500  (
ªt
 & 
BLOCK_ERROR
Ë? 
˘x
.
îrcode
 : 0;

501 
	}
}

507 
	sxœã
 {

508 (*
	mfunc
)(
ext2_fûsys
 
	mfs
,

509 
blk_t
 *
	mblockƒ
,

510 
	mbcou¡
,

511 *
	m¥iv_d©a
);

512 *
	mªÆ_¥iv©e
;

515 #ifde‡
__TURBOC__


516 #¥agm®
¨gsu£d


518 
xœã_func
(
ext2_fûsys
 
fs
, 
blk_t
 *
blockƒ
, 
e2_blk˙t_t
 
block˙t
,

519 
blk_t
 
ªf_block
 
EXT2FS_ATTR
((
unu£d
)),

520 
ªf_off£t
 
EXT2FS_ATTR
((
unu£d
)),

521 *
¥iv_d©a
)

523 
xœã
 *
	gxl
 = (xœã *Ë
¥iv_d©a
;

525  (*
	gxl
->
	gfunc
)(
	gfs
, 
	gblockƒ
, (Ë
	gblock˙t
, xl->
	gªÆ_¥iv©e
);

528 
îrcode_t
 
ext2fs_block_ôî©e
(
ext2_fûsys
 
fs
,

529 
ext2_öo_t
 
öo
,

530 
Êags
,

531 *
block_buf
,

532 (*
func
)(
ext2_fûsys
 
fs
,

533 
blk_t
 *
blockƒ
,

534 
block˙t
,

535 *
¥iv_d©a
),

536 *
¥iv_d©a
)

538 
xœã
 
xl
;

540 
xl
.
ªÆ_¥iv©e
 = 
¥iv_d©a
;

541 
xl
.
func
 = func;

543  
	`ext2fs_block_ôî©e2
(
fs
, 
öo
, 
BLOCK_FLAG_NO_LARGE
 | 
Êags
,

544 
block_buf
, 
xœã_func
, &
xl
);

545 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/bmap.c

12 
	~<c⁄fig.h
>

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 #i‡
HAVE_UNISTD_H


17 
	~<uni°d.h
>

19 
	~<î∫o.h
>

21 
	~"ext2_fs.h
"

22 
	~"ext2fs.h
"

24 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
NO_INLINE_FUNCS
)

25 
	#_BMAP_INLINE_
 
__ölöe__


	)

27 
	#_BMAP_INLINE_


	)

30 
îrcode_t
 
ext2fs_bm≠
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

31 
ext2_öode
 *
öode
,

32 *
block_buf
, 
bm≠_Êags
,

33 
blk_t
 
block
, blk_à*
phys_blk
);

35 
	#öode_bm≠
(
öode
, 
ƒ
Ë((öode)->
i_block
[“r)])

	)

37 
_BMAP_INLINE_
 
îrcode_t
 
	$block_öd_bm≠
(
ext2_fûsys
 
fs
, 
Êags
,

38 
blk_t
 
öd
, *
block_buf
,

39 *
blocks_Æloc
,

40 
blk_t
 
ƒ
, blk_à*
ªt_blk
)

42 
îrcode_t
 
ªtvÆ
;

43 
blk_t
 
b
;

45 i‡(!
öd
) {

46 i‡(
Êags
 & 
BMAP_SET
)

47  
EXT2_ET_SET_BMAP_NO_IND
;

48 *
ªt_blk
 = 0;

51 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
öd
, 1, 
block_buf
);

52 i‡(
ªtvÆ
)

53  
ªtvÆ
;

55 i‡(
Êags
 & 
BMAP_SET
) {

56 
b
 = *
ªt_blk
;

57 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

58 
b
 = 
	`ext2fs_swab32
(b);

60 ((
blk_t
 *Ë
block_buf
)[
ƒ
] = 
b
;

61  
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
öd
, 1, 
block_buf
);

64 
b
 = ((
blk_t
 *Ë
block_buf
)[
ƒ
];

66 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

67 
b
 = 
	`ext2fs_swab32
(b);

70 i‡(!
b
 && (
Êags
 & 
BMAP_ALLOC
)) {

71 
b
 = 
ƒ
 ? ((
blk_t
 *Ë
block_buf
)[nr-1] : 0;

72 
ªtvÆ
 = 
	`ext2fs_Æloc_block
(
fs
, 
b
,

73 
block_buf
 + 
fs
->
blocksize
, &
b
);

74 i‡(
ªtvÆ
)

75  
ªtvÆ
;

77 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

78 ((
blk_t
 *Ë
block_buf
)[
ƒ
] = 
	`ext2fs_swab32
(
b
);

80 ((
blk_t
 *Ë
block_buf
)[
ƒ
] = 
b
;

83 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
öd
, 1, 
block_buf
);

84 i‡(
ªtvÆ
)

85  
ªtvÆ
;

87 (*
blocks_Æloc
)++;

90 *
ªt_blk
 = 
b
;

92 
	}
}

94 
_BMAP_INLINE_
 
îrcode_t
 
	$block_död_bm≠
(
ext2_fûsys
 
fs
, 
Êags
,

95 
blk_t
 
död
, *
block_buf
,

96 *
blocks_Æloc
,

97 
blk_t
 
ƒ
, blk_à*
ªt_blk
)

99 
blk_t
 
b
;

100 
îrcode_t
 
ªtvÆ
;

101 
blk_t
 
addr_≥r_block
;

103 
addr_≥r_block
 = (
blk_t
Ë
fs
->
blocksize
 >> 2;

105 
ªtvÆ
 = 
	`block_öd_bm≠
(
fs
, 
Êags
 & ~
BMAP_SET
, 
död
, 
block_buf
,

106 
blocks_Æloc
, 
ƒ
 / 
addr_≥r_block
, &
b
);

107 i‡(
ªtvÆ
)

108  
ªtvÆ
;

109 
ªtvÆ
 = 
	`block_öd_bm≠
(
fs
, 
Êags
, 
b
, 
block_buf
, 
blocks_Æloc
,

110 
ƒ
 % 
addr_≥r_block
, 
ªt_blk
);

111  
ªtvÆ
;

112 
	}
}

114 
_BMAP_INLINE_
 
îrcode_t
 
	$block_töd_bm≠
(
ext2_fûsys
 
fs
, 
Êags
,

115 
blk_t
 
töd
, *
block_buf
,

116 *
blocks_Æloc
,

117 
blk_t
 
ƒ
, blk_à*
ªt_blk
)

119 
blk_t
 
b
;

120 
îrcode_t
 
ªtvÆ
;

121 
blk_t
 
addr_≥r_block
;

123 
addr_≥r_block
 = (
blk_t
Ë
fs
->
blocksize
 >> 2;

125 
ªtvÆ
 = 
	`block_död_bm≠
(
fs
, 
Êags
 & ~
BMAP_SET
, 
töd
, 
block_buf
,

126 
blocks_Æloc
, 
ƒ
 / 
addr_≥r_block
, &
b
);

127 i‡(
ªtvÆ
)

128  
ªtvÆ
;

129 
ªtvÆ
 = 
	`block_öd_bm≠
(
fs
, 
Êags
, 
b
, 
block_buf
, 
blocks_Æloc
,

130 
ƒ
 % 
addr_≥r_block
, 
ªt_blk
);

131  
ªtvÆ
;

132 
	}
}

134 
îrcode_t
 
	$ext2fs_bm≠2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
ext2_öode
 *
öode
,

135 *
block_buf
, 
bm≠_Êags
, 
blk64_t
 
block
,

136 *
ªt_Êags
, 
blk64_t
 *
phys_blk
)

138 
ext2_öode
 
öode_buf
;

139 
ext2_exã¡_h™dÀ_t
 
h™dÀ
 = 0;

140 
blk_t
 
addr_≥r_block
;

141 
blk_t
 
b
, 
blk32
;

142 *
buf
 = 0;

143 
îrcode_t
 
ªtvÆ
 = 0;

144 
blocks_Æloc
 = 0, 
öode_dúty
 = 0;

146 i‡(!(
bm≠_Êags
 & 
BMAP_SET
))

147 *
phys_blk
 = 0;

149 i‡(
ªt_Êags
)

150 *
ªt_Êags
 = 0;

153 i‡(!
öode
) {

154 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
öo
, &
öode_buf
);

155 i‡(
ªtvÆ
)

156  
ªtvÆ
;

157 
öode
 = &
öode_buf
;

159 
addr_≥r_block
 = (
blk_t
Ë
fs
->
blocksize
 >> 2;

161 i‡(
öode
->
i_Êags
 & 
EXT4_EXTENTS_FL
) {

162 
ext2fs_exã¡
 
exã¡
;

163 
off£t
;

165 
ªtvÆ
 = 
	`ext2fs_exã¡_›í2
(
fs
, 
öo
, 
öode
, &
h™dÀ
);

166 i‡(
ªtvÆ
)

167 
d⁄e
;

168 i‡(
bm≠_Êags
 & 
BMAP_SET
) {

169 
ªtvÆ
 = 
	`ext2fs_exã¡_£t_bm≠
(
h™dÀ
, 
block
,

170 *
phys_blk
, 0);

171 
d⁄e
;

173 
ªtvÆ
 = 
	`ext2fs_exã¡_gŸo
(
h™dÀ
, 
block
);

174 i‡(
ªtvÆ
) {

176 i‡(
ªtvÆ
 =
EXT2_ET_EXTENT_NOT_FOUND
)

177 
gŸ_block
;

178 
d⁄e
;

180 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_CURRENT
, &
exã¡
);

181 i‡(
ªtvÆ
)

182 
d⁄e
;

183 
off£t
 = 
block
 - 
exã¡
.
e_lblk
;

184 i‡(
block
 >
exã¡
.
e_lblk
 && (
off£t
 <exã¡.
e_Àn
)) {

185 *
phys_blk
 = 
exã¡
.
e_pblk
 + 
off£t
;

186 i‡(
ªt_Êags
 && 
exã¡
.
e_Êags
 & 
EXT2_EXTENT_FLAGS_UNINIT
)

187 *
ªt_Êags
 |
BMAP_RET_UNINIT
;

189 
gŸ_block
:

190 i‡((*
phys_blk
 =0Ë&& (
bm≠_Êags
 & 
BMAP_ALLOC
)) {

191 
ªtvÆ
 = 
	`ext2fs_Æloc_block
(
fs
, 
b
, 
block_buf
, &b);

192 i‡(
ªtvÆ
)

193 
d⁄e
;

194 
ªtvÆ
 = 
	`ext2fs_exã¡_£t_bm≠
(
h™dÀ
, 
block
,

195 (
blk64_t
Ë
b
, 0);

196 i‡(
ªtvÆ
)

197 
d⁄e
;

199 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
öo
, 
öode
);

200 i‡(
ªtvÆ
)

201  
ªtvÆ
;

202 
blocks_Æloc
++;

203 *
phys_blk
 = 
b
;

205 
ªtvÆ
 = 0;

206 
d⁄e
;

209 i‡(!
block_buf
) {

210 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(2, 
fs
->
blocksize
, &
buf
);

211 i‡(
ªtvÆ
)

212  
ªtvÆ
;

213 
block_buf
 = 
buf
;

216 i‡(
block
 < 
EXT2_NDIR_BLOCKS
) {

217 i‡(
bm≠_Êags
 & 
BMAP_SET
) {

218 
b
 = *
phys_blk
;

219 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

220 
b
 = 
	`ext2fs_swab32
(b);

222 
	`öode_bm≠
(
öode
, 
block
Ë
b
;

223 
öode_dúty
++;

224 
d⁄e
;

227 *
phys_blk
 = 
	`öode_bm≠
(
öode
, 
block
);

228 
b
 = 
block
 ? 
	`öode_bm≠
(
öode
, block-1) : 0;

230 i‡((*
phys_blk
 =0Ë&& (
bm≠_Êags
 & 
BMAP_ALLOC
)) {

231 
ªtvÆ
 = 
	`ext2fs_Æloc_block
(
fs
, 
b
, 
block_buf
, &b);

232 i‡(
ªtvÆ
)

233 
d⁄e
;

234 
	`öode_bm≠
(
öode
, 
block
Ë
b
;

235 
blocks_Æloc
++;

236 *
phys_blk
 = 
b
;

238 
d⁄e
;

242 
block
 -
EXT2_NDIR_BLOCKS
;

243 
blk32
 = *
phys_blk
;

244 i‡(
block
 < 
addr_≥r_block
) {

245 
b
 = 
	`öode_bm≠
(
öode
, 
EXT2_IND_BLOCK
);

246 i‡(!
b
) {

247 i‡(!(
bm≠_Êags
 & 
BMAP_ALLOC
)) {

248 i‡(
bm≠_Êags
 & 
BMAP_SET
)

249 
ªtvÆ
 = 
EXT2_ET_SET_BMAP_NO_IND
;

250 
d⁄e
;

253 
b
 = 
	`öode_bm≠
(
öode
, 
EXT2_IND_BLOCK
-1);

254 
ªtvÆ
 = 
	`ext2fs_Æloc_block
(
fs
, 
b
, 
block_buf
, &b);

255 i‡(
ªtvÆ
)

256 
d⁄e
;

257 
	`öode_bm≠
(
öode
, 
EXT2_IND_BLOCK
Ë
b
;

258 
blocks_Æloc
++;

260 
ªtvÆ
 = 
	`block_öd_bm≠
(
fs
, 
bm≠_Êags
, 
b
, 
block_buf
,

261 &
blocks_Æloc
, 
block
, &
blk32
);

262 i‡(
ªtvÆ
 == 0)

263 *
phys_blk
 = 
blk32
;

264 
d⁄e
;

268 
block
 -
addr_≥r_block
;

269 i‡(
block
 < 
addr_≥r_block
 *áddr_per_block) {

270 
b
 = 
	`öode_bm≠
(
öode
, 
EXT2_DIND_BLOCK
);

271 i‡(!
b
) {

272 i‡(!(
bm≠_Êags
 & 
BMAP_ALLOC
)) {

273 i‡(
bm≠_Êags
 & 
BMAP_SET
)

274 
ªtvÆ
 = 
EXT2_ET_SET_BMAP_NO_IND
;

275 
d⁄e
;

278 
b
 = 
	`öode_bm≠
(
öode
, 
EXT2_IND_BLOCK
);

279 
ªtvÆ
 = 
	`ext2fs_Æloc_block
(
fs
, 
b
, 
block_buf
, &b);

280 i‡(
ªtvÆ
)

281 
d⁄e
;

282 
	`öode_bm≠
(
öode
, 
EXT2_DIND_BLOCK
Ë
b
;

283 
blocks_Æloc
++;

285 
ªtvÆ
 = 
	`block_död_bm≠
(
fs
, 
bm≠_Êags
, 
b
, 
block_buf
,

286 &
blocks_Æloc
, 
block
, &
blk32
);

287 i‡(
ªtvÆ
 == 0)

288 *
phys_blk
 = 
blk32
;

289 
d⁄e
;

293 
block
 -
addr_≥r_block
 *áddr_per_block;

294 
b
 = 
	`öode_bm≠
(
öode
, 
EXT2_TIND_BLOCK
);

295 i‡(!
b
) {

296 i‡(!(
bm≠_Êags
 & 
BMAP_ALLOC
)) {

297 i‡(
bm≠_Êags
 & 
BMAP_SET
)

298 
ªtvÆ
 = 
EXT2_ET_SET_BMAP_NO_IND
;

299 
d⁄e
;

302 
b
 = 
	`öode_bm≠
(
öode
, 
EXT2_DIND_BLOCK
);

303 
ªtvÆ
 = 
	`ext2fs_Æloc_block
(
fs
, 
b
, 
block_buf
, &b);

304 i‡(
ªtvÆ
)

305 
d⁄e
;

306 
	`öode_bm≠
(
öode
, 
EXT2_TIND_BLOCK
Ë
b
;

307 
blocks_Æloc
++;

309 
ªtvÆ
 = 
	`block_töd_bm≠
(
fs
, 
bm≠_Êags
, 
b
, 
block_buf
,

310 &
blocks_Æloc
, 
block
, &
blk32
);

311 i‡(
ªtvÆ
 == 0)

312 *
phys_blk
 = 
blk32
;

313 
d⁄e
:

314 i‡(
buf
)

315 
	`ext2fs_‰ì_mem
(&
buf
);

316 i‡(
h™dÀ
)

317 
	`ext2fs_exã¡_‰ì
(
h™dÀ
);

318 i‡((
ªtvÆ
 =0Ë&& (
blocks_Æloc
 || 
öode_dúty
)) {

319 
	`ext2fs_iblk_add_blocks
(
fs
, 
öode
, 
blocks_Æloc
);

320 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fs
, 
öo
, 
öode
);

322  
ªtvÆ
;

323 
	}
}

325 
îrcode_t
 
	$ext2fs_bm≠
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
ext2_öode
 *
öode
,

326 *
block_buf
, 
bm≠_Êags
, 
blk_t
 
block
,

327 
blk_t
 *
phys_blk
)

329 
îrcode_t
 
ªt
;

330 
blk64_t
 
ªt_blk
;

332 
ªt
 = 
	`ext2fs_bm≠2
(
fs
, 
öo
, 
öode
, 
block_buf
, 
bm≠_Êags
, 
block
,

333 0, &
ªt_blk
);

334 i‡(
ªt
)

335  
ªt
;

336 i‡(
ªt_blk
 >= (() 1 << 32))

337  
EOVERFLOW
;

338 *
phys_blk
 = 
ªt_blk
;

340 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/check_desc.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<f˙é.h
>

18 
	~<time.h
>

19 #i‡
HAVE_SYS_STAT_H


20 
	~<sys/°©.h
>

22 #i‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 
	~"ext2_fs.h
"

27 
	~"ext2fs.h
"

32 
îrcode_t
 
	$ext2fs_check_desc
(
ext2_fûsys
 
fs
)

34 
ext2fs_block_bôm≠
 
bm≠
;

35 
îrcode_t
 
ªtvÆ
;

36 
dgΩ_t
 
i
;

37 
blk_t
 
fú°_block
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

38 
blk_t
 
œ°_block
 = 
fs
->
su≥r
->
s_blocks_cou¡
-1;

39 
blk_t
 
blk
, 
b
;

40 
j
;

42 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

44 
ªtvÆ
 = 
	`ext2fs_Æloˇã_block_bôm≠
(
fs
, "check_des¯m≠", &
bm≠
);

45 i‡(
ªtvÆ
)

46  
ªtvÆ
;

48 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++)

49 
	`ext2fs_ª£rve_su≥r_™d_bgd
(
fs
, 
i
, 
bm≠
);

51 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++) {

52 i‡(!
	`EXT2_HAS_INCOMPAT_FEATURE
(
fs
->
su≥r
,

53 
EXT4_FEATURE_INCOMPAT_FLEX_BG
)) {

54 
fú°_block
 = 
	`ext2fs_group_fú°_block
(
fs
, 
i
);

55 
œ°_block
 = 
	`ext2fs_group_œ°_block
(
fs
, 
i
);

56 i‡(
i
 =(
fs
->
group_desc_cou¡
 - 1))

57 
œ°_block
 = 
fs
->
su≥r
->
s_blocks_cou¡
-1;

63 
blk
 = 
fs
->
group_desc
[
i
].
bg_block_bôm≠
;

64 i‡(
blk
 < 
fú°_block
 || blk > 
œ°_block
 ||

65 
	`ext2fs_ã°_block_bôm≠
(
bm≠
, 
blk
)) {

66 
ªtvÆ
 = 
EXT2_ET_GDESC_BAD_BLOCK_MAP
;

67 
îrout
;

69 
	`ext2fs_m¨k_block_bôm≠
(
bm≠
, 
blk
);

74 
blk
 = 
fs
->
group_desc
[
i
].
bg_öode_bôm≠
;

75 i‡(
blk
 < 
fú°_block
 || blk > 
œ°_block
 ||

76 
	`ext2fs_ã°_block_bôm≠
(
bm≠
, 
blk
)) {

77 
ªtvÆ
 = 
EXT2_ET_GDESC_BAD_INODE_MAP
;

78 
îrout
;

80 
	`ext2fs_m¨k_block_bôm≠
(
bm≠
, 
blk
);

85 
blk
 = 
fs
->
group_desc
[
i
].
bg_öode_èbÀ
;

86 i‡(
blk
 < 
fú°_block
 ||

87 ((
blk
 + 
fs
->
öode_blocks_≥r_group
 - 1Ë> 
œ°_block
)) {

88 
ªtvÆ
 = 
EXT2_ET_GDESC_BAD_INODE_TABLE
;

89 
îrout
;

91 
j
 = 0, 
b
 = 
blk
; j < 
fs
->
öode_blocks_≥r_group
;

92 
j
++, 
b
++) {

93 i‡(
	`ext2fs_ã°_block_bôm≠
(
bm≠
, 
b
)) {

94 
ªtvÆ
 = 
EXT2_ET_GDESC_BAD_INODE_TABLE
;

95 
îrout
;

97 
	`ext2fs_m¨k_block_bôm≠
(
bm≠
, 
b
);

100 
îrout
:

101 
	`ext2fs_‰ì_block_bôm≠
(
bm≠
);

102  
ªtvÆ
;

103 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/closefs.c

12 
	~<c⁄fig.h
>

14 
	~<°dio.h
>

15 #i‡
HAVE_UNISTD_H


16 
	~<uni°d.h
>

18 
	~<time.h
>

19 
	~<°rög.h
>

21 
	~"ext2_fs.h
"

22 
	~"ext2fsP.h
"

24 
	$ã°_roŸ
(
a
, 
b
)

26 i‡(
a
 == 0)

29 i‡(
a
 == 1)

31 i‡(
a
 % 
b
)

33 
a
 =á / 
b
;

35 
	}
}

37 
	$ext2fs_bg_has_su≥r
(
ext2_fûsys
 
fs
, 
group_block
)

39 i‡(!(
fs
->
su≥r
->
s_„©uª_ro_com∑t
 &

40 
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
))

43 i‡(
	`ã°_roŸ
(
group_block
, 3) || (test_root(group_block, 5)) ||

44 
	`ã°_roŸ
(
group_block
, 7))

48 
	}
}

63 
	$ext2fs_su≥r_™d_bgd_loc
(
ext2_fûsys
 
fs
,

64 
dgΩ_t
 
group
,

65 
blk_t
 *
ªt_su≥r_blk
,

66 
blk_t
 *
ªt_ﬁd_desc_blk
,

67 
blk_t
 *
ªt_√w_desc_blk
,

68 *
ªt_mëa_bg
)

70 
blk_t
 
group_block
, 
su≥r_blk
 = 0, 
ﬁd_desc_blk
 = 0, 
√w_desc_blk
 = 0;

71 
mëa_bg
, 
mëa_bg_size
;

72 
blk_t
 
numblocks
, 
ﬁd_desc_blocks
;

73 
has_su≥r
;

75 
group_block
 = 
	`ext2fs_group_fú°_block
(
fs
, 
group
);

77 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 & 
EXT2_FEATURE_INCOMPAT_META_BG
)

78 
ﬁd_desc_blocks
 = 
fs
->
su≥r
->
s_fú°_mëa_bg
;

80 
ﬁd_desc_blocks
 =

81 
fs
->
desc_blocks
 + fs->
su≥r
->
s_ª£rved_gdt_blocks
;

83 i‡(
group
 =
fs
->
group_desc_cou¡
-1) {

84 
numblocks
 = (
fs
->
su≥r
->
s_blocks_cou¡
 -

85 
fs
->
su≥r
->
s_fú°_d©a_block
) %

86 
fs
->
su≥r
->
s_blocks_≥r_group
;

87 i‡(!
numblocks
)

88 
numblocks
 = 
fs
->
su≥r
->
s_blocks_≥r_group
;

90 
numblocks
 = 
fs
->
su≥r
->
s_blocks_≥r_group
;

92 
has_su≥r
 = 
	`ext2fs_bg_has_su≥r
(
fs
, 
group
);

94 i‡(
has_su≥r
) {

95 
su≥r_blk
 = 
group_block
;

96 
numblocks
--;

98 
mëa_bg_size
 = 
	`EXT2_DESC_PER_BLOCK
(
fs
->
su≥r
);

99 
mëa_bg
 = 
group
 / 
mëa_bg_size
;

101 i‡(!(
fs
->
su≥r
->
s_„©uª_öcom∑t
 & 
EXT2_FEATURE_INCOMPAT_META_BG
) ||

102 (
mëa_bg
 < 
fs
->
su≥r
->
s_fú°_mëa_bg
)) {

103 i‡(
has_su≥r
) {

104 
ﬁd_desc_blk
 = 
group_block
 + 1;

105 
numblocks
 -
ﬁd_desc_blocks
;

108 i‡(((
group
 % 
mëa_bg_size
) == 0) ||

109 ((
group
 % 
mëa_bg_size
) == 1) ||

110 ((
group
 % 
mëa_bg_size
) == (meta_bg_size-1))) {

111 i‡(
has_su≥r
)

112 
has_su≥r
 = 1;

113 
√w_desc_blk
 = 
group_block
 + 
has_su≥r
;

114 
numblocks
--;

118 
numblocks
 -2 + 
fs
->
öode_blocks_≥r_group
;

120 i‡(
ªt_su≥r_blk
)

121 *
ªt_su≥r_blk
 = 
su≥r_blk
;

122 i‡(
ªt_ﬁd_desc_blk
)

123 *
ªt_ﬁd_desc_blk
 = 
ﬁd_desc_blk
;

124 i‡(
ªt_√w_desc_blk
)

125 *
ªt_√w_desc_blk
 = 
√w_desc_blk
;

126 i‡(
ªt_mëa_bg
)

127 *
ªt_mëa_bg
 = 
mëa_bg
;

128  (
numblocks
);

129 
	}
}

142 
îrcode_t
 
	$wrôe_¥im¨y_su≥rblock
(
ext2_fûsys
 
fs
,

143 
ext2_su≥r_block
 *
su≥r
)

145 
__u16
 *
ﬁd_su≥r
, *
√w_su≥r
;

146 
check_idx
, 
wrôe_idx
, 
size
;

147 
îrcode_t
 
ªtvÆ
;

149 i‡(!
fs
->
io
->
m™agî
->
wrôe_byã
 || !fs->
‹ig_su≥r
) {

150 
	`io_ch™√l_£t_blksize
(
fs
->
io
, 
SUPERBLOCK_OFFSET
);

151 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 1, -
SUPERBLOCK_SIZE
,

152 
su≥r
);

153 
	`io_ch™√l_£t_blksize
(
fs
->
io
, fs->
blocksize
);

154  
ªtvÆ
;

157 
ﬁd_su≥r
 = (
__u16
 *Ë
fs
->
‹ig_su≥r
;

158 
√w_su≥r
 = (
__u16
 *Ë
su≥r
;

160 
check_idx
 = 0; check_idx < 
SUPERBLOCK_SIZE
/2; check_idx++) {

161 i‡(
ﬁd_su≥r
[
check_idx
] =
√w_su≥r
[check_idx])

163 
wrôe_idx
 = 
check_idx
;

164 
check_idx
++; check_idx < 
SUPERBLOCK_SIZE
/2; check_idx++)

165 i‡(
ﬁd_su≥r
[
check_idx
] =
√w_su≥r
[check_idx])

167 
size
 = 2 * (
check_idx
 - 
wrôe_idx
);

169 
	`¥ötf
("Writing %d bytes startingát %d\n",

170 
size
, 
wrôe_idx
*2);

172 
ªtvÆ
 = 
	`io_ch™√l_wrôe_byã
(
fs
->
io
,

173 
SUPERBLOCK_OFFSET
 + (2 * 
wrôe_idx
), 
size
,

174 
√w_su≥r
 + 
wrôe_idx
);

175 i‡(
ªtvÆ
)

176  
ªtvÆ
;

178 
	`mem˝y
(
fs
->
‹ig_su≥r
, 
su≥r
, 
SUPERBLOCK_SIZE
);

180 
	}
}

186 
	$ext2fs_upd©e_dy«mic_ªv
(
ext2_fûsys
 
fs
)

188 
ext2_su≥r_block
 *
sb
 = 
fs
->
su≥r
;

190 i‡(
sb
->
s_ªv_Àvñ
 > 
EXT2_GOOD_OLD_REV
)

193 
sb
->
s_ªv_Àvñ
 = 
EXT2_DYNAMIC_REV
;

194 
sb
->
s_fú°_öo
 = 
EXT2_GOOD_OLD_FIRST_INO
;

195 
sb
->
s_öode_size
 = 
EXT2_GOOD_OLD_INODE_SIZE
;

198 
	}
}

200 
îrcode_t
 
	$wrôe_backup_su≥r
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
,

201 
blk_t
 
group_block
,

202 
ext2_su≥r_block
 *
su≥r_shadow
)

204 
dgΩ_t
 
sgΩ
 = 
group
;

206 i‡(
sgΩ
 > ((1 << 16) - 1))

207 
sgΩ
 = (1 << 16) - 1;

208 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

209 
su≥r_shadow
->
s_block_group_ƒ
 = 
	`ext2fs_swab16
(
sgΩ
);

211 
fs
->
su≥r
->
s_block_group_ƒ
 = 
sgΩ
;

214  
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
group_block
, -
SUPERBLOCK_SIZE
,

215 
su≥r_shadow
);

216 
	}
}

219 
îrcode_t
 
	$ext2fs_Êush
(
ext2_fûsys
 
fs
)

221 
dgΩ_t
 
i
;

222 
îrcode_t
 
ªtvÆ
;

223 
fs_°©e
;

224 
__u32
 
„©uª_öcom∑t
;

225 
ext2_su≥r_block
 *
su≥r_shadow
 = 0;

226 
ext2_group_desc
 *
group_shadow
 = 0;

227 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

228 
ext2_group_desc
 *
s
, *
t
;

229 
dgΩ_t
 
j
;

231 *
group_±r
;

232 
ﬁd_desc_blocks
;

234 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

236 
fs_°©e
 = 
fs
->
su≥r
->
s_°©e
;

237 
„©uª_öcom∑t
 = 
fs
->
su≥r
->
s_„©uª_öcom∑t
;

239 
fs
->
su≥r
->
s_wtime
 = fs->
now
 ? fs->now : 
	`time
(
NULL
);

240 
fs
->
su≥r
->
s_block_group_ƒ
 = 0;

241 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

242 
ªtvÆ
 = 
EXT2_ET_NO_MEMORY
;

243 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
SUPERBLOCK_SIZE
, &
su≥r_shadow
);

244 i‡(
ªtvÆ
)

245 
îrout
;

246 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(
fs
->
desc_blocks
, fs->
blocksize
,

247 &
group_shadow
);

248 i‡(
ªtvÆ
)

249 
îrout
;

250 
	`mem£t
(
group_shadow
, 0, (
size_t
Ë
fs
->
blocksize
 *

251 
fs
->
desc_blocks
);

254 
j
=0, 
s
=
fs
->
group_desc
, 
t
=
group_shadow
;

255 
j
 < 
fs
->
group_desc_cou¡
; j++, 
t
++, 
s
++) {

256 *
t
 = *
s
;

257 
	`ext2fs_sw≠_group_desc
(
t
);

260 
su≥r_shadow
 = 
fs
->
su≥r
;

261 
group_shadow
 = 
fs
->
group_desc
;

269 
fs
->
su≥r
->
s_°©e
 &~
EXT2_VALID_FS
;

270 
fs
->
su≥r
->
s_„©uª_öcom∑t
 &~
EXT3_FEATURE_INCOMPAT_RECOVER
;

271 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

272 *
su≥r_shadow
 = *
fs
->
su≥r
;

273 
	`ext2fs_sw≠_su≥r
(
su≥r_shadow
);

280 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 &

281 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
)

282 
wrôe_¥im¨y_su≥rblock_⁄ly
;

288 
group_±r
 = (*Ë
group_shadow
;

289 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 & 
EXT2_FEATURE_INCOMPAT_META_BG
)

290 
ﬁd_desc_blocks
 = 
fs
->
su≥r
->
s_fú°_mëa_bg
;

292 
ﬁd_desc_blocks
 = 
fs
->
desc_blocks
;

294 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++) {

295 
blk_t
 
su≥r_blk
, 
ﬁd_desc_blk
, 
√w_desc_blk
;

296 
mëa_bg
;

298 
	`ext2fs_su≥r_™d_bgd_loc
(
fs
, 
i
, &
su≥r_blk
, &
ﬁd_desc_blk
,

299 &
√w_desc_blk
, &
mëa_bg
);

301 i‡(!(
fs
->
Êags
 & 
EXT2_FLAG_MASTER_SB_ONLY
Ë&&
i
 && 
su≥r_blk
) {

302 
ªtvÆ
 = 
	`wrôe_backup_su≥r
(
fs
, 
i
, 
su≥r_blk
,

303 
su≥r_shadow
);

304 i‡(
ªtvÆ
)

305 
îrout
;

307 i‡(
fs
->
Êags
 & 
EXT2_FLAG_SUPER_ONLY
)

309 i‡((
ﬁd_desc_blk
) &&

310 (!(
fs
->
Êags
 & 
EXT2_FLAG_MASTER_SB_ONLY
Ë|| (
i
 == 0))) {

311 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
,

312 
ﬁd_desc_blk
, 
ﬁd_desc_blocks
, 
group_±r
);

313 i‡(
ªtvÆ
)

314 
îrout
;

316 i‡(
√w_desc_blk
) {

317 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
√w_desc_blk
,

318 1, 
group_±r
 + (
mëa_bg
*
fs
->
blocksize
));

319 i‡(
ªtvÆ
)

320 
îrout
;

330 i‡(
fs
->
wrôe_bôm≠s
) {

331 
ªtvÆ
 = 
fs
->
	`wrôe_bôm≠s
(fs);

332 i‡(
ªtvÆ
)

333 
îrout
;

336 
wrôe_¥im¨y_su≥rblock_⁄ly
:

345 
fs
->
su≥r
->
s_block_group_ƒ
 = 0;

346 
fs
->
su≥r
->
s_°©e
 = 
fs_°©e
;

347 
fs
->
su≥r
->
s_„©uª_öcom∑t
 = 
„©uª_öcom∑t
;

348 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

349 *
su≥r_shadow
 = *
fs
->
su≥r
;

350 
	`ext2fs_sw≠_su≥r
(
su≥r_shadow
);

353 
ªtvÆ
 = 
	`io_ch™√l_Êush
(
fs
->
io
);

354 
ªtvÆ
 = 
	`wrôe_¥im¨y_su≥rblock
(
fs
, 
su≥r_shadow
);

355 i‡(
ªtvÆ
)

356 
îrout
;

358 
fs
->
Êags
 &~
EXT2_FLAG_DIRTY
;

360 
ªtvÆ
 = 
	`io_ch™√l_Êush
(
fs
->
io
);

361 
îrout
:

362 
fs
->
su≥r
->
s_°©e
 = 
fs_°©e
;

363 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

364 i‡(
su≥r_shadow
)

365 
	`ext2fs_‰ì_mem
(&
su≥r_shadow
);

366 i‡(
group_shadow
)

367 
	`ext2fs_‰ì_mem
(&
group_shadow
);

369  
ªtvÆ
;

370 
	}
}

372 
îrcode_t
 
	$ext2fs_˛o£
(
ext2_fûsys
 
fs
)

374 
îrcode_t
 
ªtvÆ
;

375 
mëa_blks
;

376 
io_°©s
 
°©s
 = 0;

378 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

380 i‡(
fs
->
wrôe_bôm≠s
) {

381 
ªtvÆ
 = 
fs
->
	`wrôe_bôm≠s
(fs);

382 i‡(
ªtvÆ
)

383  
ªtvÆ
;

385 i‡(
fs
->
su≥r
->
s_kbyãs_wrôãn
 &&

386 
fs
->
io
->
m™agî
->
gë_°©s
)

387 
fs
->
io
->
m™agî
->
	`gë_°©s
(fs->io, &
°©s
);

388 i‡(
°©s
 && sèts->
byãs_wrôãn
 && (
fs
->
Êags
 & 
EXT2_FLAG_RW
)) {

389 
fs
->
su≥r
->
s_kbyãs_wrôãn
 +
°©s
->
byãs_wrôãn
 >> 10;

390 
mëa_blks
 = 
fs
->
desc_blocks
 + 1;

391 i‡(!(
fs
->
Êags
 & 
EXT2_FLAG_SUPER_ONLY
))

392 
fs
->
su≥r
->
s_kbyãs_wrôãn
 +
mëa_blks
 /

393 (
fs
->
blocksize
 / 1024);

394 i‡((
fs
->
Êags
 & 
EXT2_FLAG_DIRTY
) == 0)

395 
fs
->
Êags
 |
EXT2_FLAG_SUPER_ONLY
 | 
EXT2_FLAG_DIRTY
;

397 i‡(
fs
->
Êags
 & 
EXT2_FLAG_DIRTY
) {

398 
ªtvÆ
 = 
	`ext2fs_Êush
(
fs
);

399 i‡(
ªtvÆ
)

400  
ªtvÆ
;

402 
	`ext2fs_‰ì
(
fs
);

404 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/crc16.c

8 #i‡
HAVE_SYS_TYPES_H


9 
	~<sys/ty≥s.h
>

11 
	~<ext2fs/ext2_ty≥s.h
>

13 
	~"¸c16.h
"

16 
__u16
 c⁄° 
	g¸c16_èbÀ
[256] = {

59 
¸c16_t
 
	$ext2fs_¸c16
(
¸c16_t
 
¸c
, c⁄° *
buf„r
, 
Àn
)

61 c⁄° *
˝
 = 
buf„r
;

63 
Àn
--)

70 
¸c
 = (((crc >> 8) & 0xffU) ^

71 
¸c16_èbÀ
[(
¸c
 ^ *
˝
++) & 0xffU]) & 0x0000ffffU;

72  
¸c
;

73 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/crc16.h

15 #i‚de‡
__CRC16_H


16 
	#__CRC16_H


	)

22 
	t¸c16_t
;

24 
¸c16_t
 
ext2fs_¸c16
(¸c16_à
¸c
, c⁄° *
buf„r
, 
Àn
);

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/csum.c

13 
	~<c⁄fig.h
>

15 #i‡
HAVE_SYS_TYPES_H


16 
	~<sys/ty≥s.h
>

19 
	~"ext2_fs.h
"

20 
	~"ext2fs.h
"

21 
	~"¸c16.h
"

22 
	~<as£π.h
>

24 #i‚de‡
off£tof


25 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

28 #ifde‡
DEBUG


29 
	#STATIC


	)

31 
	#STATIC
 

	)

34 
STATIC
 
__u16
 
	$ext2fs_group_desc_csum
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
)

36 
__u16
 
¸c
 = 0;

37 
ext2_group_desc
 *
desc
;

39 
desc
 = &
fs
->
group_desc
[
group
];

41 i‡(
fs
->
su≥r
->
s_„©uª_ro_com∑t
 & 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
) {

42 
off£t
 = 
	`off£tof
(
ext2_group_desc
, 
bg_checksum
);

44 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

45 
ext2_group_desc
 
swabdesc
 = *
desc
;

48 
	`ext2fs_sw≠_group_desc
(&
swabdesc
);

49 
desc
 = &
swabdesc
;

51 
group
 = 
	`ext2fs_swab32
(group);

53 
¸c
 = 
	`ext2fs_¸c16
(~0, 
fs
->
su≥r
->
s_uuid
,

54 (
fs
->
su≥r
->
s_uuid
));

55 
¸c
 = 
	`ext2fs_¸c16
(¸c, &
group
, (group));

56 
¸c
 = 
	`ext2fs_¸c16
(¸c, 
desc
, 
off£t
);

57 
off£t
 +(
desc
->
bg_checksum
);

58 
	`as£π
(
off£t
 =(*
desc
));

60 i‡(
off£t
 < 
fs
->
su≥r
->
s_desc_size
) {

61 
¸c
 = 
	`ext2fs_¸c16
(¸c, (*)
desc
 + 
off£t
,

62 
fs
->
su≥r
->
s_desc_size
 - 
off£t
);

66  
¸c
;

67 
	}
}

69 
	$ext2fs_group_desc_csum_vîify
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
)

71 i‡(
	`EXT2_HAS_RO_COMPAT_FEATURE
(
fs
->
su≥r
,

72 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
) &&

73 (
fs
->
group_desc
[
group
].
bg_checksum
 !=

74 
	`ext2fs_group_desc_csum
(
fs
, 
group
)))

78 
	}
}

80 
	$ext2fs_group_desc_csum_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
)

82 i‡(
	`EXT2_HAS_RO_COMPAT_FEATURE
(
fs
->
su≥r
,

83 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
))

84 
fs
->
group_desc
[
group
].
bg_checksum
 =

85 
	`ext2fs_group_desc_csum
(
fs
, 
group
);

86 
	}
}

88 
__u32
 
	$föd_œ°_öode_ögΩ
(
ext2fs_öode_bôm≠
 
bôm≠
,

89 
__u32
 
öodes_≥r_gΩ
, 
dgΩ_t
 
gΩ_no
)

91 
ext2_öo_t
 
i
, 
°¨t_öo
, 
íd_öo
;

93 
°¨t_öo
 = 
gΩ_no
 * 
öodes_≥r_gΩ
 + 1;

94 
íd_öo
 = 
°¨t_öo
 + 
öodes_≥r_gΩ
 - 1;

96 
i
 = 
íd_öo
; i >
°¨t_öo
; i--) {

97 i‡(
	`ext2fs_Á°_ã°_öode_bôm≠
(
bôm≠
, 
i
))

98  
i
 - 
°¨t_öo
 + 1;

100  
öodes_≥r_gΩ
;

101 
	}
}

105 
îrcode_t
 
	$ext2fs_£t_gdt_csum
(
ext2_fûsys
 
fs
)

107 
ext2_su≥r_block
 *
sb
 = 
fs
->
su≥r
;

108 
ext2_group_desc
 *
bg
 = 
fs
->
group_desc
;

109 
dúty
 = 0;

110 
dgΩ_t
 
i
;

112 i‡(!
fs
->
öode_m≠
)

113  
EXT2_ET_NO_INODE_BITMAP
;

115 i‡(!
	`EXT2_HAS_RO_COMPAT_FEATURE
(
fs
->
su≥r
,

116 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
))

119 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++, 
bg
++) {

120 
ﬁd_csum
 = 
bg
->
bg_checksum
;

121 
ﬁd_unu£d
 = 
bg
->
bg_ôabÀ_unu£d
;

122 
ﬁd_Êags
 = 
bg
->
bg_Êags
;

124 i‡(
bg
->
bg_‰ì_öodes_cou¡
 =
sb
->
s_öodes_≥r_group
) {

125 
bg
->
bg_Êags
 |
EXT2_BG_INODE_UNINIT
;

126 
bg
->
bg_ôabÀ_unu£d
 = 
sb
->
s_öodes_≥r_group
;

128 
bg
->
bg_Êags
 &~
EXT2_BG_INODE_UNINIT
;

129 
bg
->
bg_ôabÀ_unu£d
 = 
sb
->
s_öodes_≥r_group
 -

130 
	`föd_œ°_öode_ögΩ
(
fs
->
öode_m≠
,

131 
sb
->
s_öodes_≥r_group
,
i
);

134 
	`ext2fs_group_desc_csum_£t
(
fs
, 
i
);

135 i‡(
ﬁd_Êags
 !
bg
->
bg_Êags
)

136 
dúty
 = 1;

137 i‡(
ﬁd_unu£d
 !
bg
->
bg_ôabÀ_unu£d
)

138 
dúty
 = 1;

139 i‡(
ﬁd_csum
 !
bg
->
bg_checksum
)

140 
dúty
 = 1;

142 i‡(
dúty
)

143 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

145 
	}
}

147 #ifde‡
DEBUG


148 
	$¥öt_csum
(c⁄° *
msg
, 
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
)

150 
__u16
 
¸c1
, 
¸c2
, 
¸c3
;

151 
dgΩ_t
 
swabgroup
;

152 
ext2_group_desc
 *
desc
 = &
fs
->
group_desc
[
group
];

153 
ext2_su≥r_block
 *
sb
 = 
fs
->
su≥r
;

155 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

156 
ext2_group_desc
 
swabdesc
 = 
fs
->
group_desc
[
group
];

159 
	`ext2fs_sw≠_group_desc
(&
swabdesc
);

160 
desc
 = &
swabdesc
;

162 
swabgroup
 = 
	`ext2fs_swab32
(
group
);

164 
swabgroup
 = 
group
;

167 
¸c1
 = 
	`ext2fs_¸c16
(~0, 
sb
->
s_uuid
, (
fs
->
su≥r
->s_uuid));

168 
¸c2
 = 
	`ext2fs_¸c16
(
¸c1
, &
swabgroup
, (swabgroup));

169 
¸c3
 = 
	`ext2fs_¸c16
(
¸c2
, 
desc
,

170 
	`off£tof
(
ext2_group_desc
, 
bg_checksum
));

171 
	`¥ötf
("%s: UUID %016Lx%016Lx(%04x), grp %u(%04x): %04x=%04x\n",

172 
msg
, *(*)&
sb
->
s_uuid
, *(*)&sb->s_uuid[8],

173 
¸c1
, 
group
, 
¸c2
, 
¸c3
, 
	`ext2fs_group_desc_csum
(
fs
, group));

174 
	}
}

176 
	gsb_uuid
[16] = { 0x4f, 0x25, 0xe8, 0xcf, 0xe7, 0x97, 0x48, 0x23,

179 
	$maö
(
¨gc
, **
¨gv
)

181 
ext2_su≥r_block
 
∑øm
;

182 
îrcode_t
 
ªtvÆ
;

183 
ext2_fûsys
 
fs
;

184 
i
;

185 
__u16
 
csum1
, 
csum2
, 
csum_known
 = 0xd3a4;

187 
	`mem£t
(&
∑øm
, 0, (param));

188 
∑øm
.
s_blocks_cou¡
 = 32768;

190 
ªtvÆ
 = 
	`ext2fs_öôülize
("ã° fs", 0, &
∑øm
,

191 
ã°_io_m™agî
, &
fs
);

192 i‡(
ªtvÆ
) {

193 
	`com_îr
("£tup", 
ªtvÆ
,

195 
	`exô
(1);

197 
	`mem˝y
(
fs
->
su≥r
->
s_uuid
, 
sb_uuid
, 16);

198 
fs
->
su≥r
->
s_„©uª_ro_com∑t
 = 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
;

200 
i
=0; i < 
fs
->
group_desc_cou¡
; i++) {

201 
fs
->
group_desc
[
i
].
bg_block_bôm≠
 = 124;

202 
fs
->
group_desc
[
i
].
bg_öode_bôm≠
 = 125;

203 
fs
->
group_desc
[
i
].
bg_öode_èbÀ
 = 126;

204 
fs
->
group_desc
[
i
].
bg_‰ì_blocks_cou¡
 = 31119;

205 
fs
->
group_desc
[
i
].
bg_‰ì_öodes_cou¡
 = 15701;

206 
fs
->
group_desc
[
i
].
bg_u£d_dús_cou¡
 = 2;

207 
fs
->
group_desc
[
i
].
bg_Êags
 = 0;

210 
csum1
 = 
	`ext2fs_group_desc_csum
(
fs
, 0);

211 
	`¥öt_csum
("csum0000", 
fs
, 0);

213 i‡(
csum1
 !
csum_known
) {

214 
	`¥ötf
("checksum f‹ grou∞0 should bê%04x\n", 
csum_known
);

215 
	`exô
(1);

217 
csum2
 = 
	`ext2fs_group_desc_csum
(
fs
, 1);

218 
	`¥öt_csum
("csum0001", 
fs
, 1);

219 i‡(
csum1
 =
csum2
) {

220 
	`¥ötf
("checksums for different groups shouldn't match\n");

221 
	`exô
(1);

223 
csum2
 = 
	`ext2fs_group_desc_csum
(
fs
, 2);

224 
	`¥öt_csum
("csumffff", 
fs
, 2);

225 i‡(
csum1
 =
csum2
) {

226 
	`¥ötf
("checksums for different groups shouldn't match\n");

227 
	`exô
(1);

229 
fs
->
group_desc
[0].
bg_checksum
 = 
csum1
;

230 
csum2
 = 
	`ext2fs_group_desc_csum
(
fs
, 0);

231 
	`¥öt_csum
("csum_£t", 
fs
, 0);

232 i‡(
csum1
 !
csum2
) {

233 
	`¥ötf
("checksums shouldÇot depend on checksum field\n");

234 
	`exô
(1);

236 i‡(!
	`ext2fs_group_desc_csum_vîify
(
fs
, 0)) {

237 
	`¥ötf
("checksums should verifyágainst gd_checksum\n");

238 
	`exô
(1);

240 
	`mem£t
(
fs
->
su≥r
->
s_uuid
, 0x30, (fs->super->s_uuid));

241 
	`¥öt_csum
("√w_uuid", 
fs
, 0);

242 i‡(
	`ext2fs_group_desc_csum_vîify
(
fs
, 0) != 0) {

243 
	`¥ötf
("checksums for different filesystems shouldn't match\n");

244 
	`exô
(1);

246 
csum1
 = 
fs
->
group_desc
[0].
bg_checksum
 = 
	`ext2fs_group_desc_csum
(fs, 0);

247 
	`¥öt_csum
("csum_√w", 
fs
, 0);

248 
fs
->
group_desc
[0].
bg_‰ì_blocks_cou¡
 = 1;

249 
csum2
 = 
	`ext2fs_group_desc_csum
(
fs
, 0);

250 
	`¥öt_csum
("csum_blk", 
fs
, 0);

251 i‡(
csum1
 =
csum2
) {

252 
	`¥ötf
("checksums for different data shouldn't match\n");

253 
	`exô
(1);

257 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/dblist.c

13 
	~<°dio.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<°rög.h
>

18 
	~<time.h
>

20 
	~"ext2_fs.h
"

21 
	~"ext2fsP.h
"

23 
EXT2_QSORT_TYPE
 
dú_block_cmp
(c⁄° *
a
, c⁄° *
b
);

30 
îrcode_t
 
	$ext2fs_gë_num_dús
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 *
ªt_num_dús
)

32 
dgΩ_t
 
i
;

33 
ext2_öo_t
 
num_dús
, 
max_dús
;

35 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

37 
num_dús
 = 0;

38 
max_dús
 = 
fs
->
su≥r
->
s_öodes_≥r_group
;

39 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++) {

40 i‡(
fs
->
group_desc
[
i
].
bg_u£d_dús_cou¡
 > 
max_dús
)

41 
num_dús
 +
max_dús
 / 8;

43 
num_dús
 +
fs
->
group_desc
[
i
].
bg_u£d_dús_cou¡
;

45 i‡(
num_dús
 > 
fs
->
su≥r
->
s_öodes_cou¡
)

46 
num_dús
 = 
fs
->
su≥r
->
s_öodes_cou¡
;

48 *
ªt_num_dús
 = 
num_dús
;

51 
	}
}

57 
îrcode_t
 
	$make_dbli°
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
size
,Éxt2_öo_à
cou¡
,

58 
ext2_db_íåy
 *
li°
,

59 
ext2_dbli°
 *
ªt_dbli°
)

61 
ext2_dbli°
 
dbli°
;

62 
îrcode_t
 
ªtvÆ
;

63 
size_t
 
Àn
;

65 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

67 i‡((
ªt_dbli°
 =0Ë&& 
fs
->
dbli°
 &&

68 (
fs
->
dbli°
->
magic
 =
EXT2_ET_MAGIC_DBLIST
))

71 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ext2_°ru˘_dbli°
), &
dbli°
);

72 i‡(
ªtvÆ
)

73  
ªtvÆ
;

74 
	`mem£t
(
dbli°
, 0, (
ext2_°ru˘_dbli°
));

76 
dbli°
->
magic
 = 
EXT2_ET_MAGIC_DBLIST
;

77 
dbli°
->
fs
 = fs;

78 i‡(
size
)

79 
dbli°
->
size
 = size;

81 
ªtvÆ
 = 
	`ext2fs_gë_num_dús
(
fs
, &
dbli°
->
size
);

82 i‡(
ªtvÆ
)

83 
˛ónup
;

84 
dbli°
->
size
 = (dblist->size * 2) + 12;

86 
Àn
 = (
size_t
Ë(
ext2_db_íåy
Ë* 
dbli°
->
size
;

87 
dbli°
->
cou¡
 = count;

88 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(
dbli°
->
size
, (
ext2_db_íåy
),

89 &
dbli°
->
li°
);

90 i‡(
ªtvÆ
)

91 
˛ónup
;

93 i‡(
li°
)

94 
	`mem˝y
(
dbli°
->
li°
,Üi°, 
Àn
);

96 
	`mem£t
(
dbli°
->
li°
, 0, 
Àn
);

97 i‡(
ªt_dbli°
)

98 *
ªt_dbli°
 = 
dbli°
;

100 
fs
->
dbli°
 = dblist;

102 
˛ónup
:

103 i‡(
dbli°
)

104 
	`ext2fs_‰ì_mem
(&
dbli°
);

105  
ªtvÆ
;

106 
	}
}

111 
îrcode_t
 
	$ext2fs_öô_dbli°
(
ext2_fûsys
 
fs
, 
ext2_dbli°
 *
ªt_dbli°
)

113 
ext2_dbli°
 
dbli°
;

114 
îrcode_t
 
ªtvÆ
;

116 
ªtvÆ
 = 
	`make_dbli°
(
fs
, 0, 0, 0, &
dbli°
);

117 i‡(
ªtvÆ
)

118  
ªtvÆ
;

120 
dbli°
->
s‹ãd
 = 1;

121 i‡(
ªt_dbli°
)

122 *
ªt_dbli°
 = 
dbli°
;

124 
fs
->
dbli°
 = dblist;

127 
	}
}

132 
îrcode_t
 
	$ext2fs_c›y_dbli°
(
ext2_dbli°
 
§c
,Éxt2_dbli° *
de°
)

134 
ext2_dbli°
 
dbli°
;

135 
îrcode_t
 
ªtvÆ
;

137 
ªtvÆ
 = 
	`make_dbli°
(
§c
->
fs
, src->
size
, src->
cou¡
, src->
li°
,

138 &
dbli°
);

139 i‡(
ªtvÆ
)

140  
ªtvÆ
;

141 
dbli°
->
s‹ãd
 = 
§c
->sorted;

142 *
de°
 = 
dbli°
;

144 
	}
}

156 
îrcode_t
 
	$ext2fs_add_dú_block
(
ext2_dbli°
 
dbli°
, 
ext2_öo_t
 
öo
, 
blk_t
 
blk
,

157 
block˙t
)

159 
ext2_db_íåy
 *
√w_íåy
;

160 
îrcode_t
 
ªtvÆ
;

161 
ﬁd_size
;

163 
	`EXT2_CHECK_MAGIC
(
dbli°
, 
EXT2_ET_MAGIC_DBLIST
);

165 i‡(
dbli°
->
cou¡
 >dbli°->
size
) {

166 
ﬁd_size
 = 
dbli°
->
size
 * (
ext2_db_íåy
);

167 
dbli°
->
size
 += dblist->size > 200 ? dblist->size / 2 : 100;

168 
ªtvÆ
 = 
	`ext2fs_ªsize_mem
(
ﬁd_size
, (
size_t
Ë
dbli°
->
size
 *

169 (
ext2_db_íåy
),

170 &
dbli°
->
li°
);

171 i‡(
ªtvÆ
) {

172 
dbli°
->
size
 -= 100;

173  
ªtvÆ
;

176 
√w_íåy
 = 
dbli°
->
li°
 + ( (Ëdbli°->
cou¡
++);

177 
√w_íåy
->
blk
 = blk;

178 
√w_íåy
->
öo
 = ino;

179 
√w_íåy
->
block˙t
 = blockcnt;

181 
dbli°
->
s‹ãd
 = 0;

184 
	}
}

189 
îrcode_t
 
	$ext2fs_£t_dú_block
(
ext2_dbli°
 
dbli°
, 
ext2_öo_t
 
öo
, 
blk_t
 
blk
,

190 
block˙t
)

192 
dgΩ_t
 
i
;

194 
	`EXT2_CHECK_MAGIC
(
dbli°
, 
EXT2_ET_MAGIC_DBLIST
);

196 
i
=0; i < 
dbli°
->
cou¡
; i++) {

197 i‡((
dbli°
->
li°
[
i
].
öo
 != ino) ||

198 (
dbli°
->
li°
[
i
].
block˙t
 != blockcnt))

200 
dbli°
->
li°
[
i
].
blk
 = blk;

201 
dbli°
->
s‹ãd
 = 0;

204  
EXT2_ET_DB_NOT_FOUND
;

205 
	}
}

207 
ext2fs_dbli°_s‹t
(
ext2_dbli°
 
dbli°
,

208 
	$EXT2_QSORT_TYPE
 (*
s‹tfunc
)(const *,

211 i‡(!
s‹tfunc
)

212 
s‹tfunc
 = 
dú_block_cmp
;

213 
	`qs‹t
(
dbli°
->
li°
, (
size_t
Ëdbli°->
cou¡
,

214 (
ext2_db_íåy
), 
s‹tfunc
);

215 
dbli°
->
s‹ãd
 = 1;

216 
	}
}

221 
îrcode_t
 
ext2fs_dbli°_ôî©e
(
ext2_dbli°
 
dbli°
,

222 (*
func
)(
ext2_fûsys
 
fs
,

223 
ext2_db_íåy
 *
db_öfo
,

224 *
¥iv_d©a
),

225 *
¥iv_d©a
)

227 
ext2_öo_t
 
i
;

228 
ªt
;

230 
	`EXT2_CHECK_MAGIC
(
dbli°
, 
EXT2_ET_MAGIC_DBLIST
);

232 i‡(!
dbli°
->
s‹ãd
)

233 
	`ext2fs_dbli°_s‹t
(
dbli°
, 0);

234 
i
=0; i < 
dbli°
->
cou¡
; i++) {

235 
ªt
 = (*
func
)(
dbli°
->
fs
, &dbli°->
li°
[()
i
], 
¥iv_d©a
);

236 i‡(
ªt
 & 
DBLIST_ABORT
)

240 
	}
}

242 
EXT2_QSORT_TYPE
 
	$dú_block_cmp
(c⁄° *
a
, c⁄° *
b
)

244 c⁄° 
ext2_db_íåy
 *
db_a
 =

245 (c⁄° 
ext2_db_íåy
 *Ë
a
;

246 c⁄° 
ext2_db_íåy
 *
db_b
 =

247 (c⁄° 
ext2_db_íåy
 *Ë
b
;

249 i‡(
db_a
->
blk
 !
db_b
->blk)

250  (Ë(
db_a
->
blk
 - 
db_b
->blk);

252 i‡(
db_a
->
öo
 !
db_b
->ino)

253  (Ë(
db_a
->
öo
 - 
db_b
->ino);

255  (Ë(
db_a
->
block˙t
 - 
db_b
->blockcnt);

256 
	}
}

258 
	$ext2fs_dbli°_cou¡
(
ext2_dbli°
 
dbli°
)

260  (Ë
dbli°
->
cou¡
;

261 
	}
}

263 
îrcode_t
 
	$ext2fs_dbli°_gë_œ°
(
ext2_dbli°
 
dbli°
,

264 
ext2_db_íåy
 **
íåy
)

266 
	`EXT2_CHECK_MAGIC
(
dbli°
, 
EXT2_ET_MAGIC_DBLIST
);

268 i‡(
dbli°
->
cou¡
 == 0)

269  
EXT2_ET_DBLIST_EMPTY
;

271 i‡(
íåy
)

272 *
íåy
 = 
dbli°
->
li°
 + ( (Ëdbli°->
cou¡
-1);

274 
	}
}

276 
îrcode_t
 
	$ext2fs_dbli°_dr›_œ°
(
ext2_dbli°
 
dbli°
)

278 
	`EXT2_CHECK_MAGIC
(
dbli°
, 
EXT2_ET_MAGIC_DBLIST
);

280 i‡(
dbli°
->
cou¡
 == 0)

281  
EXT2_ET_DBLIST_EMPTY
;

283 
dbli°
->
cou¡
--;

285 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/dblist_dir.c

13 
	~<°dio.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<°rög.h
>

18 
	~<time.h
>

20 
	~"ext2_fs.h
"

21 
	~"ext2fsP.h
"

23 
db_dú_¥oc
(
ext2_fûsys
 
fs
, 
ext2_db_íåy
 *
db_öfo
,

24 *
¥iv_d©a
);

26 
îrcode_t
 
ext2fs_dbli°_dú_ôî©e
(
ext2_dbli°
 
dbli°
,

27 
Êags
,

28 *
block_buf
,

29 (*
func
)(
ext2_öo_t
 
dú
,

30 
íåy
,

31 
ext2_dú_íåy
 *
dúít
,

32 
off£t
,

33 
blocksize
,

34 *
buf
,

35 *
¥iv_d©a
),

36 *
¥iv_d©a
)

38 
îrcode_t
 
ªtvÆ
;

39 
dú_c⁄ãxt
 
˘x
;

41 
	`EXT2_CHECK_MAGIC
(
dbli°
, 
EXT2_ET_MAGIC_DBLIST
);

43 
˘x
.
dú
 = 0;

44 
˘x
.
Êags
 = flags;

45 i‡(
block_buf
)

46 
˘x
.
buf
 = 
block_buf
;

48 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
dbli°
->
fs
->
blocksize
, &
˘x
.
buf
);

49 i‡(
ªtvÆ
)

50  
ªtvÆ
;

52 
˘x
.
func
 = func;

53 
˘x
.
¥iv_d©a
 =Öriv_data;

54 
˘x
.
îrcode
 = 0;

56 
ªtvÆ
 = 
	`ext2fs_dbli°_ôî©e
(
dbli°
, 
db_dú_¥oc
, &
˘x
);

58 i‡(!
block_buf
)

59 
	`ext2fs_‰ì_mem
(&
˘x
.
buf
);

60 i‡(
ªtvÆ
)

61  
ªtvÆ
;

62  
˘x
.
îrcode
;

63 
	}
}

65 
	$db_dú_¥oc
(
ext2_fûsys
 
fs
, 
ext2_db_íåy
 *
db_öfo
,

66 *
¥iv_d©a
)

68 
dú_c⁄ãxt
 *
˘x
;

69 
ªt
;

71 
˘x
 = (
dú_c⁄ãxt
 *Ë
¥iv_d©a
;

72 
˘x
->
dú
 = 
db_öfo
->
öo
;

73 
˘x
->
îrcode
 = 0;

75 
ªt
 = 
	`ext2fs_¥o˚ss_dú_block
(
fs
, &
db_öfo
->
blk
,

76 
db_öfo
->
block˙t
, 0, 0, 
¥iv_d©a
);

77 i‡((
ªt
 & 
BLOCK_ABORT
Ë&& !
˘x
->
îrcode
)

78  
DBLIST_ABORT
;

80 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/dir_iterate.c

12 
	~<c⁄fig.h
>

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 #i‡
HAVE_UNISTD_H


17 
	~<uni°d.h
>

19 #i‡
HAVE_ERRNO_H


20 
	~<î∫o.h
>

23 
	~"ext2_fs.h
"

24 
	~"ext2fsP.h
"

26 
	#EXT4_MAX_REC_LEN
 ((1<<16)-1)

	)

28 
îrcode_t
 
	$ext2fs_gë_ªc_Àn
(
ext2_fûsys
 
fs
,

29 
ext2_dú_íåy
 *
dúít
,

30 *
ªc_Àn
)

32 
Àn
 = 
dúít
->
ªc_Àn
;

34 i‡(
Àn
 =
EXT4_MAX_REC_LEN
 ||Üen == 0)

35 *
ªc_Àn
 = 
fs
->
blocksize
;

37 *
ªc_Àn
 = (
Àn
 & 65532) | ((len & 3) << 16);

39 
	}
}

41 
îrcode_t
 
	$ext2fs_£t_ªc_Àn
(
ext2_fûsys
 
fs
,

42 
Àn
,

43 
ext2_dú_íåy
 *
dúít
)

45 i‡((
Àn
 > 
fs
->
blocksize
) || (fs->blocksize > (1 << 18)) || (len & 3))

46  
EINVAL
;

47 i‡(
Àn
 < 65536) {

48 
dúít
->
ªc_Àn
 = 
Àn
;

51 i‡(
Àn
 =
fs
->
blocksize
) {

52 i‡(
fs
->
blocksize
 == 65536)

53 
dúít
->
ªc_Àn
 = 
EXT4_MAX_REC_LEN
;

55 
dúít
->
ªc_Àn
 = 0;

57 
dúít
->
ªc_Àn
 = (
Àn
 & 65532) | ((len >> 16) & 3);

59 
	}
}

69 
	$ext2fs_vÆid©e_íåy
(
ext2_fûsys
 
fs
, *
buf
,

70 
off£t
,

71 
föÆ_off£t
)

73 
ext2_dú_íåy
 *
dúít
;

74 
ªc_Àn
;

75 
	#DIRENT_MIN_LENGTH
 12

	)

77 (
off£t
 < 
föÆ_off£t
) &&

78 (
off£t
 <
fs
->
blocksize
 - 
DIRENT_MIN_LENGTH
)) {

79 
dúít
 = (
ext2_dú_íåy
 *)(
buf
 + 
off£t
);

80 i‡(
	`ext2fs_gë_ªc_Àn
(
fs
, 
dúít
, &
ªc_Àn
))

82 
off£t
 +
ªc_Àn
;

83 i‡((
ªc_Àn
 < 8) ||

84 ((
ªc_Àn
 % 4) != 0) ||

85 ((((Ë
dúít
->
«me_Àn
 & 0xFF)+8Ë> 
ªc_Àn
))

88  (
off£t
 =
föÆ_off£t
);

89 
	}
}

91 
îrcode_t
 
ext2fs_dú_ôî©e2
(
ext2_fûsys
 
fs
,

92 
ext2_öo_t
 
dú
,

93 
Êags
,

94 *
block_buf
,

95 (*
func
)(
ext2_öo_t
 
dú
,

96 
íåy
,

97 
ext2_dú_íåy
 *
dúít
,

98 
off£t
,

99 
blocksize
,

100 *
buf
,

101 *
¥iv_d©a
),

102 *
¥iv_d©a
)

104 
dú_c⁄ãxt
 
˘x
;

105 
îrcode_t
 
ªtvÆ
;

107 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

109 
ªtvÆ
 = 
	`ext2fs_check_dúe˘‹y
(
fs
, 
dú
);

110 i‡(
ªtvÆ
)

111  
ªtvÆ
;

113 
˘x
.
dú
 = dir;

114 
˘x
.
Êags
 = flags;

115 i‡(
block_buf
)

116 
˘x
.
buf
 = 
block_buf
;

118 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
˘x
.
buf
);

119 i‡(
ªtvÆ
)

120  
ªtvÆ
;

122 
˘x
.
func
 = func;

123 
˘x
.
¥iv_d©a
 =Öriv_data;

124 
˘x
.
îrcode
 = 0;

125 
ªtvÆ
 = 
	`ext2fs_block_ôî©e2
(
fs
, 
dú
, 
BLOCK_FLAG_READ_ONLY
, 0,

126 
ext2fs_¥o˚ss_dú_block
, &
˘x
);

127 i‡(!
block_buf
)

128 
	`ext2fs_‰ì_mem
(&
˘x
.
buf
);

129 i‡(
ªtvÆ
)

130  
ªtvÆ
;

131  
˘x
.
îrcode
;

132 
	}
}

134 
	sxœã
 {

135 (*
	mfunc
)(
ext2_dú_íåy
 *
	mdúít
,

136 
	moff£t
,

137 
	mblocksize
,

138 *
	mbuf
,

139 *
	m¥iv_d©a
);

140 *
	mªÆ_¥iv©e
;

143 
xœã_func
(
ext2_öo_t
 
dú
 
EXT2FS_ATTR
((
unu£d
)),

144 
íåy
 
EXT2FS_ATTR
((
unu£d
)),

145 
ext2_dú_íåy
 *
dúít
, 
off£t
,

146 
blocksize
, *
buf
, *
¥iv_d©a
)

148 
xœã
 *
	gxl
 = (xœã *Ë
¥iv_d©a
;

150  (*
	gxl
->
	gfunc
)(
	gdúít
, 
	goff£t
, 
	gblocksize
, 
	gbuf
, xl->
	gªÆ_¥iv©e
);

153 
îrcode_t
 
ext2fs_dú_ôî©e
(
ext2_fûsys
 
fs
,

154 
ext2_öo_t
 
dú
,

155 
Êags
,

156 *
block_buf
,

157 (*
func
)(
ext2_dú_íåy
 *
dúít
,

158 
off£t
,

159 
blocksize
,

160 *
buf
,

161 *
¥iv_d©a
),

162 *
¥iv_d©a
)

164 
xœã
 
xl
;

166 
xl
.
ªÆ_¥iv©e
 = 
¥iv_d©a
;

167 
xl
.
func
 = func;

169  
	`ext2fs_dú_ôî©e2
(
fs
, 
dú
, 
Êags
, 
block_buf
,

170 
xœã_func
, &
xl
);

171 
	}
}

178 
ext2fs_¥o˚ss_dú_block
(
ext2_fûsys
 
fs
,

179 
blk_t
 *
blockƒ
,

180 
e2_blk˙t_t
 
block˙t
,

181 
blk_t
 
ªf_block
 
EXT2FS_ATTR
((
unu£d
)),

182 
ªf_off£t
 
EXT2FS_ATTR
((
unu£d
)),

183 *
¥iv_d©a
)

185 
dú_c⁄ãxt
 *
˘x
 = (dú_c⁄ãxà*Ë
¥iv_d©a
;

186 
off£t
 = 0;

187 
√xt_ªÆ_íåy
 = 0;

188 
ªt
 = 0;

189 
ch™ged
 = 0;

190 
do_ab‹t
 = 0;

191 
ªc_Àn
, 
size
;

192 
íåy
;

193 
ext2_dú_íåy
 *
dúít
;

195 i‡(
block˙t
 < 0)

198 
íåy
 = 
block˙t
 ? 
DIRENT_OTHER_FILE
 : 
DIRENT_DOT_FILE
;

200 
˘x
->
îrcode
 = 
ext2fs_ªad_dú_block
(
fs
, *
blockƒ
, ctx->
buf
);

201 i‡(
˘x
->
îrcode
)

202  
BLOCK_ABORT
;

204 
off£t
 < 
fs
->
blocksize
) {

205 
dúít
 = (
ext2_dú_íåy
 *Ë(
˘x
->
buf
 + 
off£t
);

206 i‡(
ext2fs_gë_ªc_Àn
(
fs
, 
dúít
, &
ªc_Àn
))

207  
BLOCK_ABORT
;

208 i‡(((
off£t
 + 
ªc_Àn
Ë> 
fs
->
blocksize
) ||

209 (
ªc_Àn
 < 8) ||

210 ((
ªc_Àn
 % 4) != 0) ||

211 ((((Ë
dúít
->
«me_Àn
 & 0xFF)+8Ë> 
ªc_Àn
)) {

212 
˘x
->
îrcode
 = 
EXT2_ET_DIR_CORRUPTED
;

213  
BLOCK_ABORT
;

215 i‡(!
dúít
->
öode
 &&

216 !(
˘x
->
Êags
 & 
DIRENT_FLAG_INCLUDE_EMPTY
))

217 
√xt
;

219 
ªt
 = (
˘x
->
func
)(˘x->
dú
,

220 (
√xt_ªÆ_íåy
 > 
off£t
) ?

221 
DIRENT_DELETED_FILE
 : 
íåy
,

222 
dúít
, 
off£t
,

223 
fs
->
blocksize
, 
˘x
->
buf
,

224 
˘x
->
¥iv_d©a
);

225 i‡(
íåy
 < 
DIRENT_OTHER_FILE
)

226 
íåy
++;

228 i‡(
ªt
 & 
DIRENT_CHANGED
) {

229 i‡(
ext2fs_gë_ªc_Àn
(
fs
, 
dúít
, &
ªc_Àn
))

230  
BLOCK_ABORT
;

231 
ch™ged
++;

233 i‡(
ªt
 & 
DIRENT_ABORT
) {

234 
do_ab‹t
++;

237 
√xt
:

238 i‡(
√xt_ªÆ_íåy
 =
off£t
)

239 
√xt_ªÆ_íåy
 +
ªc_Àn
;

241 i‡(
˘x
->
Êags
 & 
DIRENT_FLAG_INCLUDE_REMOVED
) {

242 
size
 = ((
dúít
->
«me_Àn
 & 0xFF) + 11) & ~3;

244 i‡(
ªc_Àn
 !
size
) {

245 
föÆ_off£t
;

247 
föÆ_off£t
 = 
off£t
 + 
ªc_Àn
;

248 
off£t
 +
size
;

249 
off£t
 < 
föÆ_off£t
 &&

250 !
ext2fs_vÆid©e_íåy
(
fs
, 
˘x
->
buf
,

251 
off£t
,

252 
föÆ_off£t
))

253 
off£t
 += 4;

257 
off£t
 +
ªc_Àn
;

260 i‡(
ch™ged
) {

261 
˘x
->
îrcode
 = 
ext2fs_wrôe_dú_block
(
fs
, *
blockƒ
, ctx->
buf
);

262 i‡(
˘x
->
îrcode
)

263  
BLOCK_ABORT
;

265 i‡(
do_ab‹t
)

266  
BLOCK_ABORT
;

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/dirblock.c

12 
	~<c⁄fig.h
>

14 
	~<°dio.h
>

15 #i‡
HAVE_UNISTD_H


16 
	~<uni°d.h
>

18 
	~<°rög.h
>

19 
	~<time.h
>

21 
	~"ext2_fs.h
"

22 
	~"ext2fs.h
"

24 
îrcode_t
 
ext2fs_ªad_dú_block2
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

25 *
buf
, 
Êags
 
EXT2FS_ATTR
((
unu£d
)))

27 
îrcode_t
 
	gªtvÆ
;

28 *
	gp
, *
	gíd
;

29 
ext2_dú_íåy
 *
	gdúít
;

30 
	g«me_Àn
, 
	gªc_Àn
;

33 
	gªtvÆ
 = 
io_ch™√l_ªad_blk
(
fs
->
io
, 
block
, 1, 
buf
);

34 i‡(
	gªtvÆ
)

35  
	gªtvÆ
;

37 
	gp
 = (*Ë
buf
;

38 
	gíd
 = (*Ë
buf
 + 
fs
->
blocksize
;

39 
	gp
 < 
	gíd
-8) {

40 
	gdúít
 = (
ext2_dú_íåy
 *Ë
p
;

41 #i‡
deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

42 
	gdúít
->
	göode
 = 
ext2fs_swab32
(
dúít
->
öode
);

43 
	gdúít
->
	gªc_Àn
 = 
ext2fs_swab16
(
dúít
->
ªc_Àn
);

44 
	gdúít
->
	g«me_Àn
 = 
ext2fs_swab16
(
dúít
->
«me_Àn
);

46 
	g«me_Àn
 = 
dúít
->
«me_Àn
;

47 #i‡
deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

48 i‡(
	gÊags
 & 
	gEXT2_DIRBLOCK_V2_STRUCT
)

49 
	gdúít
->
	g«me_Àn
 = 
ext2fs_swab16
(
dúít
->
«me_Àn
);

51 i‡((
	gªtvÆ
 = 
ext2fs_gë_ªc_Àn
(
fs
, 
dúít
, &
ªc_Àn
)) != 0)

52  
ªtvÆ
;

53 i‡((
	gªc_Àn
 < 8) || (rec_len % 4)) {

54 
	gªc_Àn
 = 8;

55 
	gªtvÆ
 = 
EXT2_ET_DIR_CORRUPTED
;

56 } i‡(((
	g«me_Àn
 & 0xFFË+ 8Ë> 
	gªc_Àn
)

57 
	gªtvÆ
 = 
EXT2_ET_DIR_CORRUPTED
;

58 
	gp
 +
ªc_Àn
;

60  
	gªtvÆ
;

63 
îrcode_t
 
	$ext2fs_ªad_dú_block
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

64 *
buf
)

66  
	`ext2fs_ªad_dú_block2
(
fs
, 
block
, 
buf
, 0);

67 
	}
}

70 
îrcode_t
 
ext2fs_wrôe_dú_block2
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

71 *
öbuf
, 
Êags
 
EXT2FS_ATTR
((
unu£d
)))

73 #i‡
deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

74 
îrcode_t
 
	gªtvÆ
;

75 *
	gp
, *
	gíd
;

76 *
	gbuf
 = 0;

77 
	gªc_Àn
;

78 
ext2_dú_íåy
 *
	gdúít
;

80 
	gªtvÆ
 = 
ext2fs_gë_mem
(
fs
->
blocksize
, &
buf
);

81 i‡(
	gªtvÆ
)

82  
	gªtvÆ
;

83 
mem˝y
(
buf
, 
öbuf
, 
fs
->
blocksize
);

84 
	gp
 = 
buf
;

85 
	gíd
 = 
buf
 + 
fs
->
blocksize
;

86 
	gp
 < 
	gíd
) {

87 
	gdúít
 = (
ext2_dú_íåy
 *Ë
p
;

88 i‡((
	gªtvÆ
 = 
ext2fs_gë_ªc_Àn
(
fs
, 
dúít
, &
ªc_Àn
)) != 0)

89  
ªtvÆ
;

90 i‡((
	gªc_Àn
 < 8) ||

91 (
	gªc_Àn
 % 4)) {

92 
ext2fs_‰ì_mem
(&
buf
);

93  (
	gEXT2_ET_DIR_CORRUPTED
);

95 
	gp
 +
ªc_Àn
;

96 
	gdúít
->
	göode
 = 
ext2fs_swab32
(
dúít
->
öode
);

97 
	gdúít
->
	gªc_Àn
 = 
ext2fs_swab16
(
dúít
->
ªc_Àn
);

98 
	gdúít
->
	g«me_Àn
 = 
ext2fs_swab16
(
dúít
->
«me_Àn
);

100 i‡(
	gÊags
 & 
	gEXT2_DIRBLOCK_V2_STRUCT
)

101 
	gdúít
->
	g«me_Àn
 = 
ext2fs_swab16
(
dúít
->
«me_Àn
);

103 
	gªtvÆ
 = 
io_ch™√l_wrôe_blk
(
fs
->
io
, 
block
, 1, 
buf
);

104 
ext2fs_‰ì_mem
(&
buf
);

105  
	gªtvÆ
;

107  
io_ch™√l_wrôe_blk
(
fs
->
io
, 
block
, 1, (*Ë
öbuf
);

112 
îrcode_t
 
	$ext2fs_wrôe_dú_block
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

113 *
öbuf
)

115  
	`ext2fs_wrôe_dú_block2
(
fs
, 
block
, 
öbuf
, 0);

116 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/dirhash.c

14 
	~<°dio.h
>

15 
	~<°rög.h
>

17 
	~"ext2_fs.h
"

18 
	~"ext2fs.h
"

31 
	#DELTA
 0x9E3779B9

	)

33 
	$TEA_å™sf‹m
(
__u32
 
buf
[4], __u32 c⁄° 
ö
[])

35 
__u32
 
sum
 = 0;

36 
__u32
 
b0
 = 
buf
[0], 
b1
 = buf[1];

37 
__u32
 
a
 = 
ö
[0], 
b
 = in[1], 
c
 = in[2], 
d
 = in[3];

38 
n
 = 16;

41 
sum
 +
DELTA
;

42 
b0
 +((
b1
 << 4)+
a
Ë^ (b1+
sum
Ë^ ((b1 >> 5)+
b
);

43 
b1
 +((
b0
 << 4)+
c
Ë^ (b0+
sum
Ë^ ((b0 >> 5)+
d
);

44 } --
n
);

46 
buf
[0] +
b0
;

47 
buf
[1] +
b1
;

48 
	}
}

51 
	#F
(
x
, 
y
, 
z
Ë((zË^ ((xË& ((yË^ (z))))

	)

52 
	#G
(
x
, 
y
, 
z
Ë(((xË& (y)Ë+ (((xË^ (y)Ë& (z)))

	)

53 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

61 
	#ROUND
(
f
, 
a
, 
b
, 
c
, 
d
, 
x
, 
s
) \

62 (
a
 +
	`f
(
b
, 
c
, 
d
Ë+ 
x
,á = (®<< 
s
Ë| (®>> (32-s)))

	)

63 
	#K1
 0

	)

64 
	#K2
 013240474631UL

	)

65 
	#K3
 015666365641UL

	)

70 
	$hÆfMD4Tønsf‹m
 (
__u32
 
buf
[4], __u32 c⁄° 
ö
[])

72 
__u32
 
a
 = 
buf
[0], 
b
 = buf[1], 
c
 = buf[2], 
d
 = buf[3];

75 
	`ROUND
(
F
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 
K1
, 3);

76 
	`ROUND
(
F
, 
d
, 
a
, 
b
, 
c
, 
ö
[1] + 
K1
, 7);

77 
	`ROUND
(
F
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 
K1
, 11);

78 
	`ROUND
(
F
, 
b
, 
c
, 
d
, 
a
, 
ö
[3] + 
K1
, 19);

79 
	`ROUND
(
F
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 
K1
, 3);

80 
	`ROUND
(
F
, 
d
, 
a
, 
b
, 
c
, 
ö
[5] + 
K1
, 7);

81 
	`ROUND
(
F
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 
K1
, 11);

82 
	`ROUND
(
F
, 
b
, 
c
, 
d
, 
a
, 
ö
[7] + 
K1
, 19);

85 
	`ROUND
(
G
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 
K2
, 3);

86 
	`ROUND
(
G
, 
d
, 
a
, 
b
, 
c
, 
ö
[3] + 
K2
, 5);

87 
	`ROUND
(
G
, 
c
, 
d
, 
a
, 
b
, 
ö
[5] + 
K2
, 9);

88 
	`ROUND
(
G
, 
b
, 
c
, 
d
, 
a
, 
ö
[7] + 
K2
, 13);

89 
	`ROUND
(
G
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 
K2
, 3);

90 
	`ROUND
(
G
, 
d
, 
a
, 
b
, 
c
, 
ö
[2] + 
K2
, 5);

91 
	`ROUND
(
G
, 
c
, 
d
, 
a
, 
b
, 
ö
[4] + 
K2
, 9);

92 
	`ROUND
(
G
, 
b
, 
c
, 
d
, 
a
, 
ö
[6] + 
K2
, 13);

95 
	`ROUND
(
H
, 
a
, 
b
, 
c
, 
d
, 
ö
[3] + 
K3
, 3);

96 
	`ROUND
(
H
, 
d
, 
a
, 
b
, 
c
, 
ö
[7] + 
K3
, 9);

97 
	`ROUND
(
H
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 
K3
, 11);

98 
	`ROUND
(
H
, 
b
, 
c
, 
d
, 
a
, 
ö
[6] + 
K3
, 15);

99 
	`ROUND
(
H
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 
K3
, 3);

100 
	`ROUND
(
H
, 
d
, 
a
, 
b
, 
c
, 
ö
[5] + 
K3
, 9);

101 
	`ROUND
(
H
, 
c
, 
d
, 
a
, 
b
, 
ö
[0] + 
K3
, 11);

102 
	`ROUND
(
H
, 
b
, 
c
, 
d
, 
a
, 
ö
[4] + 
K3
, 15);

104 
buf
[0] +
a
;

105 
buf
[1] +
b
;

106 
buf
[2] +
c
;

107 
buf
[3] +
d
;

108 
	}
}

110 #unde‡
ROUND


111 #unde‡
F


112 #unde‡
G


113 #unde‡
H


114 #unde‡
K1


115 #unde‡
K2


116 #unde‡
K3


119 
ext2_dúhash_t
 
	$dx_hack_hash
 (c⁄° *
«me
, 
Àn
,

120 
unsig√d_Êag
)

122 
__u32
 
hash
, 
hash0
 = 0x12a3„2d, 
hash1
 = 0x37abe8f9;

123 c⁄° *
u˝
 = (c⁄° *Ë
«me
;

124 c⁄° sig√d *
s˝
 = (c⁄° sig√d *Ë
«me
;

125 
c
;

127 
Àn
--) {

128 i‡(
unsig√d_Êag
)

129 
c
 = (Ë*
u˝
++;

131 
c
 = (Ë*
s˝
++;

132 
hash
 = 
hash1
 + (
hash0
 ^ (
c
 * 7152373));

134 i‡(
hash
 & 0x80000000) hash -= 0x7fffffff;

135 
hash1
 = 
hash0
;

136 
hash0
 = 
hash
;

138  (
hash0
 << 1);

139 
	}
}

141 
	$°r2hashbuf
(c⁄° *
msg
, 
Àn
, 
__u32
 *
buf
, 
num
,

142 
unsig√d_Êag
)

144 
__u32
 
∑d
, 
vÆ
;

145 
i
, 
c
;

146 c⁄° *
u˝
 = (c⁄° *Ë
msg
;

147 c⁄° sig√d *
s˝
 = (c⁄° sig√d *Ë
msg
;

149 
∑d
 = (
__u32
)
Àn
 | ((__u32)len << 8);

150 
∑d
 |=Öad << 16;

152 
vÆ
 = 
∑d
;

153 i‡(
Àn
 > 
num
*4)

154 
Àn
 = 
num
 * 4;

155 
i
=0; i < 
Àn
; i++) {

156 i‡((
i
 % 4) == 0)

157 
vÆ
 = 
∑d
;

158 i‡(
unsig√d_Êag
)

159 
c
 = (Ë
u˝
[
i
];

161 
c
 = (Ë
s˝
[
i
];

163 
vÆ
 = 
c
 + (val << 8);

164 i‡((
i
 % 4) == 3) {

165 *
buf
++ = 
vÆ
;

166 
vÆ
 = 
∑d
;

167 
num
--;

170 i‡(--
num
 >= 0)

171 *
buf
++ = 
vÆ
;

172 --
num
 >= 0)

173 *
buf
++ = 
∑d
;

174 
	}
}

189 
îrcode_t
 
	$ext2fs_dúhash
(
vîsi⁄
, c⁄° *
«me
, 
Àn
,

190 c⁄° 
__u32
 *
£ed
,

191 
ext2_dúhash_t
 *
ªt_hash
,

192 
ext2_dúhash_t
 *
ªt_mö‹_hash
)

194 
__u32
 
hash
;

195 
__u32
 
mö‹_hash
 = 0;

196 c⁄° *
p
;

197 
i
;

198 
__u32
 
ö
[8], 
buf
[4];

199 
unsig√d_Êag
 = 0;

202 
buf
[0] = 0x67452301;

203 
buf
[1] = 0xefcdab89;

204 
buf
[2] = 0x98badcfe;

205 
buf
[3] = 0x10325476;

208 i‡(
£ed
) {

209 
i
=0; i < 4; i++) {

210 i‡(
£ed
[
i
])

213 i‡(
i
 < 4)

214 
	`mem˝y
(
buf
, 
£ed
, (buf));

217 
vîsi⁄
) {

218 
EXT2_HASH_LEGACY_UNSIGNED
:

219 
unsig√d_Êag
++;

220 
EXT2_HASH_LEGACY
:

221 
hash
 = 
	`dx_hack_hash
(
«me
, 
Àn
, 
unsig√d_Êag
);

223 
EXT2_HASH_HALF_MD4_UNSIGNED
:

224 
unsig√d_Êag
++;

225 
EXT2_HASH_HALF_MD4
:

226 
p
 = 
«me
;

227 
Àn
 > 0) {

228 
	`°r2hashbuf
(
p
, 
Àn
, 
ö
, 8, 
unsig√d_Êag
);

229 
	`hÆfMD4Tønsf‹m
(
buf
, 
ö
);

230 
Àn
 -= 32;

231 
p
 += 32;

233 
mö‹_hash
 = 
buf
[2];

234 
hash
 = 
buf
[1];

236 
EXT2_HASH_TEA_UNSIGNED
:

237 
unsig√d_Êag
++;

238 
EXT2_HASH_TEA
:

239 
p
 = 
«me
;

240 
Àn
 > 0) {

241 
	`°r2hashbuf
(
p
, 
Àn
, 
ö
, 4, 
unsig√d_Êag
);

242 
	`TEA_å™sf‹m
(
buf
, 
ö
);

243 
Àn
 -= 16;

244 
p
 += 16;

246 
hash
 = 
buf
[0];

247 
mö‹_hash
 = 
buf
[1];

250 *
ªt_hash
 = 0;

251  
EXT2_ET_DIRHASH_UNSUPP
;

253 *
ªt_hash
 = 
hash
 & ~1;

254 i‡(
ªt_mö‹_hash
)

255 *
ªt_mö‹_hash
 = 
mö‹_hash
;

257 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/dupfs.c

12 
	~<°dio.h
>

13 #i‡
HAVE_UNISTD_H


14 
	~<uni°d.h
>

16 
	~<time.h
>

17 
	~<°rög.h
>

19 
	~"ext2_fs.h
"

20 
	~"ext2fsP.h
"

22 
îrcode_t
 
	$ext2fs_dup_h™dÀ
(
ext2_fûsys
 
§c
,Éxt2_fûsy†*
de°
)

24 
ext2_fûsys
 
fs
;

25 
îrcode_t
 
ªtvÆ
;

27 
	`EXT2_CHECK_MAGIC
(
§c
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

29 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
°ru˘_ext2_fûsys
), &
fs
);

30 i‡(
ªtvÆ
)

31  
ªtvÆ
;

33 *
fs
 = *
§c
;

34 
fs
->
devi˚_«me
 = 0;

35 
fs
->
su≥r
 = 0;

36 
fs
->
‹ig_su≥r
 = 0;

37 
fs
->
group_desc
 = 0;

38 
fs
->
öode_m≠
 = 0;

39 
fs
->
block_m≠
 = 0;

40 
fs
->
badblocks
 = 0;

41 
fs
->
dbli°
 = 0;

43 
	`io_ch™√l_bumpcou¡
(
fs
->
io
);

44 i‡(
fs
->
iˇche
)

45 
fs
->
iˇche
->
ªfcou¡
++;

47 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
	`°æí
(
§c
->
devi˚_«me
)+1, &
fs
->device_name);

48 i‡(
ªtvÆ
)

49 
îrout
;

50 
	`°r˝y
(
fs
->
devi˚_«me
, 
§c
->device_name);

52 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
SUPERBLOCK_SIZE
, &
fs
->
su≥r
);

53 i‡(
ªtvÆ
)

54 
îrout
;

55 
	`mem˝y
(
fs
->
su≥r
, 
§c
->su≥r, 
SUPERBLOCK_SIZE
);

57 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
SUPERBLOCK_SIZE
, &
fs
->
‹ig_su≥r
);

58 i‡(
ªtvÆ
)

59 
îrout
;

60 
	`mem˝y
(
fs
->
‹ig_su≥r
, 
§c
->‹ig_su≥r, 
SUPERBLOCK_SIZE
);

62 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(
fs
->
desc_blocks
, fs->
blocksize
,

63 &
fs
->
group_desc
);

64 i‡(
ªtvÆ
)

65 
îrout
;

66 
	`mem˝y
(
fs
->
group_desc
, 
§c
->group_desc,

67 (
size_t
Ë
fs
->
desc_blocks
 * fs->
blocksize
);

69 i‡(
§c
->
öode_m≠
) {

70 
ªtvÆ
 = 
	`ext2fs_c›y_bôm≠
(
§c
->
öode_m≠
, &
fs
->inode_map);

71 i‡(
ªtvÆ
)

72 
îrout
;

74 i‡(
§c
->
block_m≠
) {

75 
ªtvÆ
 = 
	`ext2fs_c›y_bôm≠
(
§c
->
block_m≠
, &
fs
->block_map);

76 i‡(
ªtvÆ
)

77 
îrout
;

79 i‡(
§c
->
badblocks
) {

80 
ªtvÆ
 = 
	`ext2fs_badblocks_c›y
(
§c
->
badblocks
, &
fs
->badblocks);

81 i‡(
ªtvÆ
)

82 
îrout
;

84 i‡(
§c
->
dbli°
) {

85 
ªtvÆ
 = 
	`ext2fs_c›y_dbli°
(
§c
->
dbli°
, &
fs
->dblist);

86 i‡(
ªtvÆ
)

87 
îrout
;

89 *
de°
 = 
fs
;

91 
îrout
:

92 
	`ext2fs_‰ì
(
fs
);

93  
ªtvÆ
;

95 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/e2image.h

16 
	sext2_image_hdr
 {

17 
__u32
 
	mmagic_numbî
;

18 
	mmagic_des¸ùt‹
[16];

19 
	mfs_ho°«me
[64];

20 
	mfs_√èddr
[32];

21 
__u32
 
	mfs_√èddr_ty≥
;

22 
__u32
 
	mfs_devi˚
;

23 
	mfs_devi˚_«me
[64];

24 
	mfs_uuid
[16];

25 
__u32
 
	mfs_blocksize
;

26 
__u32
 
	mfs_ª£rved
[8];

28 
__u32
 
	mimage_devi˚
;

29 
__u32
 
	mimage_öode
;

30 
__u32
 
	mimage_time
;

31 
__u32
 
	mimage_ª£rved
[8];

33 
__u32
 
	moff£t_su≥r
;

34 
__u32
 
	moff£t_öode
;

35 
__u32
 
	moff£t_öodem≠
;

36 
__u32
 
	moff£t_blockm≠
;

37 
__u32
 
	moff£t_ª£rved
[8];

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/expanddir.c

12 
	~<c⁄fig.h
>

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 #i‡
HAVE_UNISTD_H


17 
	~<uni°d.h
>

20 
	~"ext2_fs.h
"

21 
	~"ext2fs.h
"

23 
	sex∑nd_dú_°ru˘
 {

24 
	md⁄e
;

25 
	m√wblocks
;

26 
îrcode_t
 
	mîr
;

29 
ex∑nd_dú_¥oc
(
ext2_fûsys
 
fs
,

30 
blk_t
 *
blockƒ
,

31 
e2_blk˙t_t
 
block˙t
,

32 
blk_t
 
ªf_block
 
EXT2FS_ATTR
((
unu£d
)),

33 
ªf_off£t
 
EXT2FS_ATTR
((
unu£d
)),

34 *
¥iv_d©a
)

36 
ex∑nd_dú_°ru˘
 *
	ges
 = (ex∑nd_dú_°ru˘ *Ë
¥iv_d©a
;

37 
blk_t
 
	g√w_blk
;

38 
blk_t
 
	gœ°_blk
 = 0;

39 *
	gblock
;

40 
îrcode_t
 
	gªtvÆ
;

42 i‡(*
	gblockƒ
) {

43 
	gœ°_blk
 = *
blockƒ
;

46 
	gªtvÆ
 = 
ext2fs_√w_block
(
fs
, 
œ°_blk
, 0, &
√w_blk
);

47 i‡(
	gªtvÆ
) {

48 
	ges
->
	gîr
 = 
ªtvÆ
;

49  
	gBLOCK_ABORT
;

51 i‡(
	gblock˙t
 > 0) {

52 
	gªtvÆ
 = 
ext2fs_√w_dú_block
(
fs
, 0, 0, &
block
);

53 i‡(
	gªtvÆ
) {

54 
	ges
->
	gîr
 = 
ªtvÆ
;

55  
	gBLOCK_ABORT
;

57 
	ges
->
	gd⁄e
 = 1;

58 
	gªtvÆ
 = 
ext2fs_wrôe_dú_block
(
fs
, 
√w_blk
, 
block
);

60 
	gªtvÆ
 = 
ext2fs_gë_mem
(
fs
->
blocksize
, &
block
);

61 i‡(
	gªtvÆ
) {

62 
	ges
->
	gîr
 = 
ªtvÆ
;

63  
	gBLOCK_ABORT
;

65 
mem£t
(
block
, 0, 
fs
->
blocksize
);

66 
	gªtvÆ
 = 
io_ch™√l_wrôe_blk
(
fs
->
io
, 
√w_blk
, 1, 
block
);

68 i‡(
	gªtvÆ
) {

69 
	ges
->
	gîr
 = 
ªtvÆ
;

70  
	gBLOCK_ABORT
;

72 
ext2fs_‰ì_mem
(&
block
);

73 *
	gblockƒ
 = 
√w_blk
;

74 
ext2fs_block_Æloc_°©s
(
fs
, 
√w_blk
, +1);

75 
	ges
->
	g√wblocks
++;

77 i‡(
	ges
->
	gd⁄e
)

78  (
	gBLOCK_CHANGED
 | 
	gBLOCK_ABORT
);

80  
	gBLOCK_CHANGED
;

83 
îrcode_t
 
	$ext2fs_ex∑nd_dú
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
)

85 
îrcode_t
 
ªtvÆ
;

86 
ex∑nd_dú_°ru˘
 
es
;

87 
ext2_öode
 
öode
;

89 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

91 i‡(!(
fs
->
Êags
 & 
EXT2_FLAG_RW
))

92  
EXT2_ET_RO_FILSYS
;

94 i‡(!
fs
->
block_m≠
)

95  
EXT2_ET_NO_BLOCK_BITMAP
;

97 
ªtvÆ
 = 
	`ext2fs_check_dúe˘‹y
(
fs
, 
dú
);

98 i‡(
ªtvÆ
)

99  
ªtvÆ
;

101 
es
.
d⁄e
 = 0;

102 
es
.
îr
 = 0;

103 
es
.
√wblocks
 = 0;

105 
ªtvÆ
 = 
	`ext2fs_block_ôî©e2
(
fs
, 
dú
, 
BLOCK_FLAG_APPEND
,

106 0, 
ex∑nd_dú_¥oc
, &
es
);

108 i‡(
es
.
îr
)

109  
es
.
îr
;

110 i‡(!
es
.
d⁄e
)

111  
EXT2_ET_EXPAND_DIR_ERR
;

116 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
dú
, &
öode
);

117 i‡(
ªtvÆ
)

118  
ªtvÆ
;

120 
öode
.
i_size
 +
fs
->
blocksize
;

121 
	`ext2fs_iblk_add_blocks
(
fs
, &
öode
, 
es
.
√wblocks
);

123 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fs
, 
dú
, &
öode
);

124 i‡(
ªtvÆ
)

125  
ªtvÆ
;

128 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2_err.c

6 
	~<°dlib.h
>

8 c⁄° * c⁄° 
	gãxt
[] = {

149 
	sîr‹_èbÀ
 {

150 c⁄° * c⁄° * 
	mmsgs
;

151 
	mba£
;

152 
	mn_msgs
;

154 
	së_li°
 {

155 
ë_li°
 *
	m√xt
;

156 c⁄° 
îr‹_èbÀ
 * 
	mèbÀ
;

158 
ë_li°
 *
_ë_li°
;

160 c⁄° 
îr‹_èbÀ
 
	gë_ext2_îr‹_èbÀ
 = { 
ãxt
, 2133571328L, 137 };

162 
ë_li°
 
	glök
 = { 0, 0 };

164 
öôülize_ext2_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

165 
öôülize_ext2_îr‹_èbÀ
();

167 
	$öôülize_ext2_îr‹_èbÀ
() {

168 
	`öôülize_ext2_îr‹_èbÀ_r
(&
_ë_li°
);

169 
	}
}

172 
	$öôülize_ext2_îr‹_èbÀ_r
(
ë_li°
 **
li°
)

174 
ë_li°
 *
ë
, **
íd
;

176 
íd
 = 
li°
, 
ë
 = *li°;Ét;Énd = &ë->
√xt
,Ét =Ét->next)

177 i‡(
ë
->
èbÀ
->
msgs
 =
ãxt
)

179 
ë
 = 
	`mÆloc
((
ë_li°
));

180 i‡(
ë
 == 0) {

181 i‡(!
lök
.
èbÀ
)

182 
ë
 = &
lök
;

186 
ë
->
èbÀ
 = &
ë_ext2_îr‹_èbÀ
;

187 
ë
->
√xt
 = 0;

188 *
íd
 = 
ë
;

189 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2_err.h

6 
	~<ë/com_îr.h
>

8 
	#EXT2_ET_BASE
 (2133571328L)

	)

9 
	#EXT2_ET_MAGIC_EXT2FS_FILSYS
 (2133571329L)

	)

10 
	#EXT2_ET_MAGIC_BADBLOCKS_LIST
 (2133571330L)

	)

11 
	#EXT2_ET_MAGIC_BADBLOCKS_ITERATE
 (2133571331L)

	)

12 
	#EXT2_ET_MAGIC_INODE_SCAN
 (2133571332L)

	)

13 
	#EXT2_ET_MAGIC_IO_CHANNEL
 (2133571333L)

	)

14 
	#EXT2_ET_MAGIC_UNIX_IO_CHANNEL
 (2133571334L)

	)

15 
	#EXT2_ET_MAGIC_IO_MANAGER
 (2133571335L)

	)

16 
	#EXT2_ET_MAGIC_BLOCK_BITMAP
 (2133571336L)

	)

17 
	#EXT2_ET_MAGIC_INODE_BITMAP
 (2133571337L)

	)

18 
	#EXT2_ET_MAGIC_GENERIC_BITMAP
 (2133571338L)

	)

19 
	#EXT2_ET_MAGIC_TEST_IO_CHANNEL
 (2133571339L)

	)

20 
	#EXT2_ET_MAGIC_DBLIST
 (2133571340L)

	)

21 
	#EXT2_ET_MAGIC_ICOUNT
 (2133571341L)

	)

22 
	#EXT2_ET_MAGIC_PQ_IO_CHANNEL
 (2133571342L)

	)

23 
	#EXT2_ET_MAGIC_EXT2_FILE
 (2133571343L)

	)

24 
	#EXT2_ET_MAGIC_E2IMAGE
 (2133571344L)

	)

25 
	#EXT2_ET_MAGIC_INODE_IO_CHANNEL
 (2133571345L)

	)

26 
	#EXT2_ET_MAGIC_EXTENT_HANDLE
 (2133571346L)

	)

27 
	#EXT2_ET_BAD_MAGIC
 (2133571347L)

	)

28 
	#EXT2_ET_REV_TOO_HIGH
 (2133571348L)

	)

29 
	#EXT2_ET_RO_FILSYS
 (2133571349L)

	)

30 
	#EXT2_ET_GDESC_READ
 (2133571350L)

	)

31 
	#EXT2_ET_GDESC_WRITE
 (2133571351L)

	)

32 
	#EXT2_ET_GDESC_BAD_BLOCK_MAP
 (2133571352L)

	)

33 
	#EXT2_ET_GDESC_BAD_INODE_MAP
 (2133571353L)

	)

34 
	#EXT2_ET_GDESC_BAD_INODE_TABLE
 (2133571354L)

	)

35 
	#EXT2_ET_INODE_BITMAP_WRITE
 (2133571355L)

	)

36 
	#EXT2_ET_INODE_BITMAP_READ
 (2133571356L)

	)

37 
	#EXT2_ET_BLOCK_BITMAP_WRITE
 (2133571357L)

	)

38 
	#EXT2_ET_BLOCK_BITMAP_READ
 (2133571358L)

	)

39 
	#EXT2_ET_INODE_TABLE_WRITE
 (2133571359L)

	)

40 
	#EXT2_ET_INODE_TABLE_READ
 (2133571360L)

	)

41 
	#EXT2_ET_NEXT_INODE_READ
 (2133571361L)

	)

42 
	#EXT2_ET_UNEXPECTED_BLOCK_SIZE
 (2133571362L)

	)

43 
	#EXT2_ET_DIR_CORRUPTED
 (2133571363L)

	)

44 
	#EXT2_ET_SHORT_READ
 (2133571364L)

	)

45 
	#EXT2_ET_SHORT_WRITE
 (2133571365L)

	)

46 
	#EXT2_ET_DIR_NO_SPACE
 (2133571366L)

	)

47 
	#EXT2_ET_NO_INODE_BITMAP
 (2133571367L)

	)

48 
	#EXT2_ET_NO_BLOCK_BITMAP
 (2133571368L)

	)

49 
	#EXT2_ET_BAD_INODE_NUM
 (2133571369L)

	)

50 
	#EXT2_ET_BAD_BLOCK_NUM
 (2133571370L)

	)

51 
	#EXT2_ET_EXPAND_DIR_ERR
 (2133571371L)

	)

52 
	#EXT2_ET_TOOSMALL
 (2133571372L)

	)

53 
	#EXT2_ET_BAD_BLOCK_MARK
 (2133571373L)

	)

54 
	#EXT2_ET_BAD_BLOCK_UNMARK
 (2133571374L)

	)

55 
	#EXT2_ET_BAD_BLOCK_TEST
 (2133571375L)

	)

56 
	#EXT2_ET_BAD_INODE_MARK
 (2133571376L)

	)

57 
	#EXT2_ET_BAD_INODE_UNMARK
 (2133571377L)

	)

58 
	#EXT2_ET_BAD_INODE_TEST
 (2133571378L)

	)

59 
	#EXT2_ET_FUDGE_BLOCK_BITMAP_END
 (2133571379L)

	)

60 
	#EXT2_ET_FUDGE_INODE_BITMAP_END
 (2133571380L)

	)

61 
	#EXT2_ET_BAD_IND_BLOCK
 (2133571381L)

	)

62 
	#EXT2_ET_BAD_DIND_BLOCK
 (2133571382L)

	)

63 
	#EXT2_ET_BAD_TIND_BLOCK
 (2133571383L)

	)

64 
	#EXT2_ET_NEQ_BLOCK_BITMAP
 (2133571384L)

	)

65 
	#EXT2_ET_NEQ_INODE_BITMAP
 (2133571385L)

	)

66 
	#EXT2_ET_BAD_DEVICE_NAME
 (2133571386L)

	)

67 
	#EXT2_ET_MISSING_INODE_TABLE
 (2133571387L)

	)

68 
	#EXT2_ET_CORRUPT_SUPERBLOCK
 (2133571388L)

	)

69 
	#EXT2_ET_BAD_GENERIC_MARK
 (2133571389L)

	)

70 
	#EXT2_ET_BAD_GENERIC_UNMARK
 (2133571390L)

	)

71 
	#EXT2_ET_BAD_GENERIC_TEST
 (2133571391L)

	)

72 
	#EXT2_ET_SYMLINK_LOOP
 (2133571392L)

	)

73 
	#EXT2_ET_CALLBACK_NOTHANDLED
 (2133571393L)

	)

74 
	#EXT2_ET_BAD_BLOCK_IN_INODE_TABLE
 (2133571394L)

	)

75 
	#EXT2_ET_UNSUPP_FEATURE
 (2133571395L)

	)

76 
	#EXT2_ET_RO_UNSUPP_FEATURE
 (2133571396L)

	)

77 
	#EXT2_ET_LLSEEK_FAILED
 (2133571397L)

	)

78 
	#EXT2_ET_NO_MEMORY
 (2133571398L)

	)

79 
	#EXT2_ET_INVALID_ARGUMENT
 (2133571399L)

	)

80 
	#EXT2_ET_BLOCK_ALLOC_FAIL
 (2133571400L)

	)

81 
	#EXT2_ET_INODE_ALLOC_FAIL
 (2133571401L)

	)

82 
	#EXT2_ET_NO_DIRECTORY
 (2133571402L)

	)

83 
	#EXT2_ET_TOO_MANY_REFS
 (2133571403L)

	)

84 
	#EXT2_ET_FILE_NOT_FOUND
 (2133571404L)

	)

85 
	#EXT2_ET_FILE_RO
 (2133571405L)

	)

86 
	#EXT2_ET_DB_NOT_FOUND
 (2133571406L)

	)

87 
	#EXT2_ET_DIR_EXISTS
 (2133571407L)

	)

88 
	#EXT2_ET_UNIMPLEMENTED
 (2133571408L)

	)

89 
	#EXT2_ET_CANCEL_REQUESTED
 (2133571409L)

	)

90 
	#EXT2_ET_FILE_TOO_BIG
 (2133571410L)

	)

91 
	#EXT2_ET_JOURNAL_NOT_BLOCK
 (2133571411L)

	)

92 
	#EXT2_ET_NO_JOURNAL_SB
 (2133571412L)

	)

93 
	#EXT2_ET_JOURNAL_TOO_SMALL
 (2133571413L)

	)

94 
	#EXT2_ET_JOURNAL_UNSUPP_VERSION
 (2133571414L)

	)

95 
	#EXT2_ET_LOAD_EXT_JOURNAL
 (2133571415L)

	)

96 
	#EXT2_ET_NO_JOURNAL
 (2133571416L)

	)

97 
	#EXT2_ET_DIRHASH_UNSUPP
 (2133571417L)

	)

98 
	#EXT2_ET_BAD_EA_BLOCK_NUM
 (2133571418L)

	)

99 
	#EXT2_ET_TOO_MANY_INODES
 (2133571419L)

	)

100 
	#EXT2_ET_NOT_IMAGE_FILE
 (2133571420L)

	)

101 
	#EXT2_ET_RES_GDT_BLOCKS
 (2133571421L)

	)

102 
	#EXT2_ET_RESIZE_INODE_CORRUPT
 (2133571422L)

	)

103 
	#EXT2_ET_SET_BMAP_NO_IND
 (2133571423L)

	)

104 
	#EXT2_ET_TDB_SUCCESS
 (2133571424L)

	)

105 
	#EXT2_ET_TDB_ERR_CORRUPT
 (2133571425L)

	)

106 
	#EXT2_ET_TDB_ERR_IO
 (2133571426L)

	)

107 
	#EXT2_ET_TDB_ERR_LOCK
 (2133571427L)

	)

108 
	#EXT2_ET_TDB_ERR_OOM
 (2133571428L)

	)

109 
	#EXT2_ET_TDB_ERR_EXISTS
 (2133571429L)

	)

110 
	#EXT2_ET_TDB_ERR_NOLOCK
 (2133571430L)

	)

111 
	#EXT2_ET_TDB_ERR_EINVAL
 (2133571431L)

	)

112 
	#EXT2_ET_TDB_ERR_NOEXIST
 (2133571432L)

	)

113 
	#EXT2_ET_TDB_ERR_RDONLY
 (2133571433L)

	)

114 
	#EXT2_ET_DBLIST_EMPTY
 (2133571434L)

	)

115 
	#EXT2_ET_RO_BLOCK_ITERATE
 (2133571435L)

	)

116 
	#EXT2_ET_MAGIC_EXTENT_PATH
 (2133571436L)

	)

117 
	#EXT2_ET_MAGIC_RESERVED_10
 (2133571437L)

	)

118 
	#EXT2_ET_MAGIC_RESERVED_11
 (2133571438L)

	)

119 
	#EXT2_ET_MAGIC_RESERVED_12
 (2133571439L)

	)

120 
	#EXT2_ET_MAGIC_RESERVED_13
 (2133571440L)

	)

121 
	#EXT2_ET_MAGIC_RESERVED_14
 (2133571441L)

	)

122 
	#EXT2_ET_MAGIC_RESERVED_15
 (2133571442L)

	)

123 
	#EXT2_ET_MAGIC_RESERVED_16
 (2133571443L)

	)

124 
	#EXT2_ET_MAGIC_RESERVED_17
 (2133571444L)

	)

125 
	#EXT2_ET_MAGIC_RESERVED_18
 (2133571445L)

	)

126 
	#EXT2_ET_MAGIC_RESERVED_19
 (2133571446L)

	)

127 
	#EXT2_ET_EXTENT_HEADER_BAD
 (2133571447L)

	)

128 
	#EXT2_ET_EXTENT_INDEX_BAD
 (2133571448L)

	)

129 
	#EXT2_ET_EXTENT_LEAF_BAD
 (2133571449L)

	)

130 
	#EXT2_ET_EXTENT_NO_SPACE
 (2133571450L)

	)

131 
	#EXT2_ET_INODE_NOT_EXTENT
 (2133571451L)

	)

132 
	#EXT2_ET_EXTENT_NO_NEXT
 (2133571452L)

	)

133 
	#EXT2_ET_EXTENT_NO_PREV
 (2133571453L)

	)

134 
	#EXT2_ET_EXTENT_NO_UP
 (2133571454L)

	)

135 
	#EXT2_ET_EXTENT_NO_DOWN
 (2133571455L)

	)

136 
	#EXT2_ET_NO_CURRENT_NODE
 (2133571456L)

	)

137 
	#EXT2_ET_OP_NOT_SUPPORTED
 (2133571457L)

	)

138 
	#EXT2_ET_CANT_INSERT_EXTENT
 (2133571458L)

	)

139 
	#EXT2_ET_CANT_SPLIT_EXTENT
 (2133571459L)

	)

140 
	#EXT2_ET_EXTENT_NOT_FOUND
 (2133571460L)

	)

141 
	#EXT2_ET_EXTENT_NOT_SUPPORTED
 (2133571461L)

	)

142 
	#EXT2_ET_EXTENT_INVALID_LENGTH
 (2133571462L)

	)

143 
	#EXT2_ET_IO_CHANNEL_NO_SUPPORT_64
 (2133571463L)

	)

144 
	#EXT2_NO_MTAB_FILE
 (2133571464L)

	)

145 c⁄° 
îr‹_èbÀ
 
ë_ext2_îr‹_èbÀ
;

146 
öôülize_ext2_îr‹_èbÀ
();

149 
öôülize_ext2_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

151 
	#ERROR_TABLE_BASE_ext2
 (2133571328L)

	)

154 
	#öô_ext2_îr_tbl
 
öôülize_ext2_îr‹_èbÀ


	)

155 
	#ext2_îr_ba£
 
ERROR_TABLE_BASE_ext2


	)

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2_ext_attr.h

9 #i‚de‡
_EXT2_EXT_ATTR_H


10 
	#_EXT2_EXT_ATTR_H


	)

12 
	#EXT2_EXT_ATTR_MAGIC_v1
 0xEA010000

	)

13 
	#EXT2_EXT_ATTR_MAGIC
 0xEA020000

	)

16 
	#EXT2_EXT_ATTR_REFCOUNT_MAX
 1024

	)

18 
	sext2_ext_©å_hódî
 {

19 
__u32
 
	mh_magic
;

20 
__u32
 
	mh_ªfcou¡
;

21 
__u32
 
	mh_blocks
;

22 
__u32
 
	mh_hash
;

23 
__u32
 
	mh_ª£rved
[4];

26 
	sext2_ext_©å_íåy
 {

27 
__u8
 
	me_«me_Àn
;

28 
__u8
 
	me_«me_ödex
;

29 
__u16
 
	me_vÆue_offs
;

30 
__u32
 
	me_vÆue_block
;

31 
__u32
 
	me_vÆue_size
;

32 
__u32
 
	me_hash
;

34 
	me_«me
[0];

38 
	#EXT2_EXT_ATTR_PAD_BITS
 2

	)

39 
	#EXT2_EXT_ATTR_PAD
 ((Ë1<<
EXT2_EXT_ATTR_PAD_BITS
)

	)

40 
	#EXT2_EXT_ATTR_ROUND
 (
EXT2_EXT_ATTR_PAD
-1)

	)

41 
	#EXT2_EXT_ATTR_LEN
(
«me_Àn
) \

42 (((
«me_Àn
Ë+ 
EXT2_EXT_ATTR_ROUND
 + \

43 (
ext2_ext_©å_íåy
)Ë& ~
EXT2_EXT_ATTR_ROUND
)

	)

44 
	#EXT2_EXT_ATTR_NEXT
(
íåy
) \

45 –(
ext2_ext_©å_íåy
 *)( \

46 (*)(
íåy
Ë+ 
	`EXT2_EXT_ATTR_LEN
(”¡ry)->
e_«me_Àn
)Ë)

	)

47 
	#EXT2_EXT_ATTR_SIZE
(
size
) \

48 (((
size
Ë+ 
EXT2_EXT_ATTR_ROUND
Ë& ~EXT2_EXT_ATTR_ROUND)

	)

49 
	#EXT2_EXT_IS_LAST_ENTRY
(
íåy
Ë(*((
__u32
 *)”¡ry)Ë=0UL)

	)

50 
	#EXT2_EXT_ATTR_NAME
(
íåy
) \

51 (((*Ë(
íåy
)Ë+ (
ext2_ext_©å_íåy
))

	)

52 
	#EXT2_XATTR_LEN
(
«me_Àn
) \

53 (((
«me_Àn
Ë+ 
EXT2_EXT_ATTR_ROUND
 + \

54 (
ext2_x©å_íåy
)Ë& ~
EXT2_EXT_ATTR_ROUND
)

	)

55 
	#EXT2_XATTR_SIZE
(
size
) \

56 (((
size
Ë+ 
EXT2_EXT_ATTR_ROUND
Ë& ~EXT2_EXT_ATTR_ROUND)

	)

58 #ifde‡
__KERNEL__


59 #ifde‡
CONFIG_EXT2_FS_EXT_ATTR


60 
ext2_gë_ext_©å
(
öode
 *, c⁄° *, *, 
size_t
, );

61 
ext2_£t_ext_©å
(
öode
 *, c⁄° *, *, 
size_t
, );

62 
ext2_ext_©å_‰ì_öode
(
öode
 *inode);

63 
ext2_ext_©å_put_su≥r
(
su≥r_block
 *
sb
);

64 
ext2_ext_©å_öô
();

65 
ext2_ext_©å_d⁄e
();

67 
	#ext2_gë_ext_©å
 
NULL


	)

68 
	#ext2_£t_ext_©å
 
NULL


	)

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2_fs.h

16 #i‚de‡
_LINUX_EXT2_FS_H


17 
	#_LINUX_EXT2_FS_H


	)

19 
	~<ext2fs/ext2_ty≥s.h
>

28 #unde‡
EXT2FS_DEBUG


33 
	#EXT2_PREALLOCATE


	)

34 
	#EXT2_DEFAULT_PREALLOC_BLOCKS
 8

	)

39 
	#EXT2FS_DATE
 "95/08/09"

	)

40 
	#EXT2FS_VERSION
 "0.5b"

	)

45 
	#EXT2_BAD_INO
 1

	)

46 
	#EXT2_ROOT_INO
 2

	)

47 
	#EXT2_ACL_IDX_INO
 3

	)

48 
	#EXT2_ACL_DATA_INO
 4

	)

49 
	#EXT2_BOOT_LOADER_INO
 5

	)

50 
	#EXT2_UNDEL_DIR_INO
 6

	)

51 
	#EXT2_RESIZE_INO
 7

	)

52 
	#EXT2_JOURNAL_INO
 8

	)

55 
	#EXT2_GOOD_OLD_FIRST_INO
 11

	)

60 
	#EXT2_SUPER_MAGIC
 0xEF53

	)

62 #ifde‡
__KERNEL__


63 
	#EXT2_SB
(
sb
Ë(&((sb)->
u
.
ext2_sb
))

	)

68 
	#EXT2_SB
(
sb
Ë(sb)

	)

74 
	#EXT2_LINK_MAX
 65000

	)

79 
	#EXT2_MIN_BLOCK_LOG_SIZE
 10

	)

80 
	#EXT2_MAX_BLOCK_LOG_SIZE
 16

	)

81 
	#EXT2_MIN_BLOCK_SIZE
 (1 << 
EXT2_MIN_BLOCK_LOG_SIZE
)

	)

82 
	#EXT2_MAX_BLOCK_SIZE
 (1 << 
EXT2_MAX_BLOCK_LOG_SIZE
)

	)

83 #ifde‡
__KERNEL__


84 
	#EXT2_BLOCK_SIZE
(
s
Ë((s)->
s_blocksize
)

	)

85 
	#EXT2_BLOCK_SIZE_BITS
(
s
Ë((s)->
s_blocksize_bôs
)

	)

86 
	#EXT2_ADDR_PER_BLOCK_BITS
(
s
Ë(
	`EXT2_SB
(s)->
addr_≥r_block_bôs
)

	)

87 
	#EXT2_INODE_SIZE
(
s
Ë(
	`EXT2_SB
(s)->
s_öode_size
)

	)

88 
	#EXT2_FIRST_INO
(
s
Ë(
	`EXT2_SB
(s)->
s_fú°_öo
)

	)

90 
	#EXT2_BLOCK_SIZE
(
s
Ë(
EXT2_MIN_BLOCK_SIZE
 << (s)->
s_log_block_size
)

	)

91 
	#EXT2_BLOCK_SIZE_BITS
(
s
Ë((s)->
s_log_block_size
 + 10)

	)

92 
	#EXT2_INODE_SIZE
(
s
Ë(((s)->
s_ªv_Àvñ
 =
EXT2_GOOD_OLD_REV
) ? \

93 
EXT2_GOOD_OLD_INODE_SIZE
 : (
s
)->
s_öode_size
)

	)

94 
	#EXT2_FIRST_INO
(
s
Ë(((s)->
s_ªv_Àvñ
 =
EXT2_GOOD_OLD_REV
) ? \

95 
EXT2_GOOD_OLD_FIRST_INO
 : (
s
)->
s_fú°_öo
)

	)

97 
	#EXT2_ADDR_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/ (
__u32
))

	)

102 
	#EXT2_MIN_FRAG_SIZE
 
EXT2_MIN_BLOCK_SIZE


	)

103 
	#EXT2_MAX_FRAG_SIZE
 
EXT2_MAX_BLOCK_SIZE


	)

104 
	#EXT2_MIN_FRAG_LOG_SIZE
 
EXT2_MIN_BLOCK_LOG_SIZE


	)

105 #ifde‡
__KERNEL__


106 
	#EXT2_FRAG_SIZE
(
s
Ë(
	`EXT2_SB
(s)->
s_‰ag_size
)

	)

107 
	#EXT2_FRAGS_PER_BLOCK
(
s
Ë(
	`EXT2_SB
(s)->
s_‰ags_≥r_block
)

	)

109 
	#EXT2_FRAG_SIZE
(
s
Ë(
EXT2_MIN_FRAG_SIZE
 << (s)->
s_log_‰ag_size
)

	)

110 
	#EXT2_FRAGS_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/ 
	`EXT2_FRAG_SIZE
(s))

	)

116 
	sext2_a˛_hódî


118 
__u32
 
	ma˛h_size
;

119 
__u32
 
	ma˛h_fûe_cou¡
;

120 
__u32
 
	ma˛h_a˛e_cou¡
;

121 
__u32
 
	ma˛h_fú°_a˛e
;

124 
	sext2_a˛_íåy


126 
__u32
 
	ma˛e_size
;

127 
__u16
 
	ma˛e_≥rms
;

128 
__u16
 
	ma˛e_ty≥
;

129 
__u16
 
	ma˛e_èg
;

130 
__u16
 
	ma˛e_∑d1
;

131 
__u32
 
	ma˛e_√xt
;

138 
	sext2_group_desc


140 
__u32
 
	mbg_block_bôm≠
;

141 
__u32
 
	mbg_öode_bôm≠
;

142 
__u32
 
	mbg_öode_èbÀ
;

143 
__u16
 
	mbg_‰ì_blocks_cou¡
;

144 
__u16
 
	mbg_‰ì_öodes_cou¡
;

145 
__u16
 
	mbg_u£d_dús_cou¡
;

146 
__u16
 
	mbg_Êags
;

147 
__u32
 
	mbg_ª£rved
[2];

148 
__u16
 
	mbg_ôabÀ_unu£d
;

149 
__u16
 
	mbg_checksum
;

152 
	sext4_group_desc


154 
__u32
 
	mbg_block_bôm≠
;

155 
__u32
 
	mbg_öode_bôm≠
;

156 
__u32
 
	mbg_öode_èbÀ
;

157 
__u16
 
	mbg_‰ì_blocks_cou¡
;

158 
__u16
 
	mbg_‰ì_öodes_cou¡
;

159 
__u16
 
	mbg_u£d_dús_cou¡
;

160 
__u16
 
	mbg_Êags
;

161 
__u32
 
	mbg_ª£rved
[2];

162 
__u16
 
	mbg_ôabÀ_unu£d
;

163 
__u16
 
	mbg_checksum
;

164 
__u32
 
	mbg_block_bôm≠_hi
;

165 
__u32
 
	mbg_öode_bôm≠_hi
;

166 
__u32
 
	mbg_öode_èbÀ_hi
;

167 
__u16
 
	mbg_‰ì_blocks_cou¡_hi
;

168 
__u16
 
	mbg_‰ì_öodes_cou¡_hi
;

169 
__u16
 
	mbg_u£d_dús_cou¡_hi
;

170 
__u16
 
	mbg_∑d
;

171 
__u32
 
	mbg_ª£rved2
[3];

174 
	#EXT2_BG_INODE_UNINIT
 0x0001

	)

175 
	#EXT2_BG_BLOCK_UNINIT
 0x0002

	)

176 
	#EXT2_BG_INODE_ZEROED
 0x0004

	)

190 
	sext2_dx_roŸ_öfo
 {

191 
__u32
 
	mª£rved_zîo
;

192 
__u8
 
	mhash_vîsi⁄
;

193 
__u8
 
	möfo_Àngth
;

194 
__u8
 
	mödúe˘_Àvñs
;

195 
__u8
 
	munu£d_Êags
;

198 
	#EXT2_HASH_LEGACY
 0

	)

199 
	#EXT2_HASH_HALF_MD4
 1

	)

200 
	#EXT2_HASH_TEA
 2

	)

201 
	#EXT2_HASH_LEGACY_UNSIGNED
 3

	)

202 
	#EXT2_HASH_HALF_MD4_UNSIGNED
 4

	)

203 
	#EXT2_HASH_TEA_UNSIGNED
 5

	)

205 
	#EXT2_HASH_FLAG_INCOMPAT
 0x1

	)

207 
	sext2_dx_íåy
 {

208 
__u32
 
	mhash
;

209 
__u32
 
	mblock
;

212 
	sext2_dx_cou¡limô
 {

213 
__u16
 
	mlimô
;

214 
__u16
 
	mcou¡
;

221 
	#EXT2_MIN_DESC_SIZE
 32

	)

222 
	#EXT2_MIN_DESC_SIZE_64BIT
 64

	)

223 
	#EXT2_MAX_DESC_SIZE
 
EXT2_MIN_BLOCK_SIZE


	)

224 
	#EXT2_DESC_SIZE
(
s
) \

225 ((
	`EXT2_SB
(
s
)->
s_„©uª_öcom∑t
 & 
EXT4_FEATURE_INCOMPAT_64BIT
) ? \

226 (
s
)->
s_desc_size
 : 
EXT2_MIN_DESC_SIZE
)

	)

228 
	#EXT2_BLOCKS_PER_GROUP
(
s
Ë(
	`EXT2_SB
(s)->
s_blocks_≥r_group
)

	)

229 
	#EXT2_INODES_PER_GROUP
(
s
Ë(
	`EXT2_SB
(s)->
s_öodes_≥r_group
)

	)

230 
	#EXT2_INODES_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(s)/
	`EXT2_INODE_SIZE
(s))

	)

232 
	#EXT2_MAX_BLOCKS_PER_GROUP
(
s
Ë((1 << 16Ë- 8)

	)

233 
	#EXT2_MAX_INODES_PER_GROUP
(
s
Ë((1 << 16Ë- 
	`EXT2_INODES_PER_BLOCK
(s))

	)

234 #ifde‡
__KERNEL__


235 
	#EXT2_DESC_PER_BLOCK
(
s
Ë(
	`EXT2_SB
(s)->
s_desc_≥r_block
)

	)

236 
	#EXT2_DESC_PER_BLOCK_BITS
(
s
Ë(
	`EXT2_SB
(s)->
s_desc_≥r_block_bôs
)

	)

238 
	#EXT2_DESC_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/ 
	`EXT2_DESC_SIZE
(s))

	)

244 
	#EXT2_NDIR_BLOCKS
 12

	)

245 
	#EXT2_IND_BLOCK
 
EXT2_NDIR_BLOCKS


	)

246 
	#EXT2_DIND_BLOCK
 (
EXT2_IND_BLOCK
 + 1)

	)

247 
	#EXT2_TIND_BLOCK
 (
EXT2_DIND_BLOCK
 + 1)

	)

248 
	#EXT2_N_BLOCKS
 (
EXT2_TIND_BLOCK
 + 1)

	)

253 
	#EXT2_SECRM_FL
 0x00000001

	)

254 
	#EXT2_UNRM_FL
 0x00000002

	)

255 
	#EXT2_COMPR_FL
 0x00000004

	)

256 
	#EXT2_SYNC_FL
 0x00000008

	)

257 
	#EXT2_IMMUTABLE_FL
 0x00000010

	)

258 
	#EXT2_APPEND_FL
 0x00000020

	)

259 
	#EXT2_NODUMP_FL
 0x00000040

	)

260 
	#EXT2_NOATIME_FL
 0x00000080

	)

262 
	#EXT2_DIRTY_FL
 0x00000100

	)

263 
	#EXT2_COMPRBLK_FL
 0x00000200

	)

264 
	#EXT2_NOCOMPR_FL
 0x00000400

	)

265 
	#EXT2_ECOMPR_FL
 0x00000800

	)

267 
	#EXT2_BTREE_FL
 0x00001000

	)

268 
	#EXT2_INDEX_FL
 0x00001000

	)

269 
	#EXT2_IMAGIC_FL
 0x00002000

	)

270 
	#EXT3_JOURNAL_DATA_FL
 0x00004000

	)

271 
	#EXT2_NOTAIL_FL
 0x00008000

	)

272 
	#EXT2_DIRSYNC_FL
 0x00010000

	)

273 
	#EXT2_TOPDIR_FL
 0x00020000

	)

274 
	#EXT4_HUGE_FILE_FL
 0x00040000

	)

275 
	#EXT4_EXTENTS_FL
 0x00080000

	)

276 
	#EXT2_RESERVED_FL
 0x80000000

	)

278 
	#EXT2_FL_USER_VISIBLE
 0x000BDFFF

	)

279 
	#EXT2_FL_USER_MODIFIABLE
 0x000080FF

	)

286 
	sext2_√w_group_öput
 {

287 
__u32
 
	mgroup
;

288 
__u32
 
	mblock_bôm≠
;

289 
__u32
 
	möode_bôm≠
;

290 
__u32
 
	möode_èbÀ
;

291 
__u32
 
	mblocks_cou¡
;

292 
__u16
 
	mª£rved_blocks
;

293 
__u16
 
	munu£d
;

296 
	sext4_√w_group_öput
 {

297 
__u32
 
	mgroup
;

298 
__u64
 
	mblock_bôm≠
;

299 
__u64
 
	möode_bôm≠
;

300 
__u64
 
	möode_èbÀ
;

301 
__u32
 
	mblocks_cou¡
;

302 
__u16
 
	mª£rved_blocks
;

303 
__u16
 
	munu£d
;

306 #ifde‡
__GNU__


307 
	#_IOT_ext2_√w_group_öput
 
	`_IOT
 (
	`_IOTS
(
__u32
), 5, _IOTS(
__u16
), 2, 0, 0)

	)

310 
	#EXT2_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

311 
	#EXT2_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

312 
	#EXT2_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

313 
	#EXT2_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

314 
	#EXT2_IOC_GETVERSION_NEW
 
	`_IOR
('f', 3, )

	)

315 
	#EXT2_IOC_SETVERSION_NEW
 
	`_IOW
('f', 4, )

	)

316 
	#EXT2_IOC_GROUP_EXTEND
 
	`_IOW
('f', 7, )

	)

317 
	#EXT2_IOC_GROUP_ADD
 
	`_IOW
('f', 8,
ext2_√w_group_öput
)

	)

318 
	#EXT4_IOC_GROUP_ADD
 
	`_IOW
('f', 8,
ext4_√w_group_öput
)

	)

323 
	sext2_öode
 {

324 
__u16
 
	mi_mode
;

325 
__u16
 
	mi_uid
;

326 
__u32
 
	mi_size
;

327 
__u32
 
	mi_©ime
;

328 
__u32
 
	mi_˘ime
;

329 
__u32
 
	mi_mtime
;

330 
__u32
 
	mi_dtime
;

331 
__u16
 
	mi_gid
;

332 
__u16
 
	mi_löks_cou¡
;

333 
__u32
 
	mi_blocks
;

334 
__u32
 
	mi_Êags
;

337 
__u32
 
	ml_i_vîsi⁄
;

338 } 
	mlöux1
;

340 
__u32
 
	mh_i_å™¶©‹
;

341 } 
	mhurd1
;

342 } 
	mosd1
;

343 
__u32
 
	mi_block
[
EXT2_N_BLOCKS
];

344 
__u32
 
	mi_gíî©i⁄
;

345 
__u32
 
	mi_fûe_a˛
;

346 
__u32
 
	mi_dú_a˛
;

347 
__u32
 
	mi_Áddr
;

350 
__u16
 
	ml_i_blocks_hi
;

351 
__u16
 
	ml_i_fûe_a˛_high
;

352 
__u16
 
	ml_i_uid_high
;

353 
__u16
 
	ml_i_gid_high
;

354 
__u32
 
	ml_i_ª£rved2
;

355 } 
	mlöux2
;

357 
__u8
 
	mh_i_‰ag
;

358 
__u8
 
	mh_i_fsize
;

359 
__u16
 
	mh_i_mode_high
;

360 
__u16
 
	mh_i_uid_high
;

361 
__u16
 
	mh_i_gid_high
;

362 
__u32
 
	mh_i_auth‹
;

363 } 
	mhurd2
;

364 } 
	mosd2
;

370 
	sext2_öode_œrge
 {

371 
__u16
 
	mi_mode
;

372 
__u16
 
	mi_uid
;

373 
__u32
 
	mi_size
;

374 
__u32
 
	mi_©ime
;

375 
__u32
 
	mi_˘ime
;

376 
__u32
 
	mi_mtime
;

377 
__u32
 
	mi_dtime
;

378 
__u16
 
	mi_gid
;

379 
__u16
 
	mi_löks_cou¡
;

380 
__u32
 
	mi_blocks
;

381 
__u32
 
	mi_Êags
;

384 
__u32
 
	ml_i_vîsi⁄
;

385 } 
	mlöux1
;

387 
__u32
 
	mh_i_å™¶©‹
;

388 } 
	mhurd1
;

389 } 
	mosd1
;

390 
__u32
 
	mi_block
[
EXT2_N_BLOCKS
];

391 
__u32
 
	mi_gíî©i⁄
;

392 
__u32
 
	mi_fûe_a˛
;

393 
__u32
 
	mi_dú_a˛
;

394 
__u32
 
	mi_Áddr
;

397 
__u16
 
	ml_i_blocks_hi
;

398 
__u16
 
	ml_i_fûe_a˛_high
;

399 
__u16
 
	ml_i_uid_high
;

400 
__u16
 
	ml_i_gid_high
;

401 
__u32
 
	ml_i_ª£rved2
;

402 } 
	mlöux2
;

404 
__u8
 
	mh_i_‰ag
;

405 
__u8
 
	mh_i_fsize
;

406 
__u16
 
	mh_i_mode_high
;

407 
__u16
 
	mh_i_uid_high
;

408 
__u16
 
	mh_i_gid_high
;

409 
__u32
 
	mh_i_auth‹
;

410 } 
	mhurd2
;

411 } 
	mosd2
;

412 
__u16
 
	mi_exåa_isize
;

413 
__u16
 
	mi_∑d1
;

414 
__u32
 
	mi_˘ime_exåa
;

415 
__u32
 
	mi_mtime_exåa
;

416 
__u32
 
	mi_©ime_exåa
;

417 
__u32
 
	mi_¸time
;

418 
__u32
 
	mi_¸time_exåa
;

419 
__u32
 
	mi_vîsi⁄_hi
;

422 
	#i_size_high
 
i_dú_a˛


	)

424 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
__löux__
)

425 
	#i_ª£rved1
 
osd1
.
löux1
.
l_i_ª£rved1


	)

426 
	#i_‰ag
 
osd2
.
löux2
.
l_i_‰ag


	)

427 
	#i_fsize
 
osd2
.
löux2
.
l_i_fsize


	)

428 
	#i_uid_low
 
i_uid


	)

429 
	#i_gid_low
 
i_gid


	)

430 
	#i_uid_high
 
osd2
.
löux2
.
l_i_uid_high


	)

431 
	#i_gid_high
 
osd2
.
löux2
.
l_i_gid_high


	)

432 
	#i_ª£rved2
 
osd2
.
löux2
.
l_i_ª£rved2


	)

434 #i‡
deföed
(
__GNU__
)

436 
	#i_å™¶©‹
 
osd1
.
hurd1
.
h_i_å™¶©‹


	)

437 
	#i_‰ag
 
osd2
.
hurd2
.
h_i_‰ag
;

	)

438 
	#i_fsize
 
osd2
.
hurd2
.
h_i_fsize
;

	)

439 
	#i_uid_high
 
osd2
.
hurd2
.
h_i_uid_high


	)

440 
	#i_gid_high
 
osd2
.
hurd2
.
h_i_gid_high


	)

441 
	#i_auth‹
 
osd2
.
hurd2
.
h_i_auth‹


	)

446 
	#öode_uid
(
öode
Ë((öode).
i_uid
 | (öode).
osd2
.
löux2
.
l_i_uid_high
 << 16)

	)

447 
	#öode_gid
(
öode
Ë((öode).
i_gid
 | (öode).
osd2
.
löux2
.
l_i_gid_high
 << 16)

	)

448 
	#ext2fs_£t_i_uid_high
(
öode
,
x
Ë((öode).
osd2
.
löux2
.
l_i_uid_high
 = (x))

	)

449 
	#ext2fs_£t_i_gid_high
(
öode
,
x
Ë((öode).
osd2
.
löux2
.
l_i_gid_high
 = (x))

	)

454 
	#EXT2_VALID_FS
 0x0001

	)

455 
	#EXT2_ERROR_FS
 0x0002

	)

456 
	#EXT3_ORPHAN_FS
 0x0004

	)

461 
	#EXT2_FLAGS_SIGNED_HASH
 0x0001

	)

462 
	#EXT2_FLAGS_UNSIGNED_HASH
 0x0002

	)

463 
	#EXT2_FLAGS_TEST_FILESYS
 0x0004

	)

468 
	#EXT2_MOUNT_CHECK
 0x0001

	)

469 
	#EXT2_MOUNT_GRPID
 0x0004

	)

470 
	#EXT2_MOUNT_DEBUG
 0x0008

	)

471 
	#EXT2_MOUNT_ERRORS_CONT
 0x0010

	)

472 
	#EXT2_MOUNT_ERRORS_RO
 0x0020

	)

473 
	#EXT2_MOUNT_ERRORS_PANIC
 0x0040

	)

474 
	#EXT2_MOUNT_MINIX_DF
 0x0080

	)

475 
	#EXT2_MOUNT_NO_UID32
 0x0200

	)

477 
	#˛ór_›t
(
o
, 
›t
Ëÿ&~
EXT2_MOUNT_
##
	)
opt

478 
	#£t_›t
(
o
, 
›t
Ëÿ|
EXT2_MOUNT_
##
	)
opt

479 
	#ã°_›t
(
sb
, 
›t
Ë(
	`EXT2_SB
(sb)->
s_mou¡_›t
 & \

480 
EXT2_MOUNT_
##
›t
)

	)

484 
	#EXT2_DFL_MAX_MNT_COUNT
 20

	)

485 
	#EXT2_DFL_CHECKINTERVAL
 0

	)

490 
	#EXT2_ERRORS_CONTINUE
 1

	)

491 
	#EXT2_ERRORS_RO
 2

	)

492 
	#EXT2_ERRORS_PANIC
 3

	)

493 
	#EXT2_ERRORS_DEFAULT
 
EXT2_ERRORS_CONTINUE


	)

498 
	sext2_su≥r_block
 {

499 
__u32
 
	ms_öodes_cou¡
;

500 
__u32
 
	ms_blocks_cou¡
;

501 
__u32
 
	ms_r_blocks_cou¡
;

502 
__u32
 
	ms_‰ì_blocks_cou¡
;

503 
__u32
 
	ms_‰ì_öodes_cou¡
;

504 
__u32
 
	ms_fú°_d©a_block
;

505 
__u32
 
	ms_log_block_size
;

506 
__s32
 
	ms_log_‰ag_size
;

507 
__u32
 
	ms_blocks_≥r_group
;

508 
__u32
 
	ms_‰ags_≥r_group
;

509 
__u32
 
	ms_öodes_≥r_group
;

510 
__u32
 
	ms_mtime
;

511 
__u32
 
	ms_wtime
;

512 
__u16
 
	ms_m¡_cou¡
;

513 
__s16
 
	ms_max_m¡_cou¡
;

514 
__u16
 
	ms_magic
;

515 
__u16
 
	ms_°©e
;

516 
__u16
 
	ms_îr‹s
;

517 
__u16
 
	ms_mö‹_ªv_Àvñ
;

518 
__u32
 
	ms_œ°check
;

519 
__u32
 
	ms_checköãrvÆ
;

520 
__u32
 
	ms_¸ót‹_os
;

521 
__u32
 
	ms_ªv_Àvñ
;

522 
__u16
 
	ms_def_ªsuid
;

523 
__u16
 
	ms_def_ªsgid
;

537 
__u32
 
	ms_fú°_öo
;

538 
__u16
 
	ms_öode_size
;

539 
__u16
 
	ms_block_group_ƒ
;

540 
__u32
 
	ms_„©uª_com∑t
;

541 
__u32
 
	ms_„©uª_öcom∑t
;

542 
__u32
 
	ms_„©uª_ro_com∑t
;

543 
__u8
 
	ms_uuid
[16];

544 
	ms_vﬁume_«me
[16];

545 
	ms_œ°_mou¡ed
[64];

546 
__u32
 
	ms_Æg‹ôhm_ußge_bôm≠
;

551 
__u8
 
	ms_¥óŒoc_blocks
;

552 
__u8
 
	ms_¥óŒoc_dú_blocks
;

553 
__u16
 
	ms_ª£rved_gdt_blocks
;

557 
__u8
 
	ms_jou∫Æ_uuid
[16];

558 
__u32
 
	ms_jou∫Æ_öum
;

559 
__u32
 
	ms_jou∫Æ_dev
;

560 
__u32
 
	ms_œ°_‹ph™
;

561 
__u32
 
	ms_hash_£ed
[4];

562 
__u8
 
	ms_def_hash_vîsi⁄
;

563 
__u8
 
	ms_j∆_backup_ty≥
;

564 
__u16
 
	ms_desc_size
;

565 
__u32
 
	ms_deÁu…_mou¡_›ts
;

566 
__u32
 
	ms_fú°_mëa_bg
;

567 
__u32
 
	ms_mkfs_time
;

568 
__u32
 
	ms_j∆_blocks
[17];

569 
__u32
 
	ms_blocks_cou¡_hi
;

570 
__u32
 
	ms_r_blocks_cou¡_hi
;

571 
__u32
 
	ms_‰ì_blocks_hi
;

572 
__u16
 
	ms_mö_exåa_isize
;

573 
__u16
 
	ms_w™t_exåa_isize
;

574 
__u32
 
	ms_Êags
;

575 
__u16
 
	ms_øid_°ride
;

576 
__u16
 
	ms_mmp_öãrvÆ
;

577 
__u64
 
	ms_mmp_block
;

578 
__u32
 
	ms_øid_°rùe_width
;

579 
__u8
 
	ms_log_groups_≥r_Êex
;

580 
__u8
 
	ms_ª£rved_ch¨_∑d
;

581 
__u16
 
	ms_ª£rved_∑d
;

582 
__u64
 
	ms_kbyãs_wrôãn
;

583 
__u32
 
	ms_ª£rved
[160];

589 
	#EXT2_OS_LINUX
 0

	)

590 
	#EXT2_OS_HURD
 1

	)

591 
	#EXT2_OBSO_OS_MASIX
 2

	)

592 
	#EXT2_OS_FREEBSD
 3

	)

593 
	#EXT2_OS_LITES
 4

	)

598 
	#EXT2_GOOD_OLD_REV
 0

	)

599 
	#EXT2_DYNAMIC_REV
 1

	)

601 
	#EXT2_CURRENT_REV
 
EXT2_GOOD_OLD_REV


	)

602 
	#EXT2_MAX_SUPP_REV
 
EXT2_DYNAMIC_REV


	)

604 
	#EXT2_GOOD_OLD_INODE_SIZE
 128

	)

609 
	#EXT3_JNL_BACKUP_BLOCKS
 1

	)

615 
	#EXT2_HAS_COMPAT_FEATURE
(
sb
,
mask
) \

616 –
	`EXT2_SB
(
sb
)->
s_„©uª_com∑t
 & (
mask
Ë)

	)

617 
	#EXT2_HAS_RO_COMPAT_FEATURE
(
sb
,
mask
) \

618 –
	`EXT2_SB
(
sb
)->
s_„©uª_ro_com∑t
 & (
mask
Ë)

	)

619 
	#EXT2_HAS_INCOMPAT_FEATURE
(
sb
,
mask
) \

620 –
	`EXT2_SB
(
sb
)->
s_„©uª_öcom∑t
 & (
mask
Ë)

	)

622 
	#EXT2_FEATURE_COMPAT_DIR_PREALLOC
 0x0001

	)

623 
	#EXT2_FEATURE_COMPAT_IMAGIC_INODES
 0x0002

	)

624 
	#EXT3_FEATURE_COMPAT_HAS_JOURNAL
 0x0004

	)

625 
	#EXT2_FEATURE_COMPAT_EXT_ATTR
 0x0008

	)

626 
	#EXT2_FEATURE_COMPAT_RESIZE_INODE
 0x0010

	)

627 
	#EXT2_FEATURE_COMPAT_DIR_INDEX
 0x0020

	)

628 
	#EXT2_FEATURE_COMPAT_LAZY_BG
 0x0040

	)

630 
	#EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
 0x0001

	)

631 
	#EXT2_FEATURE_RO_COMPAT_LARGE_FILE
 0x0002

	)

633 
	#EXT4_FEATURE_RO_COMPAT_HUGE_FILE
 0x0008

	)

634 
	#EXT4_FEATURE_RO_COMPAT_GDT_CSUM
 0x0010

	)

635 
	#EXT4_FEATURE_RO_COMPAT_DIR_NLINK
 0x0020

	)

636 
	#EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE
 0x0040

	)

638 
	#EXT2_FEATURE_INCOMPAT_COMPRESSION
 0x0001

	)

639 
	#EXT2_FEATURE_INCOMPAT_FILETYPE
 0x0002

	)

640 
	#EXT3_FEATURE_INCOMPAT_RECOVER
 0x0004

	)

641 
	#EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
 0x0008

	)

642 
	#EXT2_FEATURE_INCOMPAT_META_BG
 0x0010

	)

643 
	#EXT3_FEATURE_INCOMPAT_EXTENTS
 0x0040

	)

644 
	#EXT4_FEATURE_INCOMPAT_64BIT
 0x0080

	)

645 
	#EXT4_FEATURE_INCOMPAT_MMP
 0x0100

	)

646 
	#EXT4_FEATURE_INCOMPAT_FLEX_BG
 0x0200

	)

649 
	#EXT2_FEATURE_COMPAT_SUPP
 0

	)

650 
	#EXT2_FEATURE_INCOMPAT_SUPP
 (
EXT2_FEATURE_INCOMPAT_FILETYPE
)

	)

651 
	#EXT2_FEATURE_RO_COMPAT_SUPP
 (
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
| \

652 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
| \

653 
EXT4_FEATURE_RO_COMPAT_DIR_NLINK
| \

654 
EXT2_FEATURE_RO_COMPAT_BTREE_DIR
)

	)

659 
	#EXT2_DEF_RESUID
 0

	)

660 
	#EXT2_DEF_RESGID
 0

	)

665 
	#EXT2_DEFM_DEBUG
 0x0001

	)

666 
	#EXT2_DEFM_BSDGROUPS
 0x0002

	)

667 
	#EXT2_DEFM_XATTR_USER
 0x0004

	)

668 
	#EXT2_DEFM_ACL
 0x0008

	)

669 
	#EXT2_DEFM_UID16
 0x0010

	)

670 
	#EXT3_DEFM_JMODE
 0x0060

	)

671 
	#EXT3_DEFM_JMODE_DATA
 0x0020

	)

672 
	#EXT3_DEFM_JMODE_ORDERED
 0x0040

	)

673 
	#EXT3_DEFM_JMODE_WBACK
 0x0060

	)

678 
	#EXT2_NAME_LEN
 255

	)

680 
	sext2_dú_íåy
 {

681 
__u32
 
	möode
;

682 
__u16
 
	mªc_Àn
;

683 
__u16
 
	m«me_Àn
;

684 
	m«me
[
EXT2_NAME_LEN
];

693 
	sext2_dú_íåy_2
 {

694 
__u32
 
	möode
;

695 
__u16
 
	mªc_Àn
;

696 
__u8
 
	m«me_Àn
;

697 
__u8
 
	mfûe_ty≥
;

698 
	m«me
[
EXT2_NAME_LEN
];

705 
	#EXT2_FT_UNKNOWN
 0

	)

706 
	#EXT2_FT_REG_FILE
 1

	)

707 
	#EXT2_FT_DIR
 2

	)

708 
	#EXT2_FT_CHRDEV
 3

	)

709 
	#EXT2_FT_BLKDEV
 4

	)

710 
	#EXT2_FT_FIFO
 5

	)

711 
	#EXT2_FT_SOCK
 6

	)

712 
	#EXT2_FT_SYMLINK
 7

	)

714 
	#EXT2_FT_MAX
 8

	)

721 
	#EXT2_DIR_PAD
 4

	)

722 
	#EXT2_DIR_ROUND
 (
EXT2_DIR_PAD
 - 1)

	)

723 
	#EXT2_DIR_REC_LEN
(
«me_Àn
Ë((“ame_ÀnË+ 8 + 
EXT2_DIR_ROUND
) & \

724 ~
EXT2_DIR_ROUND
)

	)

731 
	#EXT2_MMP_MAGIC
 0x004D4D50

	)

732 
	#EXT2_MMP_CLEAN
 0xFF4D4D50

	)

733 
	#EXT2_MMP_FSCK_ON
 0xE24D4D50

	)

735 
	smmp_°ru˘
 {

736 
__u32
 
	mmmp_magic
;

737 
__u32
 
	mmmp_£q
;

738 
__u64
 
	mmmp_time
;

739 
	mmmp_nodíame
[64];

740 
	mmmp_bdev«me
[32];

741 
__u16
 
	mmmp_öãrvÆ
;

742 
__u16
 
	mmmp_∑d1
;

743 
__u32
 
	mmmp_∑d2
;

749 
	#EXT2_MMP_DEF_INTERVAL
 5

	)

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2_io.h

12 #i‚de‡
_EXT2FS_EXT2_IO_H


13 
	#_EXT2FS_EXT2_IO_H


	)

18 #i‡
deföed
(
__GNUC__
Ë|| deföed(
HAS_LONG_LONG
)

19 
	text2_loff_t
;

21 
	text2_loff_t
;

25 
ext2_loff_t
 
ext2fs_Œ£ek
 (,Éxt2_loff_t, );

27 
°ru˘_io_m™agî
 *
	tio_m™agî
;

28 
°ru˘_io_ch™√l
 *
	tio_ch™√l
;

29 
°ru˘_io_°©s
 *
	tio_°©s
;

31 
	#CHANNEL_FLAGS_WRITETHROUGH
 0x01

	)

33 
	s°ru˘_io_ch™√l
 {

34 
îrcode_t
 
	mmagic
;

35 
io_m™agî
 
	mm™agî
;

36 *
	m«me
;

37 
	mblock_size
;

38 
îrcode_t
 (*
ªad_îr‹
)(
io_ch™√l
 
	mch™√l
,

39 
	mblock
,

40 
	mcou¡
,

41 *
	md©a
,

42 
size_t
 
	msize
,

43 
	ma˘uÆ_byãs_ªad
,

44 
îrcode_t
 
	mîr‹
);

45 
îrcode_t
 (*
wrôe_îr‹
)(
io_ch™√l
 
	mch™√l
,

46 
	mblock
,

47 
	mcou¡
,

48 c⁄° *
	md©a
,

49 
size_t
 
	msize
,

50 
	ma˘uÆ_byãs_wrôãn
,

51 
îrcode_t
 
	mîr‹
);

52 
	mªfcou¡
;

53 
	mÊags
;

54 
	mª£rved
[14];

55 *
	m¥iv©e_d©a
;

56 *
	m≠p_d©a
;

59 
	s°ru˘_io_°©s
 {

60 
	mnum_fõlds
;

61 
	mª£rved
;

62 
	mbyãs_ªad
;

63 
	mbyãs_wrôãn
;

66 
	s°ru˘_io_m™agî
 {

67 
îrcode_t
 
	mmagic
;

68 c⁄° *
	m«me
;

69 
îrcode_t
 (*
›í
)(c⁄° *
	m«me
, 
	mÊags
, 
io_ch™√l
 *
	mch™√l
);

70 
îrcode_t
 (*
˛o£
)(
io_ch™√l
 
	mch™√l
);

71 
îrcode_t
 (*
£t_blksize
)(
io_ch™√l
 
	mch™√l
, 
	mblksize
);

72 
îrcode_t
 (*
ªad_blk
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

73 
	mcou¡
, *
	md©a
);

74 
îrcode_t
 (*
wrôe_blk
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

75 
	mcou¡
, c⁄° *
	md©a
);

76 
îrcode_t
 (*
Êush
)(
io_ch™√l
 
	mch™√l
);

77 
îrcode_t
 (*
wrôe_byã
)(
io_ch™√l
 
	mch™√l
, 
	moff£t
,

78 
	mcou¡
, c⁄° *
	md©a
);

79 
îrcode_t
 (*
£t_›ti⁄
)(
io_ch™√l
 
	mch™√l
, c⁄° *
	m›ti⁄
,

80 c⁄° *
	m¨g
);

81 
îrcode_t
 (*
gë_°©s
)(
io_ch™√l
 
	mch™√l
, 
io_°©s
 *
	mio_°©s
);

82 
îrcode_t
 (*
ªad_blk64
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

83 
	mcou¡
, *
	md©a
);

84 
îrcode_t
 (*
wrôe_blk64
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

85 
	mcou¡
, c⁄° *
	md©a
);

86 
	mª£rved
[16];

89 
	#IO_FLAG_RW
 0x0001

	)

90 
	#IO_FLAG_EXCLUSIVE
 0x0002

	)

95 
	#io_ch™√l_˛o£
(
c
Ë((c)->
m™agî
->
	`˛o£
((c)))

	)

96 
	#io_ch™√l_£t_blksize
(
c
,
s
Ë((c)->
m™agî
->
	`£t_blksize
((c),s))

	)

97 
	#io_ch™√l_ªad_blk
(
c
,
b
,
n
,
d
Ë((c)->
m™agî
->
	`ªad_blk
((c),b,n,d))

	)

98 
	#io_ch™√l_wrôe_blk
(
c
,
b
,
n
,
d
Ë((c)->
m™agî
->
	`wrôe_blk
((c),b,n,d))

	)

99 
	#io_ch™√l_Êush
(
c
Ë((c)->
m™agî
->
	`Êush
((c)))

	)

100 
	#io_ch™√l_bumpcou¡
(
c
Ë((c)->
ªfcou¡
++)

	)

103 
îrcode_t
 
io_ch™√l_£t_›ti⁄s
(
io_ch™√l
 
ch™√l
,

104 c⁄° *
›ti⁄s
);

105 
îrcode_t
 
io_ch™√l_wrôe_byã
(
io_ch™√l
 
ch™√l
,

106 
off£t
,

107 
cou¡
, c⁄° *
d©a
);

108 
îrcode_t
 
io_ch™√l_ªad_blk64
(
io_ch™√l
 
ch™√l
,

109 
block
,

110 
cou¡
, *
d©a
);

111 
îrcode_t
 
io_ch™√l_wrôe_blk64
(
io_ch™√l
 
ch™√l
,

112 
block
,

113 
cou¡
, c⁄° *
d©a
);

116 
io_m™agî
 
unix_io_m™agî
;

119 
io_m™agî
 
undo_io_m™agî
;

120 
îrcode_t
 
£t_undo_io_backög_m™agî
(
io_m™agî
 
m™agî
);

121 
îrcode_t
 
£t_undo_io_backup_fûe
(*
fûe_«me
);

124 
io_m™agî
 
ã°_io_m™agî
, 
ã°_io_backög_m™agî
;

125 (*
ã°_io_cb_ªad_blk
)

126 (
block
, 
cou¡
, 
îrcode_t
 
îr
);

127 (*
ã°_io_cb_wrôe_blk
)

128 (
block
, 
cou¡
, 
îrcode_t
 
îr
);

129 (*
ã°_io_cb_£t_blksize
)

130 (
blksize
, 
îrcode_t
 
îr
);

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2_types.h

6 #i‡(!
deföed
(
_LINUX_TYPES_H
Ë&& !deföed(
_BLKID_TYPES_H
) && \

7 !
	$deföed
(
_EXT2_TYPES_H
))

8 
	#_EXT2_TYPES_H


	)

10 
	#__S8_TYPEDEF
 
__sig√d__
 

	)

11 
	#__U8_TYPEDEF
 

	)

12 
	#__S16_TYPEDEF
 
__sig√d__
 

	)

13 
	#__U16_TYPEDEF
 

	)

14 
	#__S32_TYPEDEF
 
__sig√d__
 

	)

15 
	#__U32_TYPEDEF
 

	)

16 
	#__S64_TYPEDEF
 
__sig√d__
 

	)

17 
	#__U64_TYPEDEF
 

	)

19 #ifde‡
__U8_TYPEDEF


20 
__U8_TYPEDEF
 
	t__u8
;

22 
	t__u8
;

25 #ifde‡
__S8_TYPEDEF


26 
__S8_TYPEDEF
 
	t__s8
;

28 sig√d 
	t__s8
;

31 #ifde‡
__U16_TYPEDEF


32 
__U16_TYPEDEF
 
	t__u16
;

35 
	t__u16
;

38 
	t__u16
;

40 ?==
îr‹
: 
undeföed
 16 
bô
 
ty≥


45 #ifde‡
__S16_TYPEDEF


46 
__S16_TYPEDEF
 
	t__s16
;

49 
	t__s16
;

52 
	t__s16
;

54 ?==
îr‹
: 
undeföed
 16 
bô
 
ty≥


60 #ifde‡
__U32_TYPEDEF


61 
__U32_TYPEDEF
 
	t__u32
;

64 
	t__u32
;

67 
	t__u32
;

70 
	t__u32
;

72 ?=
îr‹
: 
undeföed
 32 
bô
 
ty≥


78 #ifde‡
__S32_TYPEDEF


79 
__S32_TYPEDEF
 
	t__s32
;

82 
	t__s32
;

85 
	t__s32
;

88 
	t__s32
;

90 ?=
îr‹
: 
undeföed
 32 
bô
 
ty≥


96 #ifde‡
__U64_TYPEDEF


97 
__U64_TYPEDEF
 
	t__u64
;

100 
	t__u64
;

103 
	t__u64
;

106 
	t__u64
;

112 #ifde‡
__S64_TYPEDEF


113 
__S64_TYPEDEF
 
	t__s64
;

116 
	t__s64
;

119 
	t__s64
;

122 #i‡
	`deföed
(
__GNUC__
)

123 
__sig√d__
 
	t__s64
;

125 sig√d 
	t__s64
;

132 #unde‡
__S8_TYPEDEF


133 #unde‡
__U8_TYPEDEF


134 #unde‡
__S16_TYPEDEF


135 #unde‡
__U16_TYPEDEF


136 #unde‡
__S32_TYPEDEF


137 #unde‡
__U32_TYPEDEF


138 #unde‡
__S64_TYPEDEF


139 #unde‡
__U64_TYPEDEF


144 
	#HAVE_SYS_TYPES_H
 1

	)

145 #unde‡
WORDS_BIGENDIAN


	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2fs.h

12 #i‚de‡
_EXT2FS_EXT2FS_H


13 
	#_EXT2FS_EXT2FS_H


	)

15 #ifde‡
__GNUC__


16 
	#EXT2FS_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

18 
	#EXT2FS_ATTR
(
x
)

	)

21 #ifde‡
__˝lu•lus


28 #i‡(!
deföed
(
__GNUC__
Ë&& !deföed(
__WATCOMC__
))

29 
	#NO_INLINE_FUNCS


	)

39 
	#SUPERBLOCK_OFFSET
 1024

	)

40 
	#SUPERBLOCK_SIZE
 1024

	)

46 
	#EXT2_LIB_CURRENT_REV
 
EXT2_DYNAMIC_REV


	)

48 #ifde‡
HAVE_SYS_TYPES_H


49 
	~<sys/ty≥s.h
>

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<°rög.h
>

56 #i‡
EXT2_FLAT_INCLUDES


57 
	~"e2_ty≥s.h
"

58 
	~"ext2_fs.h
"

59 
	~"ext3_exã¡s.h
"

61 
	~<ext2fs/ext2_ty≥s.h
>

62 
	~<ext2fs/ext2_fs.h
>

63 
	~<ext2fs/ext3_exã¡s.h
>

66 
__u32
 
	text2_öo_t
;

67 
__u32
 
	tblk_t
;

68 
__u64
 
	tblk64_t
;

69 
__u32
 
	tdgΩ_t
;

70 
__u32
 
	text2_off_t
;

71 
__s64
 
	te2_blk˙t_t
;

72 
__u32
 
	text2_dúhash_t
;

74 #i‡
EXT2_FLAT_INCLUDES


75 
	~"com_îr.h
"

76 
	~"ext2_io.h
"

77 
	~"ext2_îr.h
"

78 
	~"ext2_ext_©å.h
"

80 
	~<ë/com_îr.h
>

81 
	~<ext2fs/ext2_io.h
>

82 
	~<ext2fs/ext2_îr.h
>

83 
	~<ext2fs/ext2_ext_©å.h
>

89 #ifde‡
_MSC_VER


90 
	#EXT2_QSORT_TYPE
 
__cde˛


	)

92 
	#EXT2_QSORT_TYPE
 

	)

95 
°ru˘_ext2_fûsys
 *
	text2_fûsys
;

97 
	#EXT2FS_MARK_ERROR
 0

	)

98 
	#EXT2FS_UNMARK_ERROR
 1

	)

99 
	#EXT2FS_TEST_ERROR
 2

	)

101 
ext2fs_°ru˘_gíîic_bôm≠
 *
	text2fs_gíîic_bôm≠
;

102 
ext2fs_°ru˘_gíîic_bôm≠
 *
	text2fs_öode_bôm≠
;

103 
ext2fs_°ru˘_gíîic_bôm≠
 *
	text2fs_block_bôm≠
;

105 
	#EXT2_FIRST_INODE
(
s
Ë
	`EXT2_FIRST_INO
(s)

	)

112 
ext2_°ru˘_u32_li°
 *
	text2_badblocks_li°
;

113 
ext2_°ru˘_u32_ôî©e
 *
	text2_badblocks_ôî©e
;

115 
ext2_°ru˘_u32_li°
 *
	text2_u32_li°
;

116 
ext2_°ru˘_u32_ôî©e
 *
	text2_u32_ôî©e
;

119 
ext2_°ru˘_u32_li°
 *
	tbadblocks_li°
;

120 
ext2_°ru˘_u32_ôî©e
 *
	tbadblocks_ôî©e
;

122 
	#BADBLOCKS_FLAG_DIRTY
 1

	)

127 
	sext2_db_íåy
 {

128 
ext2_öo_t
 
öo
;

129 
blk_t
 
blk
;

130 
block˙t
;

133 
ext2_°ru˘_dbli°
 *
	text2_dbli°
;

135 
	#DBLIST_ABORT
 1

	)

141 
	#EXT2_FILE_WRITE
 0x0001

	)

142 
	#EXT2_FILE_CREATE
 0x0002

	)

144 
	#EXT2_FILE_MASK
 0x00FF

	)

146 
	#EXT2_FILE_BUF_DIRTY
 0x4000

	)

147 
	#EXT2_FILE_BUF_VALID
 0x2000

	)

149 
ext2_fûe
 *
	text2_fûe_t
;

151 
	#EXT2_SEEK_SET
 0

	)

152 
	#EXT2_SEEK_CUR
 1

	)

153 
	#EXT2_SEEK_END
 2

	)

158 
	#EXT2_FLAG_RW
 0x01

	)

159 
	#EXT2_FLAG_CHANGED
 0x02

	)

160 
	#EXT2_FLAG_DIRTY
 0x04

	)

161 
	#EXT2_FLAG_VALID
 0x08

	)

162 
	#EXT2_FLAG_IB_DIRTY
 0x10

	)

163 
	#EXT2_FLAG_BB_DIRTY
 0x20

	)

164 
	#EXT2_FLAG_SWAP_BYTES
 0x40

	)

165 
	#EXT2_FLAG_SWAP_BYTES_READ
 0x80

	)

166 
	#EXT2_FLAG_SWAP_BYTES_WRITE
 0x100

	)

167 
	#EXT2_FLAG_MASTER_SB_ONLY
 0x200

	)

168 
	#EXT2_FLAG_FORCE
 0x400

	)

169 
	#EXT2_FLAG_SUPER_ONLY
 0x800

	)

170 
	#EXT2_FLAG_JOURNAL_DEV_OK
 0x1000

	)

171 
	#EXT2_FLAG_IMAGE_FILE
 0x2000

	)

172 
	#EXT2_FLAG_EXCLUSIVE
 0x4000

	)

173 
	#EXT2_FLAG_SOFTSUPP_FEATURES
 0x8000

	)

174 
	#EXT2_FLAG_NOFREE_ON_ERROR
 0x10000

	)

180 
	#EXT2_NEW_INODE_FL
 0x80000000

	)

187 
	#EXT2_MKJOURNAL_V1_SUPER
 0x0000001

	)

189 
	s°ru˘_ext2_fûsys
 {

190 
îrcode_t
 
magic
;

191 
io_ch™√l
 
io
;

192 
Êags
;

193 * 
devi˚_«me
;

194 
ext2_su≥r_block
 * 
su≥r
;

195 
blocksize
;

196 
‰agsize
;

197 
dgΩ_t
 
group_desc_cou¡
;

198 
desc_blocks
;

199 
ext2_group_desc
 * 
group_desc
;

200 
öode_blocks_≥r_group
;

201 
ext2fs_öode_bôm≠
 
öode_m≠
;

202 
ext2fs_block_bôm≠
 
block_m≠
;

203 
îrcode_t
 (*
gë_blocks
)(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
blk_t
 *
blocks
);

204 
îrcode_t
 (*
check_dúe˘‹y
)(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
);

205 
îrcode_t
 (*
wrôe_bôm≠s
)(
ext2_fûsys
 
fs
);

206 
îrcode_t
 (*
ªad_öode
)(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

207 
ext2_öode
 *
öode
);

208 
îrcode_t
 (*
wrôe_öode
)(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

209 
ext2_öode
 *
öode
);

210 
ext2_badblocks_li°
 
badblocks
;

211 
ext2_dbli°
 
dbli°
;

212 
__u32
 
°ride
;

213 
ext2_su≥r_block
 * 
‹ig_su≥r
;

214 
ext2_image_hdr
 * 
image_hódî
;

215 
__u32
 
umask
;

216 
time_t
 
now
;

220 
__u32
 
ª£rved
[7];

225 * 
¥iv_d©a
;

230 
ext2_öode_ˇche
 *
iˇche
;

231 
io_ch™√l
 
image_io
;

236 
îrcode_t
 (*
gë_Æloc_block
)(
ext2_fûsys
 
fs
, 
blk64_t
 
gﬂl
,

237 
blk64_t
 *
ªt
);

238 (*
block_Æloc_°©s
)(
ext2_fûsys
 
fs
, 
blk64_t
 
blk
, 
öu£
);

241 #i‡
EXT2_FLAT_INCLUDES


242 
	~"e2_bô›s.h
"

244 
	~<ext2fs/bô›s.h
>

250 
	#BLOCK_CHANGED
 1

	)

251 
	#BLOCK_ABORT
 2

	)

252 
	#BLOCK_ERROR
 4

	)

278 
	#BLOCK_FLAG_APPEND
 1

	)

279 
	#BLOCK_FLAG_HOLE
 1

	)

280 
	#BLOCK_FLAG_DEPTH_TRAVERSE
 2

	)

281 
	#BLOCK_FLAG_DATA_ONLY
 4

	)

282 
	#BLOCK_FLAG_READ_ONLY
 8

	)

284 
	#BLOCK_FLAG_NO_LARGE
 0x1000

	)

289 
	#BLOCK_COUNT_IND
 (-1)

	)

290 
	#BLOCK_COUNT_DIND
 (-2)

	)

291 
	#BLOCK_COUNT_TIND
 (-3)

	)

292 
	#BLOCK_COUNT_TRANSLATOR
 (-4)

	)

298 
	#EXT2_BMOVE_GET_DBLIST
 0x0001

	)

299 
	#EXT2_BMOVE_DEBUG
 0x0002

	)

306 
	#EXT2_EXTENT_FLAGS_LEAF
 0x0001

	)

307 
	#EXT2_EXTENT_FLAGS_UNINIT
 0x0002

	)

308 
	#EXT2_EXTENT_FLAGS_SECOND_VISIT
 0x0004

	)

310 
	sext2fs_exã¡
 {

311 
blk64_t
 
e_pblk
;

312 
blk64_t
 
e_lblk
;

313 
__u32
 
e_Àn
;

314 
__u32
 
e_Êags
;

317 
ext2_exã¡_h™dÀ
 *
	text2_exã¡_h™dÀ_t
;

318 
ext2_exã¡_∑th
 *
	text2_exã¡_∑th_t
;

323 
	#EXT2_EXTENT_CURRENT
 0x0000

	)

324 
	#EXT2_EXTENT_MOVE_MASK
 0x000F

	)

325 
	#EXT2_EXTENT_ROOT
 0x0001

	)

326 
	#EXT2_EXTENT_LAST_LEAF
 0x0002

	)

327 
	#EXT2_EXTENT_FIRST_SIB
 0x0003

	)

328 
	#EXT2_EXTENT_LAST_SIB
 0x0004

	)

329 
	#EXT2_EXTENT_NEXT_SIB
 0x0005

	)

330 
	#EXT2_EXTENT_PREV_SIB
 0x0006

	)

331 
	#EXT2_EXTENT_NEXT_LEAF
 0x0007

	)

332 
	#EXT2_EXTENT_PREV_LEAF
 0x0008

	)

333 
	#EXT2_EXTENT_NEXT
 0x0009

	)

334 
	#EXT2_EXTENT_PREV
 0x000A

	)

335 
	#EXT2_EXTENT_UP
 0x000B

	)

336 
	#EXT2_EXTENT_DOWN
 0x000C

	)

337 
	#EXT2_EXTENT_DOWN_AND_LAST
 0x000D

	)

342 
	#EXT2_EXTENT_INSERT_AFTER
 0x0001

	)

343 
	#EXT2_EXTENT_INSERT_NOSPLIT
 0x0002

	)

348 
	#EXT2_EXTENT_DELETE_KEEP_EMPTY
 0x001

	)

353 
	#EXT2_EXTENT_SET_BMAP_UNINIT
 0x0001

	)

358 
	sext2_exã¡_öfo
 {

359 
cuº_íåy
;

360 
cuº_Àvñ
;

361 
num_íåõs
;

362 
max_íåõs
;

363 
max_dïth
;

364 
byãs_avaû
;

365 
blk64_t
 
max_lblk
;

366 
blk64_t
 
max_pblk
;

367 
__u32
 
max_Àn
;

368 
__u32
 
max_unöô_Àn
;

374 
	#EXT2_DIRBLOCK_V2_STRUCT
 0x0001

	)

379 
	#DIRENT_CHANGED
 1

	)

380 
	#DIRENT_ABORT
 2

	)

381 
	#DIRENT_ERROR
 3

	)

387 
	#DIRENT_FLAG_INCLUDE_EMPTY
 1

	)

388 
	#DIRENT_FLAG_INCLUDE_REMOVED
 2

	)

390 
	#DIRENT_DOT_FILE
 1

	)

391 
	#DIRENT_DOT_DOT_FILE
 2

	)

392 
	#DIRENT_OTHER_FILE
 3

	)

393 
	#DIRENT_DELETED_FILE
 4

	)

398 
ext2_°ru˘_öode_sˇn
 *
	text2_öode_sˇn
;

403 
	#EXT2_SF_CHK_BADBLOCKS
 0x0001

	)

404 
	#EXT2_SF_BAD_INODE_BLK
 0x0002

	)

405 
	#EXT2_SF_BAD_EXTRA_BYTES
 0x0004

	)

406 
	#EXT2_SF_SKIP_MISSING_ITABLE
 0x0008

	)

407 
	#EXT2_SF_DO_LAZY
 0x0010

	)

412 
	#EXT2_MF_MOUNTED
 1

	)

413 
	#EXT2_MF_ISROOT
 2

	)

414 
	#EXT2_MF_READONLY
 4

	)

415 
	#EXT2_MF_SWAP
 8

	)

416 
	#EXT2_MF_BUSY
 16

	)

423 
	#LINUX_S_IFMT
 00170000

	)

424 
	#LINUX_S_IFSOCK
 0140000

	)

425 
	#LINUX_S_IFLNK
 0120000

	)

426 
	#LINUX_S_IFREG
 0100000

	)

427 
	#LINUX_S_IFBLK
 0060000

	)

428 
	#LINUX_S_IFDIR
 0040000

	)

429 
	#LINUX_S_IFCHR
 0020000

	)

430 
	#LINUX_S_IFIFO
 0010000

	)

431 
	#LINUX_S_ISUID
 0004000

	)

432 
	#LINUX_S_ISGID
 0002000

	)

433 
	#LINUX_S_ISVTX
 0001000

	)

435 
	#LINUX_S_IRWXU
 00700

	)

436 
	#LINUX_S_IRUSR
 00400

	)

437 
	#LINUX_S_IWUSR
 00200

	)

438 
	#LINUX_S_IXUSR
 00100

	)

440 
	#LINUX_S_IRWXG
 00070

	)

441 
	#LINUX_S_IRGRP
 00040

	)

442 
	#LINUX_S_IWGRP
 00020

	)

443 
	#LINUX_S_IXGRP
 00010

	)

445 
	#LINUX_S_IRWXO
 00007

	)

446 
	#LINUX_S_IROTH
 00004

	)

447 
	#LINUX_S_IWOTH
 00002

	)

448 
	#LINUX_S_IXOTH
 00001

	)

450 
	#LINUX_S_ISLNK
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFLNK
)

	)

451 
	#LINUX_S_ISREG
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFREG
)

	)

452 
	#LINUX_S_ISDIR
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFDIR
)

	)

453 
	#LINUX_S_ISCHR
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFCHR
)

	)

454 
	#LINUX_S_ISBLK
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFBLK
)

	)

455 
	#LINUX_S_ISFIFO
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFIFO
)

	)

456 
	#LINUX_S_ISSOCK
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFSOCK
)

	)

461 
	#EXT2_I_SIZE
(
i
Ë((i)->
i_size
 | ((
__u64
Ë(i)->
i_size_high
 << 32))

	)

466 
	#EXT2_ICOUNT_OPT_INCREMENT
 0x01

	)

468 
ext2_icou¡
 *
	text2_icou¡_t
;

473 
	#BMAP_ALLOC
 0x0001

	)

474 
	#BMAP_SET
 0x0002

	)

479 
	#BMAP_RET_UNINIT
 0x0001

	)

484 
	#IMAGER_FLAG_INODEMAP
 1

	)

485 
	#IMAGER_FLAG_SPARSEWRITE
 2

	)

491 
	#EXT2_CHECK_MAGIC
(, 
code
) \

492 i‡(()->
magic
 !(
code
)Ë (code)

	)

498 
	#EXT2FS_COMPRESSED_BLKADDR
 ((
blk_t
Ë-1)

	)

499 
	#HOLE_BLKADDR
(
_b
Ë((_bË=0 || (_bË=
EXT2FS_COMPRESSED_BLKADDR
)

	)

504 
	#EXT2_LIB_FEATURE_COMPAT_SUPP
 (
EXT2_FEATURE_COMPAT_DIR_PREALLOC
|\

505 
EXT2_FEATURE_COMPAT_IMAGIC_INODES
|\

506 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
|\

507 
EXT2_FEATURE_COMPAT_RESIZE_INODE
|\

508 
EXT2_FEATURE_COMPAT_DIR_INDEX
|\

509 
EXT2_FEATURE_COMPAT_EXT_ATTR
)

	)

512 #ifde‡
ENABLE_COMPRESSION


513 #i‚de‡
I_KNOW_THAT_COMPRESSION_IS_EXPERIMENTAL


519 
	#EXT2_LIB_FEATURE_INCOMPAT_SUPP
 (
EXT2_FEATURE_INCOMPAT_FILETYPE
|\

520 
EXT2_FEATURE_INCOMPAT_COMPRESSION
|\

521 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
|\

522 
EXT2_FEATURE_INCOMPAT_META_BG
|\

523 
EXT3_FEATURE_INCOMPAT_RECOVER
|\

524 
EXT3_FEATURE_INCOMPAT_EXTENTS
|\

525 
EXT4_FEATURE_INCOMPAT_FLEX_BG
)

	)

527 
	#EXT2_LIB_FEATURE_INCOMPAT_SUPP
 (
EXT2_FEATURE_INCOMPAT_FILETYPE
|\

528 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
|\

529 
EXT2_FEATURE_INCOMPAT_META_BG
|\

530 
EXT3_FEATURE_INCOMPAT_RECOVER
|\

531 
EXT3_FEATURE_INCOMPAT_EXTENTS
|\

532 
EXT4_FEATURE_INCOMPAT_FLEX_BG
)

	)

534 
	#EXT2_LIB_FEATURE_RO_COMPAT_SUPP
 (
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
|\

535 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
|\

536 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
|\

537 
EXT4_FEATURE_RO_COMPAT_DIR_NLINK
|\

538 
EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE
|\

539 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
)

	)

545 
	#EXT2_LIB_SOFTSUPP_INCOMPAT
 (0)

	)

546 
	#EXT2_LIB_SOFTSUPP_RO_COMPAT
 (0)

	)

553 
îrcode_t
 
ext2fs_√w_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, 
mode
,

554 
ext2fs_öode_bôm≠
 
m≠
, 
ext2_öo_t
 *
ªt
);

555 
îrcode_t
 
ext2fs_√w_block
(
ext2_fûsys
 
fs
, 
blk_t
 
gﬂl
,

556 
ext2fs_block_bôm≠
 
m≠
, 
blk_t
 *
ªt
);

557 
îrcode_t
 
ext2fs_gë_‰ì_blocks
(
ext2_fûsys
 
fs
, 
blk_t
 
°¨t
,

558 
blk_t
 
föish
, 
num
,

559 
ext2fs_block_bôm≠
 
m≠
,

560 
blk_t
 *
ªt
);

561 
îrcode_t
 
ext2fs_Æloc_block
(
ext2_fûsys
 
fs
, 
blk_t
 
gﬂl
,

562 *
block_buf
, 
blk_t
 *
ªt
);

563 
ext2fs_£t_Æloc_block_ˇŒback
(
ext2_fûsys
 
fs
,

564 
îrcode_t
 (*
func
)(
ext2_fûsys
 
fs
,

565 
blk64_t
 
gﬂl
,

566 
blk64_t
 *
ªt
),

567 
îrcode_t
 (**
ﬁd
)(
ext2_fûsys
 
fs
,

568 
blk64_t
 
gﬂl
,

569 
blk64_t
 *
ªt
));

572 
ext2fs_ª£rve_su≥r_™d_bgd
(
ext2_fûsys
 
fs
,

573 
dgΩ_t
 
group
,

574 
ext2fs_block_bôm≠
 
bm≠
);

575 
ext2fs_£t_block_Æloc_°©s_ˇŒback
(
ext2_fûsys
 
fs
,

576 (*
func
)(
ext2_fûsys
 
fs
,

577 
blk64_t
 
blk
,

578 
öu£
),

579 (**
ﬁd
)(
ext2_fûsys
 
fs
,

580 
blk64_t
 
blk
,

581 
öu£
));

584 
ext2fs_öode_Æloc_°©s
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
öu£
);

585 
ext2fs_öode_Æloc_°©s2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

586 
öu£
, 
isdú
);

587 
ext2fs_block_Æloc_°©s
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, 
öu£
);

590 
îrcode_t
 
ext2fs_Æloˇã_èbÀs
(
ext2_fûsys
 
fs
);

591 
îrcode_t
 
ext2fs_Æloˇã_group_èbÀ
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
,

592 
ext2fs_block_bôm≠
 
bm≠
);

595 
îrcode_t
 
ext2fs_u32_li°_¸óã
(
ext2_u32_li°
 *
ªt
, 
size
);

596 
îrcode_t
 
ext2fs_u32_li°_add
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

597 
ext2fs_u32_li°_föd
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

598 
ext2fs_u32_li°_ã°
(
ext2_u32_li°
 
bb
, 
blk_t
 
blk
);

599 
îrcode_t
 
ext2fs_u32_li°_ôî©e_begö
(
ext2_u32_li°
 
bb
,

600 
ext2_u32_ôî©e
 *
ªt
);

601 
ext2fs_u32_li°_ôî©e
(
ext2_u32_ôî©e
 
ôî
, 
blk_t
 *
blk
);

602 
ext2fs_u32_li°_ôî©e_íd
(
ext2_u32_ôî©e
 
ôî
);

603 
îrcode_t
 
ext2fs_u32_c›y
(
ext2_u32_li°
 
§c
,Éxt2_u32_li° *
de°
);

604 
ext2fs_u32_li°_equÆ
(
ext2_u32_li°
 
bb1
,Éxt2_u32_li° 
bb2
);

606 
îrcode_t
 
ext2fs_badblocks_li°_¸óã
(
ext2_badblocks_li°
 *
ªt
,

607 
size
);

608 
îrcode_t
 
ext2fs_badblocks_li°_add
(
ext2_badblocks_li°
 
bb
,

609 
blk_t
 
blk
);

610 
ext2fs_badblocks_li°_ã°
(
ext2_badblocks_li°
 
bb
,

611 
blk_t
 
blk
);

612 
ext2fs_u32_li°_dñ
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

613 
ext2fs_badblocks_li°_dñ
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

614 
îrcode_t


615 
ext2fs_badblocks_li°_ôî©e_begö
(
ext2_badblocks_li°
 
bb
,

616 
ext2_badblocks_ôî©e
 *
ªt
);

617 
ext2fs_badblocks_li°_ôî©e
(
ext2_badblocks_ôî©e
 
ôî
,

618 
blk_t
 *
blk
);

619 
ext2fs_badblocks_li°_ôî©e_íd
(
ext2_badblocks_ôî©e
 
ôî
);

620 
îrcode_t
 
ext2fs_badblocks_c›y
(
ext2_badblocks_li°
 
§c
,

621 
ext2_badblocks_li°
 *
de°
);

622 
ext2fs_badblocks_equÆ
(
ext2_badblocks_li°
 
bb1
,

623 
ext2_badblocks_li°
 
bb2
);

624 
ext2fs_u32_li°_cou¡
(
ext2_u32_li°
 
bb
);

627 
îrcode_t
 
badblocks_li°_¸óã
(
badblocks_li°
 *
ªt
, 
size
);

628 
îrcode_t
 
badblocks_li°_add
(
badblocks_li°
 
bb
, 
blk_t
 
blk
);

629 
badblocks_li°_ã°
(
badblocks_li°
 
bb
, 
blk_t
 
blk
);

630 
îrcode_t
 
badblocks_li°_ôî©e_begö
(
badblocks_li°
 
bb
,

631 
badblocks_ôî©e
 *
ªt
);

632 
badblocks_li°_ôî©e
(
badblocks_ôî©e
 
ôî
, 
blk_t
 *
blk
);

633 
badblocks_li°_ôî©e_íd
(
badblocks_ôî©e
 
ôî
);

634 
badblocks_li°_‰ì
(
badblocks_li°
 
bb
);

637 
îrcode_t
 
ext2fs_upd©e_bb_öode
(
ext2_fûsys
 
fs
,

638 
ext2_badblocks_li°
 
bb_li°
);

641 
ext2fs_‰ì_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
);

642 
ext2fs_‰ì_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
);

643 
îrcode_t
 
ext2fs_c›y_bôm≠
(
ext2fs_gíîic_bôm≠
 
§c
,

644 
ext2fs_gíîic_bôm≠
 *
de°
);

645 
îrcode_t
 
ext2fs_wrôe_öode_bôm≠
(
ext2_fûsys
 
fs
);

646 
îrcode_t
 
ext2fs_wrôe_block_bôm≠
 (
ext2_fûsys
 
fs
);

647 
îrcode_t
 
ext2fs_ªad_öode_bôm≠
 (
ext2_fûsys
 
fs
);

648 
îrcode_t
 
ext2fs_ªad_block_bôm≠
(
ext2_fûsys
 
fs
);

649 
îrcode_t
 
ext2fs_Æloˇã_block_bôm≠
(
ext2_fûsys
 
fs
,

650 c⁄° *
des¸
,

651 
ext2fs_block_bôm≠
 *
ªt
);

652 
îrcode_t
 
ext2fs_Æloˇã_öode_bôm≠
(
ext2_fûsys
 
fs
,

653 c⁄° *
des¸
,

654 
ext2fs_öode_bôm≠
 *
ªt
);

655 
îrcode_t
 
ext2fs_fudge_öode_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
,

656 
ext2_öo_t
 
íd
,Éxt2_öo_à*
€nd
);

657 
îrcode_t
 
ext2fs_fudge_block_bôm≠_íd
(
ext2fs_block_bôm≠
 
bôm≠
,

658 
blk_t
 
íd
, blk_à*
€nd
);

659 
ext2fs_˛ór_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
);

660 
ext2fs_˛ór_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
);

661 
îrcode_t
 
ext2fs_ªad_bôm≠s
(
ext2_fûsys
 
fs
);

662 
îrcode_t
 
ext2fs_wrôe_bôm≠s
(
ext2_fûsys
 
fs
);

663 
îrcode_t
 
ext2fs_ªsize_öode_bôm≠
(
__u32
 
√w_íd
, __u32 
√w_ªÆ_íd
,

664 
ext2fs_öode_bôm≠
 
bm≠
);

665 
îrcode_t
 
ext2fs_ªsize_block_bôm≠
(
__u32
 
√w_íd
, __u32 
√w_ªÆ_íd
,

666 
ext2fs_block_bôm≠
 
bm≠
);

667 
îrcode_t
 
ext2fs_com∑ª_block_bôm≠
(
ext2fs_block_bôm≠
 
bm1
,

668 
ext2fs_block_bôm≠
 
bm2
);

669 
îrcode_t
 
ext2fs_com∑ª_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bm1
,

670 
ext2fs_öode_bôm≠
 
bm2
);

671 
îrcode_t
 
ext2fs_£t_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bm≠
,

672 
ext2_öo_t
 
°¨t
, 
num
,

673 *
ö
);

674 
îrcode_t
 
ext2fs_gë_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bm≠
,

675 
ext2_öo_t
 
°¨t
, 
num
,

676 *
out
);

677 
îrcode_t
 
ext2fs_£t_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bm≠
,

678 
blk_t
 
°¨t
, 
num
,

679 *
ö
);

680 
îrcode_t
 
ext2fs_gë_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bm≠
,

681 
blk_t
 
°¨t
, 
num
,

682 *
out
);

686 
îrcode_t
 
ext2fs_block_ôî©e
(
ext2_fûsys
 
fs
,

687 
ext2_öo_t
 
öo
,

688 
Êags
,

689 *
block_buf
,

690 (*
func
)(
ext2_fûsys
 
fs
,

691 
blk_t
 *
blockƒ
,

692 
block˙t
,

693 *
¥iv_d©a
),

694 *
¥iv_d©a
);

695 
îrcode_t
 
ext2fs_block_ôî©e2
(
ext2_fûsys
 
fs
,

696 
ext2_öo_t
 
öo
,

697 
Êags
,

698 *
block_buf
,

699 (*
func
)(
ext2_fûsys
 
fs
,

700 
blk_t
 *
blockƒ
,

701 
e2_blk˙t_t
 
block˙t
,

702 
blk_t
 
ªf_blk
,

703 
ªf_off£t
,

704 *
¥iv_d©a
),

705 *
¥iv_d©a
);

708 
îrcode_t
 
ext2fs_bm≠
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

709 
ext2_öode
 *
öode
,

710 *
block_buf
, 
bm≠_Êags
,

711 
blk_t
 
block
, blk_à*
phys_blk
);

712 
îrcode_t
 
ext2fs_bm≠2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

713 
ext2_öode
 *
öode
,

714 *
block_buf
, 
bm≠_Êags
, 
blk64_t
 
block
,

715 *
ªt_Êags
, 
blk64_t
 *
phys_blk
);

719 
îrcode_t
 
ext2fs_move_blocks
(
ext2_fûsys
 
fs
,

720 
ext2fs_block_bôm≠
 
ª£rve
,

721 
ext2fs_block_bôm≠
 
Æloc_m≠
,

722 
Êags
);

726 
îrcode_t
 
ext2fs_check_desc
(
ext2_fûsys
 
fs
);

729 
îrcode_t
 
ext2fs_˛o£
(
ext2_fûsys
 
fs
);

730 
îrcode_t
 
ext2fs_Êush
(
ext2_fûsys
 
fs
);

731 
ext2fs_bg_has_su≥r
(
ext2_fûsys
 
fs
, 
group_block
);

732 
ext2fs_su≥r_™d_bgd_loc
(
ext2_fûsys
 
fs
,

733 
dgΩ_t
 
group
,

734 
blk_t
 *
ªt_su≥r_blk
,

735 
blk_t
 *
ªt_ﬁd_desc_blk
,

736 
blk_t
 *
ªt_√w_desc_blk
,

737 *
ªt_mëa_bg
);

738 
ext2fs_upd©e_dy«mic_ªv
(
ext2_fûsys
 
fs
);

741 
ext2fs_group_desc_csum_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

742 
ext2fs_group_desc_csum_vîify
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

743 
îrcode_t
 
ext2fs_£t_gdt_csum
(
ext2_fûsys
 
fs
);

747 
îrcode_t
 
ext2fs_gë_num_dús
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 *
ªt_num_dús
);

748 
îrcode_t
 
ext2fs_öô_dbli°
(
ext2_fûsys
 
fs
, 
ext2_dbli°
 *
ªt_dbli°
);

749 
îrcode_t
 
ext2fs_add_dú_block
(
ext2_dbli°
 
dbli°
, 
ext2_öo_t
 
öo
,

750 
blk_t
 
blk
, 
block˙t
);

751 
ext2fs_dbli°_s‹t
(
ext2_dbli°
 
dbli°
,

752 
EXT2_QSORT_TYPE
 (*
s‹tfunc
)(const *,

754 
îrcode_t
 
ext2fs_dbli°_ôî©e
(
ext2_dbli°
 
dbli°
,

755 (*
func
)(
ext2_fûsys
 
fs
, 
ext2_db_íåy
 *
db_öfo
,

756 *
¥iv_d©a
),

757 *
¥iv_d©a
);

758 
îrcode_t
 
ext2fs_£t_dú_block
(
ext2_dbli°
 
dbli°
, 
ext2_öo_t
 
öo
,

759 
blk_t
 
blk
, 
block˙t
);

760 
îrcode_t
 
ext2fs_c›y_dbli°
(
ext2_dbli°
 
§c
,

761 
ext2_dbli°
 *
de°
);

762 
ext2fs_dbli°_cou¡
(
ext2_dbli°
 
dbli°
);

763 
îrcode_t
 
ext2fs_dbli°_gë_œ°
(
ext2_dbli°
 
dbli°
,

764 
ext2_db_íåy
 **
íåy
);

765 
îrcode_t
 
ext2fs_dbli°_dr›_œ°
(
ext2_dbli°
 
dbli°
);

768 
îrcode_t


769 
ext2fs_dbli°_dú_ôî©e
(
ext2_dbli°
 
dbli°
,

770 
Êags
,

771 *
block_buf
,

772 (*
func
)(
ext2_öo_t
 
dú
,

773 
íåy
,

774 
ext2_dú_íåy
 *
dúít
,

775 
off£t
,

776 
blocksize
,

777 *
buf
,

778 *
¥iv_d©a
),

779 *
¥iv_d©a
);

782 
îrcode_t
 
ext2fs_ªad_dú_block
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

783 *
buf
);

784 
îrcode_t
 
ext2fs_ªad_dú_block2
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

785 *
buf
, 
Êags
);

786 
îrcode_t
 
ext2fs_wrôe_dú_block
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

787 *
buf
);

788 
îrcode_t
 
ext2fs_wrôe_dú_block2
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

789 *
buf
, 
Êags
);

792 
îrcode_t
 
ext2fs_dúhash
(
vîsi⁄
, c⁄° *
«me
, 
Àn
,

793 c⁄° 
__u32
 *
£ed
,

794 
ext2_dúhash_t
 *
ªt_hash
,

795 
ext2_dúhash_t
 *
ªt_mö‹_hash
);

799 
îrcode_t
 
ext2fs_gë_ªc_Àn
(
ext2_fûsys
 
fs
,

800 
ext2_dú_íåy
 *
dúít
,

801 *
ªc_Àn
);

802 
îrcode_t
 
ext2fs_£t_ªc_Àn
(
ext2_fûsys
 
fs
,

803 
Àn
,

804 
ext2_dú_íåy
 *
dúít
);

805 
îrcode_t
 
ext2fs_dú_ôî©e
(
ext2_fûsys
 
fs
,

806 
ext2_öo_t
 
dú
,

807 
Êags
,

808 *
block_buf
,

809 (*
func
)(
ext2_dú_íåy
 *
dúít
,

810 
off£t
,

811 
blocksize
,

812 *
buf
,

813 *
¥iv_d©a
),

814 *
¥iv_d©a
);

815 
îrcode_t
 
ext2fs_dú_ôî©e2
(
ext2_fûsys
 
fs
,

816 
ext2_öo_t
 
dú
,

817 
Êags
,

818 *
block_buf
,

819 (*
func
)(
ext2_öo_t
 
dú
,

820 
íåy
,

821 
ext2_dú_íåy
 *
dúít
,

822 
off£t
,

823 
blocksize
,

824 *
buf
,

825 *
¥iv_d©a
),

826 *
¥iv_d©a
);

829 
îrcode_t
 
ext2fs_dup_h™dÀ
(
ext2_fûsys
 
§c
,Éxt2_fûsy†*
de°
);

832 
îrcode_t
 
ext2fs_ex∑nd_dú
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
);

835 
__u32
 
ext2fs_ext_©å_hash_íåy
(
ext2_ext_©å_íåy
 *
íåy
,

836 *
d©a
);

837 
îrcode_t
 
ext2fs_ªad_ext_©å
(
ext2_fûsys
 
fs
, 
blk_t
 
block
, *
buf
);

838 
îrcode_t
 
ext2fs_wrôe_ext_©å
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

839 *
buf
);

840 
îrcode_t
 
ext2fs_adju°_ó_ªfcou¡
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
,

841 *
block_buf
,

842 
adju°
, 
__u32
 *
√wcou¡
);

845 
îrcode_t
 
ext2fs_exã¡_hódî_vîify
(*
±r
, 
size
);

846 
îrcode_t
 
ext2fs_exã¡_›í
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

847 
ext2_exã¡_h™dÀ_t
 *
h™dÀ
);

848 
îrcode_t
 
ext2fs_exã¡_›í2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

849 
ext2_öode
 *
öode
,

850 
ext2_exã¡_h™dÀ_t
 *
ªt_h™dÀ
);

851 
ext2fs_exã¡_‰ì
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
);

852 
îrcode_t
 
ext2fs_exã¡_gë
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

853 
Êags
, 
ext2fs_exã¡
 *
exã¡
);

854 
îrcode_t
 
ext2fs_exã¡_ª∂a˚
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
,

855 
ext2fs_exã¡
 *
exã¡
);

856 
îrcode_t
 
ext2fs_exã¡_ö£π
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
,

857 
ext2fs_exã¡
 *
exã¡
);

858 
îrcode_t
 
ext2fs_exã¡_£t_bm≠
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

859 
blk64_t
 
logiˇl
, blk64_à
physiˇl
,

860 
Êags
);

861 
îrcode_t
 
ext2fs_exã¡_dñëe
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
);

862 
îrcode_t
 
ext2fs_exã¡_gë_öfo
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

863 
ext2_exã¡_öfo
 *
öfo
);

864 
îrcode_t
 
ext2fs_exã¡_gŸo
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

865 
blk64_t
 
blk
);

868 
îrcode_t
 
ext2fs_fûe_›í2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

869 
ext2_öode
 *
öode
,

870 
Êags
, 
ext2_fûe_t
 *
ªt
);

871 
îrcode_t
 
ext2fs_fûe_›í
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

872 
Êags
, 
ext2_fûe_t
 *
ªt
);

873 
ext2_fûsys
 
ext2fs_fûe_gë_fs
(
ext2_fûe_t
 
fûe
);

874 
îrcode_t
 
ext2fs_fûe_˛o£
(
ext2_fûe_t
 
fûe
);

875 
îrcode_t
 
ext2fs_fûe_Êush
(
ext2_fûe_t
 
fûe
);

876 
îrcode_t
 
ext2fs_fûe_ªad
(
ext2_fûe_t
 
fûe
, *
buf
,

877 
w™ãd
, *
gŸ
);

878 
îrcode_t
 
ext2fs_fûe_wrôe
(
ext2_fûe_t
 
fûe
, c⁄° *
buf
,

879 
nbyãs
, *
wrôãn
);

880 
îrcode_t
 
ext2fs_fûe_Œ£ek
(
ext2_fûe_t
 
fûe
, 
__u64
 
off£t
,

881 
whí˚
, 
__u64
 *
ªt_pos
);

882 
îrcode_t
 
ext2fs_fûe_l£ek
(
ext2_fûe_t
 
fûe
, 
ext2_off_t
 
off£t
,

883 
whí˚
, 
ext2_off_t
 *
ªt_pos
);

884 
îrcode_t
 
ext2fs_fûe_gë_lsize
(
ext2_fûe_t
 
fûe
, 
__u64
 *
ªt_size
);

885 
ext2_off_t
 
ext2fs_fûe_gë_size
(
ext2_fûe_t
 
fûe
);

886 
îrcode_t
 
ext2fs_fûe_£t_size
(
ext2_fûe_t
 
fûe
, 
ext2_off_t
 
size
);

889 *
ext2fs_föd_block_devi˚
(
dev_t
 
devi˚
);

892 
îrcode_t
 
ext2fs_sync_devi˚
(
fd
, 
Êushb
);

895 
ext2fs_‰ì
(
ext2_fûsys
 
fs
);

896 
ext2fs_‰ì_dbli°
(
ext2_dbli°
 
dbli°
);

897 
ext2fs_badblocks_li°_‰ì
(
ext2_badblocks_li°
 
bb
);

898 
ext2fs_u32_li°_‰ì
(
ext2_u32_li°
 
bb
);

901 
ext2fs_‰ì_gíîic_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
);

902 
îrcode_t
 
ext2fs_make_gíîic_bôm≠
”ºcode_à
magic
, 
ext2_fûsys
 
fs
,

903 
__u32
 
°¨t
, __u32 
íd
,

904 
__u32
 
ªÆ_íd
,

905 c⁄° *
des¸
, *
öô_m≠
,

906 
ext2fs_gíîic_bôm≠
 *
ªt
);

907 
îrcode_t
 
ext2fs_Æloˇã_gíîic_bôm≠
(
__u32
 
°¨t
,

908 
__u32
 
íd
,

909 
__u32
 
ªÆ_íd
,

910 c⁄° *
des¸
,

911 
ext2fs_gíîic_bôm≠
 *
ªt
);

912 
îrcode_t
 
ext2fs_c›y_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
§c
,

913 
ext2fs_gíîic_bôm≠
 *
de°
);

914 
ext2fs_˛ór_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

915 
îrcode_t
 
ext2fs_fudge_gíîic_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
,

916 
îrcode_t
 
magic
,

917 
îrcode_t
 
√q
,

918 
ext2_öo_t
 
íd
,

919 
ext2_öo_t
 *
€nd
);

920 
ext2fs_£t_gíîic_bôm≠_∑ddög
(
ext2fs_gíîic_bôm≠
 
m≠
);

921 
îrcode_t
 
ext2fs_ªsize_gíîic_bôm≠
”ºcode_à
magic
,

922 
__u32
 
√w_íd
,

923 
__u32
 
√w_ªÆ_íd
,

924 
ext2fs_gíîic_bôm≠
 
bm≠
);

925 
îrcode_t
 
ext2fs_com∑ª_gíîic_bôm≠
”ºcode_à
magic
,Éºcode_à
√q
,

926 
ext2fs_gíîic_bôm≠
 
bm1
,

927 
ext2fs_gíîic_bôm≠
 
bm2
);

928 
îrcode_t
 
ext2fs_gë_gíîic_bôm≠_ønge
(
ext2fs_gíîic_bôm≠
 
bm≠
,

929 
îrcode_t
 
magic
,

930 
__u32
 
°¨t
, __u32 
num
,

931 *
out
);

932 
îrcode_t
 
ext2fs_£t_gíîic_bôm≠_ønge
(
ext2fs_gíîic_bôm≠
 
bm≠
,

933 
îrcode_t
 
magic
,

934 
__u32
 
°¨t
, __u32 
num
,

935 *
ö
);

938 
îrcode_t
 
ext2fs_gë_devi˚_size
(c⁄° *
fûe
, 
blocksize
,

939 
blk_t
 *
ªtblocks
);

940 
îrcode_t
 
ext2fs_gë_devi˚_size2
(c⁄° *
fûe
, 
blocksize
,

941 
blk64_t
 *
ªtblocks
);

944 
îrcode_t
 
ext2fs_gë_devi˚_£˘size
(c⁄° *
fûe
, *
£˘size
);

947 
îrcode_t
 
ext2fs_iblk_add_blocks
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
,

948 
blk64_t
 
num_blocks
);

949 
îrcode_t
 
ext2fs_iblk_sub_blocks
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
,

950 
blk64_t
 
num_blocks
);

951 
îrcode_t
 
ext2fs_iblk_£t
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
, 
blk64_t
 
b
);

954 
îrcode_t
 
ext2fs_image_öode_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

955 
îrcode_t
 
ext2fs_image_öode_ªad
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

956 
îrcode_t
 
ext2fs_image_su≥r_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

957 
îrcode_t
 
ext2fs_image_su≥r_ªad
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

958 
îrcode_t
 
ext2fs_image_bôm≠_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

959 
îrcode_t
 
ext2fs_image_bôm≠_ªad
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

962 
îrcode_t
 
ext2fs_ªad_öd_block
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, *
buf
);

963 
îrcode_t
 
ext2fs_wrôe_öd_block
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, *
buf
);

966 
îrcode_t
 
ext2fs_öôülize
(c⁄° *
«me
, 
Êags
,

967 
ext2_su≥r_block
 *
∑øm
,

968 
io_m™agî
 
m™agî
, 
ext2_fûsys
 *
ªt_fs
);

971 
ext2fs_‰ì_icou¡
(
ext2_icou¡_t
 
icou¡
);

972 
îrcode_t
 
ext2fs_¸óã_icou¡_tdb
(
ext2_fûsys
 
fs
, *
tdb_dú
,

973 
Êags
, 
ext2_icou¡_t
 *
ªt
);

974 
îrcode_t
 
ext2fs_¸óã_icou¡2
(
ext2_fûsys
 
fs
, 
Êags
,

975 
size
,

976 
ext2_icou¡_t
 
höt
,Éxt2_icou¡_à*
ªt
);

977 
îrcode_t
 
ext2fs_¸óã_icou¡
(
ext2_fûsys
 
fs
, 
Êags
,

978 
size
,

979 
ext2_icou¡_t
 *
ªt
);

980 
îrcode_t
 
ext2fs_icou¡_„tch
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

981 
__u16
 *
ªt
);

982 
îrcode_t
 
ext2fs_icou¡_ö¸emít
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

983 
__u16
 *
ªt
);

984 
îrcode_t
 
ext2fs_icou¡_de¸emít
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

985 
__u16
 *
ªt
);

986 
îrcode_t
 
ext2fs_icou¡_°‹e
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

987 
__u16
 
cou¡
);

988 
ext2_öo_t
 
ext2fs_gë_icou¡_size
(
ext2_icou¡_t
 
icou¡
);

989 
îrcode_t
 
ext2fs_icou¡_vÆid©e
(
ext2_icou¡_t
 
icou¡
, 
FILE
 *);

992 
îrcode_t
 
ext2fs_Êush_iˇche
(
ext2_fûsys
 
fs
);

993 
îrcode_t
 
ext2fs_gë_√xt_öode_fuŒ
(
ext2_öode_sˇn
 
sˇn
,

994 
ext2_öo_t
 *
öo
,

995 
ext2_öode
 *
öode
,

996 
bufsize
);

997 
îrcode_t
 
ext2fs_›í_öode_sˇn
(
ext2_fûsys
 
fs
, 
buf„r_blocks
,

998 
ext2_öode_sˇn
 *
ªt_sˇn
);

999 
ext2fs_˛o£_öode_sˇn
(
ext2_öode_sˇn
 
sˇn
);

1000 
îrcode_t
 
ext2fs_gë_√xt_öode
(
ext2_öode_sˇn
 
sˇn
, 
ext2_öo_t
 *
öo
,

1001 
ext2_öode
 *
öode
);

1002 
îrcode_t
 
ext2fs_öode_sˇn_gŸo_blockgroup
(
ext2_öode_sˇn
 
sˇn
,

1003 
group
);

1004 
ext2fs_£t_öode_ˇŒback


1005 (
ext2_öode_sˇn
 
sˇn
,

1006 
îrcode_t
 (*
d⁄e_group
)(
ext2_fûsys
 
fs
,

1007 
ext2_öode_sˇn
 
sˇn
,

1008 
dgΩ_t
 
group
,

1009 * 
¥iv_d©a
),

1010 *
d⁄e_group_d©a
);

1011 
ext2fs_öode_sˇn_Êags
(
ext2_öode_sˇn
 
sˇn
, 
£t_Êags
,

1012 
˛ór_Êags
);

1013 
îrcode_t
 
ext2fs_ªad_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1014 
ext2_öode
 * 
öode
,

1015 
bufsize
);

1016 
îrcode_t
 
ext2fs_ªad_öode
 (
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1017 
ext2_öode
 * 
öode
);

1018 
îrcode_t
 
ext2fs_wrôe_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1019 
ext2_öode
 * 
öode
,

1020 
bufsize
);

1021 
îrcode_t
 
ext2fs_wrôe_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1022 
ext2_öode
 * 
öode
);

1023 
îrcode_t
 
ext2fs_wrôe_√w_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1024 
ext2_öode
 * 
öode
);

1025 
îrcode_t
 
ext2fs_gë_blocks
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
blk_t
 *
blocks
);

1026 
îrcode_t
 
ext2fs_check_dúe˘‹y
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
);

1029 
io_m™agî
 
öode_io_m™agî
;

1030 
îrcode_t
 
ext2fs_öode_io_öã∫
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1031 **
«me
);

1032 
îrcode_t
 
ext2fs_öode_io_öã∫2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1033 
ext2_öode
 *
öode
,

1034 **
«me
);

1037 
îrcode_t
 
ext2fs_check_if_mou¡ed
(c⁄° *
fûe
, *
mou¡_Êags
);

1038 
îrcode_t
 
ext2fs_check_mou¡_poöt
(c⁄° *
devi˚
, *
mou¡_Êags
,

1039 *
mçt
, 
méí
);

1042 
îrcode_t
 
ext2fs_lookup
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

1043 
«mñí
, *
buf
, 
ext2_öo_t
 *
öode
);

1044 
îrcode_t
 
ext2fs_«mei
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

1045 c⁄° *
«me
, 
ext2_öo_t
 *
öode
);

1046 
îrcode_t
 
ext2fs_«mei_fﬁlow
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

1047 c⁄° *
«me
, 
ext2_öo_t
 *
öode
);

1048 
îrcode_t
 
ext2fs_fﬁlow_lök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

1049 
ext2_öo_t
 
öode
,Éxt2_öo_à*
ªs_öode
);

1052 
ext2fs_«tive_Êag
();

1055 
îrcode_t
 
ext2fs_√w_dú_block
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú_öo
,

1056 
ext2_öo_t
 
∑ª¡_öo
, **
block
);

1059 
îrcode_t
 
ext2fs_mkdú
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
∑ª¡
,Éxt2_öo_à
öum
,

1060 c⁄° *
«me
);

1063 
îrcode_t
 
ext2fs_zîo_blocks
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, 
num
,

1064 
blk_t
 *
ªt_blk
, *
ªt_cou¡
);

1065 
îrcode_t
 
ext2fs_¸óã_jou∫Æ_su≥rblock
(
ext2_fûsys
 
fs
,

1066 
__u32
 
size
, 
Êags
,

1067 **
ªt_jsb
);

1068 
îrcode_t
 
ext2fs_add_jou∫Æ_devi˚
(
ext2_fûsys
 
fs
,

1069 
ext2_fûsys
 
jou∫Æ_dev
);

1070 
îrcode_t
 
ext2fs_add_jou∫Æ_öode
(
ext2_fûsys
 
fs
, 
blk_t
 
size
,

1071 
Êags
);

1072 
ext2fs_deÁu…_jou∫Æ_size
(
__u64
 
blocks
);

1075 
îrcode_t
 
ext2fs_›í
(c⁄° *
«me
, 
Êags
, 
su≥rblock
,

1076 
block_size
, 
io_m™agî
 
m™agî
,

1077 
ext2_fûsys
 *
ªt_fs
);

1078 
îrcode_t
 
ext2fs_›í2
(c⁄° *
«me
, c⁄° *
io_›ti⁄s
,

1079 
Êags
, 
su≥rblock
,

1080 
block_size
, 
io_m™agî
 
m™agî
,

1081 
ext2_fûsys
 *
ªt_fs
);

1082 
blk_t
 
ext2fs_des¸ùt‹_block_loc
(
ext2_fûsys
 
fs
, blk_à
group_block
,

1083 
dgΩ_t
 
i
);

1084 
îrcode_t
 
ext2fs_gë_d©a_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 *
ﬁd_io
);

1085 
îrcode_t
 
ext2fs_£t_d©a_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 
√w_io
);

1086 
îrcode_t
 
ext2fs_ªwrôe_to_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 
√w_io
);

1089 
îrcode_t
 
ext2fs_gë_∑th«me
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
,Éxt2_öo_à
öo
,

1090 **
«me
);

1093 
îrcode_t
 
ext2fs_lök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

1094 
ext2_öo_t
 
öo
, 
Êags
);

1095 
îrcode_t
 
ext2fs_u∆ök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

1096 
ext2_öo_t
 
öo
, 
Êags
);

1099 
îrcode_t
 
ext2fs_ªad_bb_öode
(
ext2_fûsys
 
fs
,

1100 
ext2_badblocks_li°
 *
bb_li°
);

1103 
îrcode_t
 
ext2fs_ªad_bb_FILE2
(
ext2_fûsys
 
fs
, 
FILE
 *
f
,

1104 
ext2_badblocks_li°
 *
bb_li°
,

1105 *
¥iv_d©a
,

1106 (*
övÆid
)(
ext2_fûsys
 
fs
,

1107 
blk_t
 
blk
,

1108 *
bad°r
,

1109 *
¥iv_d©a
));

1110 
îrcode_t
 
ext2fs_ªad_bb_FILE
(
ext2_fûsys
 
fs
, 
FILE
 *
f
,

1111 
ext2_badblocks_li°
 *
bb_li°
,

1112 (*
övÆid
)(
ext2_fûsys
 
fs
,

1113 
blk_t
 
blk
));

1116 
îrcode_t
 
ext2fs_¸óã_ªsize_öode
(
ext2_fûsys
 
fs
);

1119 
ext2fs_sw≠_ext_©å
(*
to
, *
‰om
, 
bufsize
,

1120 
has_hódî
);

1121 
ext2fs_sw≠_ext_©å_hódî
(
ext2_ext_©å_hódî
 *
to_hódî
,

1122 
ext2_ext_©å_hódî
 *
‰om_hdr
);

1123 
ext2fs_sw≠_ext_©å_íåy
(
ext2_ext_©å_íåy
 *
to_íåy
,

1124 
ext2_ext_©å_íåy
 *
‰om_íåy
);

1125 
ext2fs_sw≠_su≥r
(
ext2_su≥r_block
 * 
su≥r
);

1126 
ext2fs_sw≠_group_desc
(
ext2_group_desc
 *
gdp
);

1127 
ext2fs_sw≠_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öode_œrge
 *
t
,

1128 
ext2_öode_œrge
 *
f
, 
ho°‹dî
,

1129 
bufsize
);

1130 
ext2fs_sw≠_öode
(
ext2_fûsys
 
fs
,
ext2_öode
 *
t
,

1131 
ext2_öode
 *
f
, 
ho°‹dî
);

1134 
ext2fs_öode_has_vÆid_blocks
(
ext2_öode
 *
öode
);

1137 
ext2fs_∑r£_vîsi⁄_°rög
(c⁄° *
vî_°rög
);

1138 
ext2fs_gë_libøry_vîsi⁄
(c⁄° **
vî_°rög
,

1139 c⁄° **
d©e_°rög
);

1142 
îrcode_t
 
ext2fs_wrôe_bb_FILE
(
ext2_badblocks_li°
 
bb_li°
,

1143 
Êags
,

1144 
FILE
 *
f
);

1148 
îrcode_t
 
ext2fs_gë_mem
(
size
, *
±r
);

1149 
îrcode_t
 
ext2fs_gë_¨øy
(
cou¡
, 
size
, *
±r
);

1150 
îrcode_t
 
ext2fs_‰ì_mem
(*
±r
);

1151 
îrcode_t
 
ext2fs_ªsize_mem
(
ﬁd_size
,

1152 
size
, *
±r
);

1153 
ext2fs_m¨k_su≥r_dúty
(
ext2_fûsys
 
fs
);

1154 
ext2fs_m¨k_ch™ged
(
ext2_fûsys
 
fs
);

1155 
ext2fs_ã°_ch™ged
(
ext2_fûsys
 
fs
);

1156 
ext2fs_m¨k_vÆid
(
ext2_fûsys
 
fs
);

1157 
ext2fs_unm¨k_vÆid
(
ext2_fûsys
 
fs
);

1158 
ext2fs_ã°_vÆid
(
ext2_fûsys
 
fs
);

1159 
ext2fs_m¨k_ib_dúty
(
ext2_fûsys
 
fs
);

1160 
ext2fs_m¨k_bb_dúty
(
ext2_fûsys
 
fs
);

1161 
ext2fs_ã°_ib_dúty
(
ext2_fûsys
 
fs
);

1162 
ext2fs_ã°_bb_dúty
(
ext2_fûsys
 
fs
);

1163 
ext2fs_group_of_blk
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
);

1164 
ext2fs_group_of_öo
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
);

1165 
blk_t
 
ext2fs_group_fú°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

1166 
blk_t
 
ext2fs_group_œ°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

1167 
blk_t
 
ext2fs_öode_d©a_blocks
(
ext2_fûsys
 
fs
,

1168 
ext2_öode
 *
öode
);

1169 
ext2fs_div_˚û
(
a
, 
b
);

1177 #i‡(
deföed
(
INCLUDE_INLINE_FUNCS
Ë|| !deföed(
NO_INLINE_FUNCS
))

1178 #ifde‡
INCLUDE_INLINE_FUNCS


1179 
	#_INLINE_
 

	)

1181 #ifde‡
__GNUC__


1182 
	#_INLINE_
 
__ölöe__


	)

1184 
	#_INLINE_
 
ölöe


	)

1188 #i‚de‡
EXT2_CUSTOM_MEMORY_ROUTINES


1189 
	~<°rög.h
>

1193 
_INLINE_
 
îrcode_t
 
ext2fs_gë_mem
(
size
, *
±r
)

1195 *
µ
;

1197 
µ
 = 
mÆloc
(
size
);

1198 i‡(!
µ
)

1199  
EXT2_ET_NO_MEMORY
;

1200 
mem˝y
(
±r
, &
µ
,  (pp));

1204 
_INLINE_
 
îrcode_t
 
ext2fs_gë_¨øy
(
cou¡
, 
size
, *
±r
)

1206 i‡(
cou¡
 && (-1UL)/cou¡<
size
)

1207  
EXT2_ET_NO_MEMORY
;

1208  
ext2fs_gë_mem
(
cou¡
*
size
, 
±r
);

1214 
_INLINE_
 
îrcode_t
 
ext2fs_‰ì_mem
(*
±r
)

1216 *
p
;

1218 
mem˝y
(&
p
, 
±r
, (p));

1219 
‰ì
(
p
);

1220 
p
 = 0;

1221 
mem˝y
(
±r
, &
p
, (p));

1228 
_INLINE_
 
îrcode_t
 
ext2fs_ªsize_mem
(
EXT2FS_ATTR
((
unu£d
)Ë
ﬁd_size
,

1229 
size
, *
±r
)

1231 *
p
;

1235 
mem˝y
(&
p
, 
±r
, (p));

1236 
p
 = 
ªÆloc
’, 
size
);

1237 i‡(!
p
)

1238  
EXT2_ET_NO_MEMORY
;

1239 
mem˝y
(
±r
, &
p
, (p));

1247 
_INLINE_
 
ext2fs_m¨k_su≥r_dúty
(
ext2_fûsys
 
fs
)

1249 
fs
->
Êags
 |
EXT2_FLAG_DIRTY
 | 
EXT2_FLAG_CHANGED
;

1255 
_INLINE_
 
ext2fs_m¨k_ch™ged
(
ext2_fûsys
 
fs
)

1257 
fs
->
Êags
 |
EXT2_FLAG_CHANGED
;

1263 
_INLINE_
 
ext2fs_ã°_ch™ged
(
ext2_fûsys
 
fs
)

1265  (
fs
->
Êags
 & 
EXT2_FLAG_CHANGED
);

1271 
_INLINE_
 
ext2fs_m¨k_vÆid
(
ext2_fûsys
 
fs
)

1273 
fs
->
Êags
 |
EXT2_FLAG_VALID
;

1279 
_INLINE_
 
ext2fs_unm¨k_vÆid
(
ext2_fûsys
 
fs
)

1281 
fs
->
Êags
 &~
EXT2_FLAG_VALID
;

1287 
_INLINE_
 
ext2fs_ã°_vÆid
(
ext2_fûsys
 
fs
)

1289  (
fs
->
Êags
 & 
EXT2_FLAG_VALID
);

1295 
_INLINE_
 
ext2fs_m¨k_ib_dúty
(
ext2_fûsys
 
fs
)

1297 
fs
->
Êags
 |
EXT2_FLAG_IB_DIRTY
 | 
EXT2_FLAG_CHANGED
;

1303 
_INLINE_
 
ext2fs_m¨k_bb_dúty
(
ext2_fûsys
 
fs
)

1305 
fs
->
Êags
 |
EXT2_FLAG_BB_DIRTY
 | 
EXT2_FLAG_CHANGED
;

1311 
_INLINE_
 
ext2fs_ã°_ib_dúty
(
ext2_fûsys
 
fs
)

1313  (
fs
->
Êags
 & 
EXT2_FLAG_IB_DIRTY
);

1319 
_INLINE_
 
ext2fs_ã°_bb_dúty
(
ext2_fûsys
 
fs
)

1321  (
fs
->
Êags
 & 
EXT2_FLAG_BB_DIRTY
);

1327 
_INLINE_
 
ext2fs_group_of_blk
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
)

1329  (
blk
 - 
fs
->
su≥r
->
s_fú°_d©a_block
) /

1330 
fs
->
su≥r
->
s_blocks_≥r_group
;

1336 
_INLINE_
 
ext2fs_group_of_öo
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
)

1338  (
öo
 - 1Ë/ 
fs
->
su≥r
->
s_öodes_≥r_group
;

1344 
_INLINE_
 
blk_t
 
ext2fs_group_fú°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
)

1346  
fs
->
su≥r
->
s_fú°_d©a_block
 +

1347 (
group
 * 
fs
->
su≥r
->
s_blocks_≥r_group
);

1353 
_INLINE_
 
blk_t
 
ext2fs_group_œ°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
)

1355  (
group
 =
fs
->
group_desc_cou¡
 - 1 ?

1356 
fs
->
su≥r
->
s_blocks_cou¡
 - 1 :

1357 
ext2fs_group_fú°_block
(
fs
, 
group
) +

1358 (
fs
->
su≥r
->
s_blocks_≥r_group
 - 1));

1361 
_INLINE_
 
blk_t
 
ext2fs_öode_d©a_blocks
(
ext2_fûsys
 
fs
,

1362 
ext2_öode
 *
öode
)

1364  
öode
->
i_blocks
 -

1365 (
öode
->
i_fûe_a˛
 ? 
fs
->
blocksize
 >> 9 : 0);

1371 
_INLINE_
 
ext2fs_div_˚û
(
a
, 
b
)

1373 i‡(!
a
)

1375  ((
a
 - 1Ë/ 
b
) + 1;

1377 #unde‡
_INLINE_


1380 #ifde‡
__˝lu•lus


	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2fsP.h

12 
	~"ext2fs.h
"

17 
	sext2_°ru˘_u32_li°
 {

18 
	mmagic
;

19 
	mnum
;

20 
	msize
;

21 
__u32
 *
	mli°
;

22 
	mbadblocks_Êags
;

25 
	sext2_°ru˘_u32_ôî©e
 {

26 
	mmagic
;

27 
ext2_u32_li°
 
	mbb
;

28 
	m±r
;

35 
	sext2_°ru˘_dbli°
 {

36 
	mmagic
;

37 
ext2_fûsys
 
	mfs
;

38 
ext2_öo_t
 
	msize
;

39 
ext2_öo_t
 
	mcou¡
;

40 
	ms‹ãd
;

41 
ext2_db_íåy
 * 
	mli°
;

47 
	sdú_c⁄ãxt
 {

48 
ext2_öo_t
 
	mdú
;

49 
	mÊags
;

50 *
	mbuf
;

51 (*
	mfunc
)(
ext2_öo_t
 
	mdú
,

52 
	míåy
,

53 
ext2_dú_íåy
 *
	mdúít
,

54 
	moff£t
,

55 
	mblocksize
,

56 *
	mbuf
,

57 *
	m¥iv_d©a
);

58 *
	m¥iv_d©a
;

59 
îrcode_t
 
	mîrcode
;

65 
	sext2_öode_ˇche
 {

66 * 
	mbuf„r
;

67 
blk_t
 
	mbuf„r_blk
;

68 
	mˇche_œ°
;

69 
	mˇche_size
;

70 
	mªfcou¡
;

71 
ext2_öode_ˇche_ít
 *
	mˇche
;

74 
	sext2_öode_ˇche_ít
 {

75 
ext2_öo_t
 
	möo
;

76 
ext2_öode
 
	möode
;

81 
ext2fs_¥o˚ss_dú_block
(
ext2_fûsys
 
fs
,

82 
blk_t
 *
blockƒ
,

83 
e2_blk˙t_t
 
block˙t
,

84 
blk_t
 
ªf_block
,

85 
ªf_off£t
,

86 *
¥iv_d©a
);

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext3_extents.h

19 #i‚de‡
_LINUX_EXT3_EXTENTS


20 
	#_LINUX_EXT3_EXTENTS


	)

33 
	sext3_exã¡
 {

34 
__u32
 
	mì_block
;

35 
__u16
 
	mì_Àn
;

36 
__u16
 
	mì_°¨t_hi
;

37 
__u32
 
	mì_°¨t
;

44 
	sext3_exã¡_idx
 {

45 
__u32
 
	mei_block
;

46 
__u32
 
	mei_Àaf
;

48 
__u16
 
	mei_Àaf_hi
;

49 
__u16
 
	mei_unu£d
;

55 
	sext3_exã¡_hódî
 {

56 
__u16
 
	meh_magic
;

57 
__u16
 
	meh_íåõs
;

58 
__u16
 
	meh_max
;

59 
__u16
 
	meh_dïth
;

60 
__u32
 
	meh_gíî©i⁄
;

63 
	#EXT3_EXT_MAGIC
 0xf30a

	)

70 
	sext3_ext_∑th
 {

71 
__u32
 
	mp_block
;

72 
__u16
 
	mp_dïth
;

73 
ext3_exã¡
 *
	mp_ext
;

74 
ext3_exã¡_idx
 *
	mp_idx
;

75 
ext3_exã¡_hódî
 *
	mp_hdr
;

76 
buf„r_hód
 *
	mp_bh
;

96 
	#EXT_INIT_MAX_LEN
 (1UL << 15)

	)

97 
	#EXT_UNINIT_MAX_LEN
 (
EXT_INIT_MAX_LEN
 - 1)

	)

99 
	#EXT_FIRST_EXTENT
(
__hdr__
) \

100 ((
ext3_exã¡
 *Ë(((*Ë(
__hdr__
)) + \

101 (
ext3_exã¡_hódî
)))

	)

102 
	#EXT_FIRST_INDEX
(
__hdr__
) \

103 ((
ext3_exã¡_idx
 *Ë(((*Ë(
__hdr__
)) + \

104 (
ext3_exã¡_hódî
)))

	)

105 
	#EXT_HAS_FREE_INDEX
(
__∑th__
) \

106 ((
__∑th__
)->
p_hdr
->
eh_íåõs
 < (__∑th__)->p_hdr->
eh_max
)

	)

107 
	#EXT_LAST_EXTENT
(
__hdr__
) \

108 (
	`EXT_FIRST_EXTENT
((
__hdr__
)Ë+ (__hdr__)->
eh_íåõs
 - 1)

	)

109 
	#EXT_LAST_INDEX
(
__hdr__
) \

110 (
	`EXT_FIRST_INDEX
((
__hdr__
)Ë+ (__hdr__)->
eh_íåõs
 - 1)

	)

111 
	#EXT_MAX_EXTENT
(
__hdr__
) \

112 (
	`EXT_FIRST_EXTENT
((
__hdr__
)Ë+ (__hdr__)->
eh_max
 - 1)

	)

113 
	#EXT_MAX_INDEX
(
__hdr__
) \

114 (
	`EXT_FIRST_INDEX
((
__hdr__
)Ë+ (__hdr__)->
eh_max
 - 1)

	)

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext_attr.c

14 
	~<c⁄fig.h
>

16 
	~<°dio.h
>

17 #i‡
HAVE_UNISTD_H


18 
	~<uni°d.h
>

20 
	~<°rög.h
>

21 
	~<time.h
>

23 
	~"ext2_fs.h
"

24 
	~"ext2_ext_©å.h
"

26 
	~"ext2fs.h
"

28 
	#NAME_HASH_SHIFT
 5

	)

29 
	#VALUE_HASH_SHIFT
 16

	)

36 
__u32
 
	$ext2fs_ext_©å_hash_íåy
(
ext2_ext_©å_íåy
 *
íåy
, *
d©a
)

38 
__u32
 
hash
 = 0;

39 *
«me
 = ((*Ë
íåy
Ë+ (
ext2_ext_©å_íåy
);

40 
n
;

42 
n
 = 0;Ç < 
íåy
->
e_«me_Àn
;Ç++) {

43 
hash
 = (hash << 
NAME_HASH_SHIFT
) ^

44 (
hash
 >> (8*(hashË- 
NAME_HASH_SHIFT
)) ^

45 *
«me
++;

49 i‡(
íåy
->
e_vÆue_block
 =0 &&É¡ry->
e_vÆue_size
 != 0) {

50 
__u32
 *
vÆue
 = (__u32 *)
d©a
;

51 
n
 = (
íåy
->
e_vÆue_size
 + 
EXT2_EXT_ATTR_ROUND
) >>

52 
EXT2_EXT_ATTR_PAD_BITS
; 
n
;Ç--) {

53 
hash
 = (hash << 
VALUE_HASH_SHIFT
) ^

54 (
hash
 >> (8*(hashË- 
VALUE_HASH_SHIFT
)) ^

55 
	`ext2fs_À32_to_˝u
(*
vÆue
++);

59  
hash
;

60 
	}
}

62 #unde‡
NAME_HASH_SHIFT


63 #unde‡
VALUE_HASH_SHIFT


65 
îrcode_t
 
	$ext2fs_ªad_ext_©å
(
ext2_fûsys
 
fs
, 
blk_t
 
block
, *
buf
)

67 
îrcode_t
 
ªtvÆ
;

69 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
block
, 1, 
buf
);

70 i‡(
ªtvÆ
)

71  
ªtvÆ
;

72 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

73 
	`ext2fs_sw≠_ext_©å
(
buf
, buf, 
fs
->
blocksize
, 1);

76 
	}
}

78 
îrcode_t
 
	$ext2fs_wrôe_ext_©å
(
ext2_fûsys
 
fs
, 
blk_t
 
block
, *
öbuf
)

80 
îrcode_t
 
ªtvÆ
;

81 *
wrôe_buf
;

82 *
buf
 = 
NULL
;

84 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

85 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
buf
);

86 i‡(
ªtvÆ
)

87  
ªtvÆ
;

88 
wrôe_buf
 = 
buf
;

89 
	`ext2fs_sw≠_ext_©å
(
buf
, 
öbuf
, 
fs
->
blocksize
, 1);

91 
wrôe_buf
 = (*Ë
öbuf
;

93 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
block
, 1, 
wrôe_buf
);

94 i‡(
buf
)

95 
	`ext2fs_‰ì_mem
(&
buf
);

96 i‡(!
ªtvÆ
)

97 
	`ext2fs_m¨k_ch™ged
(
fs
);

98  
ªtvÆ
;

99 
	}
}

104 
îrcode_t
 
	$ext2fs_adju°_ó_ªfcou¡
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
,

105 *
block_buf
, 
adju°
,

106 
__u32
 *
√wcou¡
)

108 
îrcode_t
 
ªtvÆ
;

109 
ext2_ext_©å_hódî
 *
hódî
;

110 *
buf
 = 0;

112 i‡((
blk
 >
fs
->
su≥r
->
s_blocks_cou¡
) ||

113 (
blk
 < 
fs
->
su≥r
->
s_fú°_d©a_block
))

114  
EXT2_ET_BAD_EA_BLOCK_NUM
;

116 i‡(!
block_buf
) {

117 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
buf
);

118 i‡(
ªtvÆ
)

119  
ªtvÆ
;

120 
block_buf
 = 
buf
;

123 
ªtvÆ
 = 
	`ext2fs_ªad_ext_©å
(
fs
, 
blk
, 
block_buf
);

124 i‡(
ªtvÆ
)

125 
îrout
;

127 
hódî
 = (
ext2_ext_©å_hódî
 *Ë
block_buf
;

128 
hódî
->
h_ªfcou¡
 +
adju°
;

129 i‡(
√wcou¡
)

130 *
√wcou¡
 = 
hódî
->
h_ªfcou¡
;

132 
ªtvÆ
 = 
	`ext2fs_wrôe_ext_©å
(
fs
, 
blk
, 
block_buf
);

133 i‡(
ªtvÆ
)

134 
îrout
;

136 
îrout
:

137 i‡(
buf
)

138 
	`ext2fs_‰ì_mem
(&
buf
);

139  
ªtvÆ
;

140 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/extent.c

12 
	~<c⁄fig.h
>

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 #i‡
HAVE_UNISTD_H


17 
	~<uni°d.h
>

19 #i‡
HAVE_ERRNO_H


20 
	~<î∫o.h
>

22 #i‡
HAVE_SYS_STAT_H


23 
	~<sys/°©.h
>

25 #i‡
HAVE_SYS_TYPES_H


26 
	~<sys/ty≥s.h
>

29 
	~"ext2_fs.h
"

30 
	~"ext2fsP.h
"

31 
	~"e2image.h
"

41 
	sexã¡_∑th
 {

42 *
	mbuf
;

43 
	míåõs
;

44 
	mmax_íåõs
;

45 
	mÀ·
;

46 
	mvisô_num
;

47 
	mÊags
;

48 
blk64_t
 
	míd_blk
;

49 *
	mcuº
;

53 
	sext2_exã¡_h™dÀ
 {

54 
îrcode_t
 
	mmagic
;

55 
ext2_fûsys
 
	mfs
;

56 
ext2_öo_t
 
	möo
;

57 
ext2_öode
 *
	möode
;

58 
	mty≥
;

59 
	mÀvñ
;

60 
	mmax_dïth
;

61 
exã¡_∑th
 *
	m∑th
;

64 
	sext2_exã¡_∑th
 {

65 
îrcode_t
 
	mmagic
;

66 
	mÀaf_height
;

67 
blk64_t
 
	mlblk
;

74 #ifde‡
DEBUG


75 
	$dbg_show_hódî
(
ext3_exã¡_hódî
 *
eh
)

77 
	`¥ötf
("header: magic=%xÉntries=%u max=%u depth=%u generation=%u\n",

78 
	`ext2fs_À16_to_˝u
(
eh
->
eh_magic
),

79 
	`ext2fs_À16_to_˝u
(
eh
->
eh_íåõs
),

80 
	`ext2fs_À16_to_˝u
(
eh
->
eh_max
),

81 
	`ext2fs_À16_to_˝u
(
eh
->
eh_dïth
),

82 
	`ext2fs_À32_to_˝u
(
eh
->
eh_gíî©i⁄
));

83 
	}
}

85 
	$dbg_show_ödex
(
ext3_exã¡_idx
 *
ix
)

87 
	`¥ötf
("index: block=%uÜeaf=%uÜeaf_hi=%u unused=%u\n",

88 
	`ext2fs_À32_to_˝u
(
ix
->
ei_block
),

89 
	`ext2fs_À32_to_˝u
(
ix
->
ei_Àaf
),

90 
	`ext2fs_À16_to_˝u
(
ix
->
ei_Àaf_hi
),

91 
	`ext2fs_À16_to_˝u
(
ix
->
ei_unu£d
));

92 
	}
}

94 
	$dbg_show_exã¡
(
ext3_exã¡
 *
ex
)

96 
	`¥ötf
("extent: block=%u-%uÜen=%u start=%u start_hi=%u\n",

97 
	`ext2fs_À32_to_˝u
(
ex
->
ì_block
),

98 
	`ext2fs_À32_to_˝u
(
ex
->
ì_block
) +

99 
	`ext2fs_À16_to_˝u
(
ex
->
ì_Àn
) - 1,

100 
	`ext2fs_À16_to_˝u
(
ex
->
ì_Àn
),

101 
	`ext2fs_À32_to_˝u
(
ex
->
ì_°¨t
),

102 
	`ext2fs_À16_to_˝u
(
ex
->
ì_°¨t_hi
));

103 
	}
}

105 
	$dbg_¥öt_exã¡
(*
desc
, 
ext2fs_exã¡
 *
exã¡
)

107 i‡(
desc
)

108 
	`¥ötf
("%s: ", 
desc
);

109 
	`¥ötf
("extent:Üblk %llu--%llu,Üen %u,Öblk %llu, flags: ",

110 
exã¡
->
e_lblk
,Éxã¡->e_lblk +Éxã¡->
e_Àn
 - 1,

111 
exã¡
->
e_Àn
,Éxã¡->
e_pblk
);

112 i‡(
exã¡
->
e_Êags
 & 
EXT2_EXTENT_FLAGS_LEAF
)

113 
	`Âuts
("LEAF ", 
°dout
);

114 i‡(
exã¡
->
e_Êags
 & 
EXT2_EXTENT_FLAGS_UNINIT
)

115 
	`Âuts
("UNINIT ", 
°dout
);

116 i‡(
exã¡
->
e_Êags
 & 
EXT2_EXTENT_FLAGS_SECOND_VISIT
)

117 
	`Âuts
("2ND_VISIT ", 
°dout
);

118 i‡(!
exã¡
->
e_Êags
)

119 
	`Âuts
("“⁄e)", 
°dout
);

120 
	`Âutc
('\n', 
°dout
);

122 
	}
}

125 
	#dbg_show_hódî
(
eh
Ëdÿ{ } 0)

	)

126 
	#dbg_show_ödex
(
ix
Ëdÿ{ } 0)

	)

127 
	#dbg_show_exã¡
(
ex
Ëdÿ{ } 0)

	)

128 
	#dbg_¥öt_exã¡
(
desc
, 
ex
Ëdÿ{ } 0)

	)

134 
îrcode_t
 
	$ext2fs_exã¡_hódî_vîify
(*
±r
, 
size
)

136 
eh_max
, 
íåy_size
;

137 
ext3_exã¡_hódî
 *
eh
 = 
±r
;

139 
	`dbg_show_hódî
(
eh
);

140 i‡(
	`ext2fs_À16_to_˝u
(
eh
->
eh_magic
Ë!
EXT3_EXT_MAGIC
)

141  
EXT2_ET_EXTENT_HEADER_BAD
;

142 i‡(
	`ext2fs_À16_to_˝u
(
eh
->
eh_íåõs
Ë>Éxt2fs_À16_to_˝u”h->
eh_max
))

143  
EXT2_ET_EXTENT_HEADER_BAD
;

144 i‡(
eh
->
eh_dïth
 == 0)

145 
íåy_size
 = (
ext3_exã¡
);

147 
íåy_size
 = (
ext3_exã¡_idx
);

149 
eh_max
 = (
size
 - (*
eh
)Ë/ 
íåy_size
;

152 i‡((
	`ext2fs_À16_to_˝u
(
eh
->
eh_max
) >Éh_max) ||

153 (
	`ext2fs_À16_to_˝u
(
eh
->
eh_max
) < (eh_max - 2)))

154  
EXT2_ET_EXTENT_HEADER_BAD
;

157 
	}
}

163 
	$ext2fs_exã¡_‰ì
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
)

165 
i
;

167 i‡(!
h™dÀ
)

170 i‡(
h™dÀ
->
öode
)

171 
	`ext2fs_‰ì_mem
(&
h™dÀ
->
öode
);

172 i‡(
h™dÀ
->
∑th
) {

173 
i
=1; i <
h™dÀ
->
max_dïth
; i++) {

174 i‡(
h™dÀ
->
∑th
[
i
].
buf
)

175 
	`ext2fs_‰ì_mem
(&
h™dÀ
->
∑th
[
i
].
buf
);

177 
	`ext2fs_‰ì_mem
(&
h™dÀ
->
∑th
);

179 
	`ext2fs_‰ì_mem
(&
h™dÀ
);

180 
	}
}

182 
îrcode_t
 
	$ext2fs_exã¡_›í
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

183 
ext2_exã¡_h™dÀ_t
 *
ªt_h™dÀ
)

185  
	`ext2fs_exã¡_›í2
(
fs
, 
öo
, 
NULL
, 
ªt_h™dÀ
);

186 
	}
}

188 
îrcode_t
 
	$ext2fs_exã¡_›í2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

189 
ext2_öode
 *
öode
,

190 
ext2_exã¡_h™dÀ_t
 *
ªt_h™dÀ
)

192 
ext2_exã¡_h™dÀ
 *
h™dÀ
;

193 
îrcode_t
 
ªtvÆ
;

194 
i
;

195 
ext3_exã¡_hódî
 *
eh
;

197 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

199 i‡(!
öode
)

200 i‡((
öo
 =0Ë|| (öÿ> 
fs
->
su≥r
->
s_öodes_cou¡
))

201  
EXT2_ET_BAD_INODE_NUM
;

203 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ext2_exã¡_h™dÀ
), &
h™dÀ
);

204 i‡(
ªtvÆ
)

205  
ªtvÆ
;

206 
	`mem£t
(
h™dÀ
, 0, (
ext2_exã¡_h™dÀ
));

208 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ext2_öode
), &
h™dÀ
->
öode
);

209 i‡(
ªtvÆ
)

210 
îrout
;

212 
h™dÀ
->
öo
 = ino;

213 
h™dÀ
->
fs
 = fs;

215 i‡(
öode
) {

216 
	`mem˝y
(
h™dÀ
->
öode
, inode, (
ext2_öode
));

219 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
öo
, 
h™dÀ
->
öode
);

220 i‡(
ªtvÆ
)

221 
îrout
;

224 
eh
 = (
ext3_exã¡_hódî
 *Ë&
h™dÀ
->
öode
->
i_block
[0];

226 
i
=0; i < 
EXT2_N_BLOCKS
; i++)

227 i‡(
h™dÀ
->
öode
->
i_block
[
i
])

229 i‡(
i
 >
EXT2_N_BLOCKS
) {

230 
eh
->
eh_magic
 = 
	`ext2fs_˝u_to_À16
(
EXT3_EXT_MAGIC
);

231 
eh
->
eh_dïth
 = 0;

232 
eh
->
eh_íåõs
 = 0;

233 
i
 = ((
h™dÀ
->
öode
->
i_block
Ë- (*
eh
)) /

234 (
ext3_exã¡
);

235 
eh
->
eh_max
 = 
	`ext2fs_˝u_to_À16
(
i
);

236 
h™dÀ
->
öode
->
i_Êags
 |
EXT4_EXTENTS_FL
;

239 i‡(!(
h™dÀ
->
öode
->
i_Êags
 & 
EXT4_EXTENTS_FL
)) {

240 
ªtvÆ
 = 
EXT2_ET_INODE_NOT_EXTENT
;

241 
îrout
;

244 
ªtvÆ
 = 
	`ext2fs_exã¡_hódî_vîify
(
eh
, (
h™dÀ
->
öode
->
i_block
));

245 i‡(
ªtvÆ
)

246 
îrout
;

248 
h™dÀ
->
max_dïth
 = 
	`ext2fs_À16_to_˝u
(
eh
->
eh_dïth
);

249 
h™dÀ
->
ty≥
 = 
	`ext2fs_À16_to_˝u
(
eh
->
eh_magic
);

251 
ªtvÆ
 = 
	`ext2fs_gë_mem
(((
h™dÀ
->
max_dïth
+1) *

252 (
exã¡_∑th
)),

253 &
h™dÀ
->
∑th
);

254 
	`mem£t
(
h™dÀ
->
∑th
, 0,

255 (
h™dÀ
->
max_dïth
+1Ë* (
exã¡_∑th
));

256 
h™dÀ
->
∑th
[0].
buf
 = (*Ëh™dÀ->
öode
->
i_block
;

258 
h™dÀ
->
∑th
[0].
À·
 = h™dÀ->∑th[0].
íåõs
 =

259 
	`ext2fs_À16_to_˝u
(
eh
->
eh_íåõs
);

260 
h™dÀ
->
∑th
[0].
max_íåõs
 = 
	`ext2fs_À16_to_˝u
(
eh
->
eh_max
);

261 
h™dÀ
->
∑th
[0].
cuº
 = 0;

262 
h™dÀ
->
∑th
[0].
íd_blk
 =

263 ((((
__u64
Ë
h™dÀ
->
öode
->
i_size_high
 << 32) +

264 
h™dÀ
->
öode
->
i_size
 + (
fs
->
blocksize
 - 1))

265 >> 
	`EXT2_BLOCK_SIZE_BITS
(
fs
->
su≥r
));

266 
h™dÀ
->
∑th
[0].
visô_num
 = 1;

267 
h™dÀ
->
Àvñ
 = 0;

268 
h™dÀ
->
magic
 = 
EXT2_ET_MAGIC_EXTENT_HANDLE
;

270 *
ªt_h™dÀ
 = 
h™dÀ
;

273 
îrout
:

274 
	`ext2fs_exã¡_‰ì
(
h™dÀ
);

275  
ªtvÆ
;

276 
	}
}

282 
îrcode_t
 
	$ext2fs_exã¡_gë
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

283 
Êags
, 
ext2fs_exã¡
 *
exã¡
)

285 
exã¡_∑th
 *
∑th
, *
√w∑th
;

286 
ext3_exã¡_hódî
 *
eh
;

287 
ext3_exã¡_idx
 *
ix
 = 0;

288 
ext3_exã¡
 *
ex
;

289 
îrcode_t
 
ªtvÆ
;

290 
blk_t
 
blk
;

291 
blk64_t
 
íd_blk
;

292 
‹ig_›
, 
›
;

294 
	`EXT2_CHECK_MAGIC
(
h™dÀ
, 
EXT2_ET_MAGIC_EXTENT_HANDLE
);

296 i‡(!
h™dÀ
->
∑th
)

297  
EXT2_ET_NO_CURRENT_NODE
;

299 
‹ig_›
 = 
›
 = 
Êags
 & 
EXT2_EXTENT_MOVE_MASK
;

301 
ªåy
:

302 
∑th
 = 
h™dÀ
->∑th + h™dÀ->
Àvñ
;

303 i‡((
‹ig_›
 =
EXT2_EXTENT_NEXT
) ||

304 (
‹ig_›
 =
EXT2_EXTENT_NEXT_LEAF
)) {

305 i‡(
h™dÀ
->
Àvñ
 < h™dÀ->
max_dïth
) {

307 i‡(
∑th
->
visô_num
 == 0) {

308 
∑th
->
visô_num
++;

309 
›
 = 
EXT2_EXTENT_DOWN
;

310 } i‡(
∑th
->
À·
 > 0)

311 
›
 = 
EXT2_EXTENT_NEXT_SIB
;

312 i‡(
h™dÀ
->
Àvñ
 > 0)

313 
›
 = 
EXT2_EXTENT_UP
;

315  
EXT2_ET_EXTENT_NO_NEXT
;

318 i‡(
∑th
->
À·
 > 0)

319 
›
 = 
EXT2_EXTENT_NEXT_SIB
;

320 i‡(
h™dÀ
->
Àvñ
 > 0)

321 
›
 = 
EXT2_EXTENT_UP
;

323  
EXT2_ET_EXTENT_NO_NEXT
;

325 i‡(
›
 !
EXT2_EXTENT_NEXT_SIB
) {

326 #ifde‡
DEBUG_GET_EXTENT


327 
	`¥ötf
("<<<< OP = %s\n",

328 (
›
 =
EXT2_EXTENT_DOWN
) ? "down" :

329 ((
›
 =
EXT2_EXTENT_UP
) ? "up" : "unknown"));

334 i‡((
‹ig_›
 =
EXT2_EXTENT_PREV
) ||

335 (
‹ig_›
 =
EXT2_EXTENT_PREV_LEAF
)) {

336 i‡(
h™dÀ
->
Àvñ
 < h™dÀ->
max_dïth
) {

338 i‡(
∑th
->
visô_num
 > 0 ) {

340 
›
 = 
EXT2_EXTENT_DOWN_AND_LAST
;

341 } i‡(
∑th
->
À·
 <Ö©h->
íåõs
-1)

342 
›
 = 
EXT2_EXTENT_PREV_SIB
;

343 i‡(
h™dÀ
->
Àvñ
 > 0)

344 
›
 = 
EXT2_EXTENT_UP
;

346  
EXT2_ET_EXTENT_NO_PREV
;

349 i‡(
∑th
->
À·
 <Ö©h->
íåõs
-1)

350 
›
 = 
EXT2_EXTENT_PREV_SIB
;

351 i‡(
h™dÀ
->
Àvñ
 > 0)

352 
›
 = 
EXT2_EXTENT_UP
;

354  
EXT2_ET_EXTENT_NO_PREV
;

356 i‡(
›
 !
EXT2_EXTENT_PREV_SIB
) {

357 #ifde‡
DEBUG_GET_EXTENT


358 
	`¥ötf
("<<<< OP = %s\n",

359 (
›
 =
EXT2_EXTENT_DOWN_AND_LAST
) ? "down/last" :

360 ((
›
 =
EXT2_EXTENT_UP
) ? "up" : "unknown"));

365 i‡(
‹ig_›
 =
EXT2_EXTENT_LAST_LEAF
) {

366 i‡((
h™dÀ
->
Àvñ
 < h™dÀ->
max_dïth
) &&

367 (
∑th
->
À·
 == 0))

368 
›
 = 
EXT2_EXTENT_DOWN
;

370 
›
 = 
EXT2_EXTENT_LAST_SIB
;

371 #ifde‡
DEBUG_GET_EXTENT


372 
	`¥ötf
("<<<< OP = %s\n",

373 (
›
 =
EXT2_EXTENT_DOWN
) ? "down" : "last_sib");

377 
›
) {

378 
EXT2_EXTENT_CURRENT
:

379 
ix
 = 
∑th
->
cuº
;

381 
EXT2_EXTENT_ROOT
:

382 
h™dÀ
->
Àvñ
 = 0;

383 
∑th
 = 
h™dÀ
->∑th + h™dÀ->
Àvñ
;

384 
EXT2_EXTENT_FIRST_SIB
:

385 
∑th
->
À·
 =Ö©h->
íåõs
;

386 
∑th
->
cuº
 = 0;

387 
EXT2_EXTENT_NEXT_SIB
:

388 i‡(
∑th
->
À·
 <= 0)

389  
EXT2_ET_EXTENT_NO_NEXT
;

390 i‡(
∑th
->
cuº
) {

391 
ix
 = 
∑th
->
cuº
;

392 
ix
++;

394 
eh
 = (
ext3_exã¡_hódî
 *Ë
∑th
->
buf
;

395 
ix
 = 
	`EXT_FIRST_INDEX
(
eh
);

397 
∑th
->
À·
--;

398 
∑th
->
cuº
 = 
ix
;

399 
∑th
->
visô_num
 = 0;

401 
EXT2_EXTENT_PREV_SIB
:

402 i‡(!
∑th
->
cuº
 ||

403 
∑th
->
À·
+1 >∑th->
íåõs
)

404  
EXT2_ET_EXTENT_NO_PREV
;

405 
ix
 = 
∑th
->
cuº
;

406 
ix
--;

407 
∑th
->
cuº
 = 
ix
;

408 
∑th
->
À·
++;

409 i‡(
h™dÀ
->
Àvñ
 < h™dÀ->
max_dïth
)

410 
∑th
->
visô_num
 = 1;

412 
EXT2_EXTENT_LAST_SIB
:

413 
eh
 = (
ext3_exã¡_hódî
 *Ë
∑th
->
buf
;

414 
∑th
->
cuº
 = 
	`EXT_LAST_EXTENT
(
eh
);

415 
ix
 = 
∑th
->
cuº
;

416 
∑th
->
À·
 = 0;

417 
∑th
->
visô_num
 = 0;

419 
EXT2_EXTENT_UP
:

420 i‡(
h™dÀ
->
Àvñ
 <= 0)

421  
EXT2_ET_EXTENT_NO_UP
;

422 
h™dÀ
->
Àvñ
--;

423 
∑th
--;

424 
ix
 = 
∑th
->
cuº
;

425 i‡((
‹ig_›
 =
EXT2_EXTENT_PREV
) ||

426 (
‹ig_›
 =
EXT2_EXTENT_PREV_LEAF
))

427 
∑th
->
visô_num
 = 0;

429 
EXT2_EXTENT_DOWN
:

430 
EXT2_EXTENT_DOWN_AND_LAST
:

431 i‡(!
∑th
->
cuº
 ||(
h™dÀ
->
Àvñ
 >h™dÀ->
max_dïth
))

432  
EXT2_ET_EXTENT_NO_DOWN
;

434 
ix
 = 
∑th
->
cuº
;

435 
√w∑th
 = 
∑th
 + 1;

436 i‡(!
√w∑th
->
buf
) {

437 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
h™dÀ
->
fs
->
blocksize
,

438 &
√w∑th
->
buf
);

439 i‡(
ªtvÆ
)

440  
ªtvÆ
;

442 
blk
 = 
	`ext2fs_À32_to_˝u
(
ix
->
ei_Àaf
) +

443 ((
__u64
Ë
	`ext2fs_À16_to_˝u
(
ix
->
ei_Àaf_hi
) << 32);

444 i‡((
h™dÀ
->
fs
->
Êags
 & 
EXT2_FLAG_IMAGE_FILE
) &&

445 (
h™dÀ
->
fs
->
io
 !h™dÀ->fs->
image_io
))

446 
	`mem£t
(
√w∑th
->
buf
, 0, 
h™dÀ
->
fs
->
blocksize
);

448 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
h™dÀ
->
fs
->
io
,

449 
blk
, 1, 
√w∑th
->
buf
);

450 i‡(
ªtvÆ
)

451  
ªtvÆ
;

453 
h™dÀ
->
Àvñ
++;

455 
eh
 = (
ext3_exã¡_hódî
 *Ë
√w∑th
->
buf
;

457 
ªtvÆ
 = 
	`ext2fs_exã¡_hódî_vîify
(
eh
, 
h™dÀ
->
fs
->
blocksize
);

458 i‡(
ªtvÆ
) {

459 
h™dÀ
->
Àvñ
--;

460  
ªtvÆ
;

463 
√w∑th
->
À·
 =Çew∑th->
íåõs
 =

464 
	`ext2fs_À16_to_˝u
(
eh
->
eh_íåõs
);

465 
√w∑th
->
max_íåõs
 = 
	`ext2fs_À16_to_˝u
(
eh
->
eh_max
);

467 i‡(
∑th
->
À·
 > 0) {

468 
ix
++;

469 
√w∑th
->
íd_blk
 = 
	`ext2fs_À32_to_˝u
(
ix
->
ei_block
);

471 
√w∑th
->
íd_blk
 = 
∑th
->end_blk;

473 
∑th
 = 
√w∑th
;

474 i‡(
›
 =
EXT2_EXTENT_DOWN
) {

475 
ix
 = 
	`EXT_FIRST_INDEX
((
ext3_exã¡_hódî
 *Ë
eh
);

476 
∑th
->
cuº
 = 
ix
;

477 
∑th
->
À·
 =Ö©h->
íåõs
 - 1;

478 
∑th
->
visô_num
 = 0;

480 
ix
 = 
	`EXT_LAST_INDEX
((
ext3_exã¡_hódî
 *Ë
eh
);

481 
∑th
->
cuº
 = 
ix
;

482 
∑th
->
À·
 = 0;

483 i‡(
h™dÀ
->
Àvñ
 < h™dÀ->
max_dïth
)

484 
∑th
->
visô_num
 = 1;

486 #ifde‡
DEBUG_GET_EXTENT


487 
	`¥ötf
("DownÅoÜevel %d/%d,Énd_blk=%llu\n",

488 
h™dÀ
->
Àvñ
, h™dÀ->
max_dïth
,

489 
∑th
->
íd_blk
);

493  
EXT2_ET_OP_NOT_SUPPORTED
;

496 i‡(!
ix
)

497  
EXT2_ET_NO_CURRENT_NODE
;

499 
exã¡
->
e_Êags
 = 0;

500 #ifde‡
DEBUG_GET_EXTENT


501 
	`¥ötf
("(Le· %d)\n", 
∑th
->
À·
);

504 i‡(
h™dÀ
->
Àvñ
 =h™dÀ->
max_dïth
) {

505 
ex
 = (
ext3_exã¡
 *Ë
ix
;

507 
exã¡
->
e_pblk
 = 
	`ext2fs_À32_to_˝u
(
ex
->
ì_°¨t
) +

508 ((
__u64
Ë
	`ext2fs_À16_to_˝u
(
ex
->
ì_°¨t_hi
) << 32);

509 
exã¡
->
e_lblk
 = 
	`ext2fs_À32_to_˝u
(
ex
->
ì_block
);

510 
exã¡
->
e_Àn
 = 
	`ext2fs_À16_to_˝u
(
ex
->
ì_Àn
);

511 
exã¡
->
e_Êags
 |
EXT2_EXTENT_FLAGS_LEAF
;

512 i‡(
exã¡
->
e_Àn
 > 
EXT_INIT_MAX_LEN
) {

513 
exã¡
->
e_Àn
 -
EXT_INIT_MAX_LEN
;

514 
exã¡
->
e_Êags
 |
EXT2_EXTENT_FLAGS_UNINIT
;

517 
exã¡
->
e_pblk
 = 
	`ext2fs_À32_to_˝u
(
ix
->
ei_Àaf
) +

518 ((
__u64
Ë
	`ext2fs_À16_to_˝u
(
ix
->
ei_Àaf_hi
) << 32);

519 
exã¡
->
e_lblk
 = 
	`ext2fs_À32_to_˝u
(
ix
->
ei_block
);

520 i‡(
∑th
->
À·
 > 0) {

521 
ix
++;

522 
íd_blk
 = 
	`ext2fs_À32_to_˝u
(
ix
->
ei_block
);

524 
íd_blk
 = 
∑th
->end_blk;

526 
exã¡
->
e_Àn
 = 
íd_blk
 -Éxã¡->
e_lblk
;

528 i‡(
∑th
->
visô_num
)

529 
exã¡
->
e_Êags
 |
EXT2_EXTENT_FLAGS_SECOND_VISIT
;

531 i‡(((
‹ig_›
 =
EXT2_EXTENT_NEXT_LEAF
) ||

532 (
‹ig_›
 =
EXT2_EXTENT_PREV_LEAF
)) &&

533 (
h™dÀ
->
Àvñ
 !h™dÀ->
max_dïth
))

534 
ªåy
;

536 i‡((
‹ig_›
 =
EXT2_EXTENT_LAST_LEAF
) &&

537 ((
h™dÀ
->
Àvñ
 !h™dÀ->
max_dïth
) ||

538 (
∑th
->
À·
 != 0)))

539 
ªåy
;

542 
	}
}

544 
îrcode_t
 
	$upd©e_∑th
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
)

546 
blk64_t
 
blk
;

547 
îrcode_t
 
ªtvÆ
;

548 
ext3_exã¡_idx
 *
ix
;

550 i‡(
h™dÀ
->
Àvñ
 == 0) {

551 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
h™dÀ
->
fs
, h™dÀ->
öo
,

552 
h™dÀ
->
öode
);

554 
ix
 = 
h™dÀ
->
∑th
[h™dÀ->
Àvñ
 - 1].
cuº
;

555 
blk
 = 
	`ext2fs_À32_to_˝u
(
ix
->
ei_Àaf
) +

556 ((
__u64
Ë
	`ext2fs_À16_to_˝u
(
ix
->
ei_Àaf_hi
) << 32);

558 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
h™dÀ
->
fs
->
io
,

559 
blk
, 1, 
h™dÀ
->
∑th
[h™dÀ->
Àvñ
].
buf
);

561  
ªtvÆ
;

562 
	}
}

565 
îrcode_t
 
	$ext2fs_exã¡_ßve_∑th
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

566 
ext2_exã¡_∑th_t
 *
ªt_∑th
)

568 
ext2_exã¡_∑th_t
 
ßve_∑th
;

569 
ext2fs_exã¡
 
exã¡
;

570 
ext2_exã¡_öfo
 
öfo
;

571 
îrcode_t
 
ªtvÆ
;

573 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_CURRENT
, &
exã¡
);

574 i‡(
ªtvÆ
)

575  
ªtvÆ
;

577 
ªtvÆ
 = 
	`ext2fs_exã¡_gë_öfo
(
h™dÀ
, &
öfo
);

578 i‡(
ªtvÆ
)

579  
ªtvÆ
;

581 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ext2_exã¡_∑th
), &
ßve_∑th
);

582 i‡(
ªtvÆ
)

583  
ªtvÆ
;

584 
	`mem£t
(
ßve_∑th
, 0, (
ext2_exã¡_∑th
));

586 
ßve_∑th
->
magic
 = 
EXT2_ET_MAGIC_EXTENT_PATH
;

587 
ßve_∑th
->
Àaf_height
 = 
öfo
.
max_dïth
 - info.
cuº_Àvñ
 - 1;

588 
ßve_∑th
->
lblk
 = 
exã¡
.
e_lblk
;

590 *
ªt_∑th
 = 
ßve_∑th
;

592 
	}
}

594 
îrcode_t
 
	$ext2fs_exã¡_‰ì_∑th
(
ext2_exã¡_∑th_t
 
∑th
)

596 
	`EXT2_CHECK_MAGIC
(
∑th
, 
EXT2_ET_MAGIC_EXTENT_PATH
);

598 
	`ext2fs_‰ì_mem
(&
∑th
);

600 
	}
}

612 
îrcode_t
 
	$exã¡_gŸo
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

613 
Àaf_Àvñ
, 
blk64_t
 
blk
)

615 
ext2fs_exã¡
 
exã¡
;

616 
îrcode_t
 
ªtvÆ
;

618 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_ROOT
, &
exã¡
);

619 i‡(
ªtvÆ
) {

620 i‡(
ªtvÆ
 =
EXT2_ET_EXTENT_NO_NEXT
)

621 
ªtvÆ
 = 
EXT2_ET_EXTENT_NOT_FOUND
;

622  
ªtvÆ
;

625 i‡(
Àaf_Àvñ
 > 
h™dÀ
->
max_dïth
) {

626 #ifde‡
DEBUG


627 
	`¥ötf
("leafÜevel %d greaterÅhanÅree depth %d\n",

628 
Àaf_Àvñ
, 
h™dÀ
->
max_dïth
);

630  
EXT2_ET_OP_NOT_SUPPORTED
;

633 #ifde‡
DEBUG


634 
	`¥ötf
("gŸÿexã¡ inÿ%u,Üevñ %d, %Œu\n", 
h™dÀ
->
öo
,

635 
Àaf_Àvñ
, 
blk
);

638 #ifde‡
DEBUG_GOTO_EXTENTS


639 
	`dbg_¥öt_exã¡
("roŸ", &
exã¡
);

642 i‡(
h™dÀ
->
max_dïth
 - h™dÀ->
Àvñ
 =
Àaf_Àvñ
) {

644 i‡((
blk
 >
exã¡
.
e_lblk
) &&

645 (
blk
 < 
exã¡
.
e_lblk
 +Éxã¡.
e_Àn
))

647 i‡(
blk
 < 
exã¡
.
e_lblk
) {

648 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
,

649 
EXT2_EXTENT_PREV_SIB
,

650 &
exã¡
);

651  
EXT2_ET_EXTENT_NOT_FOUND
;

653 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
,

654 
EXT2_EXTENT_NEXT_SIB
,

655 &
exã¡
);

656 i‡(
ªtvÆ
 =
EXT2_ET_EXTENT_NO_NEXT
)

657  
EXT2_ET_EXTENT_NOT_FOUND
;

658 i‡(
ªtvÆ
)

659  
ªtvÆ
;

663 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_NEXT_SIB
,

664 &
exã¡
);

665 i‡(
ªtvÆ
 =
EXT2_ET_EXTENT_NO_NEXT
)

666 
go_down
;

667 i‡(
ªtvÆ
)

668  
ªtvÆ
;

670 #ifde‡
DEBUG_GOTO_EXTENTS


671 
	`dbg_¥öt_exã¡
("√xt", &
exã¡
);

673 i‡(
blk
 =
exã¡
.
e_lblk
)

674 
go_down
;

675 i‡(
blk
 > 
exã¡
.
e_lblk
)

678 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_PREV_SIB
,

679 &
exã¡
);

680 i‡(
ªtvÆ
)

681  
ªtvÆ
;

683 #ifde‡
DEBUG_GOTO_EXTENTS


684 
	`dbg_¥öt_exã¡
("¥ev", &
exã¡
);

687 
go_down
:

688 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_DOWN
,

689 &
exã¡
);

690 i‡(
ªtvÆ
)

691  
ªtvÆ
;

693 #ifde‡
DEBUG_GOTO_EXTENTS


694 
	`dbg_¥öt_exã¡
("down", &
exã¡
);

697 
	}
}

699 
îrcode_t
 
	$ext2fs_exã¡_gŸo
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

700 
blk64_t
 
blk
)

702  
	`exã¡_gŸo
(
h™dÀ
, 0, 
blk
);

703 
	}
}

714 
îrcode_t
 
	$ext2fs_exã¡_fix_∑ª¡s
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
)

716 
ªtvÆ
 = 0;

717 
blk64_t
 
°¨t
;

718 
exã¡_∑th
 *
∑th
;

719 
ext2fs_exã¡
 
exã¡
;

721 
	`EXT2_CHECK_MAGIC
(
h™dÀ
, 
EXT2_ET_MAGIC_EXTENT_HANDLE
);

723 i‡(!(
h™dÀ
->
fs
->
Êags
 & 
EXT2_FLAG_RW
))

724  
EXT2_ET_RO_FILSYS
;

726 i‡(!
h™dÀ
->
∑th
)

727  
EXT2_ET_NO_CURRENT_NODE
;

729 
∑th
 = 
h™dÀ
->∑th + h™dÀ->
Àvñ
;

730 i‡(!
∑th
->
cuº
)

731  
EXT2_ET_NO_CURRENT_NODE
;

733 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_CURRENT
, &
exã¡
);

734 i‡(
ªtvÆ
)

735 
d⁄e
;

738 
°¨t
 = 
exã¡
.
e_lblk
;

741 
h™dÀ
->
Àvñ
 > 0 &&

742 (
∑th
->
À·
 =∑th->
íåõs
 - 1)) {

743 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_UP
, &
exã¡
);

744 i‡(
ªtvÆ
)

745 
d⁄e
;

746 i‡(
exã¡
.
e_lblk
 =
°¨t
)

748 
∑th
 = 
h™dÀ
->∑th + h™dÀ->
Àvñ
;

749 
exã¡
.
e_Àn
 +”xã¡.
e_lblk
 - 
°¨t
);

750 
exã¡
.
e_lblk
 = 
°¨t
;

751 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0, &
exã¡
);

752 i‡(
ªtvÆ
)

753 
d⁄e
;

754 
	`upd©e_∑th
(
h™dÀ
);

758 
ªtvÆ
 = 
	`ext2fs_exã¡_gŸo
(
h™dÀ
, 
°¨t
);

759 
d⁄e
:

760  
ªtvÆ
;

761 
	}
}

763 
îrcode_t
 
ext2fs_exã¡_ª∂a˚
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

764 
Êags
 
EXT2FS_ATTR
((
unu£d
)),

765 
ext2fs_exã¡
 *
exã¡
)

767 
exã¡_∑th
 *
∑th
;

768 
ext3_exã¡_idx
 *
ix
;

769 
ext3_exã¡
 *
ex
;

771 
EXT2_CHECK_MAGIC
(
h™dÀ
, 
EXT2_ET_MAGIC_EXTENT_HANDLE
);

773 i‡(!(
h™dÀ
->
fs
->
Êags
 & 
EXT2_FLAG_RW
))

774  
EXT2_ET_RO_FILSYS
;

776 i‡(!
h™dÀ
->
∑th
)

777  
EXT2_ET_NO_CURRENT_NODE
;

779 
∑th
 = 
h™dÀ
->∑th + h™dÀ->
Àvñ
;

780 i‡(!
∑th
->
cuº
)

781  
EXT2_ET_NO_CURRENT_NODE
;

783 #ifde‡
DEBUG


784 
¥ötf
("exã¡Ñïœ˚: %u ", 
h™dÀ
->
öo
);

785 
dbg_¥öt_exã¡
(0, 
exã¡
);

788 i‡(
h™dÀ
->
Àvñ
 =h™dÀ->
max_dïth
) {

789 
ex
 = 
∑th
->
cuº
;

791 
ex
->
ì_block
 = 
ext2fs_˝u_to_À32
(
exã¡
->
e_lblk
);

792 
ex
->
ì_°¨t
 = 
ext2fs_˝u_to_À32
(
exã¡
->
e_pblk
 & 0xFFFFFFFF);

793 
ex
->
ì_°¨t_hi
 = 
ext2fs_˝u_to_À16
(
exã¡
->
e_pblk
 >> 32);

794 i‡(
exã¡
->
e_Êags
 & 
EXT2_EXTENT_FLAGS_UNINIT
) {

795 i‡(
exã¡
->
e_Àn
 > 
EXT_UNINIT_MAX_LEN
)

796  
EXT2_ET_EXTENT_INVALID_LENGTH
;

797 
ex
->
ì_Àn
 = 
ext2fs_˝u_to_À16
(
exã¡
->
e_Àn
 +

798 
EXT_INIT_MAX_LEN
);

800 i‡(
exã¡
->
e_Àn
 > 
EXT_INIT_MAX_LEN
)

801  
EXT2_ET_EXTENT_INVALID_LENGTH
;

802 
ex
->
ì_Àn
 = 
ext2fs_˝u_to_À16
(
exã¡
->
e_Àn
);

805 
ix
 = 
∑th
->
cuº
;

807 
ix
->
ei_Àaf
 = 
ext2fs_˝u_to_À32
(
exã¡
->
e_pblk
 & 0xFFFFFFFF);

808 
ix
->
ei_Àaf_hi
 = 
ext2fs_˝u_to_À16
(
exã¡
->
e_pblk
 >> 32);

809 
ix
->
ei_block
 = 
ext2fs_˝u_to_À32
(
exã¡
->
e_lblk
);

810 
ix
->
ei_unu£d
 = 0;

812 
upd©e_∑th
(
h™dÀ
);

821 
îrcode_t
 
	$exã¡_node_•lô
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
)

823 
îrcode_t
 
ªtvÆ
 = 0;

824 
blk_t
 
√w_node_pblk
;

825 
blk64_t
 
√w_node_°¨t
;

826 
blk64_t
 
‹ig_lblk
;

827 
blk64_t
 
gﬂl_blk
 = 0;

828 
‹ig_height
;

829 *
block_buf
 = 
NULL
;

830 
ext2fs_exã¡
 
exã¡
;

831 
exã¡_∑th
 *
∑th
, *
√w∑th
 = 0;

832 
ext3_exã¡_hódî
 *
eh
, *
√weh
;

833 
toc›y
;

834 
√w_roŸ
 = 0;

835 
ext2_exã¡_öfo
 
öfo
;

838 
	`EXT2_CHECK_MAGIC
(
h™dÀ
, 
EXT2_ET_MAGIC_EXTENT_HANDLE
);

840 i‡(!(
h™dÀ
->
fs
->
Êags
 & 
EXT2_FLAG_RW
))

841  
EXT2_ET_RO_FILSYS
;

843 i‡(!
h™dÀ
->
∑th
)

844  
EXT2_ET_NO_CURRENT_NODE
;

846 #ifde‡
DEBUG


847 
	`¥ötf
("•lôtögÇodê©Üevñ %d\n", 
h™dÀ
->
Àvñ
);

849 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_CURRENT
, &
exã¡
);

850 i‡(
ªtvÆ
)

851 
d⁄e
;

853 
ªtvÆ
 = 
	`ext2fs_exã¡_gë_öfo
(
h™dÀ
, &
öfo
);

854 i‡(
ªtvÆ
)

855 
d⁄e
;

858 
‹ig_height
 = 
öfo
.
max_dïth
 - info.
cuº_Àvñ
;

859 
‹ig_lblk
 = 
exã¡
.
e_lblk
;

862 i‡(
h™dÀ
->
Àvñ
 &&

863 (
h™dÀ
->
∑th
[h™dÀ->
Àvñ
 - 1].
íåõs
 >=

864 
h™dÀ
->
∑th
[h™dÀ->
Àvñ
 - 1].
max_íåõs
)) {

866 #ifde‡
DEBUG


867 
	`¥ötf
("parentÜevel %d full; splitting itÅoo\n",

868 
h™dÀ
->
Àvñ
 - 1);

871 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_UP
, &
exã¡
);

872 i‡(
ªtvÆ
)

873 
d⁄e
;

874 
gﬂl_blk
 = 
exã¡
.
e_pblk
;

876 
ªtvÆ
 = 
	`exã¡_node_•lô
(
h™dÀ
);

877 i‡(
ªtvÆ
)

878 
d⁄e
;

881 
ªtvÆ
 = 
	`exã¡_gŸo
(
h™dÀ
, 
‹ig_height
, 
‹ig_lblk
);

882 i‡(
ªtvÆ
)

883 
d⁄e
;

887 
∑th
 = 
h™dÀ
->∑th + h™dÀ->
Àvñ
;

888 i‡(!
∑th
->
cuº
)

889  
EXT2_ET_NO_CURRENT_NODE
;

892 
eh
 = (
ext3_exã¡_hódî
 *)
∑th
->
buf
;

895 i‡(
h™dÀ
->
Àvñ
 == 0) {

896 
√w_roŸ
 = 1;

897 
toc›y
 = 
	`ext2fs_À16_to_˝u
(
eh
->
eh_íåõs
);

898 
ªtvÆ
 = 
	`ext2fs_gë_mem
(((
h™dÀ
->
max_dïth
+2) *

899 (
exã¡_∑th
)),

900 &
√w∑th
);

901 i‡(
ªtvÆ
)

902 
d⁄e
;

903 
	`mem£t
(
√w∑th
, 0,

904 ((
h™dÀ
->
max_dïth
+2Ë* (
exã¡_∑th
)));

906 
toc›y
 = 
	`ext2fs_À16_to_˝u
(
eh
->
eh_íåõs
) / 2;

909 #ifde‡
DEBUG


910 
	`¥ötf
("will copy out %d of %dÉntriesátÜevel %d\n",

911 
toc›y
, 
	`ext2fs_À16_to_˝u
(
eh
->
eh_íåõs
),

912 
h™dÀ
->
Àvñ
);

915 i‡(!
toc›y
) {

916 #ifde‡
DEBUG


917 
	`¥ötf
("NothingÅo copyÅoÇew block!\n");

919 
ªtvÆ
 = 
EXT2_ET_CANT_SPLIT_EXTENT
;

920 
d⁄e
;

924 
block_buf
 = 
	`mÆloc
(
h™dÀ
->
fs
->
blocksize
);

925 i‡(!
block_buf
) {

926 
ªtvÆ
 = 
ENOMEM
;

927 
d⁄e
;

930 i‡(!
gﬂl_blk
) {

931 
dgΩ_t
 
group
 = 
	`ext2fs_group_of_öo
(
h™dÀ
->
fs
, h™dÀ->
öo
);

932 
__u8
 
log_Êex
 = 
h™dÀ
->
fs
->
su≥r
->
s_log_groups_≥r_Êex
;

934 i‡(
log_Êex
)

935 
group
 = grou∞& ~((1 << (
log_Êex
)) - 1);

936 
gﬂl_blk
 = (
group
 * 
h™dÀ
->
fs
->
su≥r
->
s_blocks_≥r_group
) +

937 
h™dÀ
->
fs
->
su≥r
->
s_fú°_d©a_block
;

939 
ªtvÆ
 = 
	`ext2fs_Æloc_block
(
h™dÀ
->
fs
, (
blk_t
Ë
gﬂl_blk
, 
block_buf
,

940 &
√w_node_pblk
);

941 i‡(
ªtvÆ
)

942 
d⁄e
;

944 #ifde‡
DEBUG


945 
	`¥ötf
("will copyÅoÇewÇodeát block %lu\n",

946 (Ë
√w_node_pblk
);

951 
√weh
 = (
ext3_exã¡_hódî
 *Ë
block_buf
;

952 
	`mem˝y
(
√weh
, 
eh
, (
ext3_exã¡_hódî
));

953 
√weh
->
eh_íåõs
 = 
	`ext2fs_˝u_to_À16
(
toc›y
);

954 
√weh
->
eh_max
 = 
	`ext2fs_˝u_to_À16
((
h™dÀ
->
fs
->
blocksize
 -

955 (
ext3_exã¡_hódî
)) /

956 (
ext3_exã¡
));

959 
	`mem˝y
(
	`EXT_FIRST_INDEX
(
√weh
),

960 
	`EXT_FIRST_INDEX
(
eh
) +

961 (
	`ext2fs_À16_to_˝u
(
eh
->
eh_íåõs
Ë- 
toc›y
),

962 (
ext3_exã¡_idx
Ë* 
toc›y
);

964 
√w_node_°¨t
 = 
	`ext2fs_À32_to_˝u
(
	`EXT_FIRST_INDEX
(
√weh
)->
ei_block
);

967 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
h™dÀ
->
fs
->
io
, 
√w_node_pblk
, 1, 
block_buf
);

969 i‡(
ªtvÆ
)

970 
d⁄e
;

975 i‡(
h™dÀ
->
Àvñ
 == 0) {

976 
	`mem˝y
(
√w∑th
, 
∑th
,

977 (
exã¡_∑th
Ë* (
h™dÀ
->
max_dïth
+1));

978 
h™dÀ
->
∑th
 = 
√w∑th
;

979 
√w∑th
 = 
∑th
;

980 
∑th
 = 
h™dÀ
->path;

981 
∑th
->
íåõs
 = 1;

982 
∑th
->
À·
 =Ö©h->
max_íåõs
 - 1;

983 
h™dÀ
->
max_dïth
++;

984 
eh
->
eh_dïth
 = 
	`ext2fs_˝u_to_À16
(
h™dÀ
->
max_dïth
);

986 
∑th
->
íåõs
 -
toc›y
;

987 
∑th
->
À·
 -
toc›y
;

990 
eh
->
eh_íåõs
 = 
	`ext2fs_˝u_to_À16
(
∑th
->
íåõs
);

992 
ªtvÆ
 = 
	`upd©e_∑th
(
h™dÀ
);

993 i‡(
ªtvÆ
)

994 
d⁄e
;

997 i‡(
√w_roŸ
) {

998 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_FIRST_SIB
, &
exã¡
);

999 i‡(
ªtvÆ
)

1000 
d⁄e
;

1002 
exã¡
.
e_lblk
 = 
√w_node_°¨t
;

1003 
exã¡
.
e_pblk
 = 
√w_node_pblk
;

1004 
exã¡
.
e_Àn
 = 
h™dÀ
->
∑th
[0].
íd_blk
 -Éxã¡.
e_lblk
;

1005 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0, &
exã¡
);

1006 i‡(
ªtvÆ
)

1007 
d⁄e
;

1009 
__u32
 
√w_node_Àngth
;

1011 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_UP
, &
exã¡
);

1013 
√w_node_Àngth
 = 
√w_node_°¨t
 - 
exã¡
.
e_lblk
;

1014 
exã¡
.
e_Àn
 -
√w_node_Àngth
;

1015 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0, &
exã¡
);

1016 i‡(
ªtvÆ
)

1017 
d⁄e
;

1020 
exã¡
.
e_lblk
 = 
√w_node_°¨t
;

1021 
exã¡
.
e_pblk
 = 
√w_node_pblk
;

1022 
exã¡
.
e_Àn
 = 
√w_node_Àngth
;

1023 
ªtvÆ
 = 
	`ext2fs_exã¡_ö£π
(
h™dÀ
, 
EXT2_EXTENT_INSERT_AFTER
, &
exã¡
);

1024 i‡(
ªtvÆ
)

1025 
d⁄e
;

1029 
ªtvÆ
 = 
	`exã¡_gŸo
(
h™dÀ
, 
‹ig_height
, 
‹ig_lblk
);

1030 i‡(
ªtvÆ
)

1031 
d⁄e
;

1034 
h™dÀ
->
öode
->
i_blocks
 +h™dÀ->
fs
->
blocksize
 / 512;

1035 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
h™dÀ
->
fs
, h™dÀ->
öo
,

1036 
h™dÀ
->
öode
);

1037 i‡(
ªtvÆ
)

1038 
d⁄e
;

1040 
d⁄e
:

1041 i‡(
√w∑th
)

1042 
	`ext2fs_‰ì_mem
(&
√w∑th
);

1043 
	`‰ì
(
block_buf
);

1045  
ªtvÆ
;

1046 
	}
}

1048 
îrcode_t
 
	$ext2fs_exã¡_ö£π
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
,

1049 
ext2fs_exã¡
 *
exã¡
)

1051 
exã¡_∑th
 *
∑th
;

1052 
ext3_exã¡_idx
 *
ix
;

1053 
ext3_exã¡_hódî
 *
eh
;

1054 
îrcode_t
 
ªtvÆ
;

1056 
	`EXT2_CHECK_MAGIC
(
h™dÀ
, 
EXT2_ET_MAGIC_EXTENT_HANDLE
);

1058 i‡(!(
h™dÀ
->
fs
->
Êags
 & 
EXT2_FLAG_RW
))

1059  
EXT2_ET_RO_FILSYS
;

1061 i‡(!
h™dÀ
->
∑th
)

1062  
EXT2_ET_NO_CURRENT_NODE
;

1064 #ifde‡
DEBUG


1065 
	`¥ötf
("exã¡ in£π: %u ", 
h™dÀ
->
öo
);

1066 
	`dbg_¥öt_exã¡
(0, 
exã¡
);

1069 
∑th
 = 
h™dÀ
->∑th + h™dÀ->
Àvñ
;

1071 i‡(
∑th
->
íåõs
 >∑th->
max_íåõs
) {

1072 i‡(
Êags
 & 
EXT2_EXTENT_INSERT_NOSPLIT
) {

1073  
EXT2_ET_CANT_INSERT_EXTENT
;

1075 #ifde‡
DEBUG


1076 
	`¥ötf
("node full (level %d) - splitting\n",

1077 
h™dÀ
->
Àvñ
);

1079 
ªtvÆ
 = 
	`exã¡_node_•lô
(
h™dÀ
);

1080 i‡(
ªtvÆ
)

1081  
ªtvÆ
;

1082 
∑th
 = 
h™dÀ
->∑th + h™dÀ->
Àvñ
;

1086 
eh
 = (
ext3_exã¡_hódî
 *Ë
∑th
->
buf
;

1087 i‡(
∑th
->
cuº
) {

1088 
ix
 = 
∑th
->
cuº
;

1089 i‡(
Êags
 & 
EXT2_EXTENT_INSERT_AFTER
) {

1090 
ix
++;

1091 
∑th
->
À·
--;

1094 
ix
 = 
	`EXT_FIRST_INDEX
(
eh
);

1096 
∑th
->
cuº
 = 
ix
;

1098 i‡(
∑th
->
À·
 >= 0)

1099 
	`memmove
(
ix
 + 1, ix,

1100 (
∑th
->
À·
+1Ë* (
ext3_exã¡_idx
));

1101 
∑th
->
À·
++;

1102 
∑th
->
íåõs
++;

1104 
eh
 = (
ext3_exã¡_hódî
 *Ë
∑th
->
buf
;

1105 
eh
->
eh_íåõs
 = 
	`ext2fs_˝u_to_À16
(
∑th
->
íåõs
);

1107 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0, 
exã¡
);

1108 i‡(
ªtvÆ
)

1109 
îrout
;

1111 
ªtvÆ
 = 
	`upd©e_∑th
(
h™dÀ
);

1112 i‡(
ªtvÆ
)

1113 
îrout
;

1117 
îrout
:

1118 
	`ext2fs_exã¡_dñëe
(
h™dÀ
, 0);

1119  
ªtvÆ
;

1120 
	}
}

1144 
îrcode_t
 
	$ext2fs_exã¡_£t_bm≠
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

1145 
blk64_t
 
logiˇl
, blk64_à
physiˇl
, 
Êags
)

1147 
îrcode_t
 
ec
, 
ªtvÆ
 = 0;

1148 
m≠≥d
 = 1;

1149 
‹ig_height
;

1150 
exã¡_unöô
 = 0;

1151 
¥ev_unöô
 = 0;

1152 
√xt_unöô
 = 0;

1153 
√w_unöô
 = 0;

1154 
max_Àn
 = 
EXT_INIT_MAX_LEN
;

1155 
has_¥ev
, 
has_√xt
;

1156 
blk64_t
 
‹ig_lblk
;

1157 
exã¡_∑th
 *
∑th
;

1158 
ext2fs_exã¡
 
exã¡
, 
√xt_exã¡
, 
¥ev_exã¡
;

1159 
ext2fs_exã¡
 
√wexã¡
;

1160 
ext2_exã¡_öfo
 
öfo
;

1162 
	`EXT2_CHECK_MAGIC
(
h™dÀ
, 
EXT2_ET_MAGIC_EXTENT_HANDLE
);

1164 #ifde‡
DEBUG


1165 
	`¥ötf
("set_bmap ino %uÜog %lldÖhys %lld flags %d\n",

1166 
h™dÀ
->
öo
, 
logiˇl
, 
physiˇl
, 
Êags
);

1169 i‡(!(
h™dÀ
->
fs
->
Êags
 & 
EXT2_FLAG_RW
))

1170  
EXT2_ET_RO_FILSYS
;

1172 i‡(!
h™dÀ
->
∑th
)

1173  
EXT2_ET_NO_CURRENT_NODE
;

1175 
∑th
 = 
h™dÀ
->∑th + h™dÀ->
Àvñ
;

1177 i‡(
Êags
 & 
EXT2_EXTENT_SET_BMAP_UNINIT
) {

1178 
√w_unöô
 = 1;

1179 
max_Àn
 = 
EXT_UNINIT_MAX_LEN
;

1183 i‡(
physiˇl
) {

1184 
√wexã¡
.
e_Àn
 = 1;

1185 
√wexã¡
.
e_pblk
 = 
physiˇl
;

1186 
√wexã¡
.
e_lblk
 = 
logiˇl
;

1187 
√wexã¡
.
e_Êags
 = 
EXT2_EXTENT_FLAGS_LEAF
;

1188 i‡(
√w_unöô
)

1189 
√wexã¡
.
e_Êags
 |
EXT2_EXTENT_FLAGS_UNINIT
;

1193 i‡((
h™dÀ
->
max_dïth
 =0Ë&& (
∑th
->
íåõs
 == 0)) {

1194 
ªtvÆ
 = 
	`ext2fs_exã¡_ö£π
(
h™dÀ
, 0, &
√wexã¡
);

1195  
ªtvÆ
;

1199 i‡((
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_CURRENT
,

1200 &
exã¡
))) {

1201 i‡(
ªtvÆ
 !
EXT2_ET_NO_CURRENT_NODE
)

1202  
ªtvÆ
;

1203 
	`mem£t
(&
exã¡
, 0, (extent));

1205 i‡((
ªtvÆ
 = 
	`ext2fs_exã¡_gë_öfo
(
h™dÀ
, &
öfo
)))

1206  
ªtvÆ
;

1207 
‹ig_height
 = 
öfo
.
max_dïth
 - info.
cuº_Àvñ
;

1208 
‹ig_lblk
 = 
exã¡
.
e_lblk
;

1211 
ªtvÆ
 = 
	`ext2fs_exã¡_gŸo
(
h™dÀ
, 
logiˇl
);

1212 i‡(
ªtvÆ
) {

1213 i‡(
ªtvÆ
 =
EXT2_ET_EXTENT_NOT_FOUND
) {

1214 
ªtvÆ
 = 0;

1215 
m≠≥d
 = 0;

1216 i‡(!
physiˇl
) {

1217 #ifde‡
DEBUG


1218 
	`¥ötf
("block %lluálready unmapped\n",

1219 
logiˇl
);

1221 
d⁄e
;

1224 
d⁄e
;

1233 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_CURRENT
, &
exã¡
);

1234 i‡(
ªtvÆ
)

1235 
d⁄e
;

1236 i‡(
exã¡
.
e_Êags
 & 
EXT2_EXTENT_FLAGS_UNINIT
)

1237 
exã¡_unöô
 = 1;

1238 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_NEXT_LEAF
, &
√xt_exã¡
);

1239 i‡(
ªtvÆ
) {

1240 
has_√xt
 = 0;

1241 i‡(
ªtvÆ
 !
EXT2_ET_EXTENT_NO_NEXT
)

1242 
d⁄e
;

1244 
	`dbg_¥öt_exã¡
("set_bmap:Çext_extent",

1245 &
√xt_exã¡
);

1246 
has_√xt
 = 1;

1247 i‡(
√xt_exã¡
.
e_Êags
 & 
EXT2_EXTENT_FLAGS_UNINIT
)

1248 
√xt_unöô
 = 1;

1250 
ªtvÆ
 = 
	`ext2fs_exã¡_gŸo
(
h™dÀ
, 
logiˇl
);

1251 i‡(
ªtvÆ
 &&ÑëvÆ !
EXT2_ET_EXTENT_NOT_FOUND
)

1252 
d⁄e
;

1253 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_PREV_LEAF
, &
¥ev_exã¡
);

1254 i‡(
ªtvÆ
) {

1255 
has_¥ev
 = 0;

1256 i‡(
ªtvÆ
 !
EXT2_ET_EXTENT_NO_PREV
)

1257 
d⁄e
;

1259 
has_¥ev
 = 1;

1260 
	`dbg_¥öt_exã¡
("set_bmap:Örev_extent",

1261 &
¥ev_exã¡
);

1262 i‡(
¥ev_exã¡
.
e_Êags
 & 
EXT2_EXTENT_FLAGS_UNINIT
)

1263 
¥ev_unöô
 = 1;

1265 
ªtvÆ
 = 
	`ext2fs_exã¡_gŸo
(
h™dÀ
, 
logiˇl
);

1266 i‡(
ªtvÆ
 &&ÑëvÆ !
EXT2_ET_EXTENT_NOT_FOUND
)

1267 
d⁄e
;

1270 i‡(
m≠≥d
 && (
√w_unöô
 =
exã¡_unöô
) &&

1271 (
exã¡
.
e_pblk
 + (
logiˇl
 -Éxã¡.
e_lblk
Ë=
physiˇl
)) {

1272 #ifde‡
DEBUG


1273 
	`¥ötf
("physiˇ»block (© %ŒuËunch™ged\n", 
logiˇl
);

1275 
d⁄e
;

1278 i‡(!
m≠≥d
) {

1279 #ifde‡
DEBUG


1280 
	`¥ötf
("m≠pög unm≠≥dÜogiˇ»block %Œu\n", 
logiˇl
);

1282 i‡((
logiˇl
 =
exã¡
.
e_lblk
 +Éxã¡.
e_Àn
) &&

1283 (
physiˇl
 =
exã¡
.
e_pblk
 +Éxã¡.
e_Àn
) &&

1284 (
√w_unöô
 =
exã¡_unöô
) &&

1285 ((Ë
exã¡
.
e_Àn
 < 
max_Àn
-1)) {

1286 
exã¡
.
e_Àn
++;

1287 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0, &
exã¡
);

1288 } i‡((
logiˇl
 =
exã¡
.
e_lblk
 - 1) &&

1289 (
physiˇl
 =
exã¡
.
e_pblk
 - 1) &&

1290 (
√w_unöô
 =
exã¡_unöô
) &&

1291 ((Ë
exã¡
.
e_Àn
 < 
max_Àn
 - 1)) {

1292 
exã¡
.
e_Àn
++;

1293 
exã¡
.
e_lblk
--;

1294 
exã¡
.
e_pblk
--;

1295 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0, &
exã¡
);

1296 } i‡(
has_√xt
 &&

1297 (
logiˇl
 =
√xt_exã¡
.
e_lblk
 - 1) &&

1298 (
physiˇl
 =
√xt_exã¡
.
e_pblk
 - 1) &&

1299 (
√w_unöô
 =
√xt_unöô
) &&

1300 ((Ë
√xt_exã¡
.
e_Àn
 < 
max_Àn
 - 1)) {

1301 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
,

1302 
EXT2_EXTENT_NEXT_LEAF
,

1303 &
√xt_exã¡
);

1304 i‡(
ªtvÆ
)

1305 
d⁄e
;

1306 
√xt_exã¡
.
e_Àn
++;

1307 
√xt_exã¡
.
e_lblk
--;

1308 
√xt_exã¡
.
e_pblk
--;

1309 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0, &
√xt_exã¡
);

1310 } i‡(
logiˇl
 < 
exã¡
.
e_lblk
)

1311 
ªtvÆ
 = 
	`ext2fs_exã¡_ö£π
(
h™dÀ
, 0, &
√wexã¡
);

1313 
ªtvÆ
 = 
	`ext2fs_exã¡_ö£π
(
h™dÀ
,

1314 
EXT2_EXTENT_INSERT_AFTER
, &
√wexã¡
);

1315 i‡(
ªtvÆ
)

1316 
d⁄e
;

1317 
ªtvÆ
 = 
	`ext2fs_exã¡_fix_∑ª¡s
(
h™dÀ
);

1318 i‡(
ªtvÆ
)

1319 
d⁄e
;

1320 } i‡((
logiˇl
 =
exã¡
.
e_lblk
Ë&& (exã¡.
e_Àn
 == 1)) {

1321 #ifde‡
DEBUG


1322 
	`¥ötf
("(re/un)mapping only block inÉxtent\n");

1324 i‡(
physiˇl
) {

1325 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0, &
√wexã¡
);

1327 
ªtvÆ
 = 
	`ext2fs_exã¡_dñëe
(
h™dÀ
, 0);

1328 i‡(
ªtvÆ
)

1329 
d⁄e
;

1330 
ec
 = 
	`ext2fs_exã¡_fix_∑ª¡s
(
h™dÀ
);

1331 i‡(
ec
 !
EXT2_ET_NO_CURRENT_NODE
)

1332 
ªtvÆ
 = 
ec
;

1335 i‡(
ªtvÆ
)

1336 
d⁄e
;

1337 } i‡(
logiˇl
 =
exã¡
.
e_lblk
 +Éxã¡.
e_Àn
 - 1) {

1338 #ifde‡
DEBUG


1339 
	`¥ötf
("(re/un)mappingÜast block inÉxtent\n");

1341 i‡(
physiˇl
) {

1342 i‡(
has_√xt
 &&

1343 (
logiˇl
 =(
√xt_exã¡
.
e_lblk
 - 1)) &&

1344 (
physiˇl
 =(
√xt_exã¡
.
e_pblk
 - 1)) &&

1345 (
√w_unöô
 =
√xt_unöô
) &&

1346 ((Ë
√xt_exã¡
.
e_Àn
 < 
max_Àn
 - 1)) {

1347 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
,

1348 
EXT2_EXTENT_NEXT_LEAF
, &
√xt_exã¡
);

1349 i‡(
ªtvÆ
)

1350 
d⁄e
;

1351 
√xt_exã¡
.
e_Àn
++;

1352 
√xt_exã¡
.
e_lblk
--;

1353 
√xt_exã¡
.
e_pblk
--;

1354 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0,

1355 &
√xt_exã¡
);

1356 i‡(
ªtvÆ
)

1357 
d⁄e
;

1359 
ªtvÆ
 = 
	`ext2fs_exã¡_ö£π
(
h™dÀ
,

1360 
EXT2_EXTENT_INSERT_AFTER
, &
√wexã¡
);

1361 i‡(
ªtvÆ
)

1362 
d⁄e
;

1364 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
,

1365 
EXT2_EXTENT_PREV_LEAF
,

1366 &
exã¡
);

1367 i‡(
ªtvÆ
)

1368 
d⁄e
;

1370 
exã¡
.
e_Àn
--;

1371 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0, &
exã¡
);

1372 i‡(
ªtvÆ
)

1373 
d⁄e
;

1374 } i‡(
logiˇl
 =
exã¡
.
e_lblk
) {

1375 #ifde‡
DEBUG


1376 
	`¥ötf
("(re/un)mapping first block inÉxtent\n");

1378 i‡(
physiˇl
) {

1379 i‡(
has_¥ev
 &&

1380 (
logiˇl
 =(
¥ev_exã¡
.
e_lblk
 +

1381 
¥ev_exã¡
.
e_Àn
)) &&

1382 (
physiˇl
 =(
¥ev_exã¡
.
e_pblk
 +

1383 
¥ev_exã¡
.
e_Àn
)) &&

1384 (
√w_unöô
 =
¥ev_unöô
) &&

1385 ((Ë
¥ev_exã¡
.
e_Àn
 < 
max_Àn
-1)) {

1386 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
,

1387 
EXT2_EXTENT_PREV_LEAF
, &
¥ev_exã¡
);

1388 i‡(
ªtvÆ
)

1389 
d⁄e
;

1390 
¥ev_exã¡
.
e_Àn
++;

1391 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0,

1392 &
¥ev_exã¡
);

1394 
ªtvÆ
 = 
	`ext2fs_exã¡_ö£π
(
h™dÀ
,

1395 0, &
√wexã¡
);

1396 i‡(
ªtvÆ
)

1397 
d⁄e
;

1398 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
,

1399 
EXT2_EXTENT_NEXT_LEAF
,

1400 &
exã¡
);

1401 i‡(
ªtvÆ
)

1402 
d⁄e
;

1404 
exã¡
.
e_pblk
++;

1405 
exã¡
.
e_lblk
++;

1406 
exã¡
.
e_Àn
--;

1407 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0, &
exã¡
);

1408 i‡(
ªtvÆ
)

1409 
d⁄e
;

1411 
__u32
 
‹ig_Àngth
;

1413 #ifde‡
DEBUG


1414 
	`¥ötf
("(re/un)mapping in middle ofÉxtent\n");

1418 
‹ig_Àngth
 = 
exã¡
.
e_Àn
;

1421 
exã¡
.
e_Àn
 = (
logiˇl
 -Éxã¡.
e_lblk
);

1422 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
h™dÀ
, 0, &
exã¡
);

1423 i‡(
ªtvÆ
)

1424 
d⁄e
;

1426 i‡(
physiˇl
) {

1428 
ªtvÆ
 = 
	`ext2fs_exã¡_ö£π
(
h™dÀ
,

1429 
EXT2_EXTENT_INSERT_AFTER
, &
√wexã¡
);

1430 i‡(
ªtvÆ
)

1431 
d⁄e
;

1434 
exã¡
.
e_pblk
 +exã¡.
e_Àn
 + 1;

1435 
exã¡
.
e_lblk
 +exã¡.
e_Àn
 + 1;

1436 
exã¡
.
e_Àn
 = 
‹ig_Àngth
 -Éxtent.e_len - 1;

1437 
ªtvÆ
 = 
	`ext2fs_exã¡_ö£π
(
h™dÀ
,

1438 
EXT2_EXTENT_INSERT_AFTER
, &
exã¡
);

1439 i‡(
ªtvÆ
)

1440 
d⁄e
;

1443 
d⁄e
:

1445 i‡(
‹ig_height
 > 
h™dÀ
->
max_dïth
)

1446 
‹ig_height
 = 
h™dÀ
->
max_dïth
;

1447 
	`exã¡_gŸo
(
h™dÀ
, 
‹ig_height
, 
‹ig_lblk
);

1448  
ªtvÆ
;

1449 
	}
}

1451 
îrcode_t
 
	$ext2fs_exã¡_dñëe
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
)

1453 
exã¡_∑th
 *
∑th
;

1454 *
˝
;

1455 
ext3_exã¡_hódî
 *
eh
;

1456 
îrcode_t
 
ªtvÆ
 = 0;

1458 
	`EXT2_CHECK_MAGIC
(
h™dÀ
, 
EXT2_ET_MAGIC_EXTENT_HANDLE
);

1460 i‡(!(
h™dÀ
->
fs
->
Êags
 & 
EXT2_FLAG_RW
))

1461  
EXT2_ET_RO_FILSYS
;

1463 i‡(!
h™dÀ
->
∑th
)

1464  
EXT2_ET_NO_CURRENT_NODE
;

1466 #ifde‡
DEBUG


1468 
ext2fs_exã¡
 
exã¡
;

1470 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_CURRENT
,

1471 &
exã¡
);

1472 i‡(
ªtvÆ
 == 0) {

1473 
	`¥ötf
("exã¡ dñëê%u ", 
h™dÀ
->
öo
);

1474 
	`dbg_¥öt_exã¡
(0, &
exã¡
);

1479 
∑th
 = 
h™dÀ
->∑th + h™dÀ->
Àvñ
;

1480 i‡(!
∑th
->
cuº
)

1481  
EXT2_ET_NO_CURRENT_NODE
;

1483 
˝
 = 
∑th
->
cuº
;

1485 i‡(
∑th
->
À·
) {

1486 
	`memmove
(
˝
, c∞+ (
ext3_exã¡_idx
),

1487 
∑th
->
À·
 * (
ext3_exã¡_idx
));

1488 
∑th
->
À·
--;

1490 
ext3_exã¡_idx
 *
ix
 = 
∑th
->
cuº
;

1491 
ix
--;

1492 
∑th
->
cuº
 = 
ix
;

1494 i‡(--
∑th
->
íåõs
 == 0)

1495 
∑th
->
cuº
 = 0;

1498 i‡(
∑th
->
íåõs
 =0 && 
h™dÀ
->
Àvñ
) {

1499 i‡(!(
Êags
 & 
EXT2_EXTENT_DELETE_KEEP_EMPTY
)) {

1500 
ext2fs_exã¡
 
exã¡
;

1502 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
h™dÀ
, 
EXT2_EXTENT_UP
,

1503 &
exã¡
);

1504 i‡(
ªtvÆ
)

1505  
ªtvÆ
;

1507 
ªtvÆ
 = 
	`ext2fs_exã¡_dñëe
(
h™dÀ
, 
Êags
);

1508 
h™dÀ
->
öode
->
i_blocks
 -h™dÀ->
fs
->
blocksize
 / 512;

1509 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
h™dÀ
->
fs
, h™dÀ->
öo
,

1510 
h™dÀ
->
öode
);

1511 
	`ext2fs_block_Æloc_°©s
(
h™dÀ
->
fs
, 
exã¡
.
e_pblk
, -1);

1514 
eh
 = (
ext3_exã¡_hódî
 *Ë
∑th
->
buf
;

1515 
eh
->
eh_íåõs
 = 
	`ext2fs_˝u_to_À16
(
∑th
->
íåõs
);

1516 i‡((
∑th
->
íåõs
 =0Ë&& (
h™dÀ
->
Àvñ
 == 0))

1517 
eh
->
eh_dïth
 = 
h™dÀ
->
max_dïth
 = 0;

1518 
ªtvÆ
 = 
	`upd©e_∑th
(
h™dÀ
);

1520  
ªtvÆ
;

1521 
	}
}

1523 
îrcode_t
 
	$ext2fs_exã¡_gë_öfo
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

1524 
ext2_exã¡_öfo
 *
öfo
)

1526 
exã¡_∑th
 *
∑th
;

1528 
	`EXT2_CHECK_MAGIC
(
h™dÀ
, 
EXT2_ET_MAGIC_EXTENT_HANDLE
);

1530 
	`mem£t
(
öfo
, 0, (
ext2_exã¡_öfo
));

1532 
∑th
 = 
h™dÀ
->∑th + h™dÀ->
Àvñ
;

1533 i‡(
∑th
) {

1534 i‡(
∑th
->
cuº
)

1535 
öfo
->
cuº_íåy
 = ((*Ë
∑th
->
cuº
 -Ö©h->
buf
) /

1536 (
ext3_exã¡_idx
);

1538 
öfo
->
cuº_íåy
 = 0;

1539 
öfo
->
num_íåõs
 = 
∑th
->
íåõs
;

1540 
öfo
->
max_íåõs
 = 
∑th
->max_entries;

1541 
öfo
->
byãs_avaû
 = (
∑th
->
max_íåõs
 -Ö©h->
íåõs
) *

1542 (
ext3_exã¡
);

1545 
öfo
->
cuº_Àvñ
 = 
h™dÀ
->
Àvñ
;

1546 
öfo
->
max_dïth
 = 
h™dÀ
->max_depth;

1547 
öfo
->
max_lblk
 = ((
__u64
) 1 << 32) - 1;

1548 
öfo
->
max_pblk
 = ((
__u64
) 1 << 48) - 1;

1549 
öfo
->
max_Àn
 = (1UL << 15);

1550 
öfo
->
max_unöô_Àn
 = (1UL << 15) - 1;

1553 
	}
}

1555 #ifde‡
DEBUG


1557 
	~"ss/ss.h
"

1559 
	~"debugfs.h
"

1564 c⁄° *
debug_¥og_«me
 = "tst_extents";

1565 
ss_ªque°_èbÀ
 
exã¡_cmds
;

1566 
ss_ªque°_èbÀ
 *
	gexåa_cmds
 = &
exã¡_cmds
;

1568 
ext2_öo_t
 
	gcuºít_öo
 = 0;

1569 
ext2_exã¡_h™dÀ_t
 
	gcuºít_h™dÀ
;

1571 
	$comm⁄_exã¡_¨gs_¥o˚ss
(
¨gc
, *
¨gv
[], 
mö_¨gc
,

1572 
max_¨gc
, c⁄° *
cmd
,

1573 c⁄° *
ußge
, 
Êags
)

1575 i‡(
	`comm⁄_¨gs_¥o˚ss
(
¨gc
, 
¨gv
, 
mö_¨gc
, 
max_¨gc
, 
cmd
,

1576 
ußge
, 
Êags
))

1579 i‡(!
cuºít_h™dÀ
) {

1580 
	`com_îr
(
cmd
, 0, "Extent handleÇot open");

1584 
	}
}

1586 
	$do_öode
(
¨gc
, *
¨gv
[])

1588 
ext2_öo_t
 
öode
;

1589 
i
;

1590 
ext3_exã¡_hódî
 *
eh
;

1591 
îrcode_t
 
ªtvÆ
;

1593 i‡(
	`check_fs_›í
(
¨gv
[0]))

1596 i‡(
¨gc
 == 1) {

1597 i‡(
cuºít_öo
)

1598 
	`¥ötf
("Cuºíàöodêi†%d\n", 
cuºít_öo
);

1600 
	`¥ötf
("No current inode\n");

1604 i‡(
	`comm⁄_öode_¨gs_¥o˚ss
(
¨gc
, 
¨gv
, &
öode
, 0)) {

1608 
cuºít_öo
 = 0;

1610 
ªtvÆ
 = 
	`ext2fs_exã¡_›í
(
cuºít_fs
, 
öode
, &
cuºít_h™dÀ
);

1611 i‡(
ªtvÆ
) {

1612 
	`com_îr
(
¨gv
[1], 
ªtvÆ
, "while openingÉxtent handle");

1616 
cuºít_öo
 = 
öode
;

1618 
	`¥ötf
("Lﬂded inodê%d\n", 
cuºít_öo
);

1621 
	}
}

1623 
	$gíîic_gŸo_node
(*
cmd_«me
, 
›
)

1625 
ext2fs_exã¡
 
exã¡
;

1626 
îrcode_t
 
ªtvÆ
;

1628 i‡(
	`check_fs_›í
(
cmd_«me
))

1631 i‡(!
cuºít_h™dÀ
) {

1632 
	`com_îr
(
cmd_«me
, 0, "Extent handleÇot open");

1636 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
cuºít_h™dÀ
, 
›
, &
exã¡
);

1637 i‡(
ªtvÆ
) {

1638 
	`com_îr
(
cmd_«me
, 
ªtvÆ
, 0);

1641 
	`dbg_¥öt_exã¡
(0, &
exã¡
);

1642 
	}
}

1644 
	$do_cuºít_node
(
¨gc
, *
¨gv
[])

1646 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_CURRENT
);

1647 
	}
}

1649 
	$do_roŸ_node
(
¨gc
, *
¨gv
[])

1651 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_ROOT
);

1652 
	}
}

1654 
	$do_œ°_Àaf
(
¨gc
, *
¨gv
[])

1656 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_LAST_LEAF
);

1657 
	}
}

1659 
	$do_fú°_sib
(
¨gc
, *
¨gv
[])

1661 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_FIRST_SIB
);

1662 
	}
}

1664 
	$do_œ°_sib
(
¨gc
, *
¨gv
[])

1666 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_LAST_SIB
);

1667 
	}
}

1669 
	$do_√xt_sib
(
¨gc
, *
¨gv
[])

1671 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_NEXT_SIB
);

1672 
	}
}

1674 
	$do_¥ev_sib
(
¨gc
, *
¨gv
[])

1676 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_PREV_SIB
);

1677 
	}
}

1679 
	$do_√xt_Àaf
(
¨gc
, *
¨gv
[])

1681 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_NEXT_LEAF
);

1682 
	}
}

1684 
	$do_¥ev_Àaf
(
¨gc
, *
¨gv
[])

1686 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_PREV_LEAF
);

1687 
	}
}

1689 
	$do_√xt
(
¨gc
, *
¨gv
[])

1691 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_NEXT
);

1692 
	}
}

1694 
	$do_¥ev
(
¨gc
, *
¨gv
[])

1696 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_PREV
);

1697 
	}
}

1699 
	$do_up
(
¨gc
, *
¨gv
[])

1701 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_UP
);

1702 
	}
}

1704 
	$do_down
(
¨gc
, *
¨gv
[])

1706 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_DOWN
);

1707 
	}
}

1709 
	$do_dñëe_node
(
¨gc
, *
¨gv
[])

1711 
îrcode_t
 
ªtvÆ
;

1712 
îr
;

1714 i‡(
	`comm⁄_exã¡_¨gs_¥o˚ss
(
¨gc
, 
¨gv
, 1, 1, "delete_node",

1715 "", 
CHECK_FS_RW
 | 
CHECK_FS_BITMAPS
))

1718 
ªtvÆ
 = 
	`ext2fs_exã¡_dñëe
(
cuºít_h™dÀ
, 0);

1719 i‡(
ªtvÆ
) {

1720 
	`com_îr
(
¨gv
[0], 
ªtvÆ
, 0);

1723 i‡(
cuºít_h™dÀ
->
∑th
 && cuºít_h™dÀ->∑th[0].
cuº
)

1724 
	`do_cuºít_node
(
¨gc
, 
¨gv
);

1725 
	}
}

1727 
	$do_ª∂a˚_node
(
¨gc
, *
¨gv
[])

1729 c⁄° *
ußge
 = "[--uninit] <lblk> <len> <pblk>";

1730 
îrcode_t
 
ªtvÆ
;

1731 
ext2fs_exã¡
 
exã¡
;

1732 
îr
;

1734 i‡(
	`comm⁄_exã¡_¨gs_¥o˚ss
(
¨gc
, 
¨gv
, 3, 5, "replace_node",

1735 
ußge
, 
CHECK_FS_RW
 | 
CHECK_FS_BITMAPS
))

1738 
exã¡
.
e_Êags
 = 0;

1740 i‡(!
	`°rcmp
(
¨gv
[1], "--uninit")) {

1741 
¨gc
--;

1742 
¨gv
++;

1743 
exã¡
.
e_Êags
 |
EXT2_EXTENT_FLAGS_UNINIT
;

1746 i‡(
¨gc
 != 4) {

1747 
	`Ârötf
(
°dîr
, "Ußge: %†%s\n", 
¨gv
[0], 
ußge
);

1751 
exã¡
.
e_lblk
 = 
	`∑r£_ul⁄g
(
¨gv
[1],árgv[0], "logiˇ»block", &
îr
);

1752 i‡(
îr
)

1755 
exã¡
.
e_Àn
 = 
	`∑r£_ul⁄g
(
¨gv
[2],árgv[0], "logiˇ»block", &
îr
);

1756 i‡(
îr
)

1759 
exã¡
.
e_pblk
 = 
	`∑r£_ul⁄g
(
¨gv
[3],árgv[0], "logiˇ»block", &
îr
);

1760 i‡(
îr
)

1763 
ªtvÆ
 = 
	`ext2fs_exã¡_ª∂a˚
(
cuºít_h™dÀ
, 0, &
exã¡
);

1764 i‡(
ªtvÆ
) {

1765 
	`com_îr
(
¨gv
[0], 
ªtvÆ
, 0);

1768 
	`do_cuºít_node
(
¨gc
, 
¨gv
);

1769 
	}
}

1771 
	$do_•lô_node
(
¨gc
, *
¨gv
[])

1773 
îrcode_t
 
ªtvÆ
;

1774 
ext2fs_exã¡
 
exã¡
;

1775 
îr
;

1777 i‡(
	`comm⁄_exã¡_¨gs_¥o˚ss
(
¨gc
, 
¨gv
, 1, 1, "split_node",

1778 "", 
CHECK_FS_RW
 | 
CHECK_FS_BITMAPS
))

1781 
ªtvÆ
 = 
	`exã¡_node_•lô
(
cuºít_h™dÀ
);

1782 i‡(
ªtvÆ
) {

1783 
	`com_îr
(
¨gv
[0], 
ªtvÆ
, 0);

1786 
	`do_cuºít_node
(
¨gc
, 
¨gv
);

1787 
	}
}

1789 
	$do_ö£π_node
(
¨gc
, *
¨gv
[])

1791 c⁄° *
ußge
 = "[--after] [--uninit] <lblk> <len> <pblk>";

1792 
îrcode_t
 
ªtvÆ
;

1793 
ext2fs_exã¡
 
exã¡
;

1794 *
cmd
;

1795 
îr
;

1796 
Êags
 = 0;

1798 i‡(
	`comm⁄_exã¡_¨gs_¥o˚ss
(
¨gc
, 
¨gv
, 3, 6, "insert_node",

1799 
ußge
, 
CHECK_FS_RW
 | 
CHECK_FS_BITMAPS
))

1802 
cmd
 = 
¨gv
[0];

1804 
exã¡
.
e_Êags
 = 0;

1806 
¨gc
 > 2) {

1807 i‡(!
	`°rcmp
(
¨gv
[1], "--after")) {

1808 
¨gc
--;

1809 
¨gv
++;

1810 
Êags
 |
EXT2_EXTENT_INSERT_AFTER
;

1813 i‡(!
	`°rcmp
(
¨gv
[1], "--uninit")) {

1814 
¨gc
--;

1815 
¨gv
++;

1816 
exã¡
.
e_Êags
 |
EXT2_EXTENT_FLAGS_UNINIT
;

1822 i‡(
¨gc
 != 4) {

1823 
	`Ârötf
(
°dîr
, "ußge: %†%s\n", 
cmd
, 
ußge
);

1827 
exã¡
.
e_lblk
 = 
	`∑r£_ul⁄g
(
¨gv
[1], 
cmd
,

1828 "logiˇ»block", &
îr
);

1829 i‡(
îr
)

1832 
exã¡
.
e_Àn
 = 
	`∑r£_ul⁄g
(
¨gv
[2], 
cmd
,

1833 "Àngth", &
îr
);

1834 i‡(
îr
)

1837 
exã¡
.
e_pblk
 = 
	`∑r£_ul⁄g
(
¨gv
[3], 
cmd
,

1838 "pysiˇ»block", &
îr
);

1839 i‡(
îr
)

1842 
ªtvÆ
 = 
	`ext2fs_exã¡_ö£π
(
cuºít_h™dÀ
, 
Êags
, &
exã¡
);

1843 i‡(
ªtvÆ
) {

1844 
	`com_îr
(
cmd
, 
ªtvÆ
, 0);

1847 
	`do_cuºít_node
(
¨gc
, 
¨gv
);

1848 
	}
}

1850 
	$do_£t_bm≠
(
¨gc
, **
¨gv
)

1852 c⁄° *
ußge
 = "[--uninit] <lblk> <pblk>";

1853 
îrcode_t
 
ªtvÆ
;

1854 
blk_t
 
logiˇl
;

1855 
blk_t
 
physiˇl
;

1856 *
cmd
 = 
¨gv
[0];

1857 
Êags
 = 0;

1858 
îr
;

1860 i‡(
	`comm⁄_exã¡_¨gs_¥o˚ss
(
¨gc
, 
¨gv
, 3, 5, "set_bmap",

1861 
ußge
, 
CHECK_FS_RW
 | 
CHECK_FS_BITMAPS
))

1864 i‡(
¨gc
 > 2 && !
	`°rcmp
(
¨gv
[1], "--uninit")) {

1865 
¨gc
--;

1866 
¨gv
++;

1867 
Êags
 |
EXT2_EXTENT_SET_BMAP_UNINIT
;

1870 i‡(
¨gc
 != 3) {

1871 
	`Ârötf
(
°dîr
, "Ußge: %†%s\n", 
cmd
, 
ußge
);

1875 
logiˇl
 = 
	`∑r£_ul⁄g
(
¨gv
[1], 
cmd
,

1876 "logiˇ»block", &
îr
);

1877 i‡(
îr
)

1880 
physiˇl
 = 
	`∑r£_ul⁄g
(
¨gv
[2], 
cmd
,

1881 "physiˇ»block", &
îr
);

1882 i‡(
îr
)

1885 
ªtvÆ
 = 
	`ext2fs_exã¡_£t_bm≠
(
cuºít_h™dÀ
, 
logiˇl
,

1886 (
blk64_t
Ë
physiˇl
, 
Êags
);

1887 i‡(
ªtvÆ
) {

1888 
	`com_îr
(
cmd
, 
ªtvÆ
, 0);

1891 i‡(
cuºít_h™dÀ
->
∑th
 && cuºít_h™dÀ->∑th[0].
cuº
)

1892 
	`do_cuºít_node
(
¨gc
, 
¨gv
);

1893 
	}
}

1895 
	$do_¥öt_Æl
(
¨gc
, **
¨gv
)

1897 c⁄° *
ußge
 = "[--leaf-only|--reverse|--reverse-leaf]";

1898 
ext2fs_exã¡
 
exã¡
;

1899 
îrcode_t
 
ªtvÆ
;

1900 
îrcode_t
 
íd_îr
 = 
EXT2_ET_EXTENT_NO_NEXT
;

1901 
›
 = 
EXT2_EXTENT_NEXT
;

1902 
fú°_›
 = 
EXT2_EXTENT_ROOT
;

1905 i‡(
	`comm⁄_exã¡_¨gs_¥o˚ss
(
¨gc
, 
¨gv
, 1, 2, "print_all",

1906 
ußge
, 0))

1909 i‡(
¨gc
 == 2) {

1910 i‡(!
	`°rcmp
(
¨gv
[1], "--leaf-only"))

1911 
›
 = 
EXT2_EXTENT_NEXT_LEAF
;

1912 i‡(!
	`°rcmp
(
¨gv
[1], "--reverse")) {

1913 
›
 = 
EXT2_EXTENT_PREV
;

1914 
fú°_›
 = 
EXT2_EXTENT_LAST_LEAF
;

1915 
íd_îr
 = 
EXT2_ET_EXTENT_NO_PREV
;

1916 } i‡(!
	`°rcmp
(
¨gv
[1], "--reverse-leaf")) {

1917 
›
 = 
EXT2_EXTENT_PREV_LEAF
;

1918 
fú°_›
 = 
EXT2_EXTENT_LAST_LEAF
;

1919 
íd_îr
 = 
EXT2_ET_EXTENT_NO_PREV
;

1921 
	`Ârötf
(
°dîr
, "Ußge: %†%s\n", 
¨gv
[0], 
ußge
);

1926 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
cuºít_h™dÀ
, 
fú°_›
, &
exã¡
);

1927 i‡(
ªtvÆ
) {

1928 
	`com_îr
(
¨gv
[0], 
ªtvÆ
, 0);

1931 
	`dbg_¥öt_exã¡
(0, &
exã¡
);

1934 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
cuºít_h™dÀ
, 
›
, &
exã¡
);

1935 i‡(
ªtvÆ
 =
íd_îr
)

1938 i‡(
ªtvÆ
) {

1939 
	`com_îr
(
¨gv
[0], 
ªtvÆ
, 0);

1942 
	`dbg_¥öt_exã¡
(0, &
exã¡
);

1944 
	}
}

1946 
	$do_öfo
(
¨gc
, **
¨gv
)

1948 
ext2fs_exã¡
 
exã¡
;

1949 
ext2_exã¡_öfo
 
öfo
;

1950 
îrcode_t
 
ªtvÆ
;

1952 i‡(
	`comm⁄_exã¡_¨gs_¥o˚ss
(
¨gc
, 
¨gv
, 1, 1, "info", "", 0))

1955 
ªtvÆ
 = 
	`ext2fs_exã¡_gë_öfo
(
cuºít_h™dÀ
, &
öfo
);

1956 i‡(
ªtvÆ
) {

1957 
	`com_îr
(
¨gv
[0], 
ªtvÆ
, 0);

1961 
ªtvÆ
 = 
	`ext2fs_exã¡_gë
(
cuºít_h™dÀ
,

1962 
EXT2_EXTENT_CURRENT
, &
exã¡
);

1963 i‡(
ªtvÆ
) {

1964 
	`com_îr
(
¨gv
[0], 
ªtvÆ
, 0);

1968 
	`dbg_¥öt_exã¡
(0, &
exã¡
);

1970 
	`¥ötf
("Current handleÜocation: %d/%d (max: %d, bytes %d),Üevel %d/%d\n",

1971 
öfo
.
cuº_íåy
, info.
num_íåõs
, info.
max_íåõs
,

1972 
öfo
.
byãs_avaû
, info.
cuº_Àvñ
, info.
max_dïth
);

1973 
	`¥ötf
("\tmaxÜblk: %Œu, maxÖblk: %Œu\n", 
öfo
.
max_lblk
,

1974 
öfo
.
max_pblk
);

1975 
	`¥ötf
("\tmax_Àn: %u, max_unöô_Àn: %u\n", 
öfo
.
max_Àn
,

1976 
öfo
.
max_unöô_Àn
);

1977 
	}
}

1979 
	$do_gŸo_block
(
¨gc
, **
¨gv
)

1981 
ext2fs_exã¡
 
exã¡
;

1982 
îrcode_t
 
ªtvÆ
;

1983 
›
 = 
EXT2_EXTENT_NEXT_LEAF
;

1984 
blk_t
 
blk
;

1985 
Àvñ
 = 0;

1987 i‡(
	`comm⁄_exã¡_¨gs_¥o˚ss
(
¨gc
, 
¨gv
, 2, 3, "goto_block",

1991 i‡(
	`°πoblk
(
¨gv
[0],árgv[1], &
blk
))

1994 i‡(
¨gc
 == 3)

1995 i‡(
	`°πoblk
(
¨gv
[0],árgv[2], &
Àvñ
))

1998 
ªtvÆ
 = 
	`exã¡_gŸo
(
cuºít_h™dÀ
, 
Àvñ
, (
blk64_t
Ë
blk
);

2000 i‡(
ªtvÆ
) {

2001 
	`com_îr
(
¨gv
[0], 
ªtvÆ
,

2003 
blk
, 
Àvñ
);

2007 
	`gíîic_gŸo_node
(
¨gv
[0], 
EXT2_EXTENT_CURRENT
);

2008 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/fileio.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

18 
	~<ext2fs/ext2_fs.h
>

19 
	~<ext2fs/ext2fs.h
>

21 
	#EXT2_FILE_SHARED_INODE
 0x8000

	)

23 
	sext2_fûe
 {

24 
îrcode_t
 
	mmagic
;

25 
ext2_fûsys
 
	mfs
;

26 
ext2_öo_t
 
	möo
;

27 
ext2_öode
 *
	möode
;

28 
	mÊags
;

29 
__u64
 
	mpos
;

30 
blk_t
 
	mblockno
;

31 
blk_t
 
	mphysblock
;

32 *
	mbuf
;

35 
	#BMAP_BUFFER
 (
fûe
->
buf
 + 
fs
->
blocksize
)

	)

37 
îrcode_t
 
	$ext2fs_fûe_›í2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

38 
ext2_öode
 *
öode
,

39 
Êags
, 
ext2_fûe_t
 *
ªt
)

41 
ext2_fûe_t
 
fûe
;

42 
îrcode_t
 
ªtvÆ
;

48 i‡((
Êags
 & (
EXT2_FILE_WRITE
 | 
EXT2_FILE_CREATE
)) &&

49 !(
fs
->
Êags
 & 
EXT2_FLAG_RW
))

50  
EXT2_ET_RO_FILSYS
;

52 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ext2_fûe
), &
fûe
);

53 i‡(
ªtvÆ
)

54  
ªtvÆ
;

56 
	`mem£t
(
fûe
, 0, (
ext2_fûe
));

57 
fûe
->
magic
 = 
EXT2_ET_MAGIC_EXT2_FILE
;

58 
fûe
->
fs
 = fs;

59 
fûe
->
öo
 = ino;

60 
fûe
->
Êags
 = fœg†& (
EXT2_FILE_MASK
 | 
EXT2_FILE_SHARED_INODE
);

62 i‡(
Êags
 & 
EXT2_FILE_SHARED_INODE
)

63 
fûe
->
öode
 = inode;

65 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ext2_öode
), &
fûe
->
öode
);

66 i‡(
ªtvÆ
)

67 
Áû_öode_Æloc
;

68 i‡(
öode
) {

69 
	`mem˝y
(
fûe
->
öode
, inode, (
ext2_öode
));

71 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
öo
, 
fûe
->
öode
);

72 i‡(
ªtvÆ
)

73 
Áû
;

77 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(3, 
fs
->
blocksize
, &
fûe
->
buf
);

78 i‡(
ªtvÆ
)

79 
Áû
;

81 *
ªt
 = 
fûe
;

84 
Áû
:

85 i‡(!(
fûe
->
Êags
 & 
EXT2_FILE_SHARED_INODE
))

86 
	`ext2fs_‰ì_mem
(&
fûe
->
öode
);

87 
Áû_öode_Æloc
:

88 i‡(
fûe
->
buf
)

89 
	`ext2fs_‰ì_mem
(&
fûe
->
buf
);

90 
	`ext2fs_‰ì_mem
(&
fûe
);

91  
ªtvÆ
;

92 
	}
}

94 
îrcode_t
 
	$ext2fs_fûe_›í
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

95 
Êags
, 
ext2_fûe_t
 *
ªt
)

97  
	`ext2fs_fûe_›í2
(
fs
, 
öo
, 
NULL
, 
Êags
 & ~(
EXT2_FILE_SHARED_INODE
), 
ªt
);

98 
	}
}

103 
ext2_fûsys
 
	$ext2fs_fûe_gë_fs
(
ext2_fûe_t
 
fûe
)

105 i‡(
fûe
->
magic
 !
EXT2_ET_MAGIC_EXT2_FILE
)

107  
fûe
->
fs
;

108 
	}
}

114 
îrcode_t
 
	$ext2fs_fûe_Êush
(
ext2_fûe_t
 
fûe
)

116 
îrcode_t
 
ªtvÆ
;

117 
ext2_fûsys
 
fs
;

119 
	`EXT2_CHECK_MAGIC
(
fûe
, 
EXT2_ET_MAGIC_EXT2_FILE
);

120 
fs
 = 
fûe
->fs;

122 i‡(!(
fûe
->
Êags
 & 
EXT2_FILE_BUF_VALID
) ||

123 !(
fûe
->
Êags
 & 
EXT2_FILE_BUF_DIRTY
))

130 i‡(!
fûe
->
physblock
) {

131 
ªtvÆ
 = 
	`ext2fs_bm≠
(
fs
, 
fûe
->
öo
, fûe->
öode
,

132 
BMAP_BUFFER
, 
fûe
->
öo
 ? 
BMAP_ALLOC
 : 0,

133 
fûe
->
blockno
, &fûe->
physblock
);

134 i‡(
ªtvÆ
)

135  
ªtvÆ
;

138 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
fûe
->
physblock
,

139 1, 
fûe
->
buf
);

140 i‡(
ªtvÆ
)

141  
ªtvÆ
;

143 
fûe
->
Êags
 &~
EXT2_FILE_BUF_DIRTY
;

145  
ªtvÆ
;

146 
	}
}

152 
îrcode_t
 
	$sync_buf„r_posôi⁄
(
ext2_fûe_t
 
fûe
)

154 
blk_t
 
b
;

155 
îrcode_t
 
ªtvÆ
;

157 
b
 = 
fûe
->
pos
 / fûe->
fs
->
blocksize
;

158 i‡(
b
 !
fûe
->
blockno
) {

159 
ªtvÆ
 = 
	`ext2fs_fûe_Êush
(
fûe
);

160 i‡(
ªtvÆ
)

161  
ªtvÆ
;

162 
fûe
->
Êags
 &~
EXT2_FILE_BUF_VALID
;

164 
fûe
->
blockno
 = 
b
;

166 
	}
}

176 
	#DONTFILL
 1

	)

177 
îrcode_t
 
	$lﬂd_buf„r
(
ext2_fûe_t
 
fûe
, 
d⁄tfûl
)

179 
ext2_fûsys
 
fs
 = 
fûe
->fs;

180 
îrcode_t
 
ªtvÆ
;

182 i‡(!(
fûe
->
Êags
 & 
EXT2_FILE_BUF_VALID
)) {

183 
ªtvÆ
 = 
	`ext2fs_bm≠
(
fs
, 
fûe
->
öo
, fûe->
öode
,

184 
BMAP_BUFFER
, 0, 
fûe
->
blockno
,

185 &
fûe
->
physblock
);

186 i‡(
ªtvÆ
)

187  
ªtvÆ
;

188 i‡(!
d⁄tfûl
) {

189 i‡(
fûe
->
physblock
) {

190 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
,

191 
fûe
->
physblock
,

192 1, 
fûe
->
buf
);

193 i‡(
ªtvÆ
)

194  
ªtvÆ
;

196 
	`mem£t
(
fûe
->
buf
, 0, 
fs
->
blocksize
);

198 
fûe
->
Êags
 |
EXT2_FILE_BUF_VALID
;

201 
	}
}

204 
îrcode_t
 
ext2fs_fûe_˛o£2
 (
ext2_fûe_t
 
fûe
, (*
˛o£_ˇŒback
Ë(
ext2_öode
 *
öode
, 
Êags
))

206 
îrcode_t
 
ªtvÆ
;

208 
	`EXT2_CHECK_MAGIC
(
fûe
, 
EXT2_ET_MAGIC_EXT2_FILE
);

210 
ªtvÆ
 = 
	`ext2fs_fûe_Êush
(
fûe
);

212 i‡(
fûe
->
buf
) {

213 
	`ext2fs_‰ì_mem
(&
fûe
->
buf
);

215 i‡(!(
fûe
->
Êags
 & 
EXT2_FILE_SHARED_INODE
)) {

216 
	`ext2fs_‰ì_mem
(&
fûe
->
öode
);

217 } i‡(
˛o£_ˇŒback
 !
NULL
) {

218 
	`˛o£_ˇŒback
(
fûe
->
öode
, fûe->
Êags
 & 
EXT2_FILE_MASK
);

220 
	`ext2fs_‰ì_mem
(&
fûe
);

222  
ªtvÆ
;

223 
	}
}

225 
îrcode_t
 
	$ext2fs_fûe_˛o£
(
ext2_fûe_t
 
fûe
)

227  
	`ext2fs_fûe_˛o£2
(
fûe
, 
NULL
);

228 
	}
}

230 
îrcode_t
 
	$ext2fs_fûe_ªad
(
ext2_fûe_t
 
fûe
, *
buf
,

231 
w™ãd
, *
gŸ
)

233 
ext2_fûsys
 
fs
;

234 
îrcode_t
 
ªtvÆ
 = 0;

235 
°¨t
, 
c
, 
cou¡
 = 0;

236 
__u64
 
À·
;

237 *
±r
 = (*Ë
buf
;

239 
	`EXT2_CHECK_MAGIC
(
fûe
, 
EXT2_ET_MAGIC_EXT2_FILE
);

240 
fs
 = 
fûe
->fs;

242 (
fûe
->
pos
 < 
	`EXT2_I_SIZE
(fûe->
öode
)Ë&& (
w™ãd
 > 0)) {

243 
ªtvÆ
 = 
	`sync_buf„r_posôi⁄
(
fûe
);

244 i‡(
ªtvÆ
)

245 
Áû
;

246 
ªtvÆ
 = 
	`lﬂd_buf„r
(
fûe
, 0);

247 i‡(
ªtvÆ
)

248 
Áû
;

250 
°¨t
 = 
fûe
->
pos
 % 
fs
->
blocksize
;

251 
c
 = 
fs
->
blocksize
 - 
°¨t
;

252 i‡(
c
 > 
w™ãd
)

253 
c
 = 
w™ãd
;

254 
À·
 = 
	`EXT2_I_SIZE
(
fûe
->
öode
Ë- fûe->
pos
 ;

255 i‡(
c
 > 
À·
)

256 
c
 = 
À·
;

258 
	`mem˝y
(
±r
, 
fûe
->
buf
+
°¨t
, 
c
);

259 
fûe
->
pos
 +
c
;

260 
±r
 +
c
;

261 
cou¡
 +
c
;

262 
w™ãd
 -
c
;

265 
Áû
:

266 i‡(
gŸ
)

267 *
gŸ
 = 
cou¡
;

268  
ªtvÆ
;

269 
	}
}

272 
îrcode_t
 
	$ext2fs_fûe_wrôe
(
ext2_fûe_t
 
fûe
, c⁄° *
buf
,

273 
nbyãs
, *
wrôãn
)

275 
ext2_fûsys
 
fs
;

276 
îrcode_t
 
ªtvÆ
 = 0;

277 
°¨t
, 
c
, 
cou¡
 = 0;

278 c⁄° *
±r
 = (c⁄° *Ë
buf
;

280 
	`EXT2_CHECK_MAGIC
(
fûe
, 
EXT2_ET_MAGIC_EXT2_FILE
);

281 
fs
 = 
fûe
->fs;

283 i‡(!(
fûe
->
Êags
 & 
EXT2_FILE_WRITE
))

284  
EXT2_ET_FILE_RO
;

286 
nbyãs
 > 0) {

287 
ªtvÆ
 = 
	`sync_buf„r_posôi⁄
(
fûe
);

288 i‡(
ªtvÆ
)

289 
Áû
;

291 
°¨t
 = 
fûe
->
pos
 % 
fs
->
blocksize
;

292 
c
 = 
fs
->
blocksize
 - 
°¨t
;

293 i‡(
c
 > 
nbyãs
)

294 
c
 = 
nbyãs
;

300 
ªtvÆ
 = 
	`lﬂd_buf„r
(
fûe
, (
c
 =
fs
->
blocksize
));

301 i‡(
ªtvÆ
)

302 
Áû
;

304 
fûe
->
Êags
 |
EXT2_FILE_BUF_DIRTY
;

305 
	`mem˝y
(
fûe
->
buf
+
°¨t
, 
±r
, 
c
);

306 
fûe
->
pos
 +
c
;

307 
±r
 +
c
;

308 
cou¡
 +
c
;

309 
nbyãs
 -
c
;

312 
Áû
:

313 i‡(
wrôãn
)

314 *
wrôãn
 = 
cou¡
;

315  
ªtvÆ
;

316 
	}
}

318 
îrcode_t
 
	$ext2fs_fûe_Œ£ek
(
ext2_fûe_t
 
fûe
, 
__u64
 
off£t
,

319 
whí˚
, 
__u64
 *
ªt_pos
)

321 
	`EXT2_CHECK_MAGIC
(
fûe
, 
EXT2_ET_MAGIC_EXT2_FILE
);

323 i‡(
whí˚
 =
EXT2_SEEK_SET
)

324 
fûe
->
pos
 = 
off£t
;

325 i‡(
whí˚
 =
EXT2_SEEK_CUR
)

326 
fûe
->
pos
 +
off£t
;

327 i‡(
whí˚
 =
EXT2_SEEK_END
)

328 
fûe
->
pos
 = 
	`EXT2_I_SIZE
(fûe->
öode
Ë+ 
off£t
;

330  
EXT2_ET_INVALID_ARGUMENT
;

332 i‡(
ªt_pos
)

333 *
ªt_pos
 = 
fûe
->
pos
;

336 
	}
}

338 
îrcode_t
 
	$ext2fs_fûe_l£ek
(
ext2_fûe_t
 
fûe
, 
ext2_off_t
 
off£t
,

339 
whí˚
, 
ext2_off_t
 *
ªt_pos
)

341 
__u64
 
loff£t
, 
ªt_loff£t
;

342 
îrcode_t
 
ªtvÆ
;

344 
loff£t
 = 
off£t
;

345 
ªtvÆ
 = 
	`ext2fs_fûe_Œ£ek
(
fûe
, 
loff£t
, 
whí˚
, &
ªt_loff£t
);

346 i‡(
ªt_pos
)

347 *
ªt_pos
 = (
ext2_off_t
Ë
ªt_loff£t
;

348  
ªtvÆ
;

349 
	}
}

355 
îrcode_t
 
	$ext2fs_fûe_gë_lsize
(
ext2_fûe_t
 
fûe
, 
__u64
 *
ªt_size
)

357 i‡(
fûe
->
magic
 !
EXT2_ET_MAGIC_EXT2_FILE
)

358  
EXT2_ET_MAGIC_EXT2_FILE
;

359 *
ªt_size
 = 
	`EXT2_I_SIZE
(
fûe
->
öode
);

361 
	}
}

366 
ext2_off_t
 
	$ext2fs_fûe_gë_size
(
ext2_fûe_t
 
fûe
)

368 
__u64
 
size
;

370 i‡(
	`ext2fs_fûe_gë_lsize
(
fûe
, &
size
))

372 i‡((
size
 >> 32) != 0)

374  
size
;

375 
	}
}

377 
	såunˇã_°
 {

378 
__u32
 
	mfûeblkcou¡
;

379 
__u32
 
	m√wblksize
;

380 
__u8
 
	moköd
;

381 
__u8
 
	mokdöd
;

382 
__u8
 
	moktöd
;

385 
	$åunˇã_blocks
 (
ext2_fûsys
 
fs
, 
blk_t
 *
blockƒ
, 
block˙t
, *
¥iv©e
)

387 
åunˇã_°
 *
å_d©a
=
¥iv©e
;

388 
blk_t
 
block
;

389 
kìp
;

391 
block˙t
) {

392 
BLOCK_COUNT_IND
:

393 
kìp
 = (
å_d©a
->
oköd
 > 0);

394 
å_d©a
->
oköd
=0;

396 
BLOCK_COUNT_DIND
:

397 
kìp
 = (
å_d©a
->
okdöd
 > 0);

398 
å_d©a
->
okdöd
=0;

400 
BLOCK_COUNT_TIND
:

401 
kìp
 = (
å_d©a
->
oktöd
 > 0);

404 
kìp
 = (
block˙t
 < 
å_d©a
->
fûeblkcou¡
);

405 i‡(
kìp
) {

406 i‡(
block˙t
 >
EXT2_NDIR_BLOCKS
) {

407 
limô
 = 
fs
->
blocksize
 >> 2;

408 
å_d©a
->
oköd
=1;

409 i‡(
block˙t
 >
EXT2_NDIR_BLOCKS
 + 
limô
) {

410 
å_d©a
->
okdöd
=1;

411 i‡(
block˙t
 >
EXT2_NDIR_BLOCKS
 + 
limô
 * (limit + 1))

412 
å_d©a
->
oktöd
=1;

418 i‡(
kìp
)

419 
å_d©a
->
√wblksize
++;

421 
block
 = *
blockƒ
;

422 
	`ext2fs_block_Æloc_°©s
(
fs
, 
block
, -1);

423 *
blockƒ
 = 0;

424  
BLOCK_CHANGED
;

428 
	}
}

434 
îrcode_t
 
	$ext2fs_fûe_£t_lsize
(
ext2_fûe_t
 
fûe
, 
__u64
 
size
)

436 
ªtvÆ
;

437 
	`EXT2_CHECK_MAGIC
(
fûe
, 
EXT2_ET_MAGIC_EXT2_FILE
);

439 i‡(
size
 >
fûe
->
öode
->
i_size
) {

440 
fûe
->
öode
->
i_size
 = 
size
 & 0xffffffff;

441 
fûe
->
öode
->
i_size_high
 = (
size
 >> 32) & 0xffffffff;

442 i‡(
fûe
->
öo
) {

443 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fûe
->
fs
, fûe->
öo
, fûe->
öode
);

444 i‡(
ªtvÆ
)

445  
ªtvÆ
;

448 
blocksize
=
fûe
->
fs
->blocksize;

449 
åunˇã_°
 
å_d©a
={

450 .
fûeblkcou¡
 = (
size
 + (
blocksize
 - 1)) / blocksize,

451 .
√wblksize
 = 0,

452 .
oköd
 = 0,

453 .
okdöd
 = 0,

454 .
oktöd
 = 0};

455 
s¸©chbuf
[3 * 
blocksize
];

457 
	`ext2fs_fûe_Êush
(
fûe
);

458 
fûe
->
öode
->
i_size
 = 
size
 & 0xffffffff;

459 
fûe
->
öode
->
i_size_high
 = (
size
 >> 32) & 0xffffffff;

460 i‡(
fûe
->
öo
) {

461 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fûe
->
fs
, fûe->
öo
, fûe->
öode
);

462 i‡(
ªtvÆ
)

463  
ªtvÆ
;

465 
	`ext2fs_block_ôî©e
(
fûe
->
fs
, fûe->
öo
, 
BLOCK_FLAG_DEPTH_TRAVERSE
, 
s¸©chbuf
, 
åunˇã_blocks
, &
å_d©a
);

467 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fûe
->
fs
, fûe->
öo
, fûe->
öode
);

468 i‡(
ªtvÆ
)

469  
ªtvÆ
;

470 
fûe
->
öode
->
i_blocks

å_d©a
.
√wblksize
 * (
blocksize
 / 512);

471 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fûe
->
fs
, fûe->
öo
, fûe->
öode
);

472 i‡(
ªtvÆ
)

473  
ªtvÆ
;

478 
	}
}

480 
îrcode_t
 
	$ext2fs_fûe_£t_size
(
ext2_fûe_t
 
fûe
, 
ext2_off_t
 
size
)

482 
ªtvÆ
;

483 
	`EXT2_CHECK_MAGIC
(
fûe
, 
EXT2_ET_MAGIC_EXT2_FILE
);

485 i‡(
size
 >
fûe
->
öode
->
i_size
) {

486 
fûe
->
öode
->
i_size
 = 
size
;

487 
fûe
->
öode
->
i_size_high
 = 0;

488 i‡(
fûe
->
öo
) {

489 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fûe
->
fs
, fûe->
öo
, fûe->
öode
);

490 i‡(
ªtvÆ
)

491  
ªtvÆ
;

494 
blocksize
=
fûe
->
fs
->blocksize;

495 
åunˇã_°
 
å_d©a
={

496 .
fûeblkcou¡
 = (
size
 + (
blocksize
 - 1)) / blocksize,

497 .
√wblksize
 = 0,

498 .
oköd
 = 0,

499 .
okdöd
 = 0,

500 .
oktöd
 = 0};

501 
s¸©chbuf
[3 * 
blocksize
];

503 
	`ext2fs_fûe_Êush
(
fûe
);

504 
fûe
->
öode
->
i_size
 = 
size
;

505 
fûe
->
öode
->
i_size_high
 = 0;

506 i‡(
fûe
->
öo
) {

507 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fûe
->
fs
, fûe->
öo
, fûe->
öode
);

508 i‡(
ªtvÆ
)

509  
ªtvÆ
;

511 
	`ext2fs_block_ôî©e
(
fûe
->
fs
, fûe->
öo
, 
BLOCK_FLAG_DEPTH_TRAVERSE
, 
s¸©chbuf
, 
åunˇã_blocks
, &
å_d©a
);

513 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fûe
->
fs
, fûe->
öo
, fûe->
öode
);

514 i‡(
ªtvÆ
)

515  
ªtvÆ
;

516 
fûe
->
öode
->
i_blocks

å_d©a
.
√wblksize
 * (
blocksize
 / 512);

517 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fûe
->
fs
, fûe->
öo
, fûe->
öode
);

518 i‡(
ªtvÆ
)

519  
ªtvÆ
;

524 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/finddev.c

13 
	~<c⁄fig.h
>

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 #i‡
HAVE_UNISTD_H


18 
	~<uni°d.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 #i‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

25 #i‡
HAVE_SYS_STAT_H


26 
	~<sys/°©.h
>

28 
	~<dúít.h
>

29 #i‡
HAVE_ERRNO_H


30 
	~<î∫o.h
>

32 #i‡
HAVE_SYS_MKDEV_H


33 
	~<sys/mkdev.h
>

36 
	~"ext2_fs.h
"

37 
	~"ext2fs.h
"

39 
	sdú_li°
 {

40 *
	m«me
;

41 
dú_li°
 *
	m√xt
;

47 
	$add_to_dúli°
(c⁄° *
«me
, 
dú_li°
 **
li°
)

49 
dú_li°
 *
dp
;

51 
dp
 = 
	`mÆloc
((
dú_li°
));

52 i‡(!
dp
)

54 
dp
->
«me
 = 
	`mÆloc
(
	`°æí
(name)+1);

55 i‡(!
dp
->
«me
) {

56 
	`‰ì
(
dp
);

59 
	`°r˝y
(
dp
->
«me
,Çame);

60 
dp
->
√xt
 = *
li°
;

61 *
li°
 = 
dp
;

62 
	}
}

67 
	$‰ì_dúli°
(
dú_li°
 **
li°
)

69 
dú_li°
 *
dp
, *
√xt
;

71 
dp
 = *
li°
; dp; d∞
√xt
) {

72 
√xt
 = 
dp
->next;

73 
	`‰ì
(
dp
->
«me
);

74 
	`‰ì
(
dp
);

76 *
li°
 = 0;

77 
	}
}

79 
	$sˇn_dú
(*
dú«me
, 
dev_t
 
devi˚
, 
dú_li°
 **
li°
,

80 **
ªt_∑th
)

82 
DIR
 *
dú
;

83 
dúít
 *
dp
;

84 
∑th
[1024], *
˝
;

85 
dúÀn
;

86 
°©
 
°
;

88 
dúÀn
 = 
	`°æí
(
dú«me
);

89 i‡((
dú
 = 
	`›ídú
(
dú«me
)Ë=
NULL
)

90  
î∫o
;

91 
dp
 = 
	`ªaddú
(
dú
);

92 
dp
) {

93 i‡(
dúÀn
 + 
	`°æí
(
dp
->
d_«me
Ë+ 2 >(
∑th
))

94 
skù_to_√xt
;

95 i‡(
dp
->
d_«me
[0] == '.' &&

96 ((
dp
->
d_«me
[1] == 0) ||

97 ((
dp
->
d_«me
[1] == '.') && (dp->d_name[2] == 0))))

98 
skù_to_√xt
;

99 
	`•rötf
(
∑th
, "%s/%s", 
dú«me
, 
dp
->
d_«me
);

100 i‡(
	`°©
(
∑th
, &
°
) < 0)

101 
skù_to_√xt
;

102 i‡(
	`S_ISDIR
(
°
.
°_mode
))

103 
	`add_to_dúli°
(
∑th
, 
li°
);

104 i‡(
	`S_ISBLK
(
°
.
°_mode
Ë&& st.
°_rdev
 =
devi˚
) {

105 
˝
 = 
	`mÆloc
(
	`°æí
(
∑th
)+1);

106 i‡(!
˝
) {

107 
	`˛o£dú
(
dú
);

108  
ENOMEM
;

110 
	`°r˝y
(
˝
, 
∑th
);

111 *
ªt_∑th
 = 
˝
;

112 
suc˚ss
;

114 
skù_to_√xt
:

115 
dp
 = 
	`ªaddú
(
dú
);

117 
suc˚ss
:

118 
	`˛o£dú
(
dú
);

120 
	}
}

127 *
	$ext2fs_föd_block_devi˚
(
dev_t
 
devi˚
)

129 
dú_li°
 *
li°
 = 0, *
√w_li°
 = 0;

130 
dú_li°
 *
cuºít
;

131 *
ªt_∑th
 = 0;

136 
	`add_to_dúli°
("/devi˚s", &
li°
);

137 
	`add_to_dúli°
("/devfs", &
li°
);

138 
	`add_to_dúli°
("/dev", &
li°
);

140 
li°
) {

141 
cuºít
 = 
li°
;

142 
li°
 =Üi°->
√xt
;

143 #ifde‡
DEBUG


144 
	`¥ötf
("Sˇ¬ög dúe˘‹y %s\n", 
cuºít
->
«me
);

146 
	`sˇn_dú
(
cuºít
->
«me
, 
devi˚
, &
√w_li°
, &
ªt_∑th
);

147 
	`‰ì
(
cuºít
->
«me
);

148 
	`‰ì
(
cuºít
);

149 i‡(
ªt_∑th
)

155 i‡(
li°
 == 0) {

156 
li°
 = 
√w_li°
;

157 
√w_li°
 = 0;

160 
	`‰ì_dúli°
(&
li°
);

161 
	`‰ì_dúli°
(&
√w_li°
);

162  
ªt_∑th
;

163 
	}
}

166 #ifde‡
DEBUG


167 
	$maö
(
¨gc
, ** 
¨gv
)

169 *
dev«me
, *
tmp
;

170 
maj‹
, 
mö‹
;

171 
dev_t
 
devi˚
;

172 c⁄° *
îrmsg
 = "Couldn'tÖarse %s: %s\n";

174 i‡((
¨gc
 != 2) && (argc != 3)) {

175 
	`Ârötf
(
°dîr
, "Ußge: %†devi˚_numbî\n", 
¨gv
[0]);

176 
	`Ârötf
(
°dîr
, "\t: %†maj‹ mö‹\n", 
¨gv
[0]);

177 
	`exô
(1);

179 i‡(
¨gc
 == 2) {

180 
devi˚
 = 
	`°πoul
(
¨gv
[1], &
tmp
, 0);

181 i‡(*
tmp
) {

182 
	`Ârötf
(
°dîr
, 
îrmsg
, "devi˚Çumbî", 
¨gv
[1]);

183 
	`exô
(1);

186 
maj‹
 = 
	`°πoul
(
¨gv
[1], &
tmp
, 0);

187 i‡(*
tmp
) {

188 
	`Ârötf
(
°dîr
, 
îrmsg
, "maj‹Çumbî", 
¨gv
[1]);

189 
	`exô
(1);

191 
mö‹
 = 
	`°πoul
(
¨gv
[2], &
tmp
, 0);

192 i‡(*
tmp
) {

193 
	`Ârötf
(
°dîr
, 
îrmsg
, "mö‹Çumbî", 
¨gv
[2]);

194 
	`exô
(1);

196 
devi˚
 = 
	`makedev
(
maj‹
, 
mö‹
);

197 
	`¥ötf
("Lookög f‹ devi˚ 0x%04x (%d:%d)\n", 
devi˚
,

198 
maj‹
, 
mö‹
);

200 
dev«me
 = 
	`ext2fs_föd_block_devi˚
(
devi˚
);

201 i‡(
dev«me
) {

202 
	`¥ötf
("Found devi˚! %s\n", 
dev«me
);

203 
	`‰ì
(
dev«me
);

205 
	`¥ötf
("Couldn't find device.\n");

208 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/freefs.c

12 
	~<°dio.h
>

13 #i‡
HAVE_UNISTD_H


14 
	~<uni°d.h
>

17 
	~"ext2_fs.h
"

18 
	~"ext2fsP.h
"

20 
ext2fs_‰ì_öode_ˇche
(
ext2_öode_ˇche
 *
iˇche
);

22 
	$ext2fs_‰ì
(
ext2_fûsys
 
fs
)

24 i‡(!
fs
 || (fs->
magic
 !
EXT2_ET_MAGIC_EXT2FS_FILSYS
))

26 i‡(
fs
->
image_io
 !fs->
io
) {

27 i‡(
fs
->
image_io
)

28 
	`io_ch™√l_˛o£
(
fs
->
image_io
);

30 i‡(
fs
->
io
) {

31 
	`io_ch™√l_˛o£
(
fs
->
io
);

33 i‡(
fs
->
devi˚_«me
)

34 
	`ext2fs_‰ì_mem
(&
fs
->
devi˚_«me
);

35 i‡(
fs
->
su≥r
)

36 
	`ext2fs_‰ì_mem
(&
fs
->
su≥r
);

37 i‡(
fs
->
‹ig_su≥r
)

38 
	`ext2fs_‰ì_mem
(&
fs
->
‹ig_su≥r
);

39 i‡(
fs
->
group_desc
)

40 
	`ext2fs_‰ì_mem
(&
fs
->
group_desc
);

41 i‡(
fs
->
block_m≠
)

42 
	`ext2fs_‰ì_block_bôm≠
(
fs
->
block_m≠
);

43 i‡(
fs
->
öode_m≠
)

44 
	`ext2fs_‰ì_öode_bôm≠
(
fs
->
öode_m≠
);

46 i‡(
fs
->
badblocks
)

47 
	`ext2fs_badblocks_li°_‰ì
(
fs
->
badblocks
);

48 
fs
->
badblocks
 = 0;

50 i‡(
fs
->
dbli°
)

51 
	`ext2fs_‰ì_dbli°
(
fs
->
dbli°
);

53 i‡(
fs
->
iˇche
)

54 
	`ext2fs_‰ì_öode_ˇche
(
fs
->
iˇche
);

56 
fs
->
magic
 = 0;

58 
	`ext2fs_‰ì_mem
(&
fs
);

59 
	}
}

64 
	$ext2fs_‰ì_öode_ˇche
(
ext2_öode_ˇche
 *
iˇche
)

66 i‡(--
iˇche
->
ªfcou¡
)

68 i‡(
iˇche
->
buf„r
)

69 
	`ext2fs_‰ì_mem
(&
iˇche
->
buf„r
);

70 i‡(
iˇche
->
ˇche
)

71 
	`ext2fs_‰ì_mem
(&
iˇche
->
ˇche
);

72 
iˇche
->
buf„r_blk
 = 0;

73 
	`ext2fs_‰ì_mem
(&
iˇche
);

74 
	}
}

79 
	$ext2fs_u32_li°_‰ì
(
ext2_u32_li°
 
bb
)

81 i‡(
bb
->
magic
 !
EXT2_ET_MAGIC_BADBLOCKS_LIST
)

84 i‡(
bb
->
li°
)

85 
	`ext2fs_‰ì_mem
(&
bb
->
li°
);

86 
bb
->
li°
 = 0;

87 
	`ext2fs_‰ì_mem
(&
bb
);

88 
	}
}

90 
	$ext2fs_badblocks_li°_‰ì
(
ext2_badblocks_li°
 
bb
)

92 
	`ext2fs_u32_li°_‰ì
((
ext2_u32_li°
Ë
bb
);

93 
	}
}

99 
	$ext2fs_‰ì_dbli°
(
ext2_dbli°
 
dbli°
)

101 i‡(!
dbli°
 || (dbli°->
magic
 !
EXT2_ET_MAGIC_DBLIST
))

104 i‡(
dbli°
->
li°
)

105 
	`ext2fs_‰ì_mem
(&
dbli°
->
li°
);

106 
dbli°
->
li°
 = 0;

107 i‡(
dbli°
->
fs
 && dblist->fs->dblist == dblist)

108 
dbli°
->
fs
->dblist = 0;

109 
dbli°
->
magic
 = 0;

110 
	`ext2fs_‰ì_mem
(&
dbli°
);

111 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/gen_bitmap.c

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 #i‡
HAVE_UNISTD_H


16 
	~<uni°d.h
>

18 
	~<f˙é.h
>

19 
	~<time.h
>

20 #i‡
HAVE_SYS_STAT_H


21 
	~<sys/°©.h
>

23 #i‡
HAVE_SYS_TYPES_H


24 
	~<sys/ty≥s.h
>

27 
	~"ext2_fs.h
"

28 
	~"ext2fs.h
"

30 
	sext2fs_°ru˘_gíîic_bôm≠
 {

31 
îrcode_t
 
	mmagic
;

32 
ext2_fûsys
 
	mfs
;

33 
__u32
 
	m°¨t
, 
	míd
;

34 
__u32
 
	mªÆ_íd
;

35 * 
	mdes¸ùti⁄
;

36 * 
	mbôm≠
;

37 
îrcode_t
 
	mba£_îr‹_code
;

38 
__u32
 
	mª£rved
[7];

45 
	$ext2fs_w¨n_bôm≠2
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

46 
code
, 
¨g
)

48 #i‚de‡
OMIT_COM_ERR


49 i‡(
bôm≠
->
des¸ùti⁄
)

50 
	`com_îr
(0, 
bôm≠
->
ba£_îr‹_code
+
code
,

51 "#%lu f‹ %s", 
¨g
, 
bôm≠
->
des¸ùti⁄
);

53 
	`com_îr
(0, 
bôm≠
->
ba£_îr‹_code
 + 
code
, "#%lu", 
¨g
);

55 
	}
}

57 
îrcode_t
 
	$check_magic
(
ext2fs_gíîic_bôm≠
 
bôm≠
)

59 i‡(!
bôm≠
 || !((bôm≠->
magic
 =
EXT2_ET_MAGIC_GENERIC_BITMAP
) ||

60 (
bôm≠
->
magic
 =
EXT2_ET_MAGIC_INODE_BITMAP
) ||

61 (
bôm≠
->
magic
 =
EXT2_ET_MAGIC_BLOCK_BITMAP
)))

62  
EXT2_ET_MAGIC_GENERIC_BITMAP
;

64 
	}
}

66 
îrcode_t
 
	$ext2fs_make_gíîic_bôm≠
(
îrcode_t
 
magic
, 
ext2_fûsys
 
fs
,

67 
__u32
 
°¨t
, __u32 
íd
, __u32 
ªÆ_íd
,

68 c⁄° *
des¸
, *
öô_m≠
,

69 
ext2fs_gíîic_bôm≠
 *
ªt
)

71 
ext2fs_gíîic_bôm≠
 
bôm≠
;

72 
îrcode_t
 
ªtvÆ
;

73 
size_t
 
size
;

75 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ext2fs_°ru˘_gíîic_bôm≠
),

76 &
bôm≠
);

77 i‡(
ªtvÆ
)

78  
ªtvÆ
;

80 
bôm≠
->
magic
 = magic;

81 
bôm≠
->
fs
 = fs;

82 
bôm≠
->
°¨t
 = start;

83 
bôm≠
->
íd
 =Énd;

84 
bôm≠
->
ªÆ_íd
 =Ñeal_end;

85 
magic
) {

86 
EXT2_ET_MAGIC_INODE_BITMAP
:

87 
bôm≠
->
ba£_îr‹_code
 = 
EXT2_ET_BAD_INODE_MARK
;

89 
EXT2_ET_MAGIC_BLOCK_BITMAP
:

90 
bôm≠
->
ba£_îr‹_code
 = 
EXT2_ET_BAD_BLOCK_MARK
;

93 
bôm≠
->
ba£_îr‹_code
 = 
EXT2_ET_BAD_GENERIC_MARK
;

95 i‡(
des¸
) {

96 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
	`°æí
(
des¸
)+1, &
bôm≠
->
des¸ùti⁄
);

97 i‡(
ªtvÆ
) {

98 
	`ext2fs_‰ì_mem
(&
bôm≠
);

99  
ªtvÆ
;

101 
	`°r˝y
(
bôm≠
->
des¸ùti⁄
, 
des¸
);

103 
bôm≠
->
des¸ùti⁄
 = 0;

105 
size
 = (
size_t
Ë(((
bôm≠
->
ªÆ_íd
 - bôm≠->
°¨t
) / 8) + 1);

106 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
size
, &
bôm≠
->bitmap);

107 i‡(
ªtvÆ
) {

108 
	`ext2fs_‰ì_mem
(&
bôm≠
->
des¸ùti⁄
);

109 
	`ext2fs_‰ì_mem
(&
bôm≠
);

110  
ªtvÆ
;

113 i‡(
öô_m≠
)

114 
	`mem˝y
(
bôm≠
->bôm≠, 
öô_m≠
, 
size
);

116 
	`mem£t
(
bôm≠
->bôm≠, 0, 
size
);

117 *
ªt
 = 
bôm≠
;

119 
	}
}

121 
îrcode_t
 
	$ext2fs_Æloˇã_gíîic_bôm≠
(
__u32
 
°¨t
,

122 
__u32
 
íd
,

123 
__u32
 
ªÆ_íd
,

124 c⁄° *
des¸
,

125 
ext2fs_gíîic_bôm≠
 *
ªt
)

127  
	`ext2fs_make_gíîic_bôm≠
(
EXT2_ET_MAGIC_GENERIC_BITMAP
, 0,

128 
°¨t
, 
íd
, 
ªÆ_íd
, 
des¸
, 0, 
ªt
);

129 
	}
}

131 
îrcode_t
 
	$ext2fs_c›y_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
§c
,

132 
ext2fs_gíîic_bôm≠
 *
de°
)

134  (
	`ext2fs_make_gíîic_bôm≠
(
§c
->
magic
, src->
fs
,

135 
§c
->
°¨t
, src->
íd
,

136 
§c
->
ªÆ_íd
,

137 
§c
->
des¸ùti⁄
, src->
bôm≠
,

138 
de°
));

139 
	}
}

141 
	$ext2fs_‰ì_gíîic_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
)

143 i‡(
	`check_magic
(
bôm≠
))

146 
bôm≠
->
magic
 = 0;

147 i‡(
bôm≠
->
des¸ùti⁄
) {

148 
	`ext2fs_‰ì_mem
(&
bôm≠
->
des¸ùti⁄
);

149 
bôm≠
->
des¸ùti⁄
 = 0;

151 i‡(
bôm≠
->bitmap) {

152 
	`ext2fs_‰ì_mem
(&
bôm≠
->bitmap);

153 
bôm≠
->bitmap = 0;

155 
	`ext2fs_‰ì_mem
(&
bôm≠
);

156 
	}
}

158 
	$ext2fs_ã°_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

159 
blk_t
 
bôno
)

161 i‡((
bôno
 < 
bôm≠
->
°¨t
Ë|| (bônÿ> bôm≠->
íd
)) {

162 
	`ext2fs_w¨n_bôm≠2
(
bôm≠
, 
EXT2FS_TEST_ERROR
, 
bôno
);

165  
	`ext2fs_ã°_bô
(
bôno
 - 
bôm≠
->
°¨t
, bitmap->bitmap);

166 
	}
}

168 
	$ext2fs_m¨k_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

169 
__u32
 
bôno
)

171 i‡((
bôno
 < 
bôm≠
->
°¨t
Ë|| (bônÿ> bôm≠->
íd
)) {

172 
	`ext2fs_w¨n_bôm≠2
(
bôm≠
, 
EXT2FS_MARK_ERROR
, 
bôno
);

175  
	`ext2fs_£t_bô
(
bôno
 - 
bôm≠
->
°¨t
, bitmap->bitmap);

176 
	}
}

178 
	$ext2fs_unm¨k_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

179 
blk_t
 
bôno
)

181 i‡((
bôno
 < 
bôm≠
->
°¨t
Ë|| (bônÿ> bôm≠->
íd
)) {

182 
	`ext2fs_w¨n_bôm≠2
(
bôm≠
, 
EXT2FS_UNMARK_ERROR
, 
bôno
);

185  
	`ext2fs_˛ór_bô
(
bôno
 - 
bôm≠
->
°¨t
, bitmap->bitmap);

186 
	}
}

188 
__u32
 
	$ext2fs_gë_gíîic_bôm≠_°¨t
(
ext2fs_gíîic_bôm≠
 
bôm≠
)

190  
bôm≠
->
°¨t
;

191 
	}
}

193 
__u32
 
	$ext2fs_gë_gíîic_bôm≠_íd
(
ext2fs_gíîic_bôm≠
 
bôm≠
)

195  
bôm≠
->
íd
;

196 
	}
}

198 
	$ext2fs_˛ór_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
)

200 i‡(
	`check_magic
(
bôm≠
))

203 
	`mem£t
(
bôm≠
->bitmap, 0,

204 (
size_t
Ë(((
bôm≠
->
ªÆ_íd
 - bôm≠->
°¨t
) / 8) + 1));

205 
	}
}

207 
îrcode_t
 
	$ext2fs_fudge_gíîic_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
,

208 
îrcode_t
 
magic
,Éºcode_à
√q
,

209 
ext2_öo_t
 
íd
,Éxt2_öo_à*
€nd
)

211 
	`EXT2_CHECK_MAGIC
(
bôm≠
, 
magic
);

213 i‡(
íd
 > 
bôm≠
->
ªÆ_íd
)

214  
√q
;

215 i‡(
€nd
)

216 *
€nd
 = 
bôm≠
->
íd
;

217 
bôm≠
->
íd
 =Énd;

219 
	}
}

221 
îrcode_t
 
	$ext2fs_ªsize_gíîic_bôm≠
(
îrcode_t
 
magic
,

222 
__u32
 
√w_íd
, __u32 
√w_ªÆ_íd
,

223 
ext2fs_gíîic_bôm≠
 
bm≠
)

225 
îrcode_t
 
ªtvÆ
;

226 
size_t
 
size
, 
√w_size
;

227 
__u32
 
bôno
;

229 i‡(!
bm≠
 || (bm≠->
magic
 != magic))

230  
magic
;

236 i‡(
√w_íd
 > 
bm≠
->
íd
) {

237 
bôno
 = 
bm≠
->
ªÆ_íd
;

238 i‡(
bôno
 > 
√w_íd
)

239 
bôno
 = 
√w_íd
;

240 ; 
bôno
 > 
bm≠
->
íd
; bitno--)

241 
	`ext2fs_˛ór_bô
(
bôno
 - 
bm≠
->
°¨t
, bm≠->
bôm≠
);

243 i‡(
√w_ªÆ_íd
 =
bm≠
->
ªÆ_íd
) {

244 
bm≠
->
íd
 = 
√w_íd
;

248 
size
 = ((
bm≠
->
ªÆ_íd
 - bm≠->
°¨t
) / 8) + 1;

249 
√w_size
 = ((
√w_ªÆ_íd
 - 
bm≠
->
°¨t
) / 8) + 1;

251 i‡(
size
 !
√w_size
) {

252 
ªtvÆ
 = 
	`ext2fs_ªsize_mem
(
size
, 
√w_size
, &
bm≠
->
bôm≠
);

253 i‡(
ªtvÆ
)

254  
ªtvÆ
;

256 i‡(
√w_size
 > 
size
)

257 
	`mem£t
(
bm≠
->
bôm≠
 + 
size
, 0, 
√w_size
 - size);

259 
bm≠
->
íd
 = 
√w_íd
;

260 
bm≠
->
ªÆ_íd
 = 
√w_ªÆ_íd
;

262 
	}
}

264 
îrcode_t
 
	$ext2fs_com∑ª_gíîic_bôm≠
(
îrcode_t
 
magic
,Éºcode_à
√q
,

265 
ext2fs_gíîic_bôm≠
 
bm1
,

266 
ext2fs_gíîic_bôm≠
 
bm2
)

268 
blk_t
 
i
;

270 i‡(!
bm1
 || bm1->
magic
 != magic)

271  
magic
;

272 i‡(!
bm2
 || bm2->
magic
 != magic)

273  
magic
;

275 i‡((
bm1
->
°¨t
 !
bm2
->start) ||

276 (
bm1
->
íd
 !
bm2
->end) ||

277 (
	`memcmp
(
bm1
->
bôm≠
, 
bm2
->bitmap,

278 (
size_t
Ë(
bm1
->
íd
 - bm1->
°¨t
)/8)))

279  
√q
;

281 
i
 = 
bm1
->
íd
 - ((bm1->íd - bm1->
°¨t
) % 8); i <= bm1->end; i++)

282 i‡(
	`ext2fs_Á°_ã°_block_bôm≠
(
bm1
, 
i
) !=

283 
	`ext2fs_Á°_ã°_block_bôm≠
(
bm2
, 
i
))

284  
√q
;

287 
	}
}

289 
	$ext2fs_£t_gíîic_bôm≠_∑ddög
(
ext2fs_gíîic_bôm≠
 
m≠
)

291 
__u32
 
i
, 
j
;

294 
i
=
m≠
->
íd
+1, 
j
 = i - m≠->
°¨t
;

295 
i
 <
m≠
->
ªÆ_íd
 && i > m≠->
íd
;

296 
i
++, 
j
++)

297 
	`ext2fs_£t_bô
(
j
, 
m≠
->
bôm≠
);

298 
	}
}

300 
îrcode_t
 
	$ext2fs_gë_gíîic_bôm≠_ønge
(
ext2fs_gíîic_bôm≠
 
bm≠
,

301 
îrcode_t
 
magic
,

302 
__u32
 
°¨t
, __u32 
num
,

303 *
out
)

305 i‡(!
bm≠
 || (bm≠->
magic
 != magic))

306  
magic
;

308 i‡((
°¨t
 < 
bm≠
->°¨tË|| (°¨t+
num
-1 > bm≠->
ªÆ_íd
))

309  
EXT2_ET_INVALID_ARGUMENT
;

311 
	`mem˝y
(
out
, 
bm≠
->
bôm≠
 + (
°¨t
 >> 3), (
num
+7) >> 3);

313 
	}
}

315 
îrcode_t
 
	$ext2fs_£t_gíîic_bôm≠_ønge
(
ext2fs_gíîic_bôm≠
 
bm≠
,

316 
îrcode_t
 
magic
,

317 
__u32
 
°¨t
, __u32 
num
,

318 *
ö
)

320 i‡(!
bm≠
 || (bm≠->
magic
 != magic))

321  
magic
;

323 i‡((
°¨t
 < 
bm≠
->°¨tË|| (°¨t+
num
-1 > bm≠->
ªÆ_íd
))

324  
EXT2_ET_INVALID_ARGUMENT
;

326 
	`mem˝y
(
bm≠
->
bôm≠
 + (
°¨t
 >> 3), 
ö
, (
num
+7) >> 3);

328 
	}
}

334 
	$mem_is_zîo
(c⁄° *
mem
, 
size_t
 
Àn
)

336 c⁄° 
zîo_buf
[256];

338 
Àn
 >(
zîo_buf
)) {

339 i‡(
	`memcmp
(
mem
, 
zîo_buf
, (zero_buf)))

341 
Àn
 -(
zîo_buf
);

342 
mem
 +(
zîo_buf
);

345 i‡(
Àn
)

346  !
	`memcmp
(
mem
, 
zîo_buf
, 
Àn
);

348 
	}
}

353 
	$ext2fs_ã°_˛ór_gíîic_bôm≠_ønge
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

354 
°¨t
,

355 
Àn
)

357 
size_t
 
°¨t_byã
, 
Àn_byã
 = 
Àn
 >> 3;

358 
°¨t_bô
, 
Àn_bô
 = 
Àn
 % 8;

359 
fú°_bô
 = 0;

360 
œ°_bô
 = 0;

361 
m¨k_cou¡
 = 0;

362 
m¨k_bô
 = 0;

363 
i
;

364 c⁄° *
ADDR
 = 
bôm≠
->bitmap;

366 
°¨t
 -
bôm≠
->start;

367 
°¨t_byã
 = 
°¨t
 >> 3;

368 
°¨t_bô
 = 
°¨t
 % 8;

370 i‡(
°¨t_bô
 != 0) {

375 
m¨k_cou¡
 = 8 - 
°¨t_bô
;

376 i‡(
Àn
 < 8 - 
°¨t_bô
) {

377 
m¨k_cou¡
 = ()
Àn
;

378 
m¨k_bô
 = 
Àn
 + 
°¨t_bô
 - 1;

380 
m¨k_bô
 = 7;

382 
i
 = 
m¨k_cou¡
; i > 0; i--, 
m¨k_bô
--)

383 
fú°_bô
 |1 << 
m¨k_bô
;

389 i‡(
fú°_bô
 & 
ADDR
[
°¨t_byã
])

391 i‡(
Àn
 <8 - 
°¨t_bô
)

394 
°¨t_byã
++;

395 
Àn_bô
 = (
Àn
 - 
m¨k_cou¡
) % 8;

396 
Àn_byã
 = (
Àn
 - 
m¨k_cou¡
) >> 3;

403 i‡(
Àn_bô
 != 0) {

408 
m¨k_bô
 = 
Àn_bô
 - 1; mark_bit >= 0; mark_bit--)

409 
œ°_bô
 |1 << 
m¨k_bô
;

415 i‡(
œ°_bô
 & 
ADDR
[
°¨t_byã
 + 
Àn_byã
])

417 i‡(
Àn_byã
 == 0)

422  
	`mem_is_zîo
(
ADDR
 + 
°¨t_byã
, 
Àn_byã
);

423 
	}
}

425 
	$ext2fs_ã°_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

426 
blk_t
 
block
, 
num
)

428 
	`EXT2_CHECK_MAGIC
(
bôm≠
, 
EXT2_ET_MAGIC_BLOCK_BITMAP
);

429 i‡((
block
 < 
bôm≠
->
°¨t
Ë|| (block+
num
-1 > bôm≠->
ªÆ_íd
)) {

430 
	`ext2fs_w¨n_bôm≠
(
EXT2_ET_BAD_BLOCK_TEST
,

431 
block
, 
bôm≠
->
des¸ùti⁄
);

434  
	`ext2fs_ã°_˛ór_gíîic_bôm≠_ønge
((
ext2fs_gíîic_bôm≠
)

435 
bôm≠
, 
block
, 
num
);

436 
	}
}

438 
	$ext2fs_ã°_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bôm≠
,

439 
öo_t
 
öode
, 
num
)

441 
	`EXT2_CHECK_MAGIC
(
bôm≠
, 
EXT2_ET_MAGIC_INODE_BITMAP
);

442 i‡((
öode
 < 
bôm≠
->
°¨t
Ë|| (öode+
num
-1 > bôm≠->
ªÆ_íd
)) {

443 
	`ext2fs_w¨n_bôm≠
(
EXT2_ET_BAD_INODE_TEST
,

444 
öode
, 
bôm≠
->
des¸ùti⁄
);

447  
	`ext2fs_ã°_˛ór_gíîic_bôm≠_ønge
((
ext2fs_gíîic_bôm≠
)

448 
bôm≠
, 
öode
, 
num
);

449 
	}
}

451 
	$ext2fs_m¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

452 
blk_t
 
block
, 
num
)

454 
i
;

456 i‡((
block
 < 
bôm≠
->
°¨t
Ë|| (block+
num
-1 > bôm≠->
íd
)) {

457 
	`ext2fs_w¨n_bôm≠
(
EXT2_ET_BAD_BLOCK_MARK
, 
block
,

458 
bôm≠
->
des¸ùti⁄
);

461 
i
=0; i < 
num
; i++)

462 
	`ext2fs_Á°_£t_bô
(
block
 + 
i
 - 
bôm≠
->
°¨t
, bitmap->bitmap);

463 
	}
}

465 
	$ext2fs_unm¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

466 
blk_t
 
block
, 
num
)

468 
i
;

470 i‡((
block
 < 
bôm≠
->
°¨t
Ë|| (block+
num
-1 > bôm≠->
íd
)) {

471 
	`ext2fs_w¨n_bôm≠
(
EXT2_ET_BAD_BLOCK_UNMARK
, 
block
,

472 
bôm≠
->
des¸ùti⁄
);

475 
i
=0; i < 
num
; i++)

476 
	`ext2fs_Á°_˛ór_bô
(
block
 + 
i
 - 
bôm≠
->
°¨t
,

477 
bôm≠
->bitmap);

478 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/get_pathname.c

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 #i‡
HAVE_UNISTD_H


24 
	~<uni°d.h
>

27 
	~"ext2_fs.h
"

28 
	~"ext2fs.h
"

30 
	sgë_∑th«me_°ru˘
 {

31 
ext2_öo_t
 
	m£¨ch_öo
;

32 
ext2_öo_t
 
	m∑ª¡
;

33 *
	m«me
;

34 
îrcode_t
 
	mîrcode
;

37 #ifde‡
__TURBOC__


38 #¥agm®
¨gsu£d


40 
gë_∑th«me_¥oc
(
ext2_dú_íåy
 *
dúít
,

41 
off£t
 
EXT2FS_ATTR
((
unu£d
)),

42 
blocksize
 
EXT2FS_ATTR
((
unu£d
)),

43 *
buf
 
EXT2FS_ATTR
((
unu£d
)),

44 *
¥iv_d©a
)

46 
gë_∑th«me_°ru˘
 *
	ggp
;

47 
îrcode_t
 
	gªtvÆ
;

49 
	ggp
 = (
gë_∑th«me_°ru˘
 *Ë
¥iv_d©a
;

51 i‡(((
	gdúít
->
	g«me_Àn
 & 0xFF) == 2) &&

52 !
°∫cmp
(
dúít
->
«me
, "..", 2))

53 
	ggp
->
	g∑ª¡
 = 
dúít
->
öode
;

54 i‡(
	gdúít
->
	göode
 =
gp
->
£¨ch_öo
) {

55 
ªtvÆ
 = 
ext2fs_gë_mem
((
dúít
->
«me_Àn
 & 0xFF) + 1,

56 &
gp
->
«me
);

57 i‡(
	gªtvÆ
) {

58 
	ggp
->
	gîrcode
 = 
ªtvÆ
;

59  
	gDIRENT_ABORT
;

61 
°∫˝y
(
gp
->
«me
, 
dúít
->«me, (dúít->
«me_Àn
 & 0xFF));

62 
	ggp
->
	g«me
[
dúít
->
«me_Àn
 & 0xFF] = '\0';

63  
	gDIRENT_ABORT
;

68 
îrcode_t
 
	$ext2fs_gë_∑th«me_öt
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
,

69 
ext2_öo_t
 
öo
, 
maxdïth
,

70 *
buf
, **
«me
)

72 
gë_∑th«me_°ru˘
 
gp
;

73 *
∑ª¡_«me
, *
ªt
;

74 
îrcode_t
 
ªtvÆ
;

76 i‡(
dú
 =
öo
) {

77 
ªtvÆ
 = 
	`ext2fs_gë_mem
(2, 
«me
);

78 i‡(
ªtvÆ
)

79  
ªtvÆ
;

80 
	`°r˝y
(*
«me
, (
dú
 =
EXT2_ROOT_INO
) ? "/" : ".");

84 i‡(!
dú
 || (
maxdïth
 < 0)) {

85 
ªtvÆ
 = 
	`ext2fs_gë_mem
(4, 
«me
);

86 i‡(
ªtvÆ
)

87  
ªtvÆ
;

88 
	`°r˝y
(*
«me
, "...");

92 
gp
.
£¨ch_öo
 = 
öo
;

93 
gp
.
∑ª¡
 = 0;

94 
gp
.
«me
 = 0;

95 
gp
.
îrcode
 = 0;

97 
ªtvÆ
 = 
	`ext2fs_dú_ôî©e
(
fs
, 
dú
, 0, 
buf
, 
gë_∑th«me_¥oc
, &
gp
);

98 i‡(
ªtvÆ
)

99 
˛ónup
;

100 i‡(
gp
.
îrcode
) {

101 
ªtvÆ
 = 
gp
.
îrcode
;

102 
˛ónup
;

105 
ªtvÆ
 = 
	`ext2fs_gë_∑th«me_öt
(
fs
, 
gp
.
∑ª¡
, 
dú
, 
maxdïth
-1,

106 
buf
, &
∑ª¡_«me
);

107 i‡(
ªtvÆ
)

108 
˛ónup
;

109 i‡(!
öo
) {

110 *
«me
 = 
∑ª¡_«me
;

114 i‡(
gp
.
«me
)

115 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
	`°æí
(
∑ª¡_«me
)+°æí(
gp
.
«me
)+2,

116 &
ªt
);

118 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
	`°æí
(
∑ª¡_«me
)+5, &
ªt
);

119 i‡(
ªtvÆ
)

120 
˛ónup
;

122 
ªt
[0] = 0;

123 i‡(
∑ª¡_«me
[1])

124 
	`°rˇt
(
ªt
, 
∑ª¡_«me
);

125 
	`°rˇt
(
ªt
, "/");

126 i‡(
gp
.
«me
)

127 
	`°rˇt
(
ªt
, 
gp
.
«me
);

129 
	`°rˇt
(
ªt
, "???");

130 *
«me
 = 
ªt
;

131 
	`ext2fs_‰ì_mem
(&
∑ª¡_«me
);

132 
ªtvÆ
 = 0;

134 
˛ónup
:

135 i‡(
gp
.
«me
)

136 
	`ext2fs_‰ì_mem
(&
gp
.
«me
);

137  
ªtvÆ
;

138 
	}
}

140 
îrcode_t
 
	$ext2fs_gë_∑th«me
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
,Éxt2_öo_à
öo
,

141 **
«me
)

143 *
buf
;

144 
îrcode_t
 
ªtvÆ
;

146 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

148 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
buf
);

149 i‡(
ªtvÆ
)

150  
ªtvÆ
;

151 i‡(
dú
 =
öo
)

152 
öo
 = 0;

153 
ªtvÆ
 = 
	`ext2fs_gë_∑th«me_öt
(
fs
, 
dú
, 
öo
, 32, 
buf
, 
«me
);

154 
	`ext2fs_‰ì_mem
(&
buf
);

155  
ªtvÆ
;

157 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/getsectsize.c

13 
	#_LARGEFILE_SOURCE


	)

14 
	#_LARGEFILE64_SOURCE


	)

16 
	~<c⁄fig.h
>

18 
	~<°dio.h
>

19 #i‡
HAVE_UNISTD_H


20 
	~<uni°d.h
>

22 #i‡
HAVE_ERRNO_H


23 
	~<î∫o.h
>

25 
	~<f˙é.h
>

26 #ifde‡
HAVE_LINUX_FD_H


27 
	~<sys/io˘l.h
>

28 
	~<löux/fd.h
>

31 #i‡
deföed
(
__löux__
Ë&& deföed(
_IO
Ë&& !deföed(
BLKSSZGET
)

32 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

35 
	~"ext2_fs.h
"

36 
	~"ext2fs.h
"

41 
îrcode_t
 
	$ext2fs_gë_devi˚_£˘size
(c⁄° *
fûe
, *
£˘size
)

43 
fd
;

45 #ifde‡
HAVE_OPEN64


46 
fd
 = 
	`›í64
(
fûe
, 
O_RDONLY
);

48 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

50 i‡(
fd
 < 0)

51  
î∫o
;

53 #ifde‡
BLKSSZGET


54 i‡(
	`io˘l
(
fd
, 
BLKSSZGET
, 
£˘size
) >= 0) {

55 
	`˛o£
(
fd
);

59 *
£˘size
 = 0;

60 
	`˛o£
(
fd
);

62 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/getsize.c

15 
	#_LARGEFILE_SOURCE


	)

16 
	#_LARGEFILE64_SOURCE


	)

18 
	~<c⁄fig.h
>

20 
	~<°dio.h
>

21 #i‡
HAVE_UNISTD_H


22 
	~<uni°d.h
>

24 #i‡
HAVE_ERRNO_H


25 
	~<î∫o.h
>

27 
	~<f˙é.h
>

28 #ifde‡
HAVE_SYS_IOCTL_H


29 
	~<sys/io˘l.h
>

31 #ifde‡
HAVE_LINUX_FD_H


32 
	~<löux/fd.h
>

34 #ifde‡
HAVE_SYS_DISKLABEL_H


35 
	~<sys/diskœbñ.h
>

37 #ifde‡
HAVE_SYS_DISK_H


38 #ifde‡
HAVE_SYS_QUEUE_H


39 
	~<sys/queue.h
>

41 
	~<sys/disk.h
>

43 #ifde‡
__löux__


44 
	~<sys/ut¢ame.h
>

46 #i‡
HAVE_SYS_STAT_H


47 
	~<sys/°©.h
>

49 
	~<˘y≥.h
>

51 #i‡
deföed
(
__löux__
Ë&& deföed(
_IO
Ë&& !deföed(
BLKGETSIZE
)

52 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

55 #i‡
deföed
(
__löux__
Ë&& deföed(
_IOR
Ë&& !deföed(
BLKGETSIZE64
)

56 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

59 #ifde‡
APPLE_DARWIN


60 
	#BLKGETSIZE
 
DKIOCGETBLOCKCOUNT32


	)

63 
	~"ext2_fs.h
"

64 
	~"ext2fs.h
"

66 #i‡
deföed
(
__CYGWIN__
Ë|| deföed (
WIN32
)

67 
	~"wödows.h
"

68 
	~"wöio˘l.h
"

70 #i‡(
_WIN32_WINNT
 >= 0x0500)

71 
	#HAVE_GET_FILE_SIZE_EX
 1

	)

74 
îrcode_t
 
	$ext2fs_gë_devi˚_size
(c⁄° *
fûe
, 
blocksize
,

75 
blk_t
 *
ªtblocks
)

77 
HANDLE
 
dev
;

78 
PARTITION_INFORMATION
 
pi
;

79 
DISK_GEOMETRY
 
gi
;

80 
DWORD
 
ªtbyãs
;

81 #ifde‡
HAVE_GET_FILE_SIZE_EX


82 
LARGE_INTEGER
 
fûesize
;

84 
DWORD
 
fûesize
;

87 
dev
 = 
	`Cª©eFûe
(
fûe
, 
GENERIC_READ
,

88 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
 ,

89 
NULL
, 
OPEN_EXISTING
, 
FILE_ATTRIBUTE_NORMAL
, NULL);

91 i‡(
dev
 =
INVALID_HANDLE_VALUE
)

92  
EBADF
;

93 i‡(
	`Devi˚IoC⁄åﬁ
(
dev
, 
IOCTL_DISK_GET_PARTITION_INFO
,

94 &
pi
, (
PARTITION_INFORMATION
),

95 &
pi
, (
PARTITION_INFORMATION
),

96 &
ªtbyãs
, 
NULL
)) {

98 *
ªtblocks
 = 
pi
.
P¨tôi⁄Lígth
.
QuadP¨t
 / 
blocksize
;

100 } i‡(
	`Devi˚IoC⁄åﬁ
(
dev
, 
IOCTL_DISK_GET_DRIVE_GEOMETRY
,

101 &
gi
, (
DISK_GEOMETRY
),

102 &
gi
, (
DISK_GEOMETRY
),

103 &
ªtbyãs
, 
NULL
)) {

105 *
ªtblocks
 = 
gi
.
ByãsPîSe˘‹
 *

106 
gi
.
Se˘‹sPîTøck
 *

107 
gi
.
TøcksPîCylödî
 *

108 
gi
.
Cylödîs
.
QuadP¨t
 / 
blocksize
;

110 #ifde‡
HAVE_GET_FILE_SIZE_EX


111 } i‡(
	`GëFûeSizeEx
(
dev
, &
fûesize
)) {

112 *
ªtblocks
 = 
fûesize
.
QuadP¨t
 / 
blocksize
;

116 
fûesize
 = 
	`GëFûeSize
(
dev
, 
NULL
);

117 i‡(
INVALID_FILE_SIZE
 !
fûesize
) {

118 *
ªtblocks
 = 
fûesize
 / 
blocksize
;

123 
	`Clo£H™dÀ
(
dev
);

125 
	}
}

129 
	$vÆid_off£t
 (
fd
, 
ext2_loff_t
 
off£t
)

131 
ch
;

133 i‡(
	`ext2fs_Œ£ek
 (
fd
, 
off£t
, 0) < 0)

135 i‡(
	`ªad
 (
fd
, &
ch
, 1) < 1)

138 
	}
}

143 
îrcode_t
 
	$ext2fs_gë_devi˚_size2
(c⁄° *
fûe
, 
blocksize
,

144 
blk64_t
 *
ªtblocks
)

146 
fd
, 
rc
 = 0;

147 
vÆid_blkgësize64
 = 1;

148 #ifde‡
__löux__


149 
ut¢ame
 
ut
;

151 
size64
;

152 
size
;

153 
ext2_loff_t
 
high
, 
low
;

154 #ifde‡
FDGETPRM


155 
Ê›py_°ru˘
 
this_Ê›py
;

157 #ifde‡
HAVE_SYS_DISKLABEL_H


158 
∑π
;

159 
diskœbñ
 
œb
;

160 
∑πôi⁄
 *
µ
;

161 
ch
;

164 #ifde‡
HAVE_OPEN64


165 
fd
 = 
	`›í64
(
fûe
, 
O_RDONLY
);

167 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

169 i‡(
fd
 < 0)

170  
î∫o
;

172 #ifde‡
DKIOCGETBLOCKCOUNT


173 i‡(
	`io˘l
(
fd
, 
DKIOCGETBLOCKCOUNT
, &
size64
) >= 0) {

174 *
ªtblocks
 = 
size64
 / (
blocksize
 / 512);

175 
out
;

179 #ifde‡
BLKGETSIZE64


180 #ifde‡
__löux__


181 i‡((
	`u«me
(&
ut
) == 0) &&

182 ((
ut
.
ªÀa£
[0] == '2') && (ut.release[1] == '.') &&

183 (
ut
.
ªÀa£
[2] < '6') && (ut.release[3] == '.')))

184 
vÆid_blkgësize64
 = 0;

186 i‡(
vÆid_blkgësize64
 &&

187 
	`io˘l
(
fd
, 
BLKGETSIZE64
, &
size64
) >= 0) {

188 *
ªtblocks
 = 
size64
 / 
blocksize
;

189 
out
;

193 #ifde‡
BLKGETSIZE


194 i‡(
	`io˘l
(
fd
, 
BLKGETSIZE
, &
size
) >= 0) {

195 *
ªtblocks
 = 
size
 / (
blocksize
 / 512);

196 
out
;

200 #ifde‡
FDGETPRM


201 i‡(
	`io˘l
(
fd
, 
FDGETPRM
, &
this_Ê›py
) >= 0) {

202 *
ªtblocks
 = 
this_Ê›py
.
size
 / (
blocksize
 / 512);

203 
out
;

207 #ifde‡
HAVE_SYS_DISKLABEL_H


208 #i‡
	`deföed
(
DIOCGMEDIASIZE
)

210 
off_t
 
ms
;

211 
u_öt
 
bs
;

212 i‡(
	`io˘l
(
fd
, 
DIOCGMEDIASIZE
, &
ms
) >= 0) {

213 *
ªtblocks
 = 
ms
 / 
blocksize
;

214 
out
;

217 #ñi‡
	`deföed
(
DIOCGDINFO
)

219 
∑π
 = 
	`°æí
(
fûe
) - 1;

220 i‡(
∑π
 >= 0) {

221 
ch
 = 
fûe
[
∑π
];

222 i‡(
	`isdigô
(
ch
))

223 
∑π
 = 0;

224 i‡(
ch
 >= 'a' && ch <= 'h')

225 
∑π
 = 
ch
 - 'a';

227 
∑π
 = -1;

229 i‡(
∑π
 >0 && (
	`io˘l
(
fd
, 
DIOCGDINFO
, (*)&
œb
) >= 0)) {

230 
µ
 = &
œb
.
d_∑πôi⁄s
[
∑π
];

231 i‡(
µ
->
p_size
) {

232 *
ªtblocks
 = 
µ
->
p_size
 / (
blocksize
 / 512);

233 
out
;

240 #ifde‡
HAVE_FSTAT64


241 
°©64
 
°
;

242 i‡(
	`f°©64
(
fd
, &
°
) == 0)

244 
°©
 
°
;

245 i‡(
	`f°©
(
fd
, &
°
) == 0)

247 i‡(
	`S_ISREG
(
°
.
°_mode
)) {

248 *
ªtblocks
 = 
°
.
°_size
 / 
blocksize
;

249 
out
;

258 
low
 = 0;

259 
high
 = 1024; 
	`vÆid_off£t
 (
fd
, high); high *= 2)

260 
low
 = 
high
;

261 
low
 < 
high
 - 1)

263 c⁄° 
ext2_loff_t
 
mid
 = (
low
 + 
high
) / 2;

265 i‡(
	`vÆid_off£t
 (
fd
, 
mid
))

266 
low
 = 
mid
;

268 
high
 = 
mid
;

270 
	`vÆid_off£t
 (
fd
, 0);

271 
size64
 = 
low
 + 1;

272 *
ªtblocks
 = 
size64
 / 
blocksize
;

273 
out
:

274 
	`˛o£
(
fd
);

275  
rc
;

276 
	}
}

278 
îrcode_t
 
	$ext2fs_gë_devi˚_size
(c⁄° *
fûe
, 
blocksize
,

279 
blk_t
 *
ªtblocks
)

281 
îrcode_t
 
ªtvÆ
;

282 
blk64_t
 
blocks
;

284 
ªtvÆ
 = 
	`ext2fs_gë_devi˚_size2
(
fûe
, 
blocksize
, &
blocks
);

285 i‡(
ªtvÆ
)

286  
ªtvÆ
;

287 i‡(
blocks
 >= (1ULL << 32))

288  
EFBIG
;

289 *
ªtblocks
 = (
blk_t
Ë
blocks
;

291 
	}
}

295 #ifde‡
DEBUG


296 
	$maö
(
¨gc
, **
¨gv
)

298 
blk_t
 
blocks
;

299 
ªtvÆ
;

301 i‡(
¨gc
 < 2) {

302 
	`Ârötf
(
°dîr
, "Ußge: %†devi˚\n", 
¨gv
[0]);

303 
	`exô
(1);

306 
ªtvÆ
 = 
	`ext2fs_gë_devi˚_size
(
¨gv
[1], 1024, &
blocks
);

307 i‡(
ªtvÆ
) {

308 
	`com_îr
(
¨gv
[0], 
ªtvÆ
,

310 
	`exô
(1);

312 
	`¥ötf
("Devi˚ %†ha†%u 1k blocks.\n", 
¨gv
[1], 
blocks
);

313 
	`exô
(0);

314 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/i_block.c

12 
	~<°dio.h
>

13 #i‡
HAVE_UNISTD_H


14 
	~<uni°d.h
>

16 
	~<time.h
>

17 
	~<°rög.h
>

18 #i‡
HAVE_SYS_STAT_H


19 
	~<sys/°©.h
>

21 #i‡
HAVE_SYS_TYPES_H


22 
	~<sys/ty≥s.h
>

25 
	~"ext2_fs.h
"

26 
	~"ext2fs.h
"

28 
îrcode_t
 
	$ext2fs_iblk_add_blocks
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
,

29 
blk64_t
 
num_blocks
)

31 
b
;

33 i‡((
fs
->
su≥r
->
s_„©uª_ro_com∑t
 &

34 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
) &&

35 (
öode
->
i_Êags
 & 
EXT4_HUGE_FILE_FL
)) {

36 
b
 = 
öode
->
i_blocks
 +

37 (((Ë
öode
->
osd2
.
löux2
.
l_i_blocks_hi
) << 32);

38 
b
 +
num_blocks
;

39 
öode
->
i_blocks
 = 
b
 & 0xFFFFFFFF;

40 
öode
->
osd2
.
löux2
.
l_i_blocks_hi
 = 
b
 >> 32;

42 
öode
->
i_blocks
 +(
fs
->
blocksize
 / 512Ë* 
num_blocks
;

44 
	}
}

47 
îrcode_t
 
	$ext2fs_iblk_sub_blocks
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
,

48 
blk64_t
 
num_blocks
)

50 
b
;

52 i‡((
fs
->
su≥r
->
s_„©uª_ro_com∑t
 &

53 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
) &&

54 (
öode
->
i_Êags
 & 
EXT4_HUGE_FILE_FL
)) {

55 
b
 = 
öode
->
i_blocks
 +

56 (((Ë
öode
->
osd2
.
löux2
.
l_i_blocks_hi
) << 32);

57 
b
 -
num_blocks
;

58 
öode
->
i_blocks
 = 
b
 & 0xFFFFFFFF;

59 
öode
->
osd2
.
löux2
.
l_i_blocks_hi
 = 
b
 >> 32;

61 
öode
->
i_blocks
 -(
fs
->
blocksize
 / 512Ë* 
num_blocks
;

63 
	}
}

65 
îrcode_t
 
	$ext2fs_iblk_£t
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
, 
blk64_t
 
b
)

67 i‡((
fs
->
su≥r
->
s_„©uª_ro_com∑t
 &

68 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
) &&

69 (
öode
->
i_Êags
 & 
EXT4_HUGE_FILE_FL
)) {

70 
öode
->
i_blocks
 = 
b
 & 0xFFFFFFFF;

71 
öode
->
osd2
.
löux2
.
l_i_blocks_hi
 = 
b
 >> 32;

73 
öode
->
i_blocks
 = (
fs
->
blocksize
 / 512Ë* 
b
;

75 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/icount.c

12 #i‡
HAVE_UNISTD_H


13 
	~<uni°d.h
>

15 
	~<°rög.h
>

16 
	~<°dio.h
>

17 
	~<sys/°©.h
>

18 
	~<f˙é.h
>

19 
	~<î∫o.h
>

21 
	~"ext2_fs.h
"

22 
	~"ext2fs.h
"

23 
	~"tdb.h
"

44 
	sext2_icou¡_ñ
 {

45 
ext2_öo_t
 
	möo
;

46 
__u32
 
	mcou¡
;

49 
	sext2_icou¡
 {

50 
îrcode_t
 
	mmagic
;

51 
ext2fs_öode_bôm≠
 
	msögÀ
;

52 
ext2fs_öode_bôm≠
 
	mmu…ùÀ
;

53 
ext2_öo_t
 
	mcou¡
;

54 
ext2_öo_t
 
	msize
;

55 
ext2_öo_t
 
	mnum_öodes
;

56 
ext2_öo_t
 
	mcurs‹
;

57 
ext2_icou¡_ñ
 *
	mli°
;

58 
ext2_icou¡_ñ
 *
	mœ°_lookup
;

59 *
	mtdb_‚
;

60 
TDB_CONTEXT
 *
	mtdb
;

70 
	#icou¡_16_xœã
(
x
Ë(((xË> 65500Ë? 65500 : (x))

	)

72 
	$ext2fs_‰ì_icou¡
(
ext2_icou¡_t
 
icou¡
)

74 i‡(!
icou¡
)

77 
icou¡
->
magic
 = 0;

78 i‡(
icou¡
->
li°
)

79 
	`ext2fs_‰ì_mem
(&
icou¡
->
li°
);

80 i‡(
icou¡
->
sögÀ
)

81 
	`ext2fs_‰ì_öode_bôm≠
(
icou¡
->
sögÀ
);

82 i‡(
icou¡
->
mu…ùÀ
)

83 
	`ext2fs_‰ì_öode_bôm≠
(
icou¡
->
mu…ùÀ
);

84 i‡(
icou¡
->
tdb
)

85 
	`tdb_˛o£
(
icou¡
->
tdb
);

86 i‡(
icou¡
->
tdb_‚
) {

87 
	`u∆ök
(
icou¡
->
tdb_‚
);

88 
	`‰ì
(
icou¡
->
tdb_‚
);

91 
	`ext2fs_‰ì_mem
(&
icou¡
);

92 
	}
}

94 
îrcode_t
 
	$Æloc_icou¡
(
ext2_fûsys
 
fs
, 
Êags
, 
ext2_icou¡_t
 *
ªt
)

96 
ext2_icou¡_t
 
icou¡
;

97 
îrcode_t
 
ªtvÆ
;

99 *
ªt
 = 0;

101 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ext2_icou¡
), &
icou¡
);

102 i‡(
ªtvÆ
)

103  
ªtvÆ
;

104 
	`mem£t
(
icou¡
, 0, (
ext2_icou¡
));

106 
ªtvÆ
 = 
	`ext2fs_Æloˇã_öode_bôm≠
(
fs
, 0, &
icou¡
->
sögÀ
);

107 i‡(
ªtvÆ
)

108 
îrout
;

110 i‡(
Êags
 & 
EXT2_ICOUNT_OPT_INCREMENT
) {

111 
ªtvÆ
 = 
	`ext2fs_Æloˇã_öode_bôm≠
(
fs
, 0,

112 &
icou¡
->
mu…ùÀ
);

113 i‡(
ªtvÆ
)

114 
îrout
;

116 
icou¡
->
mu…ùÀ
 = 0;

118 
icou¡
->
magic
 = 
EXT2_ET_MAGIC_ICOUNT
;

119 
icou¡
->
num_öodes
 = 
fs
->
su≥r
->
s_öodes_cou¡
;

121 *
ªt
 = 
icou¡
;

124 
îrout
:

125 
	`ext2fs_‰ì_icou¡
(
icou¡
);

126 (
ªtvÆ
);

127 
	}
}

129 
	suuid
 {

130 
__u32
 
	mtime_low
;

131 
__u16
 
	mtime_mid
;

132 
__u16
 
	mtime_hi_™d_vîsi⁄
;

133 
__u16
 
	m˛ock_£q
;

134 
__u8
 
	mnode
[6];

137 
	$u≈ack_uuid
(*
ö
, 
uuid
 *
uu
)

139 
__u8
 *
±r
 = 
ö
;

140 
__u32
 
tmp
;

142 
tmp
 = *
±r
++;

143 
tmp
 = (tm∞<< 8Ë| *
±r
++;

144 
tmp
 = (tm∞<< 8Ë| *
±r
++;

145 
tmp
 = (tm∞<< 8Ë| *
±r
++;

146 
uu
->
time_low
 = 
tmp
;

148 
tmp
 = *
±r
++;

149 
tmp
 = (tm∞<< 8Ë| *
±r
++;

150 
uu
->
time_mid
 = 
tmp
;

152 
tmp
 = *
±r
++;

153 
tmp
 = (tm∞<< 8Ë| *
±r
++;

154 
uu
->
time_hi_™d_vîsi⁄
 = 
tmp
;

156 
tmp
 = *
±r
++;

157 
tmp
 = (tm∞<< 8Ë| *
±r
++;

158 
uu
->
˛ock_£q
 = 
tmp
;

160 
	`mem˝y
(
uu
->
node
, 
±r
, 6);

161 
	}
}

163 
	$uuid_u≈¨£
(*
uu
, *
out
)

165 
uuid
 uuid;

167 
	`u≈ack_uuid
(
uu
, &
uuid
);

168 
	`•rötf
(
out
,

170 
uuid
.
time_low
, uuid.
time_mid
, uuid.
time_hi_™d_vîsi⁄
,

171 
uuid
.
˛ock_£q
 >> 8, uuid.clock_seq & 0xFF,

172 
uuid
.
node
[0], uuid.node[1], uuid.node[2],

173 
uuid
.
node
[3], uuid.node[4], uuid.node[5]);

174 
	}
}

176 
îrcode_t
 
	$ext2fs_¸óã_icou¡_tdb
(
ext2_fûsys
 
fs
, *
tdb_dú
,

177 
Êags
, 
ext2_icou¡_t
 *
ªt
)

179 
ext2_icou¡_t
 
icou¡
;

180 
îrcode_t
 
ªtvÆ
;

181 *
‚
, 
uuid
[40];

182 
fd
;

184 
ªtvÆ
 = 
	`Æloc_icou¡
(
fs
, 
Êags
, &
icou¡
);

185 i‡(
ªtvÆ
)

186  
ªtvÆ
;

188 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
	`°æí
(
tdb_dú
Ë+ 64, &
‚
);

189 i‡(
ªtvÆ
)

190 
îrout
;

191 
	`uuid_u≈¨£
(
fs
->
su≥r
->
s_uuid
, 
uuid
);

192 
	`•rötf
(
‚
, "%s/%s-icou¡-XXXXXX", 
tdb_dú
, 
uuid
);

193 
fd
 = 
	`mk°emp
(
‚
);

195 
icou¡
->
tdb_‚
 = 
‚
;

196 
icou¡
->
tdb
 = 
	`tdb_›í
(
‚
, 0, 
TDB_CLEAR_IF_FIRST
,

197 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, 0600);

198 i‡(
icou¡
->
tdb
) {

199 
	`˛o£
(
fd
);

200 *
ªt
 = 
icou¡
;

204 
ªtvÆ
 = 
î∫o
;

205 
	`˛o£
(
fd
);

207 
îrout
:

208 
	`ext2fs_‰ì_icou¡
(
icou¡
);

209 (
ªtvÆ
);

210 
	}
}

212 
îrcode_t
 
	$ext2fs_¸óã_icou¡2
(
ext2_fûsys
 
fs
, 
Êags
, 
size
,

213 
ext2_icou¡_t
 
höt
,Éxt2_icou¡_à*
ªt
)

215 
ext2_icou¡_t
 
icou¡
;

216 
îrcode_t
 
ªtvÆ
;

217 
size_t
 
byãs
;

218 
ext2_öo_t
 
i
;

220 i‡(
höt
) {

221 
	`EXT2_CHECK_MAGIC
(
höt
, 
EXT2_ET_MAGIC_ICOUNT
);

222 i‡(
höt
->
size
 > size)

223 
size
 = (
size_t
Ë
höt
->size;

226 
ªtvÆ
 = 
	`Æloc_icou¡
(
fs
, 
Êags
, &
icou¡
);

227 i‡(
ªtvÆ
)

228  
ªtvÆ
;

230 i‡(
size
) {

231 
icou¡
->
size
 = size;

238 
ªtvÆ
 = 
	`ext2fs_gë_num_dús
(
fs
, &
icou¡
->
size
);

239 i‡(
ªtvÆ
)

240 
îrout
;

241 
icou¡
->
size
 +
fs
->
su≥r
->
s_öodes_cou¡
 / 50;

244 
byãs
 = (
size_t
Ë(
icou¡
->
size
 * (
ext2_icou¡_ñ
));

246 
	`¥ötf
("Icountállocated %uÉntries, %d bytes.\n",

247 
icou¡
->
size
, 
byãs
);

249 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(
icou¡
->
size
, (
ext2_icou¡_ñ
),

250 &
icou¡
->
li°
);

251 i‡(
ªtvÆ
)

252 
îrout
;

253 
	`mem£t
(
icou¡
->
li°
, 0, 
byãs
);

255 
icou¡
->
cou¡
 = 0;

256 
icou¡
->
curs‹
 = 0;

263 i‡(
höt
) {

264 
i
=0; i < 
höt
->
cou¡
; i++)

265 
icou¡
->
li°
[
i
].
öo
 = 
höt
->list[i].ino;

266 
icou¡
->
cou¡
 = 
höt
->count;

269 *
ªt
 = 
icou¡
;

272 
îrout
:

273 
	`ext2fs_‰ì_icou¡
(
icou¡
);

274 (
ªtvÆ
);

275 
	}
}

277 
îrcode_t
 
	$ext2fs_¸óã_icou¡
(
ext2_fûsys
 
fs
, 
Êags
,

278 
size
,

279 
ext2_icou¡_t
 *
ªt
)

281  
	`ext2fs_¸óã_icou¡2
(
fs
, 
Êags
, 
size
, 0, 
ªt
);

282 
	}
}

288 
ext2_icou¡_ñ
 *
	$ö£π_icou¡_ñ
(
ext2_icou¡_t
 
icou¡
,

289 
ext2_öo_t
 
öo
, 
pos
)

291 
ext2_icou¡_ñ
 *
ñ
;

292 
îrcode_t
 
ªtvÆ
;

293 
ext2_öo_t
 
√w_size
 = 0;

294 
num
;

296 i‡(
icou¡
->
œ°_lookup
 && icou¡->œ°_lookup->
öo
 == ino)

297  
icou¡
->
œ°_lookup
;

299 i‡(
icou¡
->
cou¡
 >icou¡->
size
) {

300 i‡(
icou¡
->
cou¡
) {

301 
√w_size
 = 
icou¡
->
li°
[()icou¡->
cou¡
-1].
öo
;

302 
√w_size
 = (
ext2_öo_t
Ë(
icou¡
->
cou¡
 *

303 ((Ë
icou¡
->
num_öodes
 / 
√w_size
));

305 i‡(
√w_size
 < (
icou¡
->
size
 + 100))

306 
√w_size
 = 
icou¡
->
size
 + 100;

308 
	`¥ötf
("RóŒoˇtög icou¡ %uÉ¡rõs...\n", 
√w_size
);

310 
ªtvÆ
 = 
	`ext2fs_ªsize_mem
((
size_t
Ë
icou¡
->
size
 *

311 (
ext2_icou¡_ñ
),

312 (
size_t
Ë
√w_size
 *

313 (
ext2_icou¡_ñ
),

314 &
icou¡
->
li°
);

315 i‡(
ªtvÆ
)

317 
icou¡
->
size
 = 
√w_size
;

319 
num
 = (Ë
icou¡
->
cou¡
 - 
pos
;

320 i‡(
num
 < 0)

322 i‡(
num
) {

323 
	`memmove
(&
icou¡
->
li°
[
pos
+1], &icount->list[pos],

324 (
ext2_icou¡_ñ
Ë* 
num
);

326 
icou¡
->
cou¡
++;

327 
ñ
 = &
icou¡
->
li°
[
pos
];

328 
ñ
->
cou¡
 = 0;

329 
ñ
->
öo
 = ino;

330 
icou¡
->
œ°_lookup
 = 
ñ
;

331  
ñ
;

332 
	}
}

339 
ext2_icou¡_ñ
 *
	$gë_icou¡_ñ
(
ext2_icou¡_t
 
icou¡
,

340 
ext2_öo_t
 
öo
, 
¸óã
)

342 
ønge
;

343 
low
, 
high
, 
mid
;

344 
ext2_öo_t
 
lowvÆ
, 
highvÆ
;

346 i‡(!
icou¡
 || !icou¡->
li°
)

349 i‡(
¸óã
 && ((
icou¡
->
cou¡
 == 0) ||

350 (
öo
 > 
icou¡
->
li°
[()icou¡->
cou¡
-1].ino))) {

351  
	`ö£π_icou¡_ñ
(
icou¡
, 
öo
, (Ëicou¡->
cou¡
);

353 i‡(
icou¡
->
cou¡
 == 0)

356 i‡(
icou¡
->
curs‹
 >icou¡->
cou¡
)

357 
icou¡
->
curs‹
 = 0;

358 i‡(
öo
 =
icou¡
->
li°
[icou¡->
curs‹
].ino)

359  &
icou¡
->
li°
[icou¡->
curs‹
++];

361 
	`¥ötf
("N⁄-curs‹ gë_icou¡_ñ: %u\n", 
öo
);

363 
low
 = 0;

364 
high
 = (Ë
icou¡
->
cou¡
-1;

365 
low
 <
high
) {

367 
mid
 = (
low
+
high
)/2;

369 i‡(
low
 =
high
)

370 
mid
 = 
low
;

373 
lowvÆ
 = 
icou¡
->
li°
[
low
].
öo
;

374 
highvÆ
 = 
icou¡
->
li°
[
high
].
öo
;

376 i‡(
öo
 < 
lowvÆ
)

377 
ønge
 = 0;

378 i‡(
öo
 > 
highvÆ
)

379 
ønge
 = 1;

381 
ønge
 = ((Ë(
öo
 - 
lowvÆ
)) /

382 (
highvÆ
 - 
lowvÆ
);

383 i‡(
ønge
 > 0.9)

384 
ønge
 = 0.9;

385 i‡(
ønge
 < 0.1)

386 
ønge
 = 0.1;

388 
mid
 = 
low
 + ((Ë(
ønge
 * (
high
-low)));

391 i‡(
öo
 =
icou¡
->
li°
[
mid
].ino) {

392 
icou¡
->
curs‹
 = 
mid
+1;

393  &
icou¡
->
li°
[
mid
];

395 i‡(
öo
 < 
icou¡
->
li°
[
mid
].ino)

396 
high
 = 
mid
-1;

398 
low
 = 
mid
+1;

404 i‡(
¸óã
)

405  
	`ö£π_icou¡_ñ
(
icou¡
, 
öo
, 
low
);

407 
	}
}

409 
îrcode_t
 
	$£t_öode_cou¡
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

410 
__u32
 
cou¡
)

412 
ext2_icou¡_ñ
 *
ñ
;

413 
TDB_DATA
 
key
, 
d©a
;

415 i‡(
icou¡
->
tdb
) {

416 
key
.
d±r
 = (*Ë&
öo
;

417 
key
.
dsize
 = (
ext2_öo_t
);

418 
d©a
.
d±r
 = (*Ë&
cou¡
;

419 
d©a
.
dsize
 = (
__u32
);

420 i‡(
cou¡
) {

421 i‡(
	`tdb_°‹e
(
icou¡
->
tdb
, 
key
, 
d©a
, 
TDB_REPLACE
))

422  
	`tdb_îr‹
(
icou¡
->
tdb
) +

423 
EXT2_ET_TDB_SUCCESS
;

425 i‡(
	`tdb_dñëe
(
icou¡
->
tdb
, 
key
))

426  
	`tdb_îr‹
(
icou¡
->
tdb
) +

427 
EXT2_ET_TDB_SUCCESS
;

432 
ñ
 = 
	`gë_icou¡_ñ
(
icou¡
, 
öo
, 1);

433 i‡(!
ñ
)

434  
EXT2_ET_NO_MEMORY
;

436 
ñ
->
cou¡
 = count;

438 
	}
}

440 
îrcode_t
 
	$gë_öode_cou¡
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

441 
__u32
 *
cou¡
)

443 
ext2_icou¡_ñ
 *
ñ
;

444 
TDB_DATA
 
key
, 
d©a
;

446 i‡(
icou¡
->
tdb
) {

447 
key
.
d±r
 = (*Ë&
öo
;

448 
key
.
dsize
 = (
ext2_öo_t
);

450 
d©a
 = 
	`tdb_„tch
(
icou¡
->
tdb
, 
key
);

451 i‡(
d©a
.
d±r
 =
NULL
) {

452 *
cou¡
 = 0;

453  
	`tdb_îr‹
(
icou¡
->
tdb
Ë+ 
EXT2_ET_TDB_SUCCESS
;

456 *
cou¡
 = *((
__u32
 *Ë
d©a
.
d±r
);

457 
	`‰ì
(
d©a
.
d±r
);

460 
ñ
 = 
	`gë_icou¡_ñ
(
icou¡
, 
öo
, 0);

461 i‡(!
ñ
) {

462 *
cou¡
 = 0;

463  
ENOENT
;

466 *
cou¡
 = 
ñ
->count;

468 
	}
}

470 
îrcode_t
 
	$ext2fs_icou¡_vÆid©e
(
ext2_icou¡_t
 
icou¡
, 
FILE
 *
out
)

472 
îrcode_t
 
ªt
 = 0;

473 
i
;

474 c⁄° *
bad
 = "bad icount";

476 
	`EXT2_CHECK_MAGIC
(
icou¡
, 
EXT2_ET_MAGIC_ICOUNT
);

478 i‡(
icou¡
->
cou¡
 > icou¡->
size
) {

479 
	`Ârötf
(
out
, "%s: cou¡ > size\n", 
bad
);

480  
EXT2_ET_INVALID_ARGUMENT
;

482 
i
=1; i < 
icou¡
->
cou¡
; i++) {

483 i‡(
icou¡
->
li°
[
i
-1].
öo
 >= icount->list[i].ino) {

484 
	`Ârötf
(
out
, "%s:Üist[%d].ino=%u,Üist[%d].ino=%u\n",

485 
bad
, 
i
-1, 
icou¡
->
li°
[i-1].
öo
,

486 
i
, 
icou¡
->
li°
[i].
öo
);

487 
ªt
 = 
EXT2_ET_INVALID_ARGUMENT
;

490  
ªt
;

491 
	}
}

493 
îrcode_t
 
	$ext2fs_icou¡_„tch
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
, 
__u16
 *
ªt
)

495 
__u32
 
vÆ
;

496 
	`EXT2_CHECK_MAGIC
(
icou¡
, 
EXT2_ET_MAGIC_ICOUNT
);

498 i‡(!
öo
 || (öÿ> 
icou¡
->
num_öodes
))

499  
EXT2_ET_INVALID_ARGUMENT
;

501 i‡(
	`ext2fs_ã°_öode_bôm≠
(
icou¡
->
sögÀ
, 
öo
)) {

502 *
ªt
 = 1;

505 i‡(
icou¡
->
mu…ùÀ
 &&

506 !
	`ext2fs_ã°_öode_bôm≠
(
icou¡
->
mu…ùÀ
, 
öo
)) {

507 *
ªt
 = 0;

510 
	`gë_öode_cou¡
(
icou¡
, 
öo
, &
vÆ
);

511 *
ªt
 = 
	`icou¡_16_xœã
(
vÆ
);

513 
	}
}

515 
îrcode_t
 
	$ext2fs_icou¡_ö¸emít
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

516 
__u16
 *
ªt
)

518 
__u32
 
cuº_vÆue
;

520 
	`EXT2_CHECK_MAGIC
(
icou¡
, 
EXT2_ET_MAGIC_ICOUNT
);

522 i‡(!
öo
 || (öÿ> 
icou¡
->
num_öodes
))

523  
EXT2_ET_INVALID_ARGUMENT
;

525 i‡(
	`ext2fs_ã°_öode_bôm≠
(
icou¡
->
sögÀ
, 
öo
)) {

530 i‡(
	`£t_öode_cou¡
(
icou¡
, 
öo
, 2))

531  
EXT2_ET_NO_MEMORY
;

532 
cuº_vÆue
 = 2;

533 
	`ext2fs_unm¨k_öode_bôm≠
(
icou¡
->
sögÀ
, 
öo
);

534 } i‡(
icou¡
->
mu…ùÀ
) {

540 i‡(
	`ext2fs_ã°_öode_bôm≠
(
icou¡
->
mu…ùÀ
, 
öo
)) {

541 
	`gë_öode_cou¡
(
icou¡
, 
öo
, &
cuº_vÆue
);

542 
cuº_vÆue
++;

543 i‡(
	`£t_öode_cou¡
(
icou¡
, 
öo
, 
cuº_vÆue
))

544  
EXT2_ET_NO_MEMORY
;

550 
	`ext2fs_m¨k_öode_bôm≠
(
icou¡
->
sögÀ
, 
öo
);

551 i‡(
ªt
)

552 *
ªt
 = 1;

560 
	`gë_öode_cou¡
(
icou¡
, 
öo
, &
cuº_vÆue
);

561 
cuº_vÆue
++;

562 i‡(
	`£t_öode_cou¡
(
icou¡
, 
öo
, 
cuº_vÆue
))

563  
EXT2_ET_NO_MEMORY
;

565 i‡(
icou¡
->
mu…ùÀ
)

566 
	`ext2fs_m¨k_öode_bôm≠
(
icou¡
->
mu…ùÀ
, 
öo
);

567 i‡(
ªt
)

568 *
ªt
 = 
	`icou¡_16_xœã
(
cuº_vÆue
);

570 
	}
}

572 
îrcode_t
 
	$ext2fs_icou¡_de¸emít
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

573 
__u16
 *
ªt
)

575 
__u32
 
cuº_vÆue
;

577 i‡(!
öo
 || (öÿ> 
icou¡
->
num_öodes
))

578  
EXT2_ET_INVALID_ARGUMENT
;

580 
	`EXT2_CHECK_MAGIC
(
icou¡
, 
EXT2_ET_MAGIC_ICOUNT
);

582 i‡(
	`ext2fs_ã°_öode_bôm≠
(
icou¡
->
sögÀ
, 
öo
)) {

583 
	`ext2fs_unm¨k_öode_bôm≠
(
icou¡
->
sögÀ
, 
öo
);

584 i‡(
icou¡
->
mu…ùÀ
)

585 
	`ext2fs_unm¨k_öode_bôm≠
(
icou¡
->
mu…ùÀ
, 
öo
);

587 
	`£t_öode_cou¡
(
icou¡
, 
öo
, 0);

589 i‡(
ªt
)

590 *
ªt
 = 0;

594 i‡(
icou¡
->
mu…ùÀ
 &&

595 !
	`ext2fs_ã°_öode_bôm≠
(
icou¡
->
mu…ùÀ
, 
öo
))

596  
EXT2_ET_INVALID_ARGUMENT
;

598 
	`gë_öode_cou¡
(
icou¡
, 
öo
, &
cuº_vÆue
);

599 i‡(!
cuº_vÆue
)

600  
EXT2_ET_INVALID_ARGUMENT
;

601 
cuº_vÆue
--;

602 i‡(
	`£t_öode_cou¡
(
icou¡
, 
öo
, 
cuº_vÆue
))

603  
EXT2_ET_NO_MEMORY
;

605 i‡(
cuº_vÆue
 == 1)

606 
	`ext2fs_m¨k_öode_bôm≠
(
icou¡
->
sögÀ
, 
öo
);

607 i‡((
cuº_vÆue
 =0Ë&& 
icou¡
->
mu…ùÀ
)

608 
	`ext2fs_unm¨k_öode_bôm≠
(
icou¡
->
mu…ùÀ
, 
öo
);

610 i‡(
ªt
)

611 *
ªt
 = 
	`icou¡_16_xœã
(
cuº_vÆue
);

613 
	}
}

615 
îrcode_t
 
	$ext2fs_icou¡_°‹e
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

616 
__u16
 
cou¡
)

618 i‡(!
öo
 || (öÿ> 
icou¡
->
num_öodes
))

619  
EXT2_ET_INVALID_ARGUMENT
;

621 
	`EXT2_CHECK_MAGIC
(
icou¡
, 
EXT2_ET_MAGIC_ICOUNT
);

623 i‡(
cou¡
 == 1) {

624 
	`ext2fs_m¨k_öode_bôm≠
(
icou¡
->
sögÀ
, 
öo
);

625 i‡(
icou¡
->
mu…ùÀ
)

626 
	`ext2fs_unm¨k_öode_bôm≠
(
icou¡
->
mu…ùÀ
, 
öo
);

629 i‡(
cou¡
 == 0) {

630 
	`ext2fs_unm¨k_öode_bôm≠
(
icou¡
->
sögÀ
, 
öo
);

631 i‡(
icou¡
->
mu…ùÀ
) {

636 
	`ext2fs_unm¨k_öode_bôm≠
(
icou¡
->
mu…ùÀ
, 
öo
);

638 
	`£t_öode_cou¡
(
icou¡
, 
öo
, 0);

642 i‡(
	`£t_öode_cou¡
(
icou¡
, 
öo
, 
cou¡
))

643  
EXT2_ET_NO_MEMORY
;

644 
	`ext2fs_unm¨k_öode_bôm≠
(
icou¡
->
sögÀ
, 
öo
);

645 i‡(
icou¡
->
mu…ùÀ
)

646 
	`ext2fs_m¨k_öode_bôm≠
(
icou¡
->
mu…ùÀ
, 
öo
);

648 
	}
}

650 
ext2_öo_t
 
	$ext2fs_gë_icou¡_size
(
ext2_icou¡_t
 
icou¡
)

652 i‡(!
icou¡
 || icou¡->
magic
 !
EXT2_ET_MAGIC_ICOUNT
)

655  
icou¡
->
size
;

656 
	}
}

658 #ifde‡
DEBUG


660 
ext2_fûsys
 
	gã°_fs
;

661 
ext2_icou¡_t
 
	gicou¡
;

663 
	#EXIT
 0x00

	)

664 
	#FETCH
 0x01

	)

665 
	#STORE
 0x02

	)

666 
	#INCREMENT
 0x03

	)

667 
	#DECREMENT
 0x04

	)

669 
	sã°_¥ogøm
 {

670 
	mcmd
;

671 
ext2_öo_t
 
	möo
;

672 
__u16
 
	m¨g
;

673 
__u16
 
	mex≥˘ed
;

676 
ã°_¥ogøm
 
	g¥og
[] = {

677 { 
STORE
, 42, 42, 42 },

678 { 
STORE
, 1, 1, 1 },

679 { 
STORE
, 2, 2, 2 },

680 { 
STORE
, 3, 3, 3 },

681 { 
STORE
, 10, 1, 1 },

682 { 
STORE
, 42, 0, 0 },

683 { 
INCREMENT
, 5, 0, 1 },

684 { 
INCREMENT
, 5, 0, 2 },

685 { 
INCREMENT
, 5, 0, 3 },

686 { 
INCREMENT
, 5, 0, 4 },

687 { 
DECREMENT
, 5, 0, 3 },

688 { 
DECREMENT
, 5, 0, 2 },

689 { 
DECREMENT
, 5, 0, 1 },

690 { 
DECREMENT
, 5, 0, 0 },

691 { 
FETCH
, 10, 0, 1 },

692 { 
FETCH
, 1, 0, 1 },

693 { 
FETCH
, 2, 0, 2 },

694 { 
FETCH
, 3, 0, 3 },

695 { 
INCREMENT
, 1, 0, 2 },

696 { 
DECREMENT
, 2, 0, 1 },

697 { 
DECREMENT
, 2, 0, 0 },

698 { 
FETCH
, 12, 0, 0 },

699 { 
EXIT
, 0, 0, 0 }

702 
ã°_¥ogøm
 
	gexãnded
[] = {

703 { 
STORE
, 1, 1, 1 },

704 { 
STORE
, 2, 2, 2 },

705 { 
STORE
, 3, 3, 3 },

706 { 
STORE
, 4, 4, 4 },

707 { 
STORE
, 5, 5, 5 },

708 { 
STORE
, 6, 1, 1 },

709 { 
STORE
, 7, 2, 2 },

710 { 
STORE
, 8, 3, 3 },

711 { 
STORE
, 9, 4, 4 },

712 { 
STORE
, 10, 5, 5 },

713 { 
STORE
, 11, 1, 1 },

714 { 
STORE
, 12, 2, 2 },

715 { 
STORE
, 13, 3, 3 },

716 { 
STORE
, 14, 4, 4 },

717 { 
STORE
, 15, 5, 5 },

718 { 
STORE
, 16, 1, 1 },

719 { 
STORE
, 17, 2, 2 },

720 { 
STORE
, 18, 3, 3 },

721 { 
STORE
, 19, 4, 4 },

722 { 
STORE
, 20, 5, 5 },

723 { 
STORE
, 21, 1, 1 },

724 { 
STORE
, 22, 2, 2 },

725 { 
STORE
, 23, 3, 3 },

726 { 
STORE
, 24, 4, 4 },

727 { 
STORE
, 25, 5, 5 },

728 { 
STORE
, 26, 1, 1 },

729 { 
STORE
, 27, 2, 2 },

730 { 
STORE
, 28, 3, 3 },

731 { 
STORE
, 29, 4, 4 },

732 { 
STORE
, 30, 5, 5 },

733 { 
EXIT
, 0, 0, 0 }

739 
	$£tup
()

741 
îrcode_t
 
ªtvÆ
;

742 
ext2_su≥r_block
 
∑øm
;

744 
	`öôülize_ext2_îr‹_èbÀ
();

746 
	`mem£t
(&
∑øm
, 0, (param));

747 
∑øm
.
s_blocks_cou¡
 = 12000;

749 
ªtvÆ
 = 
	`ext2fs_öôülize
("ã° fs", 0, &
∑øm
,

750 
ã°_io_m™agî
, &
ã°_fs
);

751 i‡(
ªtvÆ
) {

752 
	`com_îr
("£tup", 
ªtvÆ
,

754 
	`exô
(1);

756 
ªtvÆ
 = 
	`ext2fs_Æloˇã_èbÀs
(
ã°_fs
);

757 i‡(
ªtvÆ
) {

758 
	`com_îr
("£tup", 
ªtvÆ
,

760 
	`exô
(1);

762 
	}
}

764 
	$run_ã°
(
Êags
, 
size
, *
dú
, 
ã°_¥ogøm
 *
¥og
)

766 
îrcode_t
 
ªtvÆ
;

767 
ext2_icou¡_t
 
icou¡
;

768 
ã°_¥ogøm
 *
pc
;

769 
__u16
 
ªsu…
;

770 
¥obÀm
 = 0;

772 i‡(
dú
) {

773 
ªtvÆ
 = 
	`ext2fs_¸óã_icou¡_tdb
(
ã°_fs
, 
dú
,

774 
Êags
, &
icou¡
);

775 i‡(
ªtvÆ
) {

776 
	`com_îr
("run_ã°", 
ªtvÆ
,

778 
	`exô
(1);

781 
ªtvÆ
 = 
	`ext2fs_¸óã_icou¡2
(
ã°_fs
, 
Êags
, 
size
, 0,

782 &
icou¡
);

783 i‡(
ªtvÆ
) {

784 
	`com_îr
("run_ã°", 
ªtvÆ
, "while creating icount");

785 
	`exô
(1);

788 
pc
 = 
¥og
;Öc->
cmd
 !
EXIT
;Öc++) {

789 
pc
->
cmd
) {

790 
FETCH
:

791 
	`¥ötf
("icou¡_„tch(%uË", 
pc
->
öo
);

793 
STORE
:

794 
ªtvÆ
 = 
	`ext2fs_icou¡_°‹e
(
icou¡
, 
pc
->
öo
,Öc->
¨g
);

795 i‡(
ªtvÆ
) {

796 
	`com_îr
("run_ã°", 
ªtvÆ
,

798 
	`exô
(1);

800 
	`¥ötf
("icou¡_°‹e(%u, %uË", 
pc
->
öo
,Öc->
¨g
);

802 
INCREMENT
:

803 
ªtvÆ
 = 
	`ext2fs_icou¡_ö¸emít
(
icou¡
, 
pc
->
öo
, 0);

804 i‡(
ªtvÆ
) {

805 
	`com_îr
("run_ã°", 
ªtvÆ
,

807 
	`exô
(1);

809 
	`¥ötf
("icou¡_ö¸emít(%uË", 
pc
->
öo
);

811 
DECREMENT
:

812 
ªtvÆ
 = 
	`ext2fs_icou¡_de¸emít
(
icou¡
, 
pc
->
öo
, 0);

813 i‡(
ªtvÆ
) {

814 
	`com_îr
("run_ã°", 
ªtvÆ
,

816 
	`exô
(1);

818 
	`¥ötf
("icou¡_de¸emít(%uË", 
pc
->
öo
);

821 
ªtvÆ
 = 
	`ext2fs_icou¡_„tch
(
icou¡
, 
pc
->
öo
, &
ªsu…
);

822 i‡(
ªtvÆ
) {

823 
	`com_îr
("run_ã°", 
ªtvÆ
,

825 
	`exô
(1);

827 
	`¥ötf
("%u (%s)\n", 
ªsu…
, (ªsu… =
pc
->
ex≥˘ed
) ?

829 i‡(
ªsu…
 !
pc
->
ex≥˘ed
)

830 
¥obÀm
++;

832 
	`¥ötf
("icou¡ sizêi†%u\n", 
	`ext2fs_gë_icou¡_size
(
icou¡
));

833 
ªtvÆ
 = 
	`ext2fs_icou¡_vÆid©e
(
icou¡
, 
°dout
);

834 i‡(
ªtvÆ
) {

835 
	`com_îr
("run_ã°", 
ªtvÆ
, "while calling icount_validate");

836 
	`exô
(1);

838 
	`ext2fs_‰ì_icou¡
(
icou¡
);

839  
¥obÀm
;

840 
	}
}

843 
	$maö
(
¨gc
, **
¨gv
)

845 
Áûed
 = 0;

847 
	`£tup
();

848 
	`¥ötf
("Standard icountÑun:\n");

849 
Áûed
 +
	`run_ã°
(0, 0, 0, 
¥og
);

850 
	`¥ötf
("\nMultiple bitmapÅest:\n");

851 
Áûed
 +
	`run_ã°
(
EXT2_ICOUNT_OPT_INCREMENT
, 0, 0, 
¥og
);

852 
	`¥ötf
("\nResizing icount:\n");

853 
Áûed
 +
	`run_ã°
(0, 3, 0, 
exãnded
);

854 
	`¥ötf
("\nStandard icountÑun withÅdb:\n");

855 
Áûed
 +
	`run_ã°
(0, 0, ".", 
¥og
);

856 
	`¥ötf
("\nMultiple bitmapÅest withÅdb:\n");

857 
Áûed
 +
	`run_ã°
(
EXT2_ICOUNT_OPT_INCREMENT
, 0, ".", 
¥og
);

858 i‡(
Áûed
)

859 
	`¥ötf
("FAILED!\n");

860  
Áûed
;

861 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/imager.c

16 
	~<c⁄fig.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 #i‡
HAVE_UNISTD_H


21 
	~<uni°d.h
>

23 #i‡
HAVE_ERRNO_H


24 
	~<î∫o.h
>

26 
	~<f˙é.h
>

27 
	~<time.h
>

28 #i‡
HAVE_SYS_STAT_H


29 
	~<sys/°©.h
>

31 #i‡
HAVE_SYS_TYPES_H


32 
	~<sys/ty≥s.h
>

35 
	~"ext2_fs.h
"

36 
	~"ext2fs.h
"

38 #i‚de‡
HAVE_TYPE_SSIZE_T


39 
	tssize_t
;

45 
	$check_zîo_block
(*
buf
, 
blocksize
)

47 *
˝
 = 
buf
;

48 
À·
 = 
blocksize
;

50 
À·
 > 0) {

51 i‡(*
˝
++)

53 
À·
--;

56 
	}
}

61 
	#BUF_BLOCKS
 32

	)

63 
îrcode_t
 
	$ext2fs_image_öode_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
)

65 
group
, 
À·
, 
c
, 
d
;

66 *
buf
, *
˝
;

67 
blk_t
 
blk
;

68 
ssize_t
 
a˘uÆ
;

69 
îrcode_t
 
ªtvÆ
;

71 
buf
 = 
	`mÆloc
(
fs
->
blocksize
 * 
BUF_BLOCKS
);

72 i‡(!
buf
)

73  
ENOMEM
;

75 
group
 = 0; grou∞< 
fs
->
group_desc_cou¡
; group++) {

76 
blk
 = 
fs
->
group_desc
[()
group
].
bg_öode_èbÀ
;

77 i‡(!
blk
) {

78 
ªtvÆ
 = 
EXT2_ET_MISSING_INODE_TABLE
;

79 
îrout
;

81 
À·
 = 
fs
->
öode_blocks_≥r_group
;

82 
À·
) {

83 
c
 = 
BUF_BLOCKS
;

84 i‡(
c
 > 
À·
)

85 
c
 = 
À·
;

86 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
blk
, 
c
, 
buf
);

87 i‡(
ªtvÆ
)

88 
îrout
;

89 
˝
 = 
buf
;

90 
c
) {

91 i‡(!(
Êags
 & 
IMAGER_FLAG_SPARSEWRITE
)) {

92 
d
 = 
c
;

93 
skù_•¨£
;

96 i‡(
	`check_zîo_block
(
˝
, 
fs
->
blocksize
)) {

97 
c
--;

98 
blk
++;

99 
À·
--;

100 
˝
 +
fs
->
blocksize
;

101 
	`l£ek
(
fd
, 
fs
->
blocksize
, 
SEEK_CUR
);

105 
d
=1; d < 
c
; d++) {

106 i‡(
	`check_zîo_block
(
˝
 + 
d
*
fs
->
blocksize
, fs->blocksize))

109 
skù_•¨£
:

110 
a˘uÆ
 = 
	`wrôe
(
fd
, 
˝
, 
fs
->
blocksize
 * 
d
);

111 i‡(
a˘uÆ
 == -1) {

112 
ªtvÆ
 = 
î∫o
;

113 
îrout
;

115 i‡(
a˘uÆ
 !(
ssize_t
Ë(
fs
->
blocksize
 * 
d
)) {

116 
ªtvÆ
 = 
EXT2_ET_SHORT_WRITE
;

117 
îrout
;

119 
blk
 +
d
;

120 
À·
 -
d
;

121 
˝
 +
fs
->
blocksize
 * 
d
;

122 
c
 -
d
;

126 
ªtvÆ
 = 0;

128 
îrout
:

129 
	`‰ì
(
buf
);

130  
ªtvÆ
;

131 
	}
}

136 
îrcode_t
 
ext2fs_image_öode_ªad
(
ext2_fûsys
 
fs
, 
fd
,

137 
Êags
 
EXT2FS_ATTR
((
unu£d
)))

139 
	ggroup
, 
	gc
, 
	gÀ·
;

140 *
	gbuf
;

141 
blk_t
 
	gblk
;

142 
ssize_t
 
	ga˘uÆ
;

143 
îrcode_t
 
	gªtvÆ
;

145 
	gbuf
 = 
mÆloc
(
fs
->
blocksize
 * 
BUF_BLOCKS
);

146 i‡(!
	gbuf
)

147  
	gENOMEM
;

149 
	ggroup
 = 0; grou∞< 
	gfs
->
	ggroup_desc_cou¡
; group++) {

150 
	gblk
 = 
fs
->
group_desc
[()
group
].
bg_öode_èbÀ
;

151 i‡(!
	gblk
) {

152 
	gªtvÆ
 = 
EXT2_ET_MISSING_INODE_TABLE
;

153 
	gîrout
;

155 
	gÀ·
 = 
fs
->
öode_blocks_≥r_group
;

156 
	gÀ·
) {

157 
	gc
 = 
BUF_BLOCKS
;

158 i‡(
	gc
 > 
	gÀ·
)

159 
	gc
 = 
À·
;

160 
	ga˘uÆ
 = 
ªad
(
fd
, 
buf
, 
fs
->
blocksize
 * 
c
);

161 i‡(
	ga˘uÆ
 == -1) {

162 
ªtvÆ
 = 
î∫o
;

163 
	gîrout
;

165 i‡(
	ga˘uÆ
 !(
ssize_t
Ë(
fs
->
blocksize
 * 
c
)) {

166 
ªtvÆ
 = 
EXT2_ET_SHORT_READ
;

167 
	gîrout
;

169 
	gªtvÆ
 = 
io_ch™√l_wrôe_blk
(
fs
->
io
, 
blk
, 
c
, 
buf
);

170 i‡(
	gªtvÆ
)

171 
	gîrout
;

173 
	gblk
 +
c
;

174 
	gÀ·
 -
c
;

177 
	gªtvÆ
 = 
ext2fs_Êush_iˇche
(
fs
);

179 
	gîrout
:

180 
‰ì
(
buf
);

181  
	gªtvÆ
;

187 
îrcode_t
 
ext2fs_image_su≥r_wrôe
(
ext2_fûsys
 
fs
, 
fd
,

188 
Êags
 
EXT2FS_ATTR
((
unu£d
)))

190 *
	gbuf
, *
	g˝
;

191 
ssize_t
 
	ga˘uÆ
;

192 
îrcode_t
 
	gªtvÆ
;

194 
	gbuf
 = 
mÆloc
(
fs
->
blocksize
);

195 i‡(!
	gbuf
)

196  
	gENOMEM
;

201 
mem£t
(
buf
, 0, 
fs
->
blocksize
);

202 
mem˝y
(
buf
, 
fs
->
su≥r
, 
SUPERBLOCK_SIZE
);

203 
	ga˘uÆ
 = 
wrôe
(
fd
, 
buf
, 
fs
->
blocksize
);

204 i‡(
	ga˘uÆ
 == -1) {

205 
ªtvÆ
 = 
î∫o
;

206 
	gîrout
;

208 i‡(
	ga˘uÆ
 !(
ssize_t
Ë
fs
->
blocksize
) {

209 
ªtvÆ
 = 
EXT2_ET_SHORT_WRITE
;

210 
	gîrout
;

216 
	g˝
 = (*Ë
fs
->
group_desc
;

217 
	ga˘uÆ
 = 
wrôe
(
fd
, 
˝
, 
fs
->
blocksize
 * fs->
desc_blocks
);

218 i‡(
	ga˘uÆ
 == -1) {

219 
ªtvÆ
 = 
î∫o
;

220 
	gîrout
;

222 i‡(
	ga˘uÆ
 !(
ssize_t
Ë(
fs
->
blocksize
 * fs->
desc_blocks
)) {

223 
ªtvÆ
 = 
EXT2_ET_SHORT_WRITE
;

224 
	gîrout
;

227 
	gªtvÆ
 = 0;

229 
	gîrout
:

230 
‰ì
(
buf
);

231  
	gªtvÆ
;

237 
îrcode_t
 
ext2fs_image_su≥r_ªad
(
ext2_fûsys
 
fs
, 
fd
,

238 
Êags
 
EXT2FS_ATTR
((
unu£d
)))

240 *
	gbuf
;

241 
ssize_t
 
	ga˘uÆ
, 
	gsize
;

242 
îrcode_t
 
	gªtvÆ
;

244 
	gsize
 = 
fs
->
blocksize
 * (fs->
group_desc_cou¡
 + 1);

245 
	gbuf
 = 
mÆloc
(
size
);

246 i‡(!
	gbuf
)

247  
	gENOMEM
;

252 
	ga˘uÆ
 = 
ªad
(
fd
, 
buf
, 
size
);

253 i‡(
	ga˘uÆ
 == -1) {

254 
ªtvÆ
 = 
î∫o
;

255 
	gîrout
;

257 i‡(
	ga˘uÆ
 !
size
) {

258 
ªtvÆ
 = 
EXT2_ET_SHORT_READ
;

259 
	gîrout
;

265 
mem˝y
(
fs
->
su≥r
, 
buf
, 
SUPERBLOCK_SIZE
);

267 
mem˝y
(
fs
->
group_desc
, 
buf
 + fs->
blocksize
,

268 
fs
->
blocksize
 * fs->
group_desc_cou¡
);

270 
	gªtvÆ
 = 0;

272 
	gîrout
:

273 
‰ì
(
buf
);

274  
	gªtvÆ
;

280 
îrcode_t
 
	$ext2fs_image_bôm≠_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
)

282 
ext2fs_gíîic_bôm≠
 
bm≠
;

283 
îrcode_t
 
îr
, 
ªtvÆ
;

284 
ssize_t
 
a˘uÆ
;

285 
__u32
 
ôr
, 
˙t
, 
size
;

286 
c
, 
tŸÆ_size
;

287 
buf
[1024];

289 i‡(
Êags
 & 
IMAGER_FLAG_INODEMAP
) {

290 i‡(!
fs
->
öode_m≠
) {

291 
ªtvÆ
 = 
	`ext2fs_ªad_öode_bôm≠
(
fs
);

292 i‡(
ªtvÆ
)

293  
ªtvÆ
;

295 
bm≠
 = 
fs
->
öode_m≠
;

296 
îr
 = 
EXT2_ET_MAGIC_INODE_BITMAP
;

297 
ôr
 = 1;

298 
˙t
 = 
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
Ë* fs->
group_desc_cou¡
;

299 
size
 = (
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
) / 8);

301 i‡(!
fs
->
block_m≠
) {

302 
ªtvÆ
 = 
	`ext2fs_ªad_block_bôm≠
(
fs
);

303 i‡(
ªtvÆ
)

304  
ªtvÆ
;

306 
bm≠
 = 
fs
->
block_m≠
;

307 
îr
 = 
EXT2_ET_MAGIC_BLOCK_BITMAP
;

308 
ôr
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

309 
˙t
 = 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
Ë* fs->
group_desc_cou¡
;

310 
size
 = 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
) / 8;

312 
tŸÆ_size
 = 
size
 * 
fs
->
group_desc_cou¡
;

314 
˙t
 > 0) {

315 
size
 = (
buf
);

316 i‡(
size
 > (
˙t
 >> 3))

317 
size
 = (
˙t
 >> 3);

319 
ªtvÆ
 = 
	`ext2fs_gë_gíîic_bôm≠_ønge
(
bm≠
,

320 
îr
, 
ôr
, 
size
 << 3, 
buf
);

321 i‡(
ªtvÆ
)

322  
ªtvÆ
;

324 
a˘uÆ
 = 
	`wrôe
(
fd
, 
buf
, 
size
);

325 i‡(
a˘uÆ
 == -1)

326  
î∫o
;

327 i‡(
a˘uÆ
 !(Ë
size
)

328  
EXT2_ET_SHORT_READ
;

330 
ôr
 +
size
 << 3;

331 
˙t
 -
size
 << 3;

334 
size
 = 
tŸÆ_size
 % 
fs
->
blocksize
;

335 
	`mem£t
(
buf
, 0, (buf));

336 i‡(
size
) {

337 
size
 = 
fs
->
blocksize
 - size;

338 
size
) {

339 
c
 = 
size
;

340 i‡(
c
 > (Ë(
buf
))

341 
c
 = (
buf
);

342 
a˘uÆ
 = 
	`wrôe
(
fd
, 
buf
, 
c
);

343 i‡(
a˘uÆ
 == -1)

344  
î∫o
;

345 i‡(
a˘uÆ
 !
c
)

346  
EXT2_ET_SHORT_WRITE
;

347 
size
 -
c
;

351 
	}
}

357 
îrcode_t
 
	$ext2fs_image_bôm≠_ªad
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
)

359 
ext2fs_gíîic_bôm≠
 
bm≠
;

360 
îrcode_t
 
îr
, 
ªtvÆ
;

361 
__u32
 
ôr
, 
˙t
;

362 
buf
[1024];

363 
size
;

364 
ssize_t
 
a˘uÆ
;

366 i‡(
Êags
 & 
IMAGER_FLAG_INODEMAP
) {

367 i‡(!
fs
->
öode_m≠
) {

368 
ªtvÆ
 = 
	`ext2fs_ªad_öode_bôm≠
(
fs
);

369 i‡(
ªtvÆ
)

370  
ªtvÆ
;

372 
bm≠
 = 
fs
->
öode_m≠
;

373 
îr
 = 
EXT2_ET_MAGIC_INODE_BITMAP
;

374 
ôr
 = 1;

375 
˙t
 = 
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
Ë* fs->
group_desc_cou¡
;

376 
size
 = (
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
) / 8);

378 i‡(!
fs
->
block_m≠
) {

379 
ªtvÆ
 = 
	`ext2fs_ªad_block_bôm≠
(
fs
);

380 i‡(
ªtvÆ
)

381  
ªtvÆ
;

383 
bm≠
 = 
fs
->
block_m≠
;

384 
îr
 = 
EXT2_ET_MAGIC_BLOCK_BITMAP
;

385 
ôr
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

386 
˙t
 = 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
Ë* fs->
group_desc_cou¡
;

387 
size
 = 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
) / 8;

390 
˙t
 > 0) {

391 
size
 = (
buf
);

392 i‡(
size
 > (
˙t
 >> 3))

393 
size
 = (
˙t
 >> 3);

395 
a˘uÆ
 = 
	`ªad
(
fd
, 
buf
, 
size
);

396 i‡(
a˘uÆ
 == -1)

397  
î∫o
;

398 i‡(
a˘uÆ
 !(Ë
size
)

399  
EXT2_ET_SHORT_READ
;

401 
ªtvÆ
 = 
	`ext2fs_£t_gíîic_bôm≠_ønge
(
bm≠
,

402 
îr
, 
ôr
, 
size
 << 3, 
buf
);

403 i‡(
ªtvÆ
)

404  
ªtvÆ
;

406 
ôr
 +
size
 << 3;

407 
˙t
 -
size
 << 3;

410 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ind_block.c

13 
	~<c⁄fig.h
>

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 #i‡
HAVE_UNISTD_H


18 
	~<uni°d.h
>

21 
	~"ext2_fs.h
"

22 
	~"ext2fs.h
"

24 
îrcode_t
 
	$ext2fs_ªad_öd_block
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, *
buf
)

26 
îrcode_t
 
ªtvÆ
;

27 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

28 
blk_t
 *
block_ƒ
;

29 
i
;

30 
limô
 = 
fs
->
blocksize
 >> 2;

33 i‡((
fs
->
Êags
 & 
EXT2_FLAG_IMAGE_FILE
) &&

34 (
fs
->
io
 !fs->
image_io
))

35 
	`mem£t
(
buf
, 0, 
fs
->
blocksize
);

37 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
blk
, 1, 
buf
);

38 i‡(
ªtvÆ
)

39  
ªtvÆ
;

41 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

42 
block_ƒ
 = (
blk_t
 *Ë
buf
;

43 
i
 = 0; i < 
limô
; i++, 
block_ƒ
++)

44 *
block_ƒ
 = 
	`ext2fs_swab32
(*block_nr);

47 
	}
}

49 
îrcode_t
 
	$ext2fs_wrôe_öd_block
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, *
buf
)

51 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

52 
blk_t
 *
block_ƒ
;

53 
i
;

54 
limô
 = 
fs
->
blocksize
 >> 2;

57 i‡(
fs
->
Êags
 & 
EXT2_FLAG_IMAGE_FILE
)

60 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

61 
block_ƒ
 = (
blk_t
 *Ë
buf
;

62 
i
 = 0; i < 
limô
; i++, 
block_ƒ
++)

63 *
block_ƒ
 = 
	`ext2fs_swab32
(*block_nr);

65  
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
blk
, 1, 
buf
);

66 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/initialize.c

13 
	~<c⁄fig.h
>

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 #i‡
HAVE_UNISTD_H


18 
	~<uni°d.h
>

20 
	~<f˙é.h
>

21 
	~<time.h
>

22 #i‡
HAVE_SYS_STAT_H


23 
	~<sys/°©.h
>

25 #i‡
HAVE_SYS_TYPES_H


26 
	~<sys/ty≥s.h
>

29 
	~"ext2_fs.h
"

30 
	~"ext2fs.h
"

32 #i‡
deföed
(
__löux__
Ë&& deföed(
EXT2_OS_LINUX
)

33 
	#CREATOR_OS
 
EXT2_OS_LINUX


	)

35 #i‡
deföed
(
__GNU__
Ë&& deföed(
EXT2_OS_HURD
)

36 
	#CREATOR_OS
 
EXT2_OS_HURD


	)

38 #i‡
deföed
(
__FªeBSD__
Ë&& deföed(
EXT2_OS_FREEBSD
)

39 
	#CREATOR_OS
 
EXT2_OS_FREEBSD


	)

41 #i‡
deföed
(
LITES
Ë&& deföed(
EXT2_OS_LITES
)

42 
	#CREATOR_OS
 
EXT2_OS_LITES


	)

44 
	#CREATOR_OS
 
EXT2_OS_LINUX


	)

58 #ifde‡
EXT2_DFL_CHECKINTERVAL


59 #unde‡
EXT2_DFL_CHECKINTERVAL


61 
	#EXT2_DFL_CHECKINTERVAL
 (86400L * 180L)

	)

68 
	$ˇlc_ª£rved_gdt_blocks
(
ext2_fûsys
 
fs
)

70 
ext2_su≥r_block
 *
sb
 = 
fs
->
su≥r
;

71 
bpg
 = 
sb
->
s_blocks_≥r_group
;

72 
gdpb
 = 
	`EXT2_DESC_PER_BLOCK
(
sb
);

73 
max_blocks
 = 0xffffffff;

74 
rsv_groups
;

75 
rsv_gdb
;

80 i‡(
sb
->
s_blocks_cou¡
 < 
max_blocks
 / 1024)

81 
max_blocks
 = 
sb
->
s_blocks_cou¡
 * 1024;

82 
rsv_groups
 = 
	`ext2fs_div_˚û
(
max_blocks
 - 
sb
->
s_fú°_d©a_block
, 
bpg
);

83 
rsv_gdb
 = 
	`ext2fs_div_˚û
(
rsv_groups
, 
gdpb
Ë- 
fs
->
desc_blocks
;

84 i‡(
rsv_gdb
 > 
	`EXT2_ADDR_PER_BLOCK
(
sb
))

85 
rsv_gdb
 = 
	`EXT2_ADDR_PER_BLOCK
(
sb
);

86 #ifde‡
RES_GDT_DEBUG


87 
	`¥ötf
("max_blocks %lu,Ñsv_groups = %lu,Ñsv_gdb = %u\n",

88 
max_blocks
, 
rsv_groups
, 
rsv_gdb
);

91  
rsv_gdb
;

92 
	}
}

94 
îrcode_t
 
	$ext2fs_öôülize
(c⁄° *
«me
, 
Êags
,

95 
ext2_su≥r_block
 *
∑øm
,

96 
io_m™agî
 
m™agî
, 
ext2_fûsys
 *
ªt_fs
)

98 
ext2_fûsys
 
fs
;

99 
îrcode_t
 
ªtvÆ
;

100 
ext2_su≥r_block
 *
su≥r
;

101 
‰ags_≥r_block
;

102 
ªm
;

103 
ovîhód
 = 0;

104 
ùg
;

105 
dgΩ_t
 
i
;

106 
blk_t
 
numblocks
;

107 
rsv_gdt
;

108 
csum_Êag
;

109 
io_Êags
;

110 *
buf
 = 0;

111 
c
;

113 i‡(!
∑øm
 || !∑øm->
s_blocks_cou¡
)

114  
EXT2_ET_INVALID_ARGUMENT
;

116 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
°ru˘_ext2_fûsys
), &
fs
);

117 i‡(
ªtvÆ
)

118  
ªtvÆ
;

120 
	`mem£t
(
fs
, 0, (
°ru˘_ext2_fûsys
));

121 
fs
->
magic
 = 
EXT2_ET_MAGIC_EXT2FS_FILSYS
;

122 
fs
->
Êags
 = fœg†| 
EXT2_FLAG_RW
;

123 
fs
->
umask
 = 022;

124 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

125 
fs
->
Êags
 |
EXT2_FLAG_SWAP_BYTES
;

127 
io_Êags
 = 
IO_FLAG_RW
;

128 i‡(
Êags
 & 
EXT2_FLAG_EXCLUSIVE
)

129 
io_Êags
 |
IO_FLAG_EXCLUSIVE
;

130 
ªtvÆ
 = 
m™agî
->
	`›í
(
«me
, 
io_Êags
, &
fs
->
io
);

131 i‡(
ªtvÆ
)

132 
˛ónup
;

133 
fs
->
image_io
 = fs->
io
;

134 
fs
->
io
->
≠p_d©a
 = fs;

135 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
	`°æí
(
«me
)+1, &
fs
->
devi˚_«me
);

136 i‡(
ªtvÆ
)

137 
˛ónup
;

139 
	`°r˝y
(
fs
->
devi˚_«me
, 
«me
);

140 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
SUPERBLOCK_SIZE
, &
su≥r
);

141 i‡(
ªtvÆ
)

142 
˛ónup
;

143 
fs
->
su≥r
 = super;

145 
	`mem£t
(
su≥r
, 0, 
SUPERBLOCK_SIZE
);

147 
	#£t_fõld
(
fõld
, Ë(
su≥r
->fõld = 
∑øm
->field ? \

148 
∑øm
->
fõld
 : ())

	)

150 
su≥r
->
s_magic
 = 
EXT2_SUPER_MAGIC
;

151 
su≥r
->
s_°©e
 = 
EXT2_VALID_FS
;

153 
	`£t_fõld
(
s_log_block_size
, 0);

154 
	`£t_fõld
(
s_log_‰ag_size
, 0);

155 
	`£t_fõld
(
s_fú°_d©a_block
, 
su≥r
->
s_log_block_size
 ? 0 : 1);

156 
	`£t_fõld
(
s_max_m¡_cou¡
, 
EXT2_DFL_MAX_MNT_COUNT
);

157 
	`£t_fõld
(
s_îr‹s
, 
EXT2_ERRORS_DEFAULT
);

158 
	`£t_fõld
(
s_„©uª_com∑t
, 0);

159 
	`£t_fõld
(
s_„©uª_öcom∑t
, 0);

160 
	`£t_fõld
(
s_„©uª_ro_com∑t
, 0);

161 
	`£t_fõld
(
s_fú°_mëa_bg
, 0);

162 
	`£t_fõld
(
s_øid_°ride
, 0);

163 
	`£t_fõld
(
s_øid_°rùe_width
, 0);

164 
	`£t_fõld
(
s_log_groups_≥r_Êex
, 0);

165 
	`£t_fõld
(
s_Êags
, 0);

166 i‡(
su≥r
->
s_„©uª_öcom∑t
 & ~
EXT2_LIB_FEATURE_INCOMPAT_SUPP
) {

167 
ªtvÆ
 = 
EXT2_ET_UNSUPP_FEATURE
;

168 
˛ónup
;

170 i‡(
su≥r
->
s_„©uª_ro_com∑t
 & ~
EXT2_LIB_FEATURE_RO_COMPAT_SUPP
) {

171 
ªtvÆ
 = 
EXT2_ET_RO_UNSUPP_FEATURE
;

172 
˛ónup
;

175 
	`£t_fõld
(
s_ªv_Àvñ
, 
EXT2_GOOD_OLD_REV
);

176 i‡(
su≥r
->
s_ªv_Àvñ
 >
EXT2_DYNAMIC_REV
) {

177 
	`£t_fõld
(
s_fú°_öo
, 
EXT2_GOOD_OLD_FIRST_INO
);

178 
	`£t_fõld
(
s_öode_size
, 
EXT2_GOOD_OLD_INODE_SIZE
);

179 i‡(
su≥r
->
s_öode_size
 >(
ext2_öode_œrge
)) {

180 
exåa_isize
 = (
ext2_öode_œrge
) -

181 
EXT2_GOOD_OLD_INODE_SIZE
;

182 
	`£t_fõld
(
s_mö_exåa_isize
, 
exåa_isize
);

183 
	`£t_fõld
(
s_w™t_exåa_isize
, 
exåa_isize
);

186 
su≥r
->
s_fú°_öo
 = 
EXT2_GOOD_OLD_FIRST_INO
;

187 
su≥r
->
s_öode_size
 = 
EXT2_GOOD_OLD_INODE_SIZE
;

190 
	`£t_fõld
(
s_checköãrvÆ
, 
EXT2_DFL_CHECKINTERVAL
);

191 
su≥r
->
s_mkfs_time
 = su≥r->
s_œ°check
 = 
fs
->
now
 ? fs->now : 
	`time
(
NULL
);

193 
su≥r
->
s_¸ót‹_os
 = 
CREATOR_OS
;

195 
fs
->
blocksize
 = 
	`EXT2_BLOCK_SIZE
(
su≥r
);

196 
fs
->
‰agsize
 = 
	`EXT2_FRAG_SIZE
(
su≥r
);

197 
‰ags_≥r_block
 = 
fs
->
blocksize
 / fs->
‰agsize
;

200 
	`£t_fõld
(
s_blocks_≥r_group
, 
fs
->
blocksize
 * 8);

201 i‡(
su≥r
->
s_blocks_≥r_group
 > 
	`EXT2_MAX_BLOCKS_PER_GROUP
(super))

202 
su≥r
->
s_blocks_≥r_group
 = 
	`EXT2_MAX_BLOCKS_PER_GROUP
(super);

203 
su≥r
->
s_‰ags_≥r_group
 = su≥r->
s_blocks_≥r_group
 * 
‰ags_≥r_block
;

205 
su≥r
->
s_blocks_cou¡
 = 
∑øm
->s_blocks_count;

206 
su≥r
->
s_r_blocks_cou¡
 = 
∑øm
->s_r_blocks_count;

207 i‡(
su≥r
->
s_r_blocks_cou¡
 >
∑øm
->
s_blocks_cou¡
) {

208 
ªtvÆ
 = 
EXT2_ET_INVALID_ARGUMENT
;

209 
˛ónup
;

216 i‡(
su≥r
->
s_„©uª_öcom∑t
 & 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
) {

217 
fs
->
group_desc_cou¡
 = 0;

218 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

219 *
ªt_fs
 = 
fs
;

223 
ªåy
:

224 
fs
->
group_desc_cou¡
 = 
	`ext2fs_div_˚û
(
su≥r
->
s_blocks_cou¡
 -

225 
su≥r
->
s_fú°_d©a_block
,

226 
	`EXT2_BLOCKS_PER_GROUP
(
su≥r
));

227 i‡(
fs
->
group_desc_cou¡
 == 0) {

228 
ªtvÆ
 = 
EXT2_ET_TOOSMALL
;

229 
˛ónup
;

231 
fs
->
desc_blocks
 = 
	`ext2fs_div_˚û
(fs->
group_desc_cou¡
,

232 
	`EXT2_DESC_PER_BLOCK
(
su≥r
));

234 
i
 = 
fs
->
blocksize
 >= 4096 ? 1 : 4096 / fs->blocksize;

235 
	`£t_fõld
(
s_öodes_cou¡
, 
su≥r
->
s_blocks_cou¡
 / 
i
);

241 i‡(
su≥r
->
s_öodes_cou¡
 < 
	`EXT2_FIRST_INODE
(super)+1)

242 
su≥r
->
s_öodes_cou¡
 = 
	`EXT2_FIRST_INODE
(super)+1;

250 
ùg
 = 
	`ext2fs_div_˚û
(
su≥r
->
s_öodes_cou¡
, 
fs
->
group_desc_cou¡
);

251 i‡(
ùg
 > 
fs
->
blocksize
 * 8) {

252 i‡(
su≥r
->
s_blocks_≥r_group
 >= 256) {

254 
su≥r
->
s_blocks_≥r_group
 -= 8;

255 
su≥r
->
s_blocks_cou¡
 = 
∑øm
->s_blocks_count;

256 
su≥r
->
s_‰ags_≥r_group
 = su≥r->
s_blocks_≥r_group
 *

257 
‰ags_≥r_block
;

258 
ªåy
;

260 
ªtvÆ
 = 
EXT2_ET_TOO_MANY_INODES
;

261 
˛ónup
;

265 i‡(
ùg
 > (Ë
	`EXT2_MAX_INODES_PER_GROUP
(
su≥r
))

266 
ùg
 = 
	`EXT2_MAX_INODES_PER_GROUP
(
su≥r
);

268 
ùg_ªåy
:

269 
su≥r
->
s_öodes_≥r_group
 = 
ùg
;

276 
fs
->
öode_blocks_≥r_group
 = (((
su≥r
->
s_öodes_≥r_group
 *

277 
	`EXT2_INODE_SIZE
(
su≥r
)) +

278 
	`EXT2_BLOCK_SIZE
(
su≥r
) - 1) /

279 
	`EXT2_BLOCK_SIZE
(
su≥r
));

280 
su≥r
->
s_öodes_≥r_group
 = ((
fs
->
öode_blocks_≥r_group
 *

281 
	`EXT2_BLOCK_SIZE
(
su≥r
)) /

282 
	`EXT2_INODE_SIZE
(
su≥r
));

288 
su≥r
->
s_öodes_≥r_group
 &= ~7;

289 
fs
->
öode_blocks_≥r_group
 = (((
su≥r
->
s_öodes_≥r_group
 *

290 
	`EXT2_INODE_SIZE
(
su≥r
)) +

291 
	`EXT2_BLOCK_SIZE
(
su≥r
) - 1) /

292 
	`EXT2_BLOCK_SIZE
(
su≥r
));

297 i‡((
__u64
)
su≥r
->
s_öodes_≥r_group
 * 
fs
->
group_desc_cou¡
 > ~0U) {

298 
ùg
--;

299 
ùg_ªåy
;

301 
su≥r
->
s_öodes_cou¡
 = su≥r->
s_öodes_≥r_group
 *

302 
fs
->
group_desc_cou¡
;

303 
su≥r
->
s_‰ì_öodes_cou¡
 = su≥r->
s_öodes_cou¡
;

308 i‡(
su≥r
->
s_„©uª_com∑t
 & 
EXT2_FEATURE_COMPAT_RESIZE_INODE
)

309 
rsv_gdt
 = 
	`ˇlc_ª£rved_gdt_blocks
(
fs
);

311 
rsv_gdt
 = 0;

312 
	`£t_fõld
(
s_ª£rved_gdt_blocks
, 
rsv_gdt
);

313 i‡(
su≥r
->
s_ª£rved_gdt_blocks
 > 
	`EXT2_ADDR_PER_BLOCK
(super)) {

314 
ªtvÆ
 = 
EXT2_ET_RES_GDT_BLOCKS
;

315 
˛ónup
;

324 
ovîhód
 = (Ë(3 + 
fs
->
öode_blocks_≥r_group
 +

325 
fs
->
desc_blocks
 + 
su≥r
->
s_ª£rved_gdt_blocks
);

328 i‡(
ovîhód
 > 
su≥r
->
s_blocks_≥r_group
) {

329 
ªtvÆ
 = 
EXT2_ET_TOO_MANY_INODES
;

330 
˛ónup
;

340 
ovîhód
 = (Ë(2 + 
fs
->
öode_blocks_≥r_group
);

341 i‡(
	`ext2fs_bg_has_su≥r
(
fs
, fs->
group_desc_cou¡
 - 1))

342 
ovîhód
 +1 + 
fs
->
desc_blocks
 + 
su≥r
->
s_ª£rved_gdt_blocks
;

343 
ªm
 = ((
su≥r
->
s_blocks_cou¡
 - su≥r->
s_fú°_d©a_block
) %

344 
su≥r
->
s_blocks_≥r_group
);

345 i‡((
fs
->
group_desc_cou¡
 =1Ë&& 
ªm
 && (ªm < 
ovîhód
)) {

346 
ªtvÆ
 = 
EXT2_ET_TOOSMALL
;

347 
˛ónup
;

349 i‡(
ªm
 && (ªm < 
ovîhód
+50)) {

350 
su≥r
->
s_blocks_cou¡
 -
ªm
;

351 
ªåy
;

360 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
	`°æí
(
fs
->
devi˚_«me
Ë+ 80, &
buf
);

361 i‡(
ªtvÆ
)

362 
˛ónup
;

364 
	`°r˝y
(
buf
, "block bitmap for ");

365 
	`°rˇt
(
buf
, 
fs
->
devi˚_«me
);

366 
ªtvÆ
 = 
	`ext2fs_Æloˇã_block_bôm≠
(
fs
, 
buf
, &fs->
block_m≠
);

367 i‡(
ªtvÆ
)

368 
˛ónup
;

370 
	`°r˝y
(
buf
, "inode bitmap for ");

371 
	`°rˇt
(
buf
, 
fs
->
devi˚_«me
);

372 
ªtvÆ
 = 
	`ext2fs_Æloˇã_öode_bôm≠
(
fs
, 
buf
, &fs->
öode_m≠
);

373 i‡(
ªtvÆ
)

374 
˛ónup
;

376 
	`ext2fs_‰ì_mem
(&
buf
);

378 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(
fs
->
desc_blocks
, fs->
blocksize
,

379 &
fs
->
group_desc
);

380 i‡(
ªtvÆ
)

381 
˛ónup
;

383 
	`mem£t
(
fs
->
group_desc
, 0, (
size_t
Ëfs->
desc_blocks
 * fs->
blocksize
);

396 
su≥r
->
s_‰ì_blocks_cou¡
 = 0;

397 
csum_Êag
 = 
	`EXT2_HAS_RO_COMPAT_FEATURE
(
fs
->
su≥r
,

398 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
);

399 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++) {

404 i‡(
csum_Êag
) {

405 i‡(
i
 !
fs
->
group_desc_cou¡
 - 1)

406 
fs
->
group_desc
[
i
].
bg_Êags
 |=

407 
EXT2_BG_BLOCK_UNINIT
;

408 
fs
->
group_desc
[
i
].
bg_Êags
 |
EXT2_BG_INODE_UNINIT
;

409 
numblocks
 = 
su≥r
->
s_öodes_≥r_group
;

410 i‡(
i
 == 0)

411 
numblocks
 -
su≥r
->
s_fú°_öo
;

412 
fs
->
group_desc
[
i
].
bg_ôabÀ_unu£d
 = 
numblocks
;

414 
numblocks
 = 
	`ext2fs_ª£rve_su≥r_™d_bgd
(
fs
, 
i
, fs->
block_m≠
);

415 i‡(
fs
->
su≥r
->
s_log_groups_≥r_Êex
)

416 
numblocks
 +2 + 
fs
->
öode_blocks_≥r_group
;

418 
su≥r
->
s_‰ì_blocks_cou¡
 +
numblocks
;

419 
fs
->
group_desc
[
i
].
bg_‰ì_blocks_cou¡
 = 
numblocks
;

420 
fs
->
group_desc
[
i
].
bg_‰ì_öodes_cou¡
 =

421 
fs
->
su≥r
->
s_öodes_≥r_group
;

422 
fs
->
group_desc
[
i
].
bg_u£d_dús_cou¡
 = 0;

423 
	`ext2fs_group_desc_csum_£t
(
fs
, 
i
);

426 
c
 = () 255;

427 i‡(((Ë
c
) == -1) {

428 
su≥r
->
s_Êags
 |
EXT2_FLAGS_SIGNED_HASH
;

430 
su≥r
->
s_Êags
 |
EXT2_FLAGS_UNSIGNED_HASH
;

433 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

434 
	`ext2fs_m¨k_bb_dúty
(
fs
);

435 
	`ext2fs_m¨k_ib_dúty
(
fs
);

437 
	`io_ch™√l_£t_blksize
(
fs
->
io
, fs->
blocksize
);

439 *
ªt_fs
 = 
fs
;

441 
˛ónup
:

442 
	`‰ì
(
buf
);

443 
	`ext2fs_‰ì
(
fs
);

444  
ªtvÆ
;

445 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/inline.c

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 #i‡
HAVE_UNISTD_H


18 
	~<uni°d.h
>

20 
	~<f˙é.h
>

21 
	~<time.h
>

22 #i‡
HAVE_SYS_STAT_H


23 
	~<sys/°©.h
>

25 #i‡
HAVE_SYS_TYPES_H


26 
	~<sys/ty≥s.h
>

29 
	~"ext2_fs.h
"

30 
	#INCLUDE_INLINE_FUNCS


	)

31 
	~"ext2fs.h
"

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/inode.c

12 
	~<c⁄fig.h
>

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 #i‡
HAVE_UNISTD_H


17 
	~<uni°d.h
>

19 #i‡
HAVE_ERRNO_H


20 
	~<î∫o.h
>

22 
	~<time.h
>

23 #i‡
HAVE_SYS_STAT_H


24 
	~<sys/°©.h
>

26 #i‡
HAVE_SYS_TYPES_H


27 
	~<sys/ty≥s.h
>

30 
	~"ext2_fs.h
"

31 
	~"ext2fsP.h
"

32 
	~"e2image.h
"

34 
	sext2_°ru˘_öode_sˇn
 {

35 
îrcode_t
 
	mmagic
;

36 
ext2_fûsys
 
	mfs
;

37 
ext2_öo_t
 
	mcuºít_öode
;

38 
blk_t
 
	mcuºít_block
;

39 
dgΩ_t
 
	mcuºít_group
;

40 
ext2_öo_t
 
	möodes_À·
;

41 
blk_t
 
	mblocks_À·
;

42 
dgΩ_t
 
	mgroups_À·
;

43 
blk_t
 
	möode_buf„r_blocks
;

44 * 
	möode_buf„r
;

45 
	möode_size
;

46 * 
	m±r
;

47 
	mbyãs_À·
;

48 *
	mãmp_buf„r
;

49 
îrcode_t
 (*
d⁄e_group
)(
ext2_fûsys
 
	mfs
,

50 
ext2_öode_sˇn
 
	msˇn
,

51 
dgΩ_t
 
	mgroup
,

52 * 
	m¥iv_d©a
);

53 * 
	md⁄e_group_d©a
;

54 
	mbad_block_±r
;

55 
	msˇn_Êags
;

56 
	mª£rved
[6];

62 
îrcode_t
 
	$ext2fs_Êush_iˇche
(
ext2_fûsys
 
fs
)

64 
i
;

66 i‡(!
fs
->
iˇche
)

69 
i
=0; i < 
fs
->
iˇche
->
ˇche_size
; i++)

70 
fs
->
iˇche
->
ˇche
[
i
].
öo
 = 0;

72 
fs
->
iˇche
->
buf„r_blk
 = 0;

74 
	}
}

76 
îrcode_t
 
	$¸óã_iˇche
(
ext2_fûsys
 
fs
)

78 
îrcode_t
 
ªtvÆ
;

80 i‡(
fs
->
iˇche
)

82 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ext2_öode_ˇche
), &
fs
->
iˇche
);

83 i‡(
ªtvÆ
)

84  
ªtvÆ
;

86 
	`mem£t
(
fs
->
iˇche
, 0, (
ext2_öode_ˇche
));

87 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &fs->
iˇche
->
buf„r
);

88 i‡(
ªtvÆ
) {

89 
	`ext2fs_‰ì_mem
(&
fs
->
iˇche
);

90  
ªtvÆ
;

92 
fs
->
iˇche
->
buf„r_blk
 = 0;

93 
fs
->
iˇche
->
ˇche_œ°
 = -1;

94 
fs
->
iˇche
->
ˇche_size
 = 4;

95 
fs
->
iˇche
->
ªfcou¡
 = 1;

96 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(
fs
->
iˇche
->
ˇche_size
,

97 (
ext2_öode_ˇche_ít
),

98 &
fs
->
iˇche
->
ˇche
);

99 i‡(
ªtvÆ
) {

100 
	`ext2fs_‰ì_mem
(&
fs
->
iˇche
->
buf„r
);

101 
	`ext2fs_‰ì_mem
(&
fs
->
iˇche
);

102  
ªtvÆ
;

104 
	`ext2fs_Êush_iˇche
(
fs
);

106 
	}
}

108 
îrcode_t
 
	$ext2fs_›í_öode_sˇn
(
ext2_fûsys
 
fs
, 
buf„r_blocks
,

109 
ext2_öode_sˇn
 *
ªt_sˇn
)

111 
ext2_öode_sˇn
 
sˇn
;

112 
îrcode_t
 
ªtvÆ
;

113 
	`îrcode_t
 (*
ßve_gë_blocks
)(
ext2_fûsys
 
f
, 
ext2_öo_t
 
öo
, 
blk_t
 *
blocks
);

115 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

121 i‡(
fs
->
badblocks
 == 0) {

126 
ßve_gë_blocks
 = 
fs
->
gë_blocks
;

127 
fs
->
gë_blocks
 = 0;

128 
ªtvÆ
 = 
	`ext2fs_ªad_bb_öode
(
fs
, &fs->
badblocks
);

129 i‡(
ªtvÆ
 && 
fs
->
badblocks
) {

130 
	`ext2fs_badblocks_li°_‰ì
(
fs
->
badblocks
);

131 
fs
->
badblocks
 = 0;

133 
fs
->
gë_blocks
 = 
ßve_gë_blocks
;

136 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ext2_°ru˘_öode_sˇn
), &
sˇn
);

137 i‡(
ªtvÆ
)

138  
ªtvÆ
;

139 
	`mem£t
(
sˇn
, 0, (
ext2_°ru˘_öode_sˇn
));

141 
sˇn
->
magic
 = 
EXT2_ET_MAGIC_INODE_SCAN
;

142 
sˇn
->
fs
 = fs;

143 
sˇn
->
öode_size
 = 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
);

144 
sˇn
->
byãs_À·
 = 0;

145 
sˇn
->
cuºít_group
 = 0;

146 
sˇn
->
groups_À·
 = 
fs
->
group_desc_cou¡
 - 1;

147 
sˇn
->
öode_buf„r_blocks
 = 
buf„r_blocks
 ? buffer_blocks : 8;

148 
sˇn
->
cuºít_block
 = sˇn->
fs
->

149 
group_desc
[
sˇn
->
cuºít_group
].
bg_öode_èbÀ
;

150 
sˇn
->
öodes_À·
 = 
	`EXT2_INODES_PER_GROUP
(sˇn->
fs
->
su≥r
);

151 
sˇn
->
blocks_À·
 = sˇn->
fs
->
öode_blocks_≥r_group
;

152 i‡(
	`EXT2_HAS_RO_COMPAT_FEATURE
(
fs
->
su≥r
,

153 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
)) {

154 
sˇn
->
öodes_À·
 -=

155 
fs
->
group_desc
[
sˇn
->
cuºít_group
].
bg_ôabÀ_unu£d
;

156 
sˇn
->
blocks_À·
 =

157 (
sˇn
->
öodes_À·
 +

158 (
fs
->
blocksize
 / 
sˇn
->
öode_size
 - 1)) *

159 
sˇn
->
öode_size
 / 
fs
->
blocksize
;

161 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(
sˇn
->
öode_buf„r_blocks
,

162 
fs
->
blocksize
,

163 &
sˇn
->
öode_buf„r
);

164 
sˇn
->
d⁄e_group
 = 0;

165 
sˇn
->
d⁄e_group_d©a
 = 0;

166 
sˇn
->
bad_block_±r
 = 0;

167 i‡(
ªtvÆ
) {

168 
	`ext2fs_‰ì_mem
(&
sˇn
);

169  
ªtvÆ
;

171 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
sˇn
->
öode_size
, &sˇn->
ãmp_buf„r
);

172 i‡(
ªtvÆ
) {

173 
	`ext2fs_‰ì_mem
(&
sˇn
->
öode_buf„r
);

174 
	`ext2fs_‰ì_mem
(&
sˇn
);

175  
ªtvÆ
;

177 i‡(
sˇn
->
fs
->
badblocks
 && sˇn->fs->badblocks->
num
)

178 
sˇn
->
sˇn_Êags
 |
EXT2_SF_CHK_BADBLOCKS
;

179 i‡(
	`EXT2_HAS_RO_COMPAT_FEATURE
(
fs
->
su≥r
,

180 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
))

181 
sˇn
->
sˇn_Êags
 |
EXT2_SF_DO_LAZY
;

182 *
ªt_sˇn
 = 
sˇn
;

184 
	}
}

186 
	$ext2fs_˛o£_öode_sˇn
(
ext2_öode_sˇn
 
sˇn
)

188 i‡(!
sˇn
 || (sˇn->
magic
 !
EXT2_ET_MAGIC_INODE_SCAN
))

191 
	`ext2fs_‰ì_mem
(&
sˇn
->
öode_buf„r
);

192 
sˇn
->
öode_buf„r
 = 
NULL
;

193 
	`ext2fs_‰ì_mem
(&
sˇn
->
ãmp_buf„r
);

194 
sˇn
->
ãmp_buf„r
 = 
NULL
;

195 
	`ext2fs_‰ì_mem
(&
sˇn
);

197 
	}
}

199 
ext2fs_£t_öode_ˇŒback
(
ext2_öode_sˇn
 
sˇn
,

200 
	$îrcode_t
 (*
d⁄e_group
)(
ext2_fûsys
 
fs
,

201 
ext2_öode_sˇn
 
sˇn
,

202 
dgΩ_t
 
group
,

203 * 
¥iv_d©a
),

204 *
d⁄e_group_d©a
)

206 i‡(!
sˇn
 || (sˇn->
magic
 !
EXT2_ET_MAGIC_INODE_SCAN
))

209 
sˇn
->
d⁄e_group
 = done_group;

210 
sˇn
->
d⁄e_group_d©a
 = done_group_data;

211 
	}
}

213 
	$ext2fs_öode_sˇn_Êags
(
ext2_öode_sˇn
 
sˇn
, 
£t_Êags
,

214 
˛ór_Êags
)

216 
ﬁd_Êags
;

218 i‡(!
sˇn
 || (sˇn->
magic
 !
EXT2_ET_MAGIC_INODE_SCAN
))

221 
ﬁd_Êags
 = 
sˇn
->
sˇn_Êags
;

222 
sˇn
->
sˇn_Êags
 &~
˛ór_Êags
;

223 
sˇn
->
sˇn_Êags
 |
£t_Êags
;

224  
ﬁd_Êags
;

225 
	}
}

231 
îrcode_t
 
	$gë_√xt_blockgroup
(
ext2_öode_sˇn
 
sˇn
)

233 
ext2_fûsys
 
fs
 = 
sˇn
->fs;

235 
sˇn
->
cuºít_group
++;

236 
sˇn
->
groups_À·
--;

238 
sˇn
->
cuºít_block
 =
fs
->
group_desc
[sˇn->
cuºít_group
].
bg_öode_èbÀ
;

240 
sˇn
->
cuºít_öode
 = sˇn->
cuºít_group
 *

241 
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
);

243 
sˇn
->
byãs_À·
 = 0;

244 
sˇn
->
öodes_À·
 = 
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
);

245 
sˇn
->
blocks_À·
 = 
fs
->
öode_blocks_≥r_group
;

246 i‡(
	`EXT2_HAS_RO_COMPAT_FEATURE
(
fs
->
su≥r
,

247 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
)) {

248 
sˇn
->
öodes_À·
 -=

249 
fs
->
group_desc
[
sˇn
->
cuºít_group
].
bg_ôabÀ_unu£d
;

250 
sˇn
->
blocks_À·
 =

251 (
sˇn
->
öodes_À·
 +

252 (
fs
->
blocksize
 / 
sˇn
->
öode_size
 - 1)) *

253 
sˇn
->
öode_size
 / 
fs
->
blocksize
;

257 
	}
}

259 
îrcode_t
 
	$ext2fs_öode_sˇn_gŸo_blockgroup
(
ext2_öode_sˇn
 
sˇn
,

260 
group
)

262 
sˇn
->
cuºít_group
 = 
group
 - 1;

263 
sˇn
->
groups_À·
 = sˇn->
fs
->
group_desc_cou¡
 - 
group
;

264  
	`gë_√xt_blockgroup
(
sˇn
);

265 
	}
}

274 
îrcode_t
 
	$check_f‹_öode_bad_blocks
(
ext2_öode_sˇn
 
sˇn
,

275 
blk_t
 *
num_blocks
)

277 
blk_t
 
blk
 = 
sˇn
->
cuºít_block
;

278 
badblocks_li°
 
bb
 = 
sˇn
->
fs
->
badblocks
;

284 i‡(
blk
 == 0)

293 
blk
 > 
bb
->
li°
[
sˇn
->
bad_block_±r
]) {

294 i‡(++
sˇn
->
bad_block_±r
 >
bb
->
num
) {

295 
sˇn
->
sˇn_Êags
 &~
EXT2_SF_CHK_BADBLOCKS
;

308 i‡(
blk
 =
bb
->
li°
[
sˇn
->
bad_block_±r
]) {

309 
sˇn
->
sˇn_Êags
 |
EXT2_SF_BAD_INODE_BLK
;

310 *
num_blocks
 = 1;

311 i‡(++
sˇn
->
bad_block_±r
 >
bb
->
num
)

312 
sˇn
->
sˇn_Êags
 &~
EXT2_SF_CHK_BADBLOCKS
;

322 i‡((
blk
 + *
num_blocks
Ë> 
bb
->
li°
[
sˇn
->
bad_block_±r
])

323 *
num_blocks
 = (Ë(
bb
->
li°
[
sˇn
->
bad_block_±r
] - 
blk
);

326 
	}
}

332 
îrcode_t
 
	$gë_√xt_blocks
(
ext2_öode_sˇn
 
sˇn
)

334 
blk_t
 
num_blocks
;

335 
îrcode_t
 
ªtvÆ
;

342 
num_blocks
 = 
sˇn
->
öode_buf„r_blocks
;

343 i‡(
num_blocks
 > 
sˇn
->
blocks_À·
)

344 
num_blocks
 = 
sˇn
->
blocks_À·
;

350 i‡(
sˇn
->
sˇn_Êags
 & 
EXT2_SF_BAD_INODE_BLK
) {

351 i‡(
sˇn
->
byãs_À·
)

352 
sˇn
->
sˇn_Êags
 |
EXT2_SF_BAD_EXTRA_BYTES
;

353 
sˇn
->
sˇn_Êags
 &~
EXT2_SF_BAD_INODE_BLK
;

359 i‡(
sˇn
->
sˇn_Êags
 & 
EXT2_SF_CHK_BADBLOCKS
) {

360 
ªtvÆ
 = 
	`check_f‹_öode_bad_blocks
(
sˇn
, &
num_blocks
);

361 i‡(
ªtvÆ
)

362  
ªtvÆ
;

365 i‡((
sˇn
->
sˇn_Êags
 & 
EXT2_SF_BAD_INODE_BLK
) ||

366 (
sˇn
->
cuºít_block
 == 0)) {

367 
	`mem£t
(
sˇn
->
öode_buf„r
, 0,

368 (
size_t
Ë
num_blocks
 * 
sˇn
->
fs
->
blocksize
);

370 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
sˇn
->
fs
->
io
,

371 
sˇn
->
cuºít_block
,

372 (Ë
num_blocks
,

373 
sˇn
->
öode_buf„r
);

374 i‡(
ªtvÆ
)

375  
EXT2_ET_NEXT_INODE_READ
;

377 
sˇn
->
±r
 = sˇn->
öode_buf„r
;

378 
sˇn
->
byãs_À·
 = 
num_blocks
 * sˇn->
fs
->
blocksize
;

380 
sˇn
->
blocks_À·
 -
num_blocks
;

381 i‡(
sˇn
->
cuºít_block
)

382 
sˇn
->
cuºít_block
 +
num_blocks
;

384 
	}
}

393 
ölöe
 
	$is_em±y_sˇn
(
ext2_öode_sˇn
 
sˇn
)

395 
i
;

397 i‡(
sˇn
->
byãs_À·
 == 0)

400 
i
=0; i < 
sˇn
->
byãs_À·
; i++)

401 i‡(
sˇn
->
±r
[
i
])

404 
	}
}

407 
îrcode_t
 
	$ext2fs_gë_√xt_öode_fuŒ
(
ext2_öode_sˇn
 
sˇn
, 
ext2_öo_t
 *
öo
,

408 
ext2_öode
 *
öode
, 
bufsize
)

410 
îrcode_t
 
ªtvÆ
;

411 
exåa_byãs
 = 0;

413 
	`EXT2_CHECK_MAGIC
(
sˇn
, 
EXT2_ET_MAGIC_INODE_SCAN
);

418 i‡(
sˇn
->
öodes_À·
 <= 0) {

419 
f‹˚_√w_group
:

420 i‡(
sˇn
->
d⁄e_group
) {

421 
ªtvÆ
 = (
sˇn
->
d⁄e_group
)

422 (
sˇn
->
fs
, sˇn, sˇn->
cuºít_group
,

423 
sˇn
->
d⁄e_group_d©a
);

424 i‡(
ªtvÆ
)

425  
ªtvÆ
;

427 i‡(
sˇn
->
groups_À·
 <= 0) {

428 *
öo
 = 0;

431 
ªtvÆ
 = 
	`gë_√xt_blockgroup
(
sˇn
);

432 i‡(
ªtvÆ
)

433  
ªtvÆ
;

439 i‡((
sˇn
->
sˇn_Êags
 & 
EXT2_SF_DO_LAZY
) &&

440 (
sˇn
->
fs
->
group_desc
[sˇn->
cuºít_group
].
bg_Êags
 &

441 
EXT2_BG_INODE_UNINIT
))

442 
f‹˚_√w_group
;

443 i‡(
sˇn
->
öodes_À·
 == 0)

444 
f‹˚_√w_group
;

445 i‡(
sˇn
->
cuºít_block
 == 0) {

446 i‡(
sˇn
->
sˇn_Êags
 & 
EXT2_SF_SKIP_MISSING_ITABLE
) {

447 
f‹˚_√w_group
;

449  
EXT2_ET_MISSING_INODE_TABLE
;

457 i‡(
sˇn
->
byãs_À·
 < sˇn->
öode_size
) {

458 
	`mem˝y
(
sˇn
->
ãmp_buf„r
, sˇn->
±r
, sˇn->
byãs_À·
);

459 
exåa_byãs
 = 
sˇn
->
byãs_À·
;

461 
ªtvÆ
 = 
	`gë_√xt_blocks
(
sˇn
);

462 i‡(
ªtvÆ
)

463  
ªtvÆ
;

469 i‡(
	`is_em±y_sˇn
(
sˇn
))

470 
f‹˚_√w_group
;

474 
ªtvÆ
 = 0;

475 i‡(
exåa_byãs
) {

476 
	`mem˝y
(
sˇn
->
ãmp_buf„r
+
exåa_byãs
, sˇn->
±r
,

477 
sˇn
->
öode_size
 - 
exåa_byãs
);

478 
sˇn
->
±r
 +sˇn->
öode_size
 - 
exåa_byãs
;

479 
sˇn
->
byãs_À·
 -sˇn->
öode_size
 - 
exåa_byãs
;

481 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

482 
	`mem£t
(
öode
, 0, 
bufsize
);

483 
	`ext2fs_sw≠_öode_fuŒ
(
sˇn
->
fs
,

484 (
ext2_öode_œrge
 *Ë
öode
,

485 (
ext2_öode_œrge
 *Ë
sˇn
->
ãmp_buf„r
,

486 0, 
bufsize
);

488 *
öode
 = *((
ext2_öode
 *Ë
sˇn
->
ãmp_buf„r
);

490 i‡(
sˇn
->
sˇn_Êags
 & 
EXT2_SF_BAD_EXTRA_BYTES
)

491 
ªtvÆ
 = 
EXT2_ET_BAD_BLOCK_IN_INODE_TABLE
;

492 
sˇn
->
sˇn_Êags
 &~
EXT2_SF_BAD_EXTRA_BYTES
;

494 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

495 
	`mem£t
(
öode
, 0, 
bufsize
);

496 
	`ext2fs_sw≠_öode_fuŒ
(
sˇn
->
fs
,

497 (
ext2_öode_œrge
 *Ë
öode
,

498 (
ext2_öode_œrge
 *Ë
sˇn
->
±r
,

499 0, 
bufsize
);

501 
	`mem˝y
(
öode
, 
sˇn
->
±r
, 
bufsize
);

503 
sˇn
->
±r
 +sˇn->
öode_size
;

504 
sˇn
->
byãs_À·
 -sˇn->
öode_size
;

505 i‡(
sˇn
->
sˇn_Êags
 & 
EXT2_SF_BAD_INODE_BLK
)

506 
ªtvÆ
 = 
EXT2_ET_BAD_BLOCK_IN_INODE_TABLE
;

509 
sˇn
->
öodes_À·
--;

510 
sˇn
->
cuºít_öode
++;

511 *
öo
 = 
sˇn
->
cuºít_öode
;

512  
ªtvÆ
;

513 
	}
}

515 
îrcode_t
 
	$ext2fs_gë_√xt_öode
(
ext2_öode_sˇn
 
sˇn
, 
ext2_öo_t
 *
öo
,

516 
ext2_öode
 *
öode
)

518  
	`ext2fs_gë_√xt_öode_fuŒ
(
sˇn
, 
öo
, 
öode
,

519 (
ext2_öode
));

520 
	}
}

525 
îrcode_t
 
	$ext2fs_ªad_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

526 
ext2_öode
 * 
öode
, 
bufsize
)

528 
group
, 
block
, 
block_ƒ
, 
off£t
;

529 *
±r
;

530 
îrcode_t
 
ªtvÆ
;

531 
˛í
, 
i
, 
öodes_≥r_block
, 
Àngth
;

532 
io_ch™√l
 
io
;

534 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

537 i‡(
fs
->
ªad_öode
) {

538 
ªtvÆ
 = (
fs
->
ªad_öode
)(fs, 
öo
, 
öode
);

539 i‡(
ªtvÆ
 !
EXT2_ET_CALLBACK_NOTHANDLED
)

540  
ªtvÆ
;

542 i‡((
öo
 =0Ë|| (öÿ> 
fs
->
su≥r
->
s_öodes_cou¡
))

543  
EXT2_ET_BAD_INODE_NUM
;

545 i‡(!
fs
->
iˇche
) {

546 
ªtvÆ
 = 
	`¸óã_iˇche
(
fs
);

547 i‡(
ªtvÆ
)

548  
ªtvÆ
;

551 i‡(
bufsize
 =(
ext2_öode
)) {

553 
i
=0; i < 
fs
->
iˇche
->
ˇche_size
; i++) {

554 i‡(
fs
->
iˇche
->
ˇche
[
i
].
öo
 == ino) {

555 *
öode
 = 
fs
->
iˇche
->
ˇche
[
i
].inode;

560 i‡(
fs
->
Êags
 & 
EXT2_FLAG_IMAGE_FILE
) {

561 
öodes_≥r_block
 = 
fs
->
blocksize
 / 
	`EXT2_INODE_SIZE
(fs->
su≥r
);

562 
block_ƒ
 = 
fs
->
image_hódî
->
off£t_öode
 / fs->
blocksize
;

563 
block_ƒ
 +(
öo
 - 1Ë/ 
öodes_≥r_block
;

564 
off£t
 = ((
öo
 - 1Ë% 
öodes_≥r_block
) *

565 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
);

566 
io
 = 
fs
->
image_io
;

568 
group
 = (
öo
 - 1Ë/ 
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
);

569 i‡(
group
 > 
fs
->
group_desc_cou¡
)

570  
EXT2_ET_BAD_INODE_NUM
;

571 
off£t
 = ((
öo
 - 1Ë% 
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
)) *

572 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
);

573 
block
 = 
off£t
 >> 
	`EXT2_BLOCK_SIZE_BITS
(
fs
->
su≥r
);

574 i‡(!
fs
->
group_desc
[()
group
].
bg_öode_èbÀ
)

575  
EXT2_ET_MISSING_INODE_TABLE
;

576 
block_ƒ
 = 
fs
->
group_desc
[()
group
].
bg_öode_èbÀ
 +

577 
block
;

578 
io
 = 
fs
->io;

580 
off£t
 &(
	`EXT2_BLOCK_SIZE
(
fs
->
su≥r
) - 1);

582 
Àngth
 = 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
);

583 i‡(
bufsize
 < 
Àngth
)

584 
Àngth
 = 
bufsize
;

586 
±r
 = (*Ë
öode
;

587 
Àngth
) {

588 
˛í
 = 
Àngth
;

589 i‡((
off£t
 + 
Àngth
Ë> 
fs
->
blocksize
)

590 
˛í
 = 
fs
->
blocksize
 - 
off£t
;

592 i‡(
block_ƒ
 !
fs
->
iˇche
->
buf„r_blk
) {

593 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
io
, 
block_ƒ
, 1,

594 
fs
->
iˇche
->
buf„r
);

595 i‡(
ªtvÆ
)

596  
ªtvÆ
;

597 
fs
->
iˇche
->
buf„r_blk
 = 
block_ƒ
;

600 
	`mem˝y
(
±r
, ((*Ë
fs
->
iˇche
->
buf„r
Ë+ (Ë
off£t
,

601 
˛í
);

603 
off£t
 = 0;

604 
Àngth
 -
˛í
;

605 
±r
 +
˛í
;

606 
block_ƒ
++;

609 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

610 
	`ext2fs_sw≠_öode_fuŒ
(
fs
, (
ext2_öode_œrge
 *Ë
öode
,

611 (
ext2_öode_œrge
 *Ë
öode
,

612 0, 
bufsize
);

616 
fs
->
iˇche
->
ˇche_œ°
 = (fs->icache->cache_last + 1) %

617 
fs
->
iˇche
->
ˇche_size
;

618 
fs
->
iˇche
->
ˇche
[fs->iˇche->
ˇche_œ°
].
öo
 = ino;

619 
fs
->
iˇche
->
ˇche
[fs->iˇche->
ˇche_œ°
].
öode
 = *inode;

622 
	}
}

624 
îrcode_t
 
	$ext2fs_ªad_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

625 
ext2_öode
 * 
öode
)

627  
	`ext2fs_ªad_öode_fuŒ
(
fs
, 
öo
, 
öode
,

628 (
ext2_öode
));

629 
	}
}

631 
îrcode_t
 
	$ext2fs_wrôe_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

632 
ext2_öode
 * 
öode
, 
bufsize
)

634 
group
, 
block
, 
block_ƒ
, 
off£t
;

635 
îrcode_t
 
ªtvÆ
 = 0;

636 
ext2_öode_œrge
 
ãmp_öode
, *
w_öode
;

637 *
±r
;

638 
˛í
, 
i
, 
Àngth
;

640 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

643 i‡(
fs
->
wrôe_öode
) {

644 
ªtvÆ
 = (
fs
->
wrôe_öode
)(fs, 
öo
, 
öode
);

645 i‡(
ªtvÆ
 !
EXT2_ET_CALLBACK_NOTHANDLED
)

646  
ªtvÆ
;

650 i‡(
fs
->
iˇche
) {

651 
i
=0; i < 
fs
->
iˇche
->
ˇche_size
; i++) {

652 i‡(
fs
->
iˇche
->
ˇche
[
i
].
öo
 == ino) {

653 
fs
->
iˇche
->
ˇche
[
i
].
öode
 = *inode;

658 
ªtvÆ
 = 
	`¸óã_iˇche
(
fs
);

659 i‡(
ªtvÆ
)

660  
ªtvÆ
;

663 i‡(!(
fs
->
Êags
 & 
EXT2_FLAG_RW
))

664  
EXT2_ET_RO_FILSYS
;

666 i‡((
öo
 =0Ë|| (öÿ> 
fs
->
su≥r
->
s_öodes_cou¡
))

667  
EXT2_ET_BAD_INODE_NUM
;

669 
Àngth
 = 
bufsize
;

670 i‡(
Àngth
 < 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
))

671 
Àngth
 = 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
);

673 i‡(
Àngth
 > (Ë(
ext2_öode_œrge
)) {

674 
w_öode
 = 
	`mÆloc
(
Àngth
);

675 i‡(!
w_öode
)

676  
ENOMEM
;

678 
w_öode
 = &
ãmp_öode
;

679 
	`mem£t
(
w_öode
, 0, 
Àngth
);

681 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

682 
	`ext2fs_sw≠_öode_fuŒ
(
fs
, 
w_öode
,

683 (
ext2_öode_œrge
 *Ë
öode
,

684 1, 
bufsize
);

686 
	`mem˝y
(
w_öode
, 
öode
, 
bufsize
);

689 
group
 = (
öo
 - 1Ë/ 
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
);

690 
off£t
 = ((
öo
 - 1Ë% 
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
)) *

691 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
);

692 
block
 = 
off£t
 >> 
	`EXT2_BLOCK_SIZE_BITS
(
fs
->
su≥r
);

693 i‡(!
fs
->
group_desc
[(Ë
group
].
bg_öode_èbÀ
) {

694 
ªtvÆ
 = 
EXT2_ET_MISSING_INODE_TABLE
;

695 
îrout
;

697 
block_ƒ
 = 
fs
->
group_desc
[(Ë
group
].
bg_öode_èbÀ
 + 
block
;

699 
off£t
 &(
	`EXT2_BLOCK_SIZE
(
fs
->
su≥r
) - 1);

701 
Àngth
 = 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
);

702 i‡(
Àngth
 > 
bufsize
)

703 
Àngth
 = 
bufsize
;

705 
±r
 = (*Ë
w_öode
;

707 
Àngth
) {

708 
˛í
 = 
Àngth
;

709 i‡((
off£t
 + 
Àngth
Ë> 
fs
->
blocksize
)

710 
˛í
 = 
fs
->
blocksize
 - 
off£t
;

712 i‡(
fs
->
iˇche
->
buf„r_blk
 !
block_ƒ
) {

713 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
block_ƒ
, 1,

714 
fs
->
iˇche
->
buf„r
);

715 i‡(
ªtvÆ
)

716 
îrout
;

717 
fs
->
iˇche
->
buf„r_blk
 = 
block_ƒ
;

721 
	`mem˝y
((*Ë
fs
->
iˇche
->
buf„r
 + (Ë
off£t
,

722 
±r
, 
˛í
);

724 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
block_ƒ
, 1,

725 
fs
->
iˇche
->
buf„r
);

726 i‡(
ªtvÆ
)

727 
îrout
;

729 
off£t
 = 0;

730 
±r
 +
˛í
;

731 
Àngth
 -
˛í
;

732 
block_ƒ
++;

735 
fs
->
Êags
 |
EXT2_FLAG_CHANGED
;

736 
îrout
:

737 i‡(
w_öode
 && w_öodê!&
ãmp_öode
)

738 
	`‰ì
(
w_öode
);

739  
ªtvÆ
;

740 
	}
}

742 
îrcode_t
 
	$ext2fs_wrôe_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

743 
ext2_öode
 *
öode
)

745  
	`ext2fs_wrôe_öode_fuŒ
(
fs
, 
öo
, 
öode
,

746 (
ext2_öode
));

747 
	}
}

753 
îrcode_t
 
	$ext2fs_wrôe_√w_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

754 
ext2_öode
 *
öode
)

756 
ext2_öode
 *
buf
;

757 
size
 = 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
);

758 
ext2_öode_œrge
 *
œrge_öode
;

759 
îrcode_t
 
ªtvÆ
;

760 
__u32
 
t
 = 
fs
->
now
 ? fs->now : 
	`time
(
NULL
);

762 i‡(!
öode
->
i_˘ime
)

763 
öode
->
i_˘ime
 = 
t
;

764 i‡(!
öode
->
i_mtime
)

765 
öode
->
i_mtime
 = 
t
;

766 i‡(!
öode
->
i_©ime
)

767 
öode
->
i_©ime
 = 
t
;

769 i‡(
size
 =(
ext2_öode
))

770  
	`ext2fs_wrôe_öode_fuŒ
(
fs
, 
öo
, 
öode
,

771 (
ext2_öode
));

773 
buf
 = 
	`mÆloc
(
size
);

774 i‡(!
buf
)

775  
ENOMEM
;

777 
	`mem£t
(
buf
, 0, 
size
);

778 *
buf
 = *
öode
;

780 
œrge_öode
 = (
ext2_öode_œrge
 *Ë
buf
;

781 
œrge_öode
->
i_exåa_isize
 = (
ext2_öode_œrge
) -

782 
EXT2_GOOD_OLD_INODE_SIZE
;

783 i‡(!
œrge_öode
->
i_¸time
)

784 
œrge_öode
->
i_¸time
 = 
t
;

786 
ªtvÆ
 = 
	`ext2fs_wrôe_öode_fuŒ
(
fs
, 
öo
, 
buf
, 
size
);

787 
	`‰ì
(
buf
);

788  
ªtvÆ
;

789 
	}
}

792 
îrcode_t
 
	$ext2fs_gë_blocks
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
blk_t
 *
blocks
)

794 
ext2_öode
 
öode
;

795 
i
;

796 
îrcode_t
 
ªtvÆ
;

798 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

800 i‡(
öo
 > 
fs
->
su≥r
->
s_öodes_cou¡
)

801  
EXT2_ET_BAD_INODE_NUM
;

803 i‡(
fs
->
gë_blocks
) {

804 i‡(!(*
fs
->
gë_blocks
)(fs, 
öo
, 
blocks
))

807 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
öo
, &
öode
);

808 i‡(
ªtvÆ
)

809  
ªtvÆ
;

810 
i
=0; i < 
EXT2_N_BLOCKS
; i++)

811 
blocks
[
i
] = 
öode
.
i_block
[i];

813 
	}
}

815 
îrcode_t
 
	$ext2fs_check_dúe˘‹y
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
)

817 
ext2_öode
 
öode
;

818 
îrcode_t
 
ªtvÆ
;

820 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

822 i‡(
öo
 > 
fs
->
su≥r
->
s_öodes_cou¡
)

823  
EXT2_ET_BAD_INODE_NUM
;

825 i‡(
fs
->
check_dúe˘‹y
) {

826 
ªtvÆ
 = (
fs
->
check_dúe˘‹y
)(fs, 
öo
);

827 i‡(
ªtvÆ
 !
EXT2_ET_CALLBACK_NOTHANDLED
)

828  
ªtvÆ
;

830 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
öo
, &
öode
);

831 i‡(
ªtvÆ
)

832  
ªtvÆ
;

833 i‡(!
	`LINUX_S_ISDIR
(
öode
.
i_mode
))

834  
EXT2_ET_NO_DIRECTORY
;

836 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/inode_io.c

13 
	~<c⁄fig.h
>

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 #i‡
HAVE_UNISTD_H


18 
	~<uni°d.h
>

20 #i‡
HAVE_ERRNO_H


21 
	~<î∫o.h
>

23 
	~<time.h
>

25 
	~"ext2_fs.h
"

26 
	~"ext2fs.h
"

32 
	#EXT2_CHECK_MAGIC
(, 
code
) \

33 i‡(()->
magic
 !(
code
)Ë (code)

	)

35 
	söode_¥iv©e_d©a
 {

36 
	mmagic
;

37 
	m«me
[32];

38 
ext2_fûe_t
 
	mfûe
;

39 
ext2_fûsys
 
	mfs
;

40 
ext2_öo_t
 
	möo
;

41 
ext2_öode
 
	möode
;

42 
	mÊags
;

43 
öode_¥iv©e_d©a
 *
	m√xt
;

46 
	#CHANNEL_HAS_INODE
 0x8000

	)

48 
öode_¥iv©e_d©a
 *
	gt›_öã∫
;

49 
	göo_unique
 = 0;

51 
îrcode_t
 
öode_›í
(c⁄° *
«me
, 
Êags
, 
io_ch™√l
 *
ch™√l
);

52 
îrcode_t
 
öode_˛o£
(
io_ch™√l
 
ch™√l
);

53 
îrcode_t
 
öode_£t_blksize
(
io_ch™√l
 
ch™√l
, 
blksize
);

54 
îrcode_t
 
öode_ªad_blk
(
io_ch™√l
 
ch™√l
, 
block
,

55 
cou¡
, *
d©a
);

56 
îrcode_t
 
öode_wrôe_blk
(
io_ch™√l
 
ch™√l
, 
block
,

57 
cou¡
, c⁄° *
d©a
);

58 
îrcode_t
 
öode_Êush
(
io_ch™√l
 
ch™√l
);

59 
îrcode_t
 
öode_wrôe_byã
(
io_ch™√l
 
ch™√l
, 
off£t
,

60 
size
, c⁄° *
d©a
);

61 
îrcode_t
 
öode_ªad_blk64
(
io_ch™√l
 
ch™√l
,

62 
block
, 
cou¡
, *
d©a
);

63 
îrcode_t
 
öode_wrôe_blk64
(
io_ch™√l
 
ch™√l
,

64 
block
, 
cou¡
, c⁄° *
d©a
);

66 
°ru˘_io_m™agî
 
	g°ru˘_öode_m™agî
 = {

67 
EXT2_ET_MAGIC_IO_MANAGER
,

69 
öode_›í
,

70 
öode_˛o£
,

71 
öode_£t_blksize
,

72 
öode_ªad_blk
,

73 
öode_wrôe_blk
,

74 
öode_Êush
,

75 
öode_wrôe_byã
,

76 
NULL
,

77 
NULL
,

78 
öode_ªad_blk64
,

79 
öode_wrôe_blk64


82 
io_m™agî
 
	göode_io_m™agî
 = &
°ru˘_öode_m™agî
;

84 
îrcode_t
 
	$ext2fs_öode_io_öã∫2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

85 
ext2_öode
 *
öode
,

86 **
«me
)

88 
öode_¥iv©e_d©a
 *
d©a
;

89 
îrcode_t
 
ªtvÆ
;

91 i‡((
ªtvÆ
 = 
	`ext2fs_gë_mem
((
öode_¥iv©e_d©a
),

92 &
d©a
)))

93  
ªtvÆ
;

94 
d©a
->
magic
 = 
EXT2_ET_MAGIC_INODE_IO_CHANNEL
;

95 
	`•rötf
(
d©a
->
«me
, "%u:%d", 
öo
, 
öo_unique
++);

96 
d©a
->
fûe
 = 0;

97 
d©a
->
fs
 = fs;

98 
d©a
->
öo
 = ino;

99 
d©a
->
Êags
 = 0;

100 i‡(
öode
) {

101 
	`mem˝y
(&
d©a
->
öode
, inode, (
ext2_öode
));

102 
d©a
->
Êags
 |
CHANNEL_HAS_INODE
;

104 
d©a
->
√xt
 = 
t›_öã∫
;

105 
t›_öã∫
 = 
d©a
;

106 *
«me
 = 
d©a
->name;

108 
	}
}

110 
îrcode_t
 
	$ext2fs_öode_io_öã∫
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

111 **
«me
)

113  
	`ext2fs_öode_io_öã∫2
(
fs
, 
öo
, 
NULL
, 
«me
);

114 
	}
}

117 
îrcode_t
 
	$öode_›í
(c⁄° *
«me
, 
Êags
, 
io_ch™√l
 *
ch™√l
)

119 
io_ch™√l
 
io
 = 
NULL
;

120 
öode_¥iv©e_d©a
 *
¥ev
, *
d©a
 = 
NULL
;

121 
îrcode_t
 
ªtvÆ
;

122 
›í_Êags
;

124 i‡(
«me
 == 0)

125  
EXT2_ET_BAD_DEVICE_NAME
;

127 
d©a
 = 
t›_öã∫
, 
¥ev
 = 
NULL
; data;

128 
¥ev
 = 
d©a
, d©®d©a->
√xt
)

129 i‡(
	`°rcmp
(
«me
, 
d©a
->name) == 0)

131 i‡(!
d©a
)

132  
ENOENT
;

133 i‡(
¥ev
)

134 
¥ev
->
√xt
 = 
d©a
->next;

136 
t›_öã∫
 = 
d©a
->
√xt
;

138 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
°ru˘_io_ch™√l
), &
io
);

139 i‡(
ªtvÆ
)

140 
˛ónup
;

141 
	`mem£t
(
io
, 0, (
°ru˘_io_ch™√l
));

143 
io
->
magic
 = 
EXT2_ET_MAGIC_IO_CHANNEL
;

144 
io
->
m™agî
 = 
öode_io_m™agî
;

145 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
	`°æí
(
«me
)+1, &
io
->name);

146 i‡(
ªtvÆ
)

147 
˛ónup
;

149 
	`°r˝y
(
io
->
«me
,Çame);

150 
io
->
¥iv©e_d©a
 = 
d©a
;

151 
io
->
block_size
 = 1024;

152 
io
->
ªad_îr‹
 = 0;

153 
io
->
wrôe_îr‹
 = 0;

154 
io
->
ªfcou¡
 = 1;

156 
›í_Êags
 = (
Êags
 & 
IO_FLAG_RW
Ë? 
EXT2_FILE_WRITE
 : 0;

157 
ªtvÆ
 = 
	`ext2fs_fûe_›í2
(
d©a
->
fs
, d©a->
öo
,

158 (
d©a
->
Êags
 & 
CHANNEL_HAS_INODE
) ?

159 &
d©a
->
öode
 : 0, 
›í_Êags
,

160 &
d©a
->
fûe
);

161 i‡(
ªtvÆ
)

162 
˛ónup
;

164 *
ch™√l
 = 
io
;

167 
˛ónup
:

168 i‡(
d©a
) {

169 
	`ext2fs_‰ì_mem
(&
d©a
);

171 i‡(
io
)

172 
	`ext2fs_‰ì_mem
(&
io
);

173  
ªtvÆ
;

174 
	}
}

176 
îrcode_t
 
	$öode_˛o£
(
io_ch™√l
 
ch™√l
)

178 
öode_¥iv©e_d©a
 *
d©a
;

179 
îrcode_t
 
ªtvÆ
 = 0;

181 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

182 
d©a
 = (
öode_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

183 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_INODE_IO_CHANNEL
);

185 i‡(--
ch™√l
->
ªfcou¡
 > 0)

188 
ªtvÆ
 = 
	`ext2fs_fûe_˛o£
(
d©a
->
fûe
);

190 
	`ext2fs_‰ì_mem
(&
ch™√l
->
¥iv©e_d©a
);

191 i‡(
ch™√l
->
«me
)

192 
	`ext2fs_‰ì_mem
(&
ch™√l
->
«me
);

193 
	`ext2fs_‰ì_mem
(&
ch™√l
);

194  
ªtvÆ
;

195 
	}
}

197 
îrcode_t
 
	$öode_£t_blksize
(
io_ch™√l
 
ch™√l
, 
blksize
)

199 
öode_¥iv©e_d©a
 *
d©a
;

201 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

202 
d©a
 = (
öode_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

203 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_INODE_IO_CHANNEL
);

205 
ch™√l
->
block_size
 = 
blksize
;

207 
	}
}

210 
îrcode_t
 
	$öode_ªad_blk64
(
io_ch™√l
 
ch™√l
,

211 
block
, 
cou¡
, *
buf
)

213 
öode_¥iv©e_d©a
 *
d©a
;

214 
îrcode_t
 
ªtvÆ
;

216 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

217 
d©a
 = (
öode_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

218 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_INODE_IO_CHANNEL
);

220 i‡((
ªtvÆ
 = 
	`ext2fs_fûe_l£ek
(
d©a
->
fûe
,

221 
block
 * 
ch™√l
->
block_size
,

222 
EXT2_SEEK_SET
, 0)))

223  
ªtvÆ
;

225 
cou¡
 = (cou¡ < 0Ë? -cou¡ : (cou¡ * 
ch™√l
->
block_size
);

227  
	`ext2fs_fûe_ªad
(
d©a
->
fûe
, 
buf
, 
cou¡
, 0);

228 
	}
}

230 
îrcode_t
 
	$öode_ªad_blk
(
io_ch™√l
 
ch™√l
, 
block
,

231 
cou¡
, *
buf
)

233  
	`öode_ªad_blk64
(
ch™√l
, 
block
, 
cou¡
, 
buf
);

234 
	}
}

236 
îrcode_t
 
	$öode_wrôe_blk64
(
io_ch™√l
 
ch™√l
,

237 
block
, 
cou¡
, c⁄° *
buf
)

239 
öode_¥iv©e_d©a
 *
d©a
;

240 
îrcode_t
 
ªtvÆ
;

242 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

243 
d©a
 = (
öode_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

244 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_INODE_IO_CHANNEL
);

246 i‡((
ªtvÆ
 = 
	`ext2fs_fûe_l£ek
(
d©a
->
fûe
,

247 
block
 * 
ch™√l
->
block_size
,

248 
EXT2_SEEK_SET
, 0)))

249  
ªtvÆ
;

251 
cou¡
 = (cou¡ < 0Ë? -cou¡ : (cou¡ * 
ch™√l
->
block_size
);

253  
	`ext2fs_fûe_wrôe
(
d©a
->
fûe
, 
buf
, 
cou¡
, 0);

254 
	}
}

256 
îrcode_t
 
	$öode_wrôe_blk
(
io_ch™√l
 
ch™√l
, 
block
,

257 
cou¡
, c⁄° *
buf
)

259  
	`öode_wrôe_blk64
(
ch™√l
, 
block
, 
cou¡
, 
buf
);

260 
	}
}

262 
îrcode_t
 
	$öode_wrôe_byã
(
io_ch™√l
 
ch™√l
, 
off£t
,

263 
size
, c⁄° *
buf
)

265 
öode_¥iv©e_d©a
 *
d©a
;

266 
îrcode_t
 
ªtvÆ
 = 0;

268 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

269 
d©a
 = (
öode_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

270 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_INODE_IO_CHANNEL
);

272 i‡((
ªtvÆ
 = 
	`ext2fs_fûe_l£ek
(
d©a
->
fûe
, 
off£t
,

273 
EXT2_SEEK_SET
, 0)))

274  
ªtvÆ
;

276  
	`ext2fs_fûe_wrôe
(
d©a
->
fûe
, 
buf
, 
size
, 0);

277 
	}
}

282 
îrcode_t
 
	$öode_Êush
(
io_ch™√l
 
ch™√l
)

284 
öode_¥iv©e_d©a
 *
d©a
;

286 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

287 
d©a
 = (
öode_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

288 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_INODE_IO_CHANNEL
);

290  
	`ext2fs_fûe_Êush
(
d©a
->
fûe
);

291 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/io_manager.c

5 
	~<°dio.h
>

6 
	~<°rög.h
>

7 #i‡
HAVE_UNISTD_H


8 
	~<uni°d.h
>

10 
	~<f˙é.h
>

11 
	~<time.h
>

12 #i‡
HAVE_SYS_STAT_H


13 
	~<sys/°©.h
>

15 #i‡
HAVE_SYS_TYPES_H


16 
	~<sys/ty≥s.h
>

19 
	~"ext2_fs.h
"

20 
	~"ext2fs.h
"

22 
îrcode_t
 
	$io_ch™√l_£t_›ti⁄s
(
io_ch™√l
 
ch™√l
, c⁄° *
›ts
)

24 
îrcode_t
 
ªtvÆ
 = 0;

25 *
√xt
, *
±r
, *
›ti⁄s
, *
¨g
;

27 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

29 i‡(!
›ts
)

32 i‡(!
ch™√l
->
m™agî
->
£t_›ti⁄
)

33  
EXT2_ET_INVALID_ARGUMENT
;

35 
›ti⁄s
 = 
	`mÆloc
(
	`°æí
(
›ts
)+1);

36 i‡(!
›ti⁄s
)

37  
EXT2_ET_NO_MEMORY
;

38 
	`°r˝y
(
›ti⁄s
, 
›ts
);

39 
±r
 = 
›ti⁄s
;

41 
±r
 && *ptr) {

42 
√xt
 = 
	`°rchr
(
±r
, '&');

43 i‡(
√xt
)

44 *
√xt
++ = 0;

46 
¨g
 = 
	`°rchr
(
±r
, '=');

47 i‡(
¨g
)

48 *
¨g
++ = 0;

50 
ªtvÆ
 = (
ch™√l
->
m™agî
->
£t_›ti⁄
)(ch™√l, 
±r
, 
¨g
);

51 i‡(
ªtvÆ
)

53 
±r
 = 
√xt
;

55 
	`‰ì
(
›ti⁄s
);

56  
ªtvÆ
;

57 
	}
}

59 
îrcode_t
 
	$io_ch™√l_wrôe_byã
(
io_ch™√l
 
ch™√l
, 
off£t
,

60 
cou¡
, c⁄° *
d©a
)

62 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

64 i‡(
ch™√l
->
m™agî
->
wrôe_byã
)

65  
ch™√l
->
m™agî
->
	`wrôe_byã
(ch™√l, 
off£t
,

66 
cou¡
, 
d©a
);

68  
EXT2_ET_UNIMPLEMENTED
;

69 
	}
}

71 
îrcode_t
 
	$io_ch™√l_ªad_blk64
(
io_ch™√l
 
ch™√l
, 
block
,

72 
cou¡
, *
d©a
)

74 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

76 i‡(
ch™√l
->
m™agî
->
ªad_blk64
)

77  (
ch™√l
->
m™agî
->
ªad_blk64
)(ch™√l, 
block
,

78 
cou¡
, 
d©a
);

80 i‡((
block
 >> 32) != 0)

81  
EXT2_ET_IO_CHANNEL_NO_SUPPORT_64
;

83  (
ch™√l
->
m™agî
->
ªad_blk
)(ch™√l, (Ë
block
,

84 
cou¡
, 
d©a
);

85 
	}
}

87 
îrcode_t
 
	$io_ch™√l_wrôe_blk64
(
io_ch™√l
 
ch™√l
, 
block
,

88 
cou¡
, c⁄° *
d©a
)

90 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

92 i‡(
ch™√l
->
m™agî
->
wrôe_blk64
)

93  (
ch™√l
->
m™agî
->
wrôe_blk64
)(ch™√l, 
block
,

94 
cou¡
, 
d©a
);

96 i‡((
block
 >> 32) != 0)

97  
EXT2_ET_IO_CHANNEL_NO_SUPPORT_64
;

99  (
ch™√l
->
m™agî
->
wrôe_blk
)(ch™√l, (Ë
block
,

100 
cou¡
, 
d©a
);

101 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ismounted.c

12 
	~<c⁄fig.h
>

14 
	~<°dio.h
>

15 #i‡
HAVE_UNISTD_H


16 
	~<uni°d.h
>

18 #i‡
HAVE_ERRNO_H


19 
	~<î∫o.h
>

21 
	~<f˙é.h
>

22 #ifde‡
HAVE_LINUX_FD_H


23 
	~<löux/fd.h
>

25 #ifde‡
HAVE_MNTENT_H


26 
	~<m¡ít.h
>

28 #ifde‡
HAVE_GETMNTINFO


29 
	~<∑ths.h
>

30 
	~<sys/∑øm.h
>

31 
	~<sys/mou¡.h
>

33 
	~<°rög.h
>

34 
	~<sys/°©.h
>

36 
	~"ext2_fs.h
"

37 
	~"ext2fs.h
"

39 #ifde‡
HAVE_MNTENT_H


45 
îrcode_t
 
	$check_m¡ít_fûe
(c⁄° *
mèb_fûe
, c⁄° *
fûe
,

46 *
mou¡_Êags
, *
mçt
, 
méí
)

48 
m¡ít
 *
m¡
;

49 
°©
 
°_buf
;

50 
îrcode_t
 
ªtvÆ
 = 0;

51 
dev_t
 
fûe_dev
=0, 
fûe_rdev
=0;

52 
öo_t
 
fûe_öo
=0;

53 
FILE
 *
f
;

54 
fd
;

56 *
mou¡_Êags
 = 0;

57 i‡((
f
 = 
	`£tm¡ít
 (
mèb_fûe
, "r")Ë=
NULL
)

58  (
î∫o
 =
ENOENT
 ? 
EXT2_NO_MTAB_FILE
 :Érrno);

59 i‡(
	`°©
(
fûe
, &
°_buf
) == 0) {

60 i‡(
	`S_ISBLK
(
°_buf
.
°_mode
)) {

61 #i‚de‡
__GNU__


62 
fûe_rdev
 = 
°_buf
.
°_rdev
;

65 
fûe_dev
 = 
°_buf
.
°_dev
;

66 
fûe_öo
 = 
°_buf
.
°_öo
;

69 (
m¡
 = 
	`gëm¡ít
 (
f
)Ë!
NULL
) {

70 i‡(
m¡
->
m¡_f¢ame
[0] != '/')

72 i‡(
	`°rcmp
(
fûe
, 
m¡
->
m¡_f¢ame
) == 0)

74 i‡(
	`°©
(
m¡
->
m¡_f¢ame
, &
°_buf
) == 0) {

75 i‡(
	`S_ISBLK
(
°_buf
.
°_mode
)) {

76 #i‚de‡
__GNU__


77 i‡(
fûe_rdev
 && (fûe_rdev =
°_buf
.
°_rdev
))

81 i‡(
fûe_dev
 && ((fûe_dev =
°_buf
.
°_dev
) &&

82 (
fûe_öo
 =
°_buf
.
°_öo
)))

88 i‡(
m¡
 == 0) {

89 #i‚de‡
__GNU__


97 i‡(
fûe_rdev
 && 
	`°©
("/", &
°_buf
) == 0) {

98 i‡(
°_buf
.
°_dev
 =
fûe_rdev
) {

99 *
mou¡_Êags
 = 
EXT2_MF_MOUNTED
;

100 i‡(
mçt
)

101 
	`°∫˝y
(
mçt
, "/", 
méí
);

102 
is_roŸ
;

106 
îrout
;

108 #i‚de‡
__GNU__


115 i‡(
	`°©
(
m¡
->
m¡_dú
, &
°_buf
) < 0) {

116 
ªtvÆ
 = 
î∫o
;

117 i‡(
ªtvÆ
 =
ENOENT
) {

118 #ifde‡
DEBUG


119 
	`¥ötf
("BogusÉntry in %s! (%s doesÇotÉxist)\n",

120 
mèb_fûe
, 
m¡
->
m¡_dú
);

122 
ªtvÆ
 = 0;

124 
îrout
;

126 i‡(
fûe_rdev
 && (
°_buf
.
°_dev
 != file_rdev)) {

127 #ifde‡
DEBUG


128 
	`¥ötf
("BogusÉntry in %s! (%sÇot mounted on %s)\n",

129 
mèb_fûe
, 
fûe
, 
m¡
->
m¡_dú
);

131 
îrout
;

134 *
mou¡_Êags
 = 
EXT2_MF_MOUNTED
;

136 #ifde‡
MNTOPT_RO


138 i‡(
	`hasm¡›t
(
m¡
, 
MNTOPT_RO
))

139 *
mou¡_Êags
 |
EXT2_MF_READONLY
;

142 i‡(
mçt
)

143 
	`°∫˝y
(
mçt
, 
m¡
->
m¡_dú
, 
méí
);

150 i‡(!
	`°rcmp
(
m¡
->
m¡_dú
, "/")) {

151 
is_roŸ
:

152 
	#TEST_FILE
 "/.ismou¡-ã°-fûe"

	)

153 *
mou¡_Êags
 |
EXT2_MF_ISROOT
;

154 
fd
 = 
	`›í
(
TEST_FILE
, 
O_RDWR
|
O_CREAT
, 0600);

155 i‡(
fd
 < 0) {

156 i‡(
î∫o
 =
EROFS
)

157 *
mou¡_Êags
 |
EXT2_MF_READONLY
;

159 
	`˛o£
(
fd
);

160 (Ë
	`u∆ök
(
TEST_FILE
);

162 
ªtvÆ
 = 0;

163 
îrout
:

164 
	`ídm¡ít
 (
f
);

165  
ªtvÆ
;

166 
	}
}

168 
îrcode_t
 
	$check_m¡ít
(c⁄° *
fûe
, *
mou¡_Êags
,

169 *
mçt
, 
méí
)

171 
îrcode_t
 
ªtvÆ
;

173 #ifde‡
DEBUG


174 
ªtvÆ
 = 
	`check_m¡ít_fûe
("/tmp/mèb", 
fûe
, 
mou¡_Êags
,

175 
mçt
, 
méí
);

176 i‡(
ªtvÆ
 == 0)

179 #ifde‡
__löux__


180 
ªtvÆ
 = 
	`check_m¡ít_fûe
("/¥oc/mou¡s", 
fûe
, 
mou¡_Êags
,

181 
mçt
, 
méí
);

182 i‡(
ªtvÆ
 =0 && (*
mou¡_Êags
 != 0))

185 #i‡
	`deföed
(
MOUNTED
Ë|| deföed(
_PATH_MOUNTED
)

186 #i‚de‡
MOUNTED


187 
	#MOUNTED
 
_PATH_MOUNTED


	)

189 
ªtvÆ
 = 
	`check_m¡ít_fûe
(
MOUNTED
, 
fûe
, 
mou¡_Êags
, 
mçt
, 
méí
);

190  
ªtvÆ
;

192 *
mou¡_Êags
 = 0;

195 
	}
}

198 #i‡
deföed
(
HAVE_GETMNTINFO
)

200 
îrcode_t
 
	$check_gëm¡öfo
(c⁄° *
fûe
, *
mou¡_Êags
,

201 *
mçt
, 
méí
)

203 
°©fs
 *
mp
;

204 
Àn
, 
n
;

205 c⁄° *
s1
;

206 *
s2
;

208 
n
 = 
	`gëm¡öfo
(&
mp
, 
MNT_NOWAIT
);

209 i‡(
n
 == 0)

210  
î∫o
;

212 
Àn
 = (
_PATH_DEV
) - 1;

213 
s1
 = 
fûe
;

214 i‡(
	`°∫cmp
(
_PATH_DEV
, 
s1
, 
Àn
) == 0)

215 
s1
 +
Àn
;

217 *
mou¡_Êags
 = 0;

218 --
n
 >= 0) {

219 
s2
 = 
mp
->
f_m¡‰om«me
;

220 i‡(
	`°∫cmp
(
_PATH_DEV
, 
s2
, 
Àn
) == 0) {

221 
s2
 +
Àn
 - 1;

222 *
s2
 = 'r';

224 i‡(
	`°rcmp
(
s1
, 
s2
) == 0 || strcmp(s1, &s2[1]) == 0) {

225 *
mou¡_Êags
 = 
EXT2_MF_MOUNTED
;

228 ++
mp
;

230 i‡(
mçt
)

231 
	`°∫˝y
(
mçt
, 
mp
->
f_m¡⁄«me
, 
méí
);

233 
	}
}

240 
	$is_sw≠_devi˚
(c⁄° *
fûe
)

242 
FILE
 *
f
;

243 
buf
[1024], *
˝
;

244 
dev_t
 
fûe_dev
;

245 
°©
 
°_buf
;

246 
ªt
 = 0;

248 
fûe_dev
 = 0;

249 #i‚de‡
__GNU__


250 i‡((
	`°©
(
fûe
, &
°_buf
) == 0) &&

251 
	`S_ISBLK
(
°_buf
.
°_mode
))

252 
fûe_dev
 = 
°_buf
.
°_rdev
;

255 i‡(!(
f
 = 
	`f›í
("/proc/swaps", "r")))

258 i‡(
	`fgës
(
buf
, (buf), 
f
))

259 
	`fgës
(
buf
, (buf), 
f
)) {

260 i‡((
˝
 = 
	`°rchr
(
buf
, ' ')Ë!
NULL
)

261 *
˝
 = 0;

262 i‡((
˝
 = 
	`°rchr
(
buf
, '\t')Ë!
NULL
)

263 *
˝
 = 0;

264 i‡(
	`°rcmp
(
buf
, 
fûe
) == 0) {

265 
ªt
++;

268 #i‚de‡
__GNU__


269 i‡(
fûe_dev
 && (
	`°©
(
buf
, &
°_buf
) == 0) &&

270 
	`S_ISBLK
(
°_buf
.
°_mode
) &&

271 
fûe_dev
 =
°_buf
.
°_rdev
) {

272 
ªt
++;

277 
	`f˛o£
(
f
);

278  
ªt
;

279 
	}
}

290 #ifde‡
__TURBOC__


291 #¥agm®
¨gsu£d


293 
îrcode_t
 
	$ext2fs_check_mou¡_poöt
(c⁄° *
devi˚
, *
mou¡_Êags
,

294 *
mçt
, 
méí
)

296 
°©
 
°_buf
;

297 
îrcode_t
 
ªtvÆ
 = 0;

298 
fd
;

300 i‡(
	`is_sw≠_devi˚
(
devi˚
)) {

301 *
mou¡_Êags
 = 
EXT2_MF_MOUNTED
 | 
EXT2_MF_SWAP
;

302 
	`°∫˝y
(
mçt
, "<sw≠>", 
méí
);

304 #ifde‡
HAVE_MNTENT_H


305 
ªtvÆ
 = 
	`check_m¡ít
(
devi˚
, 
mou¡_Êags
, 
mçt
, 
méí
);

307 #ifde‡
HAVE_GETMNTINFO


308 
ªtvÆ
 = 
	`check_gëm¡öfo
(
devi˚
, 
mou¡_Êags
, 
mçt
, 
méí
);

310 #ifde‡
__GNUC__


313 *
mou¡_Êags
 = 0;

317 i‡(
ªtvÆ
)

318  
ªtvÆ
;

320 #ifde‡
__löux__


321 i‡((
	`°©
(
devi˚
, &
°_buf
) != 0) ||

322 !
	`S_ISBLK
(
°_buf
.
°_mode
))

324 
fd
 = 
	`›í
(
devi˚
, 
O_RDONLY
 | 
O_EXCL
);

325 i‡(
fd
 < 0) {

326 i‡(
î∫o
 =
EBUSY
)

327 *
mou¡_Êags
 |
EXT2_MF_BUSY
;

329 
	`˛o£
(
fd
);

333 
	}
}

340 
îrcode_t
 
	$ext2fs_check_if_mou¡ed
(c⁄° *
fûe
, *
mou¡_Êags
)

342  
	`ext2fs_check_mou¡_poöt
(
fûe
, 
mou¡_Êags
, 
NULL
, 0);

343 
	}
}

345 #ifde‡
DEBUG


346 
	$maö
(
¨gc
, **
¨gv
)

348 
ªtvÆ
, 
mou¡_Êags
;

349 
m¡±
[80];

351 i‡(
¨gc
 < 2) {

352 
	`Ârötf
(
°dîr
, "Ußge: %†devi˚\n", 
¨gv
[0]);

353 
	`exô
(1);

356 
m¡±
[0] = 0;

357 
ªtvÆ
 = 
	`ext2fs_check_mou¡_poöt
(
¨gv
[1], &
mou¡_Êags
,

358 
m¡±
, (mntpt));

359 i‡(
ªtvÆ
) {

360 
	`com_îr
(
¨gv
[0], 
ªtvÆ
,

362 
	`exô
(1);

364 
	`¥ötf
("Devi˚ %†ªp‹t†Êag†%02x\n", 
¨gv
[1], 
mou¡_Êags
);

365 i‡(
mou¡_Êags
 & 
EXT2_MF_BUSY
)

366 
	`¥ötf
("\t%†i†≠∑ª¡ly i¿u£.\n", 
¨gv
[1]);

367 i‡(
mou¡_Êags
 & 
EXT2_MF_MOUNTED
)

368 
	`¥ötf
("\t%†i†mou¡ed.\n", 
¨gv
[1]);

369 i‡(
mou¡_Êags
 & 
EXT2_MF_SWAP
)

370 
	`¥ötf
("\t%†i†®sw≠ devi˚.\n", 
¨gv
[1]);

371 i‡(
mou¡_Êags
 & 
EXT2_MF_READONLY
)

372 
	`¥ötf
("\t%†i†ªad-⁄ly.\n", 
¨gv
[1]);

373 i‡(
mou¡_Êags
 & 
EXT2_MF_ISROOT
)

374 
	`¥ötf
("\t%†i†thêroŸ fûesy°em.\n", 
¨gv
[1]);

375 i‡(
m¡±
[0])

376 
	`¥ötf
("\t%†i†mou¡ed o¿%s.\n", 
¨gv
[1], 
m¡±
);

377 
	`exô
(0);

378 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/jfs_compat.h

2 #i‚de‡
_JFS_COMPAT_H


3 
	#_JFS_COMPAT_H


	)

5 
	~"kî√l-li°.h
"

6 
	~<î∫o.h
>

7 #ifde‡
HAVE_NETINET_IN_H


8 
	~<√töë/ö.h
>

11 
	#¥ötk
 
¥ötf


	)

12 
	#KERN_ERR
 ""

	)

13 
	#KERN_DEBUG
 ""

	)

15 
	#READ
 0

	)

16 
	#WRITE
 1

	)

18 
	#˝u_to_be32
(
n
Ë
	`ht⁄l
“)

	)

19 
	#be32_to_˝u
(
n
Ë
	`¡ohl
“)

	)

21 
	ttid_t
;

22 
jou∫Æ_s
 
	tjou∫Æ_t
;

24 
	gbuf„r_hód
;

25 
	göode
;

27 
	sjou∫Æ_s


29 
	mj_Êags
;

30 
	mj_î∫o
;

31 
buf„r_hód
 * 
	mj_sb_buf„r
;

32 
jou∫Æ_su≥rblock_s
 *
	mj_su≥rblock
;

33 
	mj_f‹m©_vîsi⁄
;

34 
	mj_hód
;

35 
	mj_èû
;

36 
	mj_‰ì
;

37 
	mj_fú°
, 
	mj_œ°
;

38 
kdev_t
 
	mj_dev
;

39 
kdev_t
 
	mj_fs_dev
;

40 
	mj_blocksize
;

41 
	mj_blk_off£t
;

42 
	mj_maxÀn
;

43 
öode
 * 
	mj_öode
;

44 
tid_t
 
	mj_èû_£quí˚
;

45 
tid_t
 
	mj_å™ß˘i⁄_£quí˚
;

46 
__u8
 
	mj_uuid
[16];

47 
jbd_ªvoke_èbÀ_s
 *
	mj_ªvoke
;

48 
tid_t
 
	mj_Áûed_commô
;

51 
	#J_ASSERT
(
as£π
) \

52 dÿ{ i‡(!(
as£π
)) { \

53 
	`¥ötf
 ("Assertion failure in %s()át %sÜine %d: " \

55 
__FUNCTION__
, 
__FILE__
, 
__LINE__
, #assert); \

56 
	`Áèl_îr‹
(
e2fsck_globÆ_˘x
, 0); \

57 } } 0)

	)

59 
	#is_jou∫Æ_ab‹t
(
x
Ë0

	)

61 
	#BUFFER_TRACE
(
bh
, 
öfo
Ëdÿ{} 0)

	)

64 #ifde‡
NO_INLINE_FUNCS


65 
	#ölöe


	)

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/jfs_user.h

1 #i‚de‡
_JFS_USER_H


2 
	#_JFS_USER_H


	)

4 
	tkdev_t
;

6 
	~"kî√l-jbd.h
"

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/kernel-jbd.h

16 #i‚de‡
_LINUX_JBD_H


17 
	#_LINUX_JBD_H


	)

19 #i‡
deföed
(
CONFIG_JBD
Ë|| deföed(
CONFIG_JBD_MODULE
Ë|| !deföed(
__KERNEL__
)

22 #i‚de‡
__KERNEL__


23 
	~"jfs_com∑t.h
"

24 
	#JFS_DEBUG


	)

25 
	#jfs_debug
 
jbd_debug


	)

28 
	~<löux/jou∫Æ-hód.h
>

29 
	~<löux/°ddef.h
>

30 
	~<asm/£m≠h‹e.h
>

33 #i‚de‡
__GNUC__


34 
	#__FUNCTION__
 ""

	)

37 
	#jou∫Æ_oom_ªåy
 1

	)

39 #ifde‡
__STDC__


40 #ifde‡
CONFIG_JBD_DEBUG


46 
	#JBD_EXPENSIVE_CHECKING


	)

47 
jou∫Æ_íabÀ_debug
;

49 
	#jbd_debug
(
n
, 
f
, 
a
...) \

51 i‡((
n
Ë<
jou∫Æ_íabÀ_debug
) { \

52 
	`¥ötk
 (
KERN_DEBUG
 "(%s, %d): %s: ", \

53 
__FILE__
, 
__LINE__
, 
__FUNCTION__
); \

54 
	`¥ötk
 (
f
, ## 
a
); \

56 } 0)

	)

58 #ifde‡
__GNUC__


59 
	#jbd_debug
(
f
, 
a
...Ë

	)

61 
	#jbd_debug
(
f
, ...Ë

	)

65 
	#jbd_debug
(
x
Ë

	)

68 * 
__jbd_kmÆloc
 (*
whîe
, 
size_t
 
size
, 
Êags
, 
ªåy
);

69 
	#jbd_kmÆloc
(
size
, 
Êags
) \

70 
	`__jbd_kmÆloc
(
__FUNCTION__
, (
size
), (
Êags
), 
jou∫Æ_oom_ªåy
)

	)

71 
	#jbd_ªp_kmÆloc
(
size
, 
Êags
) \

72 
	`__jbd_kmÆloc
(
__FUNCTION__
, (
size
), (
Êags
), 1)

	)

74 
	#JFS_MIN_JOURNAL_BLOCKS
 1024

	)

76 #ifde‡
__KERNEL__


77 
h™dÀ_s
 
	th™dÀ_t
;

78 
jou∫Æ_s
 
	tjou∫Æ_t
;

85 
	#JFS_MAGIC_NUMBER
 0xc03b3998U

	)

95 
	#JFS_DESCRIPTOR_BLOCK
 1

	)

96 
	#JFS_COMMIT_BLOCK
 2

	)

97 
	#JFS_SUPERBLOCK_V1
 3

	)

98 
	#JFS_SUPERBLOCK_V2
 4

	)

99 
	#JFS_REVOKE_BLOCK
 5

	)

104 
	sjou∫Æ_hódî_s


106 
__u32
 
	mh_magic
;

107 
__u32
 
	mh_blockty≥
;

108 
__u32
 
	mh_£quí˚
;

109 } 
	tjou∫Æ_hódî_t
;

114 
	#JBD2_CRC32_CHKSUM
 1

	)

115 
	#JBD2_MD5_CHKSUM
 2

	)

116 
	#JBD2_SHA1_CHKSUM
 3

	)

118 
	#JBD2_CRC32_CHKSUM_SIZE
 4

	)

120 
	#JBD2_CHECKSUM_BYTES
 (32 / (
__u32
))

	)

124 
	scommô_hódî
 {

125 
__u32
 
	mh_magic
;

126 
__u32
 
	mh_blockty≥
;

127 
__u32
 
	mh_£quí˚
;

128 
	mh_chksum_ty≥
;

129 
	mh_chksum_size
;

130 
	mh_∑ddög
[2];

131 
__u32
 
	mh_chksum
[
JBD2_CHECKSUM_BYTES
];

132 
__u64
 
	mh_commô_£c
;

133 
__u32
 
	mh_commô_n£c
;

139 
	sjou∫Æ_block_èg_s


141 
__u32
 
	mt_blockƒ
;

142 
__u32
 
	mt_Êags
;

143 
__u32
 
	mt_blockƒ_high
;

144 } 
	tjou∫Æ_block_èg_t
;

146 
	#JBD_TAG_SIZE64
 ((
jou∫Æ_block_èg_t
))

	)

147 
	#JBD_TAG_SIZE32
 (8)

	)

153 
	sjou∫Æ_ªvoke_hódî_s


155 
jou∫Æ_hódî_t
 
	mr_hódî
;

156 
	mr_cou¡
;

157 } 
	tjou∫Æ_ªvoke_hódî_t
;

161 
	#JFS_FLAG_ESCAPE
 1

	)

162 
	#JFS_FLAG_SAME_UUID
 2

	)

163 
	#JFS_FLAG_DELETED
 4

	)

164 
	#JFS_FLAG_LAST_TAG
 8

	)

170 
	sjou∫Æ_su≥rblock_s


173 
jou∫Æ_hódî_t
 
	ms_hódî
;

177 
__u32
 
	ms_blocksize
;

178 
__u32
 
	ms_maxÀn
;

179 
__u32
 
	ms_fú°
;

183 
__u32
 
	ms_£quí˚
;

184 
__u32
 
	ms_°¨t
;

188 
__s32
 
	ms_î∫o
;

192 
__u32
 
	ms_„©uª_com∑t
;

193 
__u32
 
	ms_„©uª_öcom∑t
;

194 
__u32
 
	ms_„©uª_ro_com∑t
;

196 
__u8
 
	ms_uuid
[16];

199 
__u32
 
	ms_ƒ_u£rs
;

201 
__u32
 
	ms_dynsu≥r
;

204 
__u32
 
	ms_max_å™ß˘i⁄
;

205 
__u32
 
	ms_max_å™s_d©a
;

208 
__u32
 
	ms_∑ddög
[44];

211 
__u8
 
	ms_u£rs
[16*48];

213 } 
	tjou∫Æ_su≥rblock_t
;

215 
	#JFS_HAS_COMPAT_FEATURE
(
j
,
mask
) \

216 ((
j
)->
j_f‹m©_vîsi⁄
 >= 2 && \

217 ((
j
)->
j_su≥rblock
->
s_„©uª_com∑t
 & 
	`˝u_to_be32
((
mask
))))

	)

218 
	#JFS_HAS_RO_COMPAT_FEATURE
(
j
,
mask
) \

219 ((
j
)->
j_f‹m©_vîsi⁄
 >= 2 && \

220 ((
j
)->
j_su≥rblock
->
s_„©uª_ro_com∑t
 & 
	`˝u_to_be32
((
mask
))))

	)

221 
	#JFS_HAS_INCOMPAT_FEATURE
(
j
,
mask
) \

222 ((
j
)->
j_f‹m©_vîsi⁄
 >= 2 && \

223 ((
j
)->
j_su≥rblock
->
s_„©uª_öcom∑t
 & 
	`˝u_to_be32
((
mask
))))

	)

225 
	#JFS_FEATURE_COMPAT_CHECKSUM
 0x00000001

	)

227 
	#JFS_FEATURE_INCOMPAT_REVOKE
 0x00000001

	)

229 
	#JFS_FEATURE_INCOMPAT_REVOKE
 0x00000001

	)

230 
	#JFS_FEATURE_INCOMPAT_64BIT
 0x00000002

	)

231 
	#JFS_FEATURE_INCOMPAT_ASYNC_COMMIT
 0x00000004

	)

234 
	#JFS_KNOWN_COMPAT_FEATURES
 0

	)

235 
	#JFS_KNOWN_ROCOMPAT_FEATURES
 0

	)

236 
	#JFS_KNOWN_INCOMPAT_FEATURES
 (
JFS_FEATURE_INCOMPAT_REVOKE
|\

237 
JFS_FEATURE_INCOMPAT_ASYNC_COMMIT
)

	)

239 #ifde‡
__KERNEL__


241 
	~<löux/fs.h
>

242 
	~<löux/sched.h
>

244 
	#JBD_ASSERTIONS


	)

245 #ifde‡
JBD_ASSERTIONS


246 
	#J_ASSERT
(
as£π
) \

248 i‡(!(
as£π
)) { \

249 
	`¥ötk
 (
KERN_EMERG
 \

251 
__FUNCTION__
, 
__FILE__
, 
__LINE__
, #assert); \

252 
	`BUG
(); \

254 } 0)

	)

256 #i‡
deföed
(
CONFIG_BUFFER_DEBUG
)

257 
buf„r_as£πi⁄_Áûuª
(
buf„r_hód
 *
bh
);

258 
	#J_ASSERT_BH
(
bh
, 
ex¥
) \

260 i‡(!(
ex¥
)) \

261 
	`buf„r_as£πi⁄_Áûuª
(
bh
); \

262 
	`J_ASSERT
(
ex¥
); \

263 } 0)

	)

264 
	#J_ASSERT_JH
(
jh
, 
ex¥
Ë
	`J_ASSERT_BH
(
	`jh2bh
(jh),Éx¥)

	)

266 
	#J_ASSERT_BH
(
bh
, 
ex¥
Ë
	`J_ASSERT
”x¥)

	)

267 
	#J_ASSERT_JH
(
jh
, 
ex¥
Ë
	`J_ASSERT
”x¥)

	)

271 
	#J_ASSERT
(
as£π
)

	)

274 
	ejbd_°©e_bôs
 {

275 
	mBH_JWrôe


276 
BH_Priv©eSèπ
,

277 
	mBH_Fªed
,

278 
	mBH_Revoked
,

279 
	mBH_RevokeVÆid
,

280 
	mBH_JBDDúty
,

284 
ölöe
 
	$buf„r_jbd
(
buf„r_hód
 *
bh
)

286  
	`__buf„r_°©e
(
bh
, 
JBD
);

287 
	}
}

289 
ölöe
 
buf„r_hód
 *
	$jh2bh
(
jou∫Æ_hód
 *
jh
)

291  
jh
->
b_bh
;

292 
	}
}

294 
ölöe
 
jou∫Æ_hód
 *
	$bh2jh
(
buf„r_hód
 *
bh
)

296  
bh
->
b_¥iv©e
;

297 
	}
}

299 
	gjbd_ªvoke_èbÀ_s
;

314 
	sh™dÀ_s


317 
å™ß˘i⁄_t
 * 
	mh_å™ß˘i⁄
;

320 
	mh_buf„r_¸edôs
;

323 
	mh_ªf
;

327 
	mh_îr
;

330 
	mh_sync
: 1;

331 
	mh_jd©a
: 1;

332 
	mh_ab‹ãd
: 1;

352 
	så™ß˘i⁄_s


355 
jou∫Æ_t
 * 
	mt_jou∫Æ
;

358 
tid_t
 
	mt_tid
;

362 
	mT_RUNNING
,

363 
	mT_LOCKED
,

364 
	mT_RUNDOWN
,

365 
	mT_FLUSH
,

366 
	mT_COMMIT
,

367 
	mT_FINISHED


368 } 
	mt_°©e
;

371 
	mt_log_°¨t
;

375 
öode
 * 
	mt_ûi°
;

378 
	mt_ƒ_buf„rs
;

382 
jou∫Æ_hód
 * 
	mt_ª£rved_li°
;

386 
jou∫Æ_hód
 * 
	mt_buf„rs
;

393 
jou∫Æ_hód
 * 
	mt_sync_d©Æi°
;

400 
jou∫Æ_hód
 * 
	mt_async_d©Æi°
;

405 
jou∫Æ_hód
 * 
	mt_f‹gë
;

412 
jou∫Æ_hód
 * 
	mt_checkpoöt_li°
;

416 
jou∫Æ_hód
 * 
	mt_iobuf_li°
;

422 
jou∫Æ_hód
 * 
	mt_shadow_li°
;

426 
jou∫Æ_hód
 * 
	mt_log_li°
;

429 
	mt_upd©es
;

433 
	mt_out°™dög_¸edôs
;

440 
å™ß˘i⁄_t
 *
	mt_˝√xt
, *
	mt_˝¥ev
;

444 
	mt_expúes
;

447 
	mt_h™dÀ_cou¡
;

458 
	sjou∫Æ_s


461 
	mj_Êags
;

465 
	mj_î∫o
;

468 
buf„r_hód
 * 
	mj_sb_buf„r
;

469 
jou∫Æ_su≥rblock_t
 * 
	mj_su≥rblock
;

472 
	mj_f‹m©_vîsi⁄
;

475 
	mj_b¨rõr_cou¡
;

478 
£m≠h‹e
 
	mj_b¨rõr
;

481 
å™ß˘i⁄_t
 * 
	mj_ru¬ög_å™ß˘i⁄
;

484 
å™ß˘i⁄_t
 * 
	mj_commôtög_å™ß˘i⁄
;

489 
å™ß˘i⁄_t
 * 
	mj_checkpoöt_å™ß˘i⁄s
;

493 
waô_queue_hód_t
 
	mj_waô_å™ß˘i⁄_locked
;

496 
waô_queue_hód_t
 
	mj_waô_log•a˚
;

499 
waô_queue_hód_t
 
	mj_waô_d⁄e_commô
;

502 
waô_queue_hód_t
 
	mj_waô_checkpoöt
;

505 
waô_queue_hód_t
 
	mj_waô_commô
;

508 
waô_queue_hód_t
 
	mj_waô_upd©es
;

511 
£m≠h‹e
 
	mj_checkpoöt_£m
;

514 
£m≠h‹e
 
	mj_£m
;

517 
	mj_hód
;

521 
	mj_èû
;

524 
	mj_‰ì
;

528 
	mj_fú°
, 
	mj_œ°
;

532 
kdev_t
 
	mj_dev
;

533 
	mj_blocksize
;

534 
	mj_blk_off£t
;

538 
kdev_t
 
	mj_fs_dev
;

541 
	mj_maxÀn
;

546 
öode
 * 
	mj_öode
;

549 
tid_t
 
	mj_èû_£quí˚
;

551 
tid_t
 
	mj_å™ß˘i⁄_£quí˚
;

553 
tid_t
 
	mj_commô_£quí˚
;

555 
tid_t
 
	mj_commô_ªque°
;

563 
__u8
 
	mj_uuid
[16];

566 
èsk_°ru˘
 * 
	mj_èsk
;

570 
	mj_max_å™ß˘i⁄_buf„rs
;

574 
	mj_commô_öãrvÆ
;

577 
timî_li°
 * 
	mj_commô_timî
;

578 
	mj_commô_timî_a˘ive
;

581 
li°_hód
 
	mj_Æl_jou∫Æs
;

585 
jbd_ªvoke_èbÀ_s
 *
	mj_ªvoke
;

588 
	mj_Áûed_commô
;

594 
	#JFS_UNMOUNT
 0x001

	)

595 
	#JFS_ABORT
 0x002

	)

596 
	#JFS_ACK_ERR
 0x004

	)

597 
	#JFS_FLUSHED
 0x008

	)

598 
	#JFS_LOADED
 0x010

	)

606 
__jou∫Æ_unfûe_buf„r
(
jou∫Æ_hód
 *);

607 
jou∫Æ_unfûe_buf„r
(
jou∫Æ_hód
 *);

608 
__jou∫Æ_ªfûe_buf„r
(
jou∫Æ_hód
 *);

609 
jou∫Æ_ªfûe_buf„r
(
jou∫Æ_hód
 *);

610 
__jou∫Æ_fûe_buf„r
(
jou∫Æ_hód
 *, 
å™ß˘i⁄_t
 *, );

611 
__jou∫Æ_‰ì_buf„r
(
jou∫Æ_hód
 *
bh
);

612 
jou∫Æ_fûe_buf„r
(
jou∫Æ_hód
 *, 
å™ß˘i⁄_t
 *, );

613 
__jou∫Æ_˛ón_d©a_li°
(
å™ß˘i⁄_t
 *
å™ß˘i⁄
);

616 
jou∫Æ_hód
 * 
jou∫Æ_gë_des¸ùt‹_buf„r
(
jou∫Æ_t
 *);

617 
jou∫Æ_√xt_log_block
(
jou∫Æ_t
 *);

620 
jou∫Æ_commô_å™ß˘i⁄
(
jou∫Æ_t
 *);

623 
__jou∫Æ_˛ón_checkpoöt_li°
(
jou∫Æ_t
 *
jou∫Æ
);

624 
jou∫Æ_ªmove_checkpoöt
(
jou∫Æ_hód
 *);

625 
__jou∫Æ_ªmove_checkpoöt
(
jou∫Æ_hód
 *);

626 
jou∫Æ_ö£π_checkpoöt
(
jou∫Æ_hód
 *, 
å™ß˘i⁄_t
 *);

627 
__jou∫Æ_ö£π_checkpoöt
(
jou∫Æ_hód
 *,
å™ß˘i⁄_t
 *);

631 
jou∫Æ_wrôe_mëad©a_buf„r
(
å™ß˘i⁄_t
 *
å™ß˘i⁄
,

632 
jou∫Æ_hód
 *
jh_ö
,

633 
jou∫Æ_hód
 **
jh_out
,

634 
blockƒ
);

637 
__waô_⁄_jou∫Æ
 (
jou∫Æ_t
 *);

653 
ölöe
 
	$lock_jou∫Æ
(
jou∫Æ_t
 *
jou∫Æ
)

655 
	`down
(&
jou∫Æ
->
j_£m
);

656 
	}
}

659 
ölöe
 
	$åy_lock_jou∫Æ
(
jou∫Æ_t
 * 
jou∫Æ
)

661  
	`down_åylock
(&
jou∫Æ
->
j_£m
);

662 
	}
}

664 
ölöe
 
	$u∆ock_jou∫Æ
(
jou∫Æ_t
 * 
jou∫Æ
)

666 
	`up
(&
jou∫Æ
->
j_£m
);

667 
	}
}

670 
ölöe
 
h™dÀ_t
 *
	$jou∫Æ_cuºít_h™dÀ
()

672  
cuºít
->
jou∫Æ_öfo
;

673 
	}
}

681 
h™dÀ_t
 *
jou∫Æ_°¨t
(
jou∫Æ_t
 *, 
nblocks
);

682 
h™dÀ_t
 *
jou∫Æ_åy_°¨t
(
jou∫Æ_t
 *, 
nblocks
);

683 
jou∫Æ_ª°¨t
 (
h™dÀ_t
 *, 
nblocks
);

684 
jou∫Æ_exãnd
 (
h™dÀ_t
 *, 
nblocks
);

685 
jou∫Æ_gë_wrôe_ac˚ss
 (
h™dÀ_t
 *, 
buf„r_hód
 *);

686 
jou∫Æ_gë_¸óã_ac˚ss
 (
h™dÀ_t
 *, 
buf„r_hód
 *);

687 
jou∫Æ_gë_undo_ac˚ss
 (
h™dÀ_t
 *, 
buf„r_hód
 *);

688 
jou∫Æ_dúty_d©a
 (
h™dÀ_t
 *,

689 
buf„r_hód
 *, 
async
);

690 
jou∫Æ_dúty_mëad©a
 (
h™dÀ_t
 *, 
buf„r_hód
 *);

691 
jou∫Æ_ªÀa£_buf„r
 (
h™dÀ_t
 *, 
buf„r_hód
 *);

692 
jou∫Æ_f‹gë
 (
h™dÀ_t
 *, 
buf„r_hód
 *);

693 
jou∫Æ_sync_buf„r
 (
buf„r_hód
 *);

694 
jou∫Æ_Êush∑ge
(
jou∫Æ_t
 *, 
∑ge
 *, );

695 
jou∫Æ_åy_to_‰ì_buf„rs
(
jou∫Æ_t
 *, 
∑ge
 *, );

696 
jou∫Æ_°›
(
h™dÀ_t
 *);

697 
jou∫Æ_Êush
 (
jou∫Æ_t
 *);

699 
jou∫Æ_lock_upd©es
 (
jou∫Æ_t
 *);

700 
jou∫Æ_u∆ock_upd©es
 (
jou∫Æ_t
 *);

702 
jou∫Æ_t
 * 
jou∫Æ_öô_dev
(
kdev_t
 
dev
, kdev_à
fs_dev
,

703 
°¨t
, 
Àn
, 
bsize
);

704 
jou∫Æ_t
 * 
jou∫Æ_öô_öode
 (
öode
 *);

705 
jou∫Æ_upd©e_f‹m©
 (
jou∫Æ_t
 *);

706 
jou∫Æ_check_u£d_„©uªs


707 (
jou∫Æ_t
 *, , , );

708 
jou∫Æ_check_avaûabÀ_„©uªs


709 (
jou∫Æ_t
 *, , , );

710 
jou∫Æ_£t_„©uªs


711 (
jou∫Æ_t
 *, , , );

712 
jou∫Æ_¸óã
 (
jou∫Æ_t
 *);

713 
jou∫Æ_lﬂd
 (
jou∫Æ_t
 *
jou∫Æ
);

714 
jou∫Æ_de°roy
 (
jou∫Æ_t
 *);

715 
jou∫Æ_ªcovî
 (
jou∫Æ_t
 *
jou∫Æ
);

716 
jou∫Æ_wùe
 (
jou∫Æ_t
 *, );

717 
jou∫Æ_skù_ªcovîy
 (
jou∫Æ_t
 *);

718 
jou∫Æ_upd©e_su≥rblock
 (
jou∫Æ_t
 *, );

719 
__jou∫Æ_ab‹t
 (
jou∫Æ_t
 *);

720 
jou∫Æ_ab‹t
 (
jou∫Æ_t
 *, );

721 
jou∫Æ_î∫o
 (
jou∫Æ_t
 *);

722 
jou∫Æ_ack_îr
 (
jou∫Æ_t
 *);

723 
jou∫Æ_˛ór_îr
 (
jou∫Æ_t
 *);

724 
jou∫Æ_bm≠
(
jou∫Æ_t
 *
jou∫Æ
, 
blockƒ
);

725 
jou∫Æ_f‹˚_commô
(
jou∫Æ_t
 *
jou∫Æ
);

730 
jou∫Æ_hód


731 *
jou∫Æ_add_jou∫Æ_hód
(
buf„r_hód
 *
bh
);

732 
jou∫Æ_ªmove_jou∫Æ_hód
(
buf„r_hód
 *
bh
);

733 
__jou∫Æ_ªmove_jou∫Æ_hód
(
buf„r_hód
 *
bh
);

734 
jou∫Æ_u∆ock_jou∫Æ_hód
(
jou∫Æ_hód
 *
jh
);

737 
	#JOURNAL_REVOKE_DEFAULT_HASH
 256

	)

738 
jou∫Æ_öô_ªvoke
(
jou∫Æ_t
 *, );

739 
jou∫Æ_de°roy_ªvoke_ˇches
();

740 
jou∫Æ_öô_ªvoke_ˇches
();

742 
jou∫Æ_de°roy_ªvoke
(
jou∫Æ_t
 *);

743 
jou∫Æ_ªvoke
 (
h™dÀ_t
 *,

744 , 
buf„r_hód
 *);

745 
jou∫Æ_ˇn˚l_ªvoke
(
h™dÀ_t
 *, 
jou∫Æ_hód
 *);

746 
jou∫Æ_wrôe_ªvoke_ªc‹ds
(
jou∫Æ_t
 *, 
å™ß˘i⁄_t
 *);

749 
jou∫Æ_£t_ªvoke
(
jou∫Æ_t
 *, , 
tid_t
);

750 
jou∫Æ_ã°_ªvoke
(
jou∫Æ_t
 *, , 
tid_t
);

751 
jou∫Æ_˛ór_ªvoke
(
jou∫Æ_t
 *);

752 
jou∫Æ_bªl£_¨øy
(
buf„r_hód
 *
b
[], 
n
);

760 
log_•a˚_À·
 (
jou∫Æ_t
 *);

761 
tid_t
 
log_°¨t_commô
 (
jou∫Æ_t
 *, 
å™ß˘i⁄_t
 *);

762 
log_waô_commô
 (
jou∫Æ_t
 *, 
tid_t
);

763 
log_do_checkpoöt
 (
jou∫Æ_t
 *, );

765 
log_waô_f‹_•a˚
(
jou∫Æ_t
 *, 
nblocks
);

766 
__jou∫Æ_dr›_å™ß˘i⁄
(
jou∫Æ_t
 *, 
å™ß˘i⁄_t
 *);

767 
˛ónup_jou∫Æ_èû
(
jou∫Æ_t
 *);

770 
shrök_jou∫Æ_mem‹y
();

774 
	#jbd_ENOSYS
() \

776 
	`¥ötk
 (
KERN_ERR
 "JBD unim∂emíãd fun˘i⁄ " 
__FUNCTION__
); \

777 
cuºít
->
°©e
 = 
TASK_UNINTERRUPTIBLE
; \

778 
	`scheduÀ
(); \

779 } 1)

	)

791 
ölöe
 
	$is_jou∫Æ_ab‹ãd
(
jou∫Æ_t
 *
jou∫Æ
)

793  
jou∫Æ
->
j_Êags
 & 
JFS_ABORT
;

794 
	}
}

796 
ölöe
 
	$is_h™dÀ_ab‹ãd
(
h™dÀ_t
 *
h™dÀ
)

798 i‡(
h™dÀ
->
h_ab‹ãd
)

800  
	`is_jou∫Æ_ab‹ãd
(
h™dÀ
->
h_å™ß˘i⁄
->
t_jou∫Æ
);

801 
	}
}

803 
ölöe
 
	$jou∫Æ_ab‹t_h™dÀ
(
h™dÀ_t
 *
h™dÀ
)

805 
h™dÀ
->
h_ab‹ãd
 = 1;

806 
	}
}

809 #i‚de‡
BUG


810 
	#BUG
() do { \

811 
	`¥ötk
("kî√»BUGáà%s:%d!\n", 
__FILE__
, 
__LINE__
); \

813 } 0)

	)

818 
jou∫Æ_ªcovî
 (
jou∫Æ_t
 *
jou∫Æ
);

819 
jou∫Æ_skù_ªcovîy
 (
jou∫Æ_t
 *);

822 
jou∫Æ_öô_ªvoke
(
jou∫Æ_t
 *, );

823 
jou∫Æ_de°roy_ªvoke_ˇches
();

824 
jou∫Æ_öô_ªvoke_ˇches
();

827 
jou∫Æ_£t_ªvoke
(
jou∫Æ_t
 *, , 
tid_t
);

828 
jou∫Æ_ã°_ªvoke
(
jou∫Æ_t
 *, , 
tid_t
);

829 
jou∫Æ_˛ór_ªvoke
(
jou∫Æ_t
 *);

830 
jou∫Æ_bªl£_¨øy
(
buf„r_hód
 *
b
[], 
n
);

832 
jou∫Æ_de°roy_ªvoke
(
jou∫Æ_t
 *);

835 
ölöe
 
	$tid_gt
(
tid_t
 
x
,Åid_à
y
Ë
	`EXT2FS_ATTR
((
unu£d
));

836 
ölöe
 
	$tid_geq
(
tid_t
 
x
,Åid_à
y
Ë
	`EXT2FS_ATTR
((
unu£d
));

841 
ölöe
 
	$tid_gt
(
tid_t
 
x
,Åid_à
y
)

843 
dif„ªn˚
 = (
x
 - 
y
);

844  (
dif„ªn˚
 > 0);

845 
	}
}

847 
ölöe
 
	$tid_geq
(
tid_t
 
x
,Åid_à
y
)

849 
dif„ªn˚
 = (
x
 - 
y
);

850  (
dif„ªn˚
 >= 0);

851 
	}
}

853 
jou∫Æ_blocks_≥r_∑ge
(
öode
 *inode);

860 
	#BJ_N⁄e
 0

	)

861 
	#BJ_SyncD©a
 1

	)

862 
	#BJ_AsyncD©a
 2

	)

863 
	#BJ_Mëad©a
 3

	)

864 
	#BJ_F‹gë
 4

	)

865 
	#BJ_IO
 5

	)

866 
	#BJ_Shadow
 6

	)

867 
	#BJ_LogCé
 7

	)

868 
	#BJ_Re£rved
 8

	)

869 
	#BJ_Ty≥s
 9

	)

871 
jbd_blocks_≥r_∑ge
(
öode
 *inode);

873 #ifde‡
__KERNEL__


875 
•ölock_t
 
jh_•li˚_lock
;

880 
	#SPLICE_LOCK
(
ex¥1
, 
ex¥2
) \

882 
ªt
 = (
ex¥1
); \

883 i‡(
ªt
) { \

884 
	`•ö_lock
(&
jh_•li˚_lock
); \

885 
ªt
 = (
ex¥1
Ë&& (
ex¥2
); \

886 
	`•ö_u∆ock
(&
jh_•li˚_lock
); \

888 
ªt
; \

889 })

	)

901 
ölöe
 
	$buf„r_jli°_eq
(
buf„r_hód
 *
bh
, 
li°
)

903  
	`SPLICE_LOCK
(
	`buf„r_jbd
(
bh
), 
	`bh2jh
(bh)->
b_jli°
 =
li°
);

904 
	}
}

907 
ölöe
 
	$buf„r_jdúty
(
buf„r_hód
 *
bh
)

909  
	`buf„r_jbd
(
bh
Ë&& 
	`__buf„r_°©e
(bh, 
JBDDúty
);

910 
	}
}

913 
ölöe
 
	$buf„r_jbd_d©a
(
buf„r_hód
 *
bh
)

915  
	`SPLICE_LOCK
(
	`buf„r_jbd
(
bh
),

916 
	`bh2jh
(
bh
)->
b_jli°
 =
BJ_SyncD©a
 ||

917 
	`bh2jh
(
bh
)->
b_jli°
 =
BJ_AsyncD©a
);

918 
	}
}

920 #ifde‡
CONFIG_SMP


921 
	#as£π_•ö_locked
(
lock
Ë
	`J_ASSERT
(
	`•ö_is_locked
÷ock))

	)

923 
	#as£π_•ö_locked
(
lock
Ëdÿ{} 0)

	)

926 
	#buf„r_åa˚_öô
(
bh
Ëdÿ{} 0)

	)

927 
	#¥öt_buf„r_fõlds
(
bh
Ëdÿ{} 0)

	)

928 
	#¥öt_buf„r_åa˚
(
bh
Ëdÿ{} 0)

	)

929 
	#BUFFER_TRACE
(
bh
, 
öfo
Ëdÿ{} 0)

	)

930 
	#BUFFER_TRACE2
(
bh
, 
bh2
, 
öfo
Ëdÿ{} 0)

	)

931 
	#JBUFFER_TRACE
(
jh
, 
öfo
Ëdÿ{} 0)

	)

942 #i‡
deföed
(
__KERNEL__
Ë&& !(deföed(
CONFIG_JBD
Ë|| deföed(
CONFIG_JBD_MODULE
))

944 
	#J_ASSERT
(
ex¥
Ëdÿ{} 0)

	)

945 
	#J_ASSERT_BH
(
bh
, 
ex¥
Ëdÿ{} 0)

	)

946 
	#buf„r_jbd
(
bh
Ë0

	)

947 
	#buf„r_jli°_eq
(
bh
, 
vÆ
Ë0

	)

948 
	#jou∫Æ_buf„r_jou∫Æ_Ãu
(
bh
Ë0

	)

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/kernel-list.h

1 #i‚de‡
_LINUX_LIST_H


2 
	#_LINUX_LIST_H


	)

14 
	sli°_hód
 {

15 
li°_hód
 *
	m√xt
, *
	m¥ev
;

18 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

20 
	#LIST_HEAD
(
«me
) \

21 
li°_hód
 
«me
 = { &«me, &«mê}

	)

23 
	#INIT_LIST_HEAD
(
±r
) do { \

24 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

25 } 0)

	)

27 #i‡(!
deföed
(
__GNUC__
Ë&& !deföed(
__WATCOMC__
))

28 
	#__ölöe__


	)

37 
__ölöe__
 
	$__li°_add
(
li°_hód
 * 
√w
,

38 
li°_hód
 * 
¥ev
,

39 
li°_hód
 * 
√xt
)

41 
√xt
->
¥ev
 = 
√w
;

42 
√w
->
√xt
 =Çext;

43 
√w
->
¥ev
 =Örev;

44 
¥ev
->
√xt
 = 
√w
;

45 
	}
}

50 
__ölöe__
 
	$li°_add
(
li°_hód
 *
√w
, li°_hód *
hód
)

52 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

53 
	}
}

58 
__ölöe__
 
	$li°_add_èû
(
li°_hód
 *
√w
, li°_hód *
hód
)

60 
	`__li°_add
(
√w
, 
hód
->
¥ev
, head);

61 
	}
}

70 
__ölöe__
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
,

71 
li°_hód
 * 
√xt
)

73 
√xt
->
¥ev
 =Örev;

74 
¥ev
->
√xt
 =Çext;

75 
	}
}

77 
__ölöe__
 
	$li°_dñ
(
li°_hód
 *
íåy
)

79 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

80 
	}
}

82 
__ölöe__
 
	$li°_em±y
(
li°_hód
 *
hód
)

84  
hód
->
√xt
 == head;

85 
	}
}

90 
__ölöe__
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

92 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

94 i‡(
fú°
 !
li°
) {

95 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

96 
li°_hód
 *
©
 = 
hód
->
√xt
;

98 
fú°
->
¥ev
 = 
hód
;

99 
hód
->
√xt
 = 
fú°
;

101 
œ°
->
√xt
 = 
©
;

102 
©
->
¥ev
 = 
œ°
;

104 
	}
}

106 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

107 ((
ty≥
 *)((*)(
±r
)-()(&(—y≥ *)0)->
membî
)))

	)

109 
	#li°_f‹_óch
(
pos
, 
hód
) \

110 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/link.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

18 
	~"ext2_fs.h
"

19 
	~"ext2fs.h
"

21 
	slök_°ru˘
 {

22 
ext2_fûsys
 
	mfs
;

23 c⁄° *
	m«me
;

24 
	m«mñí
;

25 
ext2_öo_t
 
	möode
;

26 
	mÊags
;

27 
	md⁄e
;

28 
	mblocksize
;

29 
îrcode_t
 
	mîr
;

30 
ext2_su≥r_block
 *
	msb
;

33 
	$lök_¥oc
(
ext2_dú_íåy
 *
dúít
,

34 
off£t
,

35 
blocksize
,

36 *
buf
,

37 *
¥iv_d©a
)

39 
lök_°ru˘
 *
ls
 = (lök_°ru˘ *Ë
¥iv_d©a
;

40 
ext2_dú_íåy
 *
√xt
;

41 
ªc_Àn
, 
mö_ªc_Àn
, 
cuº_ªc_Àn
;

42 
ªt
 = 0;

44 
ªc_Àn
 = 
	`EXT2_DIR_REC_LEN
(
ls
->
«mñí
);

46 
ls
->
îr
 = 
	`ext2fs_gë_ªc_Àn
÷s->
fs
, 
dúít
, &
cuº_ªc_Àn
);

47 i‡(
ls
->
îr
)

48  
DIRENT_ABORT
;

54 
√xt
 = (
ext2_dú_íåy
 *Ë(
buf
 + 
off£t
 + 
cuº_ªc_Àn
);

55 i‡((
off£t
 + 
cuº_ªc_Àn
 < 
blocksize
 - 8) &&

56 (
√xt
->
öode
 == 0) &&

57 (
off£t
 + 
cuº_ªc_Àn
 + 
√xt
->
ªc_Àn
 <
blocksize
)) {

58 
cuº_ªc_Àn
 +
√xt
->
ªc_Àn
;

59 
ls
->
îr
 = 
	`ext2fs_£t_ªc_Àn
÷s->
fs
, 
cuº_ªc_Àn
, 
dúít
);

60 i‡(
ls
->
îr
)

61  
DIRENT_ABORT
;

62 
ªt
 = 
DIRENT_CHANGED
;

70 i‡(
dúít
->
öode
) {

71 
mö_ªc_Àn
 = 
	`EXT2_DIR_REC_LEN
(
dúít
->
«me_Àn
 & 0xFF);

72 i‡(
cuº_ªc_Àn
 < (
mö_ªc_Àn
 + 
ªc_Àn
))

73  
ªt
;

74 
ªc_Àn
 = 
cuº_ªc_Àn
 - 
mö_ªc_Àn
;

75 
ls
->
îr
 = 
	`ext2fs_£t_ªc_Àn
÷s->
fs
, 
mö_ªc_Àn
, 
dúít
);

76 i‡(
ls
->
îr
)

77  
DIRENT_ABORT
;

78 
√xt
 = (
ext2_dú_íåy
 *Ë(
buf
 + 
off£t
 +

79 
dúít
->
ªc_Àn
);

80 
√xt
->
öode
 = 0;

81 
√xt
->
«me_Àn
 = 0;

82 
ls
->
îr
 = 
	`ext2fs_£t_ªc_Àn
÷s->
fs
, 
ªc_Àn
, 
√xt
);

83 i‡(
ls
->
îr
)

84  
DIRENT_ABORT
;

85  
DIRENT_CHANGED
;

92 i‡(
cuº_ªc_Àn
 < 
ªc_Àn
)

93  
ªt
;

94 
dúít
->
öode
 = 
ls
->inode;

95 
dúít
->
«me_Àn
 = 
ls
->
«mñí
;

96 
	`°∫˝y
(
dúít
->
«me
, 
ls
->«me,Üs->
«mñí
);

97 i‡(
ls
->
sb
->
s_„©uª_öcom∑t
 & 
EXT2_FEATURE_INCOMPAT_FILETYPE
)

98 
dúít
->
«me_Àn
 |(
ls
->
Êags
 & 0x7) << 8;

100 
ls
->
d⁄e
++;

101  
DIRENT_ABORT
|
DIRENT_CHANGED
;

102 
	}
}

108 #ifde‡
__TURBOC__


109 #¥agm®
¨gsu£d


111 
îrcode_t
 
	$ext2fs_lök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

112 
ext2_öo_t
 
öo
, 
Êags
)

114 
îrcode_t
 
ªtvÆ
;

115 
lök_°ru˘
 
ls
;

116 
ext2_öode
 
öode
;

118 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

120 i‡(!(
fs
->
Êags
 & 
EXT2_FLAG_RW
))

121  
EXT2_ET_RO_FILSYS
;

123 
ls
.
fs
 = fs;

124 
ls
.
«me
 =Çame;

125 
ls
.
«mñí
 = 
«me
 ? 
	`°æí
(name) : 0;

126 
ls
.
öode
 = 
öo
;

127 
ls
.
Êags
 = flags;

128 
ls
.
d⁄e
 = 0;

129 
ls
.
sb
 = 
fs
->
su≥r
;

130 
ls
.
blocksize
 = 
fs
->blocksize;

131 
ls
.
îr
 = 0;

133 
ªtvÆ
 = 
	`ext2fs_dú_ôî©e
(
fs
, 
dú
, 
DIRENT_FLAG_INCLUDE_EMPTY
,

134 0, 
lök_¥oc
, &
ls
);

135 i‡(
ªtvÆ
)

136  
ªtvÆ
;

137 i‡(
ls
.
îr
)

138  
ls
.
îr
;

140 i‡(!
ls
.
d⁄e
)

141  
EXT2_ET_DIR_NO_SPACE
;

143 i‡((
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
dú
, &
öode
)) != 0)

144  
ªtvÆ
;

146 i‡(
öode
.
i_Êags
 & 
EXT2_INDEX_FL
) {

147 
öode
.
i_Êags
 &~
EXT2_INDEX_FL
;

148 i‡((
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fs
, 
dú
, &
öode
)) != 0)

149  
ªtvÆ
;

153 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/llseek.c

12 
	#_LARGEFILE_SOURCE


	)

13 
	#_LARGEFILE64_SOURCE


	)

15 
	~<c⁄fig.h
>

17 #i‡
HAVE_SYS_TYPES_H


18 
	~<sys/ty≥s.h
>

21 #i‡
HAVE_ERRNO_H


22 
	~<î∫o.h
>

24 #i‡
HAVE_UNISTD_H


25 
	~<uni°d.h
>

27 #ifde‡
__MSDOS__


28 
	~<io.h
>

30 
	~"ë/com_îr.h
"

31 
	~"ext2fs/ext2_io.h
"

33 #ifde‡
__löux__


35 #i‡
deföed
(
HAVE_LSEEK64
Ë&& deföed(
HAVE_LSEEK64_PROTOTYPE
)

37 
	#my_Œ£ek
 
l£ek64


	)

40 #i‡
deföed
(
HAVE_LLSEEK
)

41 
	~<sysˇŒ.h
>

43 #i‚de‡
HAVE_LLSEEK_PROTOTYPE


44 
Œ£ek
 (
fd
, 
off£t
, 
‹igö
);

47 
	#my_Œ£ek
 
Œ£ek


	)

51 #i‡
SIZEOF_LONG
 =
SIZEOF_LONG_LONG


53 
	#Œ£ek
 
l£ek


	)

57 
	~<löux/uni°d.h
>

59 #i‚de‡
__NR__Œ£ek


60 
	#__NR__Œ£ek
 140

	)

63 #i‚de‡
__i386__


64 
_Œ£ek
 (, ,

65 , 
ext2_loff_t
 *, );

67 
	$_sysˇŒ5
(,
_Œ£ek
,,
fd
,,
off£t_high
,

68 , 
off£t_low
,
ext2_loff_t
 *,
ªsu…
,

69 , 
‹igö
)

72 
ext2_loff_t
 
	$my_Œ£ek
 (
fd
, 
ext2_loff_t
 
off£t
, 
‹igö
)

74 
ext2_loff_t
 
ªsu…
;

75 
ªtvÆ
;

77 #i‚de‡
__i386__


78 
ªtvÆ
 = 
	`_Œ£ek
(
fd
, ((Ë
off£t
) >> 32,

80 
ªtvÆ
 = 
	`sysˇŒ
(
__NR__Œ£ek
, 
fd
, (Ë(
off£t
 >> 32),

82 ((Ë
off£t
) & 0xffffffff,

83 &
ªsu…
, 
‹igö
);

84  (
ªtvÆ
 =-1 ? (
ext2_loff_t
ËªtvÆ : 
ªsu…
);

85 
	}
}

92 
ext2_loff_t
 
	$ext2fs_Œ£ek
 (
fd
, 
ext2_loff_t
 
off£t
, 
‹igö
)

94 
ext2_loff_t
 
ªsu…
;

95 
do_com∑t
 = 0;

97 i‡(((
off_t
Ë>(
ext2_loff_t
)) ||

98 (
off£t
 < ((
ext2_loff_t
Ë1 << (((
off_t
)*8) -1))))

99  
	`l£ek
(
fd
, (
off_t
Ë
off£t
, 
‹igö
);

101 i‡(
do_com∑t
) {

102 
î∫o
 = 
EINVAL
;

106 
ªsu…
 = 
	`my_Œ£ek
 (
fd
, 
off£t
, 
‹igö
);

107 i‡(
ªsu…
 =-1 && 
î∫o
 =
ENOSYS
) {

112 
do_com∑t
++;

113 
î∫o
 = 
EINVAL
;

115  
ªsu…
;

116 
	}
}

120 #i‚de‡
EINVAL


121 
	#EINVAL
 
EXT2_ET_INVALID_ARGUMENT


	)

124 
ext2_loff_t
 
	$ext2fs_Œ£ek
 (
fd
, 
ext2_loff_t
 
off£t
, 
‹igö
)

126 #i‡
	`deföed
(
HAVE_LSEEK64
Ë&& deföed(
HAVE_LSEEK64_PROTOTYPE
)

127  
	`l£ek64
 (
fd
, 
off£t
, 
‹igö
);

129 i‡(((
off_t
Ë< (
ext2_loff_t
)) &&

130 (
off£t
 >((
ext2_loff_t
Ë1 << (((
off_t
)*8) -1)))) {

131 
î∫o
 = 
EINVAL
;

134  
	`l£ek
 (
fd
, (
off_t
Ë
off£t
, 
‹igö
);

136 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/lookup.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

18 
	~"ext2_fs.h
"

19 
	~"ext2fs.h
"

21 
	slookup_°ru˘
 {

22 c⁄° *
	m«me
;

23 
	mÀn
;

24 
ext2_öo_t
 *
	möode
;

25 
	mfound
;

28 #ifde‡
__TURBOC__


29 #¥agm®
¨gsu£d


31 
lookup_¥oc
(
ext2_dú_íåy
 *
dúít
,

32 
off£t
 
EXT2FS_ATTR
((
unu£d
)),

33 
blocksize
 
EXT2FS_ATTR
((
unu£d
)),

34 *
buf
 
EXT2FS_ATTR
((
unu£d
)),

35 *
¥iv_d©a
)

37 
lookup_°ru˘
 *
	gls
 = (lookup_°ru˘ *Ë
¥iv_d©a
;

39 i‡(
	gls
->
	gÀn
 !(
dúít
->
«me_Àn
 & 0xFF))

41 i‡(
°∫cmp
(
ls
->
«me
, 
dúít
->«me, (dúít->
«me_Àn
 & 0xFF)))

43 *
	gls
->
	göode
 = 
dúít
->
öode
;

44 
	gls
->
	gfound
++;

45  
	gDIRENT_ABORT
;

49 
îrcode_t
 
	$ext2fs_lookup
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

50 
«mñí
, *
buf
, 
ext2_öo_t
 *
öode
)

52 
îrcode_t
 
ªtvÆ
;

53 
lookup_°ru˘
 
ls
;

55 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

57 
ls
.
«me
 =Çame;

58 
ls
.
Àn
 = 
«mñí
;

59 
ls
.
öode
 = inode;

60 
ls
.
found
 = 0;

62 
ªtvÆ
 = 
	`ext2fs_dú_ôî©e
(
fs
, 
dú
, 0, 
buf
, 
lookup_¥oc
, &
ls
);

63 i‡(
ªtvÆ
)

64  
ªtvÆ
;

66  (
ls
.
found
Ë? 0 : 
EXT2_ET_FILE_NOT_FOUND
;

67 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/mkdir.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<f˙é.h
>

18 
	~<time.h
>

19 #i‡
HAVE_SYS_STAT_H


20 
	~<sys/°©.h
>

22 #i‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 
	~"ext2_fs.h
"

27 
	~"ext2fs.h
"

29 #i‚de‡
EXT2_FT_DIR


30 
	#EXT2_FT_DIR
 2

	)

33 
îrcode_t
 
	$ext2fs_mkdú
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
∑ª¡
,Éxt2_öo_à
öum
,

34 c⁄° *
«me
)

36 
îrcode_t
 
ªtvÆ
;

37 
ext2_öode
 
∑ª¡_öode
, 
öode
;

38 
ext2_öo_t
 
öo
 = 
öum
;

39 
ext2_öo_t
 
s¸©ch_öo
;

40 
blk_t
 
blk
;

41 *
block
 = 0;

43 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

48 i‡(!
öo
) {

49 
ªtvÆ
 = 
	`ext2fs_√w_öode
(
fs
, 
∑ª¡
, 
LINUX_S_IFDIR
 | 0755,

50 0, &
öo
);

51 i‡(
ªtvÆ
)

52 
˛ónup
;

58 
ªtvÆ
 = 
	`ext2fs_√w_block
(
fs
, 0, 0, &
blk
);

59 i‡(
ªtvÆ
)

60 
˛ónup
;

65 
ªtvÆ
 = 
	`ext2fs_√w_dú_block
(
fs
, 
öo
, 
∑ª¡
, &
block
);

66 i‡(
ªtvÆ
)

67 
˛ónup
;

72 i‡(
∑ª¡
 !
öo
) {

73 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
∑ª¡
, &
∑ª¡_öode
);

74 i‡(
ªtvÆ
)

75 
˛ónup
;

77 
	`mem£t
(&
∑ª¡_öode
, 0, (parent_inode));

82 
	`mem£t
(&
öode
, 0, (
ext2_öode
));

83 
öode
.
i_mode
 = 
LINUX_S_IFDIR
 | (0777 & ~
fs
->
umask
);

84 
öode
.
i_uid
 = inode.
i_gid
 = 0;

85 
	`ext2fs_iblk_£t
(
fs
, &
öode
, 1);

86 
öode
.
i_block
[0] = 
blk
;

87 
öode
.
i_löks_cou¡
 = 2;

88 
öode
.
i_size
 = 
fs
->
blocksize
;

93 
ªtvÆ
 = 
	`ext2fs_wrôe_dú_block
(
fs
, 
blk
, 
block
);

94 i‡(
ªtvÆ
)

95 
˛ónup
;

96 
ªtvÆ
 = 
	`ext2fs_wrôe_√w_öode
(
fs
, 
öo
, &
öode
);

97 i‡(
ªtvÆ
)

98 
˛ónup
;

103 i‡(
«me
) {

104 
ªtvÆ
 = 
	`ext2fs_lookup
(
fs
, 
∑ª¡
, 
«me
, 
	`°æí
(name), 0,

105 &
s¸©ch_öo
);

106 i‡(!
ªtvÆ
) {

107 
ªtvÆ
 = 
EXT2_ET_DIR_EXISTS
;

108 
«me
 = 0;

109 
˛ónup
;

111 i‡(
ªtvÆ
 !
EXT2_ET_FILE_NOT_FOUND
)

112 
˛ónup
;

113 
ªtvÆ
 = 
	`ext2fs_lök
(
fs
, 
∑ª¡
, 
«me
, 
öo
, 
EXT2_FT_DIR
);

114 i‡(
ªtvÆ
)

115 
˛ónup
;

121 i‡(
∑ª¡
 !
öo
) {

122 
∑ª¡_öode
.
i_löks_cou¡
++;

123 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fs
, 
∑ª¡
, &
∑ª¡_öode
);

124 i‡(
ªtvÆ
)

125 
˛ónup
;

131 
	`ext2fs_block_Æloc_°©s
(
fs
, 
blk
, +1);

132 
	`ext2fs_öode_Æloc_°©s2
(
fs
, 
öo
, +1, 1);

134 
˛ónup
:

135 i‡(
block
)

136 
	`ext2fs_‰ì_mem
(&
block
);

137  
ªtvÆ
;

139 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/mkjournal.c

12 
	~<c⁄fig.h
>

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 #i‡
HAVE_UNISTD_H


17 
	~<uni°d.h
>

19 #i‡
HAVE_ERRNO_H


20 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<time.h
>

24 #i‡
HAVE_SYS_STAT_H


25 
	~<sys/°©.h
>

27 #i‡
HAVE_SYS_TYPES_H


28 
	~<sys/ty≥s.h
>

30 #i‡
HAVE_SYS_IOCTL_H


31 
	~<sys/io˘l.h
>

33 #i‡
HAVE_NETINET_IN_H


34 
	~<√töë/ö.h
>

37 
	~"ext2_fs.h
"

38 
	~"e2p/e2p.h
"

39 
	~"ext2fs.h
"

40 
	~"jfs_u£r.h
"

46 
îrcode_t
 
	$ext2fs_¸óã_jou∫Æ_su≥rblock
(
ext2_fûsys
 
fs
,

47 
__u32
 
size
, 
Êags
,

48 **
ªt_jsb
)

50 
îrcode_t
 
ªtvÆ
;

51 
jou∫Æ_su≥rblock_t
 *
jsb
;

53 i‡(
size
 < 1024)

54  
EXT2_ET_JOURNAL_TOO_SMALL
;

56 i‡((
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
jsb
)))

57  
ªtvÆ
;

59 
	`mem£t
 (
jsb
, 0, 
fs
->
blocksize
);

61 
jsb
->
s_hódî
.
h_magic
 = 
	`ht⁄l
(
JFS_MAGIC_NUMBER
);

62 i‡(
Êags
 & 
EXT2_MKJOURNAL_V1_SUPER
)

63 
jsb
->
s_hódî
.
h_blockty≥
 = 
	`ht⁄l
(
JFS_SUPERBLOCK_V1
);

65 
jsb
->
s_hódî
.
h_blockty≥
 = 
	`ht⁄l
(
JFS_SUPERBLOCK_V2
);

66 
jsb
->
s_blocksize
 = 
	`ht⁄l
(
fs
->
blocksize
);

67 
jsb
->
s_maxÀn
 = 
	`ht⁄l
(
size
);

68 
jsb
->
s_ƒ_u£rs
 = 
	`ht⁄l
(1);

69 
jsb
->
s_fú°
 = 
	`ht⁄l
(1);

70 
jsb
->
s_£quí˚
 = 
	`ht⁄l
(1);

71 
	`mem˝y
(
jsb
->
s_uuid
, 
fs
->
su≥r
->s_uuid, (fs->super->s_uuid));

76 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 &

77 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
) {

78 
jsb
->
s_ƒ_u£rs
 = 0;

79 i‡(
fs
->
blocksize
 == 1024)

80 
jsb
->
s_fú°
 = 
	`ht⁄l
(3);

82 
jsb
->
s_fú°
 = 
	`ht⁄l
(2);

85 *
ªt_jsb
 = (*Ë
jsb
;

87 
	}
}

94 
îrcode_t
 
	$wrôe_jou∫Æ_fûe
(
ext2_fûsys
 
fs
, *
fûíame
,

95 
blk_t
 
size
, 
Êags
)

97 
îrcode_t
 
ªtvÆ
;

98 *
buf
 = 0;

99 
fd
, 
ªt_size
;

100 
blk_t
 
i
;

102 i‡((
ªtvÆ
 = 
	`ext2fs_¸óã_jou∫Æ_su≥rblock
(
fs
, 
size
, 
Êags
, &
buf
)))

103  
ªtvÆ
;

106 i‡((
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
)) < 0) {

107 
ªtvÆ
 = 
î∫o
;

108 
îrout
;

112 
ªtvÆ
 = 
EXT2_ET_SHORT_WRITE
;

113 
ªt_size
 = 
	`wrôe
(
fd
, 
buf
, 
fs
->
blocksize
);

114 i‡(
ªt_size
 < 0) {

115 
ªtvÆ
 = 
î∫o
;

116 
îrout
;

118 i‡(
ªt_size
 !(Ë
fs
->
blocksize
)

119 
îrout
;

120 
	`mem£t
(
buf
, 0, 
fs
->
blocksize
);

122 
i
 = 1; i < 
size
; i++) {

123 
ªt_size
 = 
	`wrôe
(
fd
, 
buf
, 
fs
->
blocksize
);

124 i‡(
ªt_size
 < 0) {

125 
ªtvÆ
 = 
î∫o
;

126 
îrout
;

128 i‡(
ªt_size
 !(Ë
fs
->
blocksize
)

129 
îrout
;

131 
	`˛o£
(
fd
);

133 
ªtvÆ
 = 0;

134 
îrout
:

135 
	`ext2fs_‰ì_mem
(&
buf
);

136  
ªtvÆ
;

137 
	}
}

149 
	#STRIDE_LENGTH
 8

	)

150 
îrcode_t
 
	$ext2fs_zîo_blocks
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, 
num
,

151 
blk_t
 *
ªt_blk
, *
ªt_cou¡
)

153 
j
, 
cou¡
;

154 *
buf
;

155 
îrcode_t
 
ªtvÆ
;

158 i‡(!
fs
) {

159 i‡(
buf
) {

160 
	`‰ì
(
buf
);

161 
buf
 = 0;

166 i‡(!
buf
) {

167 
buf
 = 
	`mÆloc
(
fs
->
blocksize
 * 
STRIDE_LENGTH
);

168 i‡(!
buf
)

169  
ENOMEM
;

170 
	`mem£t
(
buf
, 0, 
fs
->
blocksize
 * 
STRIDE_LENGTH
);

173 
j
=0;

174 
j
 < 
num
) {

175 i‡(
blk
 % 
STRIDE_LENGTH
) {

176 
cou¡
 = 
STRIDE_LENGTH
 - (
blk
 % STRIDE_LENGTH);

177 i‡(
cou¡
 > (
num
 - 
j
))

178 
cou¡
 = 
num
 - 
j
;

180 
cou¡
 = 
num
 - 
j
;

181 i‡(
cou¡
 > 
STRIDE_LENGTH
)

182 
cou¡
 = 
STRIDE_LENGTH
;

184 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
blk
, 
cou¡
, 
buf
);

185 i‡(
ªtvÆ
) {

186 i‡(
ªt_cou¡
)

187 *
ªt_cou¡
 = 
cou¡
;

188 i‡(
ªt_blk
)

189 *
ªt_blk
 = 
blk
;

190  
ªtvÆ
;

192 
j
 +
cou¡
; 
blk
 += count;

195 
	}
}

200 
	smkjou∫Æ_°ru˘
 {

201 
	mnum_blocks
;

202 
	m√wblocks
;

203 
blk_t
 
	mgﬂl
;

204 
blk_t
 
	mblk_to_zîo
;

205 
	mzîo_cou¡
;

206 *
	mbuf
;

207 
îrcode_t
 
	mîr
;

210 
mkjou∫Æ_¥oc
(
ext2_fûsys
 
fs
,

211 
blk_t
 *
blockƒ
,

212 
e2_blk˙t_t
 
block˙t
,

213 
blk_t
 
ªf_block
 
EXT2FS_ATTR
((
unu£d
)),

214 
ªf_off£t
 
EXT2FS_ATTR
((
unu£d
)),

215 *
¥iv_d©a
)

217 
mkjou∫Æ_°ru˘
 *
	ges
 = (mkjou∫Æ_°ru˘ *Ë
¥iv_d©a
;

218 
blk_t
 
	g√w_blk
;

219 
îrcode_t
 
	gªtvÆ
;

221 i‡(*
	gblockƒ
) {

222 
	ges
->
	ggﬂl
 = *
blockƒ
;

225 
	gªtvÆ
 = 
ext2fs_√w_block
(
fs
, 
es
->
gﬂl
, 0, &
√w_blk
);

226 i‡(
	gªtvÆ
) {

227 
	ges
->
	gîr
 = 
ªtvÆ
;

228  
	gBLOCK_ABORT
;

230 i‡(
	gblock˙t
 >= 0)

231 
es
->
num_blocks
--;

233 
	ges
->
	g√wblocks
++;

234 
	gªtvÆ
 = 0;

235 i‡(
	gblock˙t
 <= 0)

236 
ªtvÆ
 = 
io_ch™√l_wrôe_blk
(
fs
->
io
, 
√w_blk
, 1, 
es
->
buf
);

238 i‡(
	ges
->
	gzîo_cou¡
) {

239 i‡((
	ges
->
	gblk_to_zîo
 +És->
	gzîo_cou¡
 =
√w_blk
) &&

240 (
es
->
zîo_cou¡
 < 1024))

241 
es
->
zîo_cou¡
++;

243 
	gªtvÆ
 = 
ext2fs_zîo_blocks
(
fs
,

244 
es
->
blk_to_zîo
,

245 
es
->
zîo_cou¡
,

247 
	ges
->
	gzîo_cou¡
 = 0;

250 i‡(
	ges
->
	gzîo_cou¡
 == 0) {

251 
es
->
blk_to_zîo
 = 
√w_blk
;

252 
	ges
->
	gzîo_cou¡
 = 1;

256 i‡(
	gblock˙t
 == 0)

257 
mem£t
(
es
->
buf
, 0, 
fs
->
blocksize
);

259 i‡(
	gªtvÆ
) {

260 
	ges
->
	gîr
 = 
ªtvÆ
;

261  
	gBLOCK_ABORT
;

263 *
	gblockƒ
 = 
es
->
gﬂl
 = 
√w_blk
;

264 
ext2fs_block_Æloc_°©s
(
fs
, 
√w_blk
, +1);

266 i‡(
	ges
->
	gnum_blocks
 == 0)

267  (
BLOCK_CHANGED
 | 
BLOCK_ABORT
);

269  
	gBLOCK_CHANGED
;

276 
îrcode_t
 
	$wrôe_jou∫Æ_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
jou∫Æ_öo
,

277 
blk_t
 
size
, 
Êags
)

279 *
buf
;

280 
dgΩ_t
 
group
, 
°¨t
, 
íd
, 
i
, 
log_Êex
;

281 
îrcode_t
 
ªtvÆ
;

282 
ext2_öode
 
öode
;

283 
mkjou∫Æ_°ru˘
 
es
;

285 i‡((
ªtvÆ
 = 
	`ext2fs_¸óã_jou∫Æ_su≥rblock
(
fs
, 
size
, 
Êags
, &
buf
)))

286  
ªtvÆ
;

288 i‡((
ªtvÆ
 = 
	`ext2fs_ªad_bôm≠s
(
fs
)))

289  
ªtvÆ
;

291 i‡((
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
jou∫Æ_öo
, &
öode
)))

292  
ªtvÆ
;

294 i‡(
öode
.
i_blocks
 > 0)

295  
EEXIST
;

297 
es
.
num_blocks
 = 
size
;

298 
es
.
√wblocks
 = 0;

299 
es
.
buf
 = buf;

300 
es
.
îr
 = 0;

301 
es
.
zîo_cou¡
 = 0;

303 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 & 
EXT3_FEATURE_INCOMPAT_EXTENTS
) {

304 
öode
.
i_Êags
 |
EXT4_EXTENTS_FL
;

305 i‡((
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fs
, 
jou∫Æ_öo
, &
öode
)))

306  
ªtvÆ
;

314 
group
 = 
	`ext2fs_group_of_blk
(
fs
, (fs->
su≥r
->
s_blocks_cou¡
 -

315 
fs
->
su≥r
->
s_fú°_d©a_block
) / 2);

316 
log_Êex
 = 1 << 
fs
->
su≥r
->
s_log_groups_≥r_Êex
;

317 i‡(
fs
->
su≥r
->
s_log_groups_≥r_Êex
 && (
group
 > 
log_Êex
)) {

318 
group
 = grou∞& ~(
log_Êex
 - 1);

319 (
group
 < 
fs
->
group_desc_cou¡
) &&

320 
fs
->
group_desc
[
group
].
bg_‰ì_blocks_cou¡
 == 0)

321 
group
++;

322 i‡(
group
 =
fs
->
group_desc_cou¡
)

323 
group
 = 0;

324 
°¨t
 = 
group
;

326 
°¨t
 = (
group
 > 0) ? group-1 : group;

327 
íd
 = ((
group
+1Ë< 
fs
->
group_desc_cou¡
) ? group+1 : group;

328 
group
 = 
°¨t
;

329 
i
=
°¨t
+1; i <
íd
; i++)

330 i‡(
fs
->
group_desc
[
i
].
bg_‰ì_blocks_cou¡
 >

331 
fs
->
group_desc
[
group
].
bg_‰ì_blocks_cou¡
)

332 
group
 = 
i
;

334 
es
.
gﬂl
 = (
fs
->
su≥r
->
s_blocks_≥r_group
 * 
group
) +

335 
fs
->
su≥r
->
s_fú°_d©a_block
;

337 
ªtvÆ
 = 
	`ext2fs_block_ôî©e2
(
fs
, 
jou∫Æ_öo
, 
BLOCK_FLAG_APPEND
,

338 0, 
mkjou∫Æ_¥oc
, &
es
);

339 i‡(
es
.
îr
) {

340 
ªtvÆ
 = 
es
.
îr
;

341 
îrout
;

343 i‡(
es
.
zîo_cou¡
) {

344 
ªtvÆ
 = 
	`ext2fs_zîo_blocks
(
fs
, 
es
.
blk_to_zîo
,

345 
es
.
zîo_cou¡
, 0, 0);

346 i‡(
ªtvÆ
)

347 
îrout
;

350 i‡((
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
jou∫Æ_öo
, &
öode
)))

351 
îrout
;

353 
öode
.
i_size
 +
fs
->
blocksize
 * 
size
;

354 
	`ext2fs_iblk_add_blocks
(
fs
, &
öode
, 
es
.
√wblocks
);

355 
öode
.
i_mtime
 = inode.
i_˘ime
 = 
fs
->
now
 ? fs->now : 
	`time
(0);

356 
öode
.
i_löks_cou¡
 = 1;

357 
öode
.
i_mode
 = 
LINUX_S_IFREG
 | 0600;

359 i‡((
ªtvÆ
 = 
	`ext2fs_wrôe_√w_öode
(
fs
, 
jou∫Æ_öo
, &
öode
)))

360 
îrout
;

361 
ªtvÆ
 = 0;

363 
	`mem˝y
(
fs
->
su≥r
->
s_j∆_blocks
, 
öode
.
i_block
, 
EXT2_N_BLOCKS
*4);

364 
fs
->
su≥r
->
s_j∆_blocks
[16] = 
öode
.
i_size
;

365 
fs
->
su≥r
->
s_j∆_backup_ty≥
 = 
EXT3_JNL_BACKUP_BLOCKS
;

366 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

368 
îrout
:

369 
	`ext2fs_‰ì_mem
(&
buf
);

370  
ªtvÆ
;

371 
	}
}

378 
	$ext2fs_deÁu…_jou∫Æ_size
(
__u64
 
blocks
)

380 i‡(
blocks
 < 2048)

382 i‡(
blocks
 < 32768)

384 i‡(
blocks
 < 256*1024)

386 i‡(
blocks
 < 512*1024)

388 i‡(
blocks
 < 1024*1024)

391 
	}
}

396 
îrcode_t
 
	$ext2fs_add_jou∫Æ_devi˚
(
ext2_fûsys
 
fs
,Éxt2_fûsy†
jou∫Æ_dev
)

398 
°©
 
°
;

399 
îrcode_t
 
ªtvÆ
;

400 
buf
[1024];

401 
jou∫Æ_su≥rblock_t
 *
jsb
;

402 
°¨t
;

403 
__u32
 
i
, 
ƒ_u£rs
;

406 i‡(
	`°©
(
jou∫Æ_dev
->
devi˚_«me
, &
°
) < 0)

407  
î∫o
;

409 i‡(!
	`S_ISBLK
(
°
.
°_mode
))

410  
EXT2_ET_JOURNAL_NOT_BLOCK
;

413 
°¨t
 = 1;

414 i‡(
jou∫Æ_dev
->
blocksize
 == 1024)

415 
°¨t
++;

416 i‡((
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
jou∫Æ_dev
->
io
, 
°¨t
, -1024, 
buf
)))

417  
ªtvÆ
;

419 
jsb
 = (
jou∫Æ_su≥rblock_t
 *Ë
buf
;

420 i‡((
jsb
->
s_hódî
.
h_magic
 !(Ë
	`¡ohl
(
JFS_MAGIC_NUMBER
)) ||

421 (
jsb
->
s_hódî
.
h_blockty≥
 !(Ë
	`¡ohl
(
JFS_SUPERBLOCK_V2
)))

422  
EXT2_ET_NO_JOURNAL_SB
;

424 i‡(
	`¡ohl
(
jsb
->
s_blocksize
Ë!(Ë
fs
->
blocksize
)

425  
EXT2_ET_UNEXPECTED_BLOCK_SIZE
;

428 
ƒ_u£rs
 = 
	`¡ohl
(
jsb
->
s_ƒ_u£rs
);

429 
i
=0; i < 
ƒ_u£rs
; i++) {

430 i‡(
	`memcmp
(
fs
->
su≥r
->
s_uuid
,

431 &
jsb
->
s_u£rs
[
i
*16], 16) == 0)

434 i‡(
i
 >
ƒ_u£rs
) {

435 
	`mem˝y
(&
jsb
->
s_u£rs
[
ƒ_u£rs
*16],

436 
fs
->
su≥r
->
s_uuid
, 16);

437 
jsb
->
s_ƒ_u£rs
 = 
	`ht⁄l
(
ƒ_u£rs
+1);

441 i‡((
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
jou∫Æ_dev
->
io
, 
°¨t
, -1024, 
buf
)))

442  
ªtvÆ
;

444 
fs
->
su≥r
->
s_jou∫Æ_öum
 = 0;

445 
fs
->
su≥r
->
s_jou∫Æ_dev
 = 
°
.
°_rdev
;

446 
	`mem˝y
(
fs
->
su≥r
->
s_jou∫Æ_uuid
, 
jsb
->
s_uuid
,

447 (
fs
->
su≥r
->
s_jou∫Æ_uuid
));

448 
fs
->
su≥r
->
s_„©uª_com∑t
 |
EXT3_FEATURE_COMPAT_HAS_JOURNAL
;

449 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

451 
	}
}

458 
îrcode_t
 
	$ext2fs_add_jou∫Æ_öode
(
ext2_fûsys
 
fs
, 
blk_t
 
size
, 
Êags
)

460 
îrcode_t
 
ªtvÆ
;

461 
ext2_öo_t
 
jou∫Æ_öo
;

462 
°©
 
°
;

463 
jfûe
[1024];

464 
mou¡_Êags
, 
f
;

465 
fd
 = -1;

467 i‡((
ªtvÆ
 = 
	`ext2fs_check_mou¡_poöt
(
fs
->
devi˚_«me
, &
mou¡_Êags
,

468 
jfûe
, (jfile)-10)))

469  
ªtvÆ
;

471 i‡(
mou¡_Êags
 & 
EXT2_MF_MOUNTED
) {

472 
	`°rˇt
(
jfûe
, "/.journal");

478 #i‡
	`deföed
(
HAVE_CHFLAGS
Ë&& deföed(
UF_NODUMP
)

479 (Ë
	`chÊags
 (
jfûe
, 0);

481 #i‡
HAVE_EXT2_IOCTLS


482 
fd
 = 
	`›í
(
jfûe
, 
O_RDONLY
);

483 i‡(
fd
 >= 0) {

484 
f
 = 0;

485 
	`io˘l
(
fd
, 
EXT2_IOC_SETFLAGS
, &
f
);

486 
	`˛o£
(
fd
);

492 i‡((
fd
 = 
	`›í
(
jfûe
, 
O_CREAT
|
O_WRONLY
, 0600)) < 0)

493  
î∫o
;

495 i‡((
ªtvÆ
 = 
	`wrôe_jou∫Æ_fûe
(
fs
, 
jfûe
, 
size
, 
Êags
)))

496 
îrout
;

499 i‡(
	`f°©
(
fd
, &
°
) < 0)

500 
îrout
;

502 #i‡
	`deföed
(
HAVE_CHFLAGS
Ë&& deföed(
UF_NODUMP
)

503 
ªtvÆ
 = 
	`fchÊags
 (
fd
, 
UF_NODUMP
|
UF_IMMUTABLE
);

505 #i‡
HAVE_EXT2_IOCTLS


506 
f
 = 
EXT2_NODUMP_FL
 | 
EXT2_IMMUTABLE_FL
;

507 
ªtvÆ
 = 
	`io˘l
(
fd
, 
EXT2_IOC_SETFLAGS
, &
f
);

510 i‡(
ªtvÆ
)

511 
îrout
;

513 
	`˛o£
(
fd
);

514 
jou∫Æ_öo
 = 
°
.
°_öo
;

516 i‡((
mou¡_Êags
 & 
EXT2_MF_BUSY
) &&

517 !(
fs
->
Êags
 & 
EXT2_FLAG_EXCLUSIVE
)) {

518 
ªtvÆ
 = 
EBUSY
;

519 
îrout
;

521 
jou∫Æ_öo
 = 
EXT2_JOURNAL_INO
;

522 i‡((
ªtvÆ
 = 
	`wrôe_jou∫Æ_öode
(
fs
, 
jou∫Æ_öo
,

523 
size
, 
Êags
)))

524  
ªtvÆ
;

527 
fs
->
su≥r
->
s_jou∫Æ_öum
 = 
jou∫Æ_öo
;

528 
fs
->
su≥r
->
s_jou∫Æ_dev
 = 0;

529 
	`mem£t
(
fs
->
su≥r
->
s_jou∫Æ_uuid
, 0,

530 (
fs
->
su≥r
->
s_jou∫Æ_uuid
));

531 
fs
->
su≥r
->
s_„©uª_com∑t
 |
EXT3_FEATURE_COMPAT_HAS_JOURNAL
;

533 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

535 
îrout
:

536 i‡(
fd
 > 0)

537 
	`˛o£
(
fd
);

538  
ªtvÆ
;

539 
	}
}

541 #ifde‡
DEBUG


542 
	$maö
(
¨gc
, **
¨gv
)

544 
îrcode_t
 
ªtvÆ
;

545 *
devi˚_«me
;

546 
ext2_fûsys
 
fs
;

548 i‡(
¨gc
 < 2) {

549 
	`Ârötf
(
°dîr
, "Ußge: %†fûesy°em\n", 
¨gv
[0]);

550 
	`exô
(1);

552 
devi˚_«me
 = 
¨gv
[1];

554 
ªtvÆ
 = 
	`ext2fs_›í
 (
devi˚_«me
, 
EXT2_FLAG_RW
, 0, 0,

555 
unix_io_m™agî
, &
fs
);

556 i‡(
ªtvÆ
) {

557 
	`com_îr
(
¨gv
[0], 
ªtvÆ
, "whûê›íög %s", 
devi˚_«me
);

558 
	`exô
(1);

561 
ªtvÆ
 = 
	`ext2fs_add_jou∫Æ_öode
(
fs
, 1024);

562 i‡(
ªtvÆ
) {

563 
	`com_îr
(
¨gv
[0], 
ªtvÆ
, "whileádding journalÅo %s",

564 
devi˚_«me
);

565 
	`exô
(1);

567 
ªtvÆ
 = 
	`ext2fs_Êush
(
fs
);

568 i‡(
ªtvÆ
) {

569 
	`¥ötf
("Warning, hadÅrouble writing out superblocks.\n");

571 
	`ext2fs_˛o£
(
fs
);

572 
	`exô
(0);

574 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/namei.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

20 
	~"ext2_fs.h
"

21 
	~"ext2fs.h
"

23 
îrcode_t
 
›í_«mei
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
ba£
,

24 c⁄° *
∑th«me
, 
size_t
 
∑thÀn
, 
fﬁlow
,

25 
lök_cou¡
, *
buf
, 
ext2_öo_t
 *
ªs_öode
);

27 
îrcode_t
 
	$fﬁlow_lök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
dú
,

28 
ext2_öo_t
 
öode
, 
lök_cou¡
,

29 *
buf
, 
ext2_öo_t
 *
ªs_öode
)

31 *
∑th«me
;

32 *
buf„r
 = 0;

33 
îrcode_t
 
ªtvÆ
;

34 
ext2_öode
 
ei
;

36 #ifde‡
NAMEI_DEBUG


37 
	`¥ötf
("follow_link:Ñoot=%lu, dir=%lu, inode=%lu,Üc=%d\n",

38 
roŸ
, 
dú
, 
öode
, 
lök_cou¡
);

41 
ªtvÆ
 = 
	`ext2fs_ªad_öode
 (
fs
, 
öode
, &
ei
);

42 i‡(
ªtvÆ
) Ñetval;

43 i‡(!
	`LINUX_S_ISLNK
 (
ei
.
i_mode
)) {

44 *
ªs_öode
 = 
öode
;

47 i‡(
lök_cou¡
++ > 5) {

48  
EXT2_ET_SYMLINK_LOOP
;

50 i‡(
	`ext2fs_öode_d©a_blocks
(
fs
,&
ei
)) {

51 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
buf„r
);

52 i‡(
ªtvÆ
)

53  
ªtvÆ
;

54 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
ei
.
i_block
[0], 1, 
buf„r
);

55 i‡(
ªtvÆ
) {

56 
	`ext2fs_‰ì_mem
(&
buf„r
);

57  
ªtvÆ
;

59 
∑th«me
 = 
buf„r
;

61 
∑th«me
 = (*)&(
ei
.
i_block
[0]);

62 
ªtvÆ
 = 
	`›í_«mei
(
fs
, 
roŸ
, 
dú
, 
∑th«me
, 
ei
.
i_size
, 1,

63 
lök_cou¡
, 
buf
, 
ªs_öode
);

64 i‡(
buf„r
)

65 
	`ext2fs_‰ì_mem
(&
buf„r
);

66  
ªtvÆ
;

67 
	}
}

75 
îrcode_t
 
	$dú_«mei
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
dú
,

76 c⁄° *
∑th«me
, 
∑thÀn
,

77 
lök_cou¡
, *
buf
,

78 c⁄° **
«me
, *
«mñí
,

79 
ext2_öo_t
 *
ªs_öode
)

81 
c
;

82 c⁄° *
thi¢ame
;

83 
Àn
;

84 
ext2_öo_t
 
öode
;

85 
îrcode_t
 
ªtvÆ
;

87 i‡((
c
 = *
∑th«me
) == '/') {

88 
dú
 = 
roŸ
;

89 
∑th«me
++;

90 
∑thÀn
--;

93 
thi¢ame
 = 
∑th«me
;

94 
Àn
=0; --
∑thÀn
 >= 0;len++) {

95 
c
 = *(
∑th«me
++);

96 i‡(
c
 == '/')

99 i‡(
∑thÀn
 < 0)

101 
ªtvÆ
 = 
	`ext2fs_lookup
 (
fs
, 
dú
, 
thi¢ame
, 
Àn
, 
buf
, &
öode
);

102 i‡(
ªtvÆ
) Ñetval;

103 
ªtvÆ
 = 
	`fﬁlow_lök
 (
fs
, 
roŸ
, 
dú
, 
öode
,

104 
lök_cou¡
, 
buf
, &
dú
);

105 i‡(
ªtvÆ
) Ñetval;

107 *
«me
 = 
thi¢ame
;

108 *
«mñí
 = 
Àn
;

109 *
ªs_öode
 = 
dú
;

111 
	}
}

113 
îrcode_t
 
	$›í_«mei
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
ba£
,

114 c⁄° *
∑th«me
, 
size_t
 
∑thÀn
, 
fﬁlow
,

115 
lök_cou¡
, *
buf
, 
ext2_öo_t
 *
ªs_öode
)

117 c⁄° *
ba£_«me
;

118 
«mñí
;

119 
ext2_öo_t
 
dú
, 
öode
;

120 
îrcode_t
 
ªtvÆ
;

122 #ifde‡
NAMEI_DEBUG


123 
	`¥ötf
("open_namei:Ñoot=%lu, dir=%lu,Öath=%*s,Üc=%d\n",

124 
roŸ
, 
ba£
, 
∑thÀn
, 
∑th«me
, 
lök_cou¡
);

126 
ªtvÆ
 = 
	`dú_«mei
(
fs
, 
roŸ
, 
ba£
, 
∑th«me
, 
∑thÀn
,

127 
lök_cou¡
, 
buf
, &
ba£_«me
, &
«mñí
, &
dú
);

128 i‡(
ªtvÆ
) Ñetval;

129 i‡(!
«mñí
) {

130 *
ªs_öode
=
dú
;

133 
ªtvÆ
 = 
	`ext2fs_lookup
 (
fs
, 
dú
, 
ba£_«me
, 
«mñí
, 
buf
, &
öode
);

134 i‡(
ªtvÆ
)

135  
ªtvÆ
;

136 i‡(
fﬁlow
) {

137 
ªtvÆ
 = 
	`fﬁlow_lök
(
fs
, 
roŸ
, 
dú
, 
öode
, 
lök_cou¡
,

138 
buf
, &
öode
);

139 i‡(
ªtvÆ
)

140  
ªtvÆ
;

142 #ifde‡
NAMEI_DEBUG


143 
	`¥ötf
("open_namei: (link_count=%d)Ñeturns %lu\n",

144 
lök_cou¡
, 
öode
);

146 *
ªs_öode
 = 
öode
;

148 
	}
}

150 
îrcode_t
 
	$ext2fs_«mei
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

151 c⁄° *
«me
, 
ext2_öo_t
 *
öode
)

153 *
buf
;

154 
îrcode_t
 
ªtvÆ
;

156 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

158 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
buf
);

159 i‡(
ªtvÆ
)

160  
ªtvÆ
;

162 
ªtvÆ
 = 
	`›í_«mei
(
fs
, 
roŸ
, 
cwd
, 
«me
, 
	`°æí
(name), 0, 0,

163 
buf
, 
öode
);

165 
	`ext2fs_‰ì_mem
(&
buf
);

166  
ªtvÆ
;

167 
	}
}

169 
îrcode_t
 
	$ext2fs_«mei_fﬁlow
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

170 c⁄° *
«me
, 
ext2_öo_t
 *
öode
)

172 *
buf
;

173 
îrcode_t
 
ªtvÆ
;

175 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

177 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
buf
);

178 i‡(
ªtvÆ
)

179  
ªtvÆ
;

181 
ªtvÆ
 = 
	`›í_«mei
(
fs
, 
roŸ
, 
cwd
, 
«me
, 
	`°æí
(name), 1, 0,

182 
buf
, 
öode
);

184 
	`ext2fs_‰ì_mem
(&
buf
);

185  
ªtvÆ
;

186 
	}
}

188 
îrcode_t
 
	$ext2fs_fﬁlow_lök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

189 
ext2_öo_t
 
öode
,Éxt2_öo_à*
ªs_öode
)

191 *
buf
;

192 
îrcode_t
 
ªtvÆ
;

194 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

196 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
buf
);

197 i‡(
ªtvÆ
)

198  
ªtvÆ
;

200 
ªtvÆ
 = 
	`fﬁlow_lök
(
fs
, 
roŸ
, 
cwd
, 
öode
, 0, 
buf
, 
ªs_öode
);

202 
	`ext2fs_‰ì_mem
(&
buf
);

203  
ªtvÆ
;

204 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/native.c

12 
	~<°dio.h
>

14 
	~"ext2_fs.h
"

15 
	~"ext2fs.h
"

17 
	$ext2fs_«tive_Êag
()

19 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

20  
EXT2_FLAG_SWAP_BYTES
;

24 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/newdir.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

18 
	~"ext2_fs.h
"

19 
	~"ext2fs.h
"

21 #i‚de‡
EXT2_FT_DIR


22 
	#EXT2_FT_DIR
 2

	)

28 
îrcode_t
 
	$ext2fs_√w_dú_block
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú_öo
,

29 
ext2_öo_t
 
∑ª¡_öo
, **
block
)

31 
ext2_dú_íåy
 *
dú
 = 
NULL
;

32 
îrcode_t
 
ªtvÆ
;

33 *
buf
;

34 
ªc_Àn
;

35 
fûëy≥
 = 0;

37 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

39 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
buf
);

40 i‡(
ªtvÆ
)

41  
ªtvÆ
;

42 
	`mem£t
(
buf
, 0, 
fs
->
blocksize
);

43 
dú
 = (
ext2_dú_íåy
 *Ë
buf
;

45 
ªtvÆ
 = 
	`ext2fs_£t_ªc_Àn
(
fs
, fs->
blocksize
, 
dú
);

46 i‡(
ªtvÆ
)

47  
ªtvÆ
;

49 i‡(
dú_öo
) {

50 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 &

51 
EXT2_FEATURE_INCOMPAT_FILETYPE
)

52 
fûëy≥
 = 
EXT2_FT_DIR
 << 8;

56 
dú
->
öode
 = 
dú_öo
;

57 
dú
->
«me_Àn
 = 1 | 
fûëy≥
;

58 
dú
->
«me
[0] = '.';

59 
ªc_Àn
 = 
fs
->
blocksize
 - 
	`EXT2_DIR_REC_LEN
(1);

60 
dú
->
ªc_Àn
 = 
	`EXT2_DIR_REC_LEN
(1);

65 
dú
 = (
ext2_dú_íåy
 *Ë(
buf
 + dú->
ªc_Àn
);

66 
ªtvÆ
 = 
	`ext2fs_£t_ªc_Àn
(
fs
, 
ªc_Àn
, 
dú
);

67 i‡(
ªtvÆ
)

68  
ªtvÆ
;

69 
dú
->
öode
 = 
∑ª¡_öo
;

70 
dú
->
«me_Àn
 = 2 | 
fûëy≥
;

71 
dú
->
«me
[0] = '.';

72 
dú
->
«me
[1] = '.';

75 *
block
 = 
buf
;

77 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/openfs.c

12 
	~<c⁄fig.h
>

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 #i‡
HAVE_UNISTD_H


17 
	~<uni°d.h
>

19 
	~<f˙é.h
>

20 
	~<time.h
>

21 #i‡
HAVE_SYS_STAT_H


22 
	~<sys/°©.h
>

24 #i‡
HAVE_SYS_TYPES_H


25 
	~<sys/ty≥s.h
>

28 
	~"ext2_fs.h
"

31 
	~"ext2fs.h
"

32 
	~"e2image.h
"

34 
blk_t
 
	$ext2fs_des¸ùt‹_block_loc
(
ext2_fûsys
 
fs
, 
blk_t
 
group_block
, 
dgΩ_t
 
i
)

36 
bg
;

37 
has_su≥r
 = 0;

38 
ªt_blk
;

40 i‡(!(
fs
->
su≥r
->
s_„©uª_öcom∑t
 & 
EXT2_FEATURE_INCOMPAT_META_BG
) ||

41 (
i
 < 
fs
->
su≥r
->
s_fú°_mëa_bg
))

42  (
group_block
 + 
i
 + 1);

44 
bg
 = 
	`EXT2_DESC_PER_BLOCK
(
fs
->
su≥r
Ë* 
i
;

45 i‡(
	`ext2fs_bg_has_su≥r
(
fs
, 
bg
))

46 
has_su≥r
 = 1;

47 
ªt_blk
 = 
	`ext2fs_group_fú°_block
(
fs
, 
bg
Ë+ 
has_su≥r
;

56 i‡(
group_block
 !
fs
->
su≥r
->
s_fú°_d©a_block
 &&

57 ((
ªt_blk
 + 
fs
->
su≥r
->
s_blocks_≥r_group
) <

58 
fs
->
su≥r
->
s_blocks_cou¡
))

59 
ªt_blk
 +
fs
->
su≥r
->
s_blocks_≥r_group
;

60  
ªt_blk
;

61 
	}
}

63 
îrcode_t
 
	$ext2fs_›í
(c⁄° *
«me
, 
Êags
, 
su≥rblock
,

64 
block_size
, 
io_m™agî
 
m™agî
,

65 
ext2_fûsys
 *
ªt_fs
)

67  
	`ext2fs_›í2
(
«me
, 0, 
Êags
, 
su≥rblock
, 
block_size
,

68 
m™agî
, 
ªt_fs
);

69 
	}
}

82 
îrcode_t
 
	$ext2fs_›í2
(c⁄° *
«me
, c⁄° *
io_›ti⁄s
,

83 
Êags
, 
su≥rblock
,

84 
block_size
, 
io_m™agî
 
m™agî
,

85 
ext2_fûsys
 *
ªt_fs
)

87 
ext2_fûsys
 
fs
;

88 
îrcode_t
 
ªtvÆ
;

89 
i
, 
fú°_mëa_bg
;

90 
__u32
 
„©uªs
;

91 
groups_≥r_block
, 
blocks_≥r_group
, 
io_Êags
;

92 
blk_t
 
group_block
, 
blk
;

93 *
de°
, *
˝
;

94 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

95 
ext2_group_desc
 *
gdp
;

96 
j
;

99 
	`EXT2_CHECK_MAGIC
(
m™agî
, 
EXT2_ET_MAGIC_IO_MANAGER
);

101 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
°ru˘_ext2_fûsys
), &
fs
);

102 i‡(
ªtvÆ
)

103  
ªtvÆ
;

105 
	`mem£t
(
fs
, 0, (
°ru˘_ext2_fûsys
));

106 
fs
->
magic
 = 
EXT2_ET_MAGIC_EXT2FS_FILSYS
;

107 
fs
->
Êags
 = flags;

109 
fs
->
Êags
 |
EXT2_FLAG_MASTER_SB_ONLY
;

110 
fs
->
umask
 = 022;

111 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
	`°æí
(
«me
)+1, &
fs
->
devi˚_«me
);

112 i‡(
ªtvÆ
)

113 
˛ónup
;

114 
	`°r˝y
(
fs
->
devi˚_«me
, 
«me
);

115 
˝
 = 
	`°rchr
(
fs
->
devi˚_«me
, '?');

116 i‡(!
io_›ti⁄s
 && 
˝
) {

117 *
˝
++ = 0;

118 
io_›ti⁄s
 = 
˝
;

121 
io_Êags
 = 0;

122 i‡(
Êags
 & 
EXT2_FLAG_RW
)

123 
io_Êags
 |
IO_FLAG_RW
;

124 i‡(
Êags
 & 
EXT2_FLAG_EXCLUSIVE
)

125 
io_Êags
 |
IO_FLAG_EXCLUSIVE
;

126 
ªtvÆ
 = 
m™agî
->
	`›í
(
fs
->
devi˚_«me
, 
io_Êags
, &fs->
io
);

127 i‡(
ªtvÆ
)

128 
˛ónup
;

129 i‡(
io_›ti⁄s
 &&

130 (
ªtvÆ
 = 
	`io_ch™√l_£t_›ti⁄s
(
fs
->
io
, 
io_›ti⁄s
)))

131 
˛ónup
;

132 
fs
->
image_io
 = fs->
io
;

133 
fs
->
io
->
≠p_d©a
 = fs;

134 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
SUPERBLOCK_SIZE
, &
fs
->
su≥r
);

135 i‡(
ªtvÆ
)

136 
˛ónup
;

137 i‡(
Êags
 & 
EXT2_FLAG_IMAGE_FILE
) {

138 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ext2_image_hdr
),

139 &
fs
->
image_hódî
);

140 i‡(
ªtvÆ
)

141 
˛ónup
;

142 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 0,

143 -()(
ext2_image_hdr
),

144 
fs
->
image_hódî
);

145 i‡(
ªtvÆ
)

146 
˛ónup
;

147 i‡(
fs
->
image_hódî
->
magic_numbî
 !
EXT2_ET_MAGIC_E2IMAGE
)

148  
EXT2_ET_MAGIC_E2IMAGE
;

149 
su≥rblock
 = 1;

150 
block_size
 = 
fs
->
image_hódî
->
fs_blocksize
;

162 i‡(
su≥rblock
) {

163 i‡(!
block_size
) {

164 
ªtvÆ
 = 
EXT2_ET_INVALID_ARGUMENT
;

165 
˛ónup
;

167 
	`io_ch™√l_£t_blksize
(
fs
->
io
, 
block_size
);

168 
group_block
 = 
su≥rblock
;

169 
fs
->
‹ig_su≥r
 = 0;

171 
	`io_ch™√l_£t_blksize
(
fs
->
io
, 
SUPERBLOCK_OFFSET
);

172 
su≥rblock
 = 1;

173 
group_block
 = 0;

174 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
SUPERBLOCK_SIZE
, &
fs
->
‹ig_su≥r
);

175 i‡(
ªtvÆ
)

176 
˛ónup
;

178 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
su≥rblock
, -
SUPERBLOCK_SIZE
,

179 
fs
->
su≥r
);

180 i‡(
ªtvÆ
)

181 
˛ónup
;

182 i‡(
fs
->
‹ig_su≥r
)

183 
	`mem˝y
(
fs
->
‹ig_su≥r
, fs->
su≥r
, 
SUPERBLOCK_SIZE
);

185 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

186 
fs
->
Êags
 |
EXT2_FLAG_SWAP_BYTES
;

187 
	`ext2fs_sw≠_su≥r
(
fs
->
su≥r
);

189 i‡(
fs
->
Êags
 & 
EXT2_FLAG_SWAP_BYTES
) {

190 
ªtvÆ
 = 
EXT2_ET_UNIMPLEMENTED
;

191 
˛ónup
;

195 i‡(
fs
->
su≥r
->
s_magic
 !
EXT2_SUPER_MAGIC
) {

196 
ªtvÆ
 = 
EXT2_ET_BAD_MAGIC
;

197 
˛ónup
;

199 i‡(
fs
->
su≥r
->
s_ªv_Àvñ
 > 
EXT2_LIB_CURRENT_REV
) {

200 
ªtvÆ
 = 
EXT2_ET_REV_TOO_HIGH
;

201 
˛ónup
;

207 i‡(!(
Êags
 & 
EXT2_FLAG_FORCE
)) {

208 
„©uªs
 = 
fs
->
su≥r
->
s_„©uª_öcom∑t
;

209 #ifde‡
EXT2_LIB_SOFTSUPP_INCOMPAT


210 i‡(
Êags
 & 
EXT2_FLAG_SOFTSUPP_FEATURES
)

211 
„©uªs
 &!
EXT2_LIB_SOFTSUPP_INCOMPAT
;

213 i‡(
„©uªs
 & ~
EXT2_LIB_FEATURE_INCOMPAT_SUPP
) {

214 
ªtvÆ
 = 
EXT2_ET_UNSUPP_FEATURE
;

215 
˛ónup
;

218 
„©uªs
 = 
fs
->
su≥r
->
s_„©uª_ro_com∑t
;

219 #ifde‡
EXT2_LIB_SOFTSUPP_RO_COMPAT


220 i‡(
Êags
 & 
EXT2_FLAG_SOFTSUPP_FEATURES
)

221 
„©uªs
 &!
EXT2_LIB_SOFTSUPP_RO_COMPAT
;

223 i‡((
Êags
 & 
EXT2_FLAG_RW
) &&

224 (
„©uªs
 & ~
EXT2_LIB_FEATURE_RO_COMPAT_SUPP
)) {

225 
ªtvÆ
 = 
EXT2_ET_RO_UNSUPP_FEATURE
;

226 
˛ónup
;

229 i‡(!(
Êags
 & 
EXT2_FLAG_JOURNAL_DEV_OK
) &&

230 (
fs
->
su≥r
->
s_„©uª_öcom∑t
 &

231 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
)) {

232 
ªtvÆ
 = 
EXT2_ET_UNSUPP_FEATURE
;

233 
˛ónup
;

237 i‡((
fs
->
su≥r
->
s_log_block_size
 + 
EXT2_MIN_BLOCK_LOG_SIZE
) >

238 
EXT2_MAX_BLOCK_LOG_SIZE
) {

239 
ªtvÆ
 = 
EXT2_ET_CORRUPT_SUPERBLOCK
;

240 
˛ónup
;

242 
fs
->
blocksize
 = 
	`EXT2_BLOCK_SIZE
(fs->
su≥r
);

243 i‡(
	`EXT2_INODE_SIZE
(
fs
->
su≥r
Ë< 
EXT2_GOOD_OLD_INODE_SIZE
) {

244 
ªtvÆ
 = 
EXT2_ET_CORRUPT_SUPERBLOCK
;

245 
˛ónup
;

247 
fs
->
‰agsize
 = 
	`EXT2_FRAG_SIZE
(fs->
su≥r
);

248 
fs
->
öode_blocks_≥r_group
 = ((
	`EXT2_INODES_PER_GROUP
(fs->
su≥r
) *

249 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
) +

250 
	`EXT2_BLOCK_SIZE
(
fs
->
su≥r
) - 1) /

251 
	`EXT2_BLOCK_SIZE
(
fs
->
su≥r
));

252 i‡(
block_size
) {

253 i‡(
block_size
 !
fs
->
blocksize
) {

254 
ªtvÆ
 = 
EXT2_ET_UNEXPECTED_BLOCK_SIZE
;

255 
˛ónup
;

261 
	`io_ch™√l_£t_blksize
(
fs
->
io
, fs->
blocksize
);

267 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 &

268 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
) {

269 
fs
->
group_desc_cou¡
 = 0;

270 *
ªt_fs
 = 
fs
;

274 i‡(
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
) == 0) {

275 
ªtvÆ
 = 
EXT2_ET_CORRUPT_SUPERBLOCK
;

276 
˛ónup
;

282 
blocks_≥r_group
 = 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
);

283 i‡(
blocks_≥r_group
 == 0 ||

284 
blocks_≥r_group
 > 
	`EXT2_MAX_BLOCKS_PER_GROUP
(
fs
->
su≥r
) ||

285 
fs
->
öode_blocks_≥r_group
 > 
	`EXT2_MAX_INODES_PER_GROUP
(fs->
su≥r
) ||

286 
	`EXT2_DESC_PER_BLOCK
(
fs
->
su≥r
) == 0 ||

287 
fs
->
su≥r
->
s_fú°_d©a_block
 >fs->su≥r->
s_blocks_cou¡
) {

288 
ªtvÆ
 = 
EXT2_ET_CORRUPT_SUPERBLOCK
;

289 
˛ónup
;

291 
fs
->
group_desc_cou¡
 = 
	`ext2fs_div_˚û
(fs->
su≥r
->
s_blocks_cou¡
 -

292 
fs
->
su≥r
->
s_fú°_d©a_block
,

293 
blocks_≥r_group
);

294 i‡(
fs
->
group_desc_cou¡
 * 
	`EXT2_INODES_PER_GROUP
(fs->
su≥r
) !=

295 
fs
->
su≥r
->
s_öodes_cou¡
) {

296 
ªtvÆ
 = 
EXT2_ET_CORRUPT_SUPERBLOCK
;

297 
˛ónup
;

299 
fs
->
desc_blocks
 = 
	`ext2fs_div_˚û
(fs->
group_desc_cou¡
,

300 
	`EXT2_DESC_PER_BLOCK
(
fs
->
su≥r
));

301 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(
fs
->
desc_blocks
, fs->
blocksize
,

302 &
fs
->
group_desc
);

303 i‡(
ªtvÆ
)

304 
˛ónup
;

305 i‡(!
group_block
)

306 
group_block
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

307 
de°
 = (*Ë
fs
->
group_desc
;

308 
groups_≥r_block
 = 
	`EXT2_DESC_PER_BLOCK
(
fs
->
su≥r
);

309 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 & 
EXT2_FEATURE_INCOMPAT_META_BG
)

310 
fú°_mëa_bg
 = 
fs
->
su≥r
->
s_fú°_mëa_bg
;

312 
fú°_mëa_bg
 = 
fs
->
desc_blocks
;

313 i‡(
fú°_mëa_bg
) {

314 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
group_block
+1,

315 
fú°_mëa_bg
, 
de°
);

316 i‡(
ªtvÆ
)

317 
˛ónup
;

318 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

319 
gdp
 = (
ext2_group_desc
 *Ë
de°
;

320 
j
=0; j < 
groups_≥r_block
*
fú°_mëa_bg
; j++)

321 
	`ext2fs_sw≠_group_desc
(
gdp
++);

323 
de°
 +
fs
->
blocksize
*
fú°_mëa_bg
;

325 
i
=
fú°_mëa_bg
 ; i < 
fs
->
desc_blocks
; i++) {

326 
blk
 = 
	`ext2fs_des¸ùt‹_block_loc
(
fs
, 
group_block
, 
i
);

327 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
blk
, 1, 
de°
);

328 i‡(
ªtvÆ
)

329 
˛ónup
;

330 #i‡
	`deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

331 
gdp
 = (
ext2_group_desc
 *Ë
de°
;

332 
j
=0; j < 
groups_≥r_block
; j++)

333 
	`ext2fs_sw≠_group_desc
(
gdp
++);

335 
de°
 +
fs
->
blocksize
;

338 
fs
->
°ride
 = fs->
su≥r
->
s_øid_°ride
;

344 i‡(
su≥rblock
 > 1 && 
	`EXT2_HAS_RO_COMPAT_FEATURE
(
fs
->
su≥r
,

345 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
)) {

346 
ext2_group_desc
 *
gd
;

347 
i
 = 0, 
gd
 = 
fs
->
group_desc
; i < fs->
group_desc_cou¡
;

348 
i
++, 
gd
++) {

349 
gd
->
bg_Êags
 &~
EXT2_BG_BLOCK_UNINIT
;

350 
gd
->
bg_Êags
 &~
EXT2_BG_INODE_UNINIT
;

351 
gd
->
bg_ôabÀ_unu£d
 = 0;

353 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

356 
fs
->
Êags
 &~
EXT2_FLAG_NOFREE_ON_ERROR
;

357 *
ªt_fs
 = 
fs
;

359 
˛ónup
:

360 i‡(
Êags
 & 
EXT2_FLAG_NOFREE_ON_ERROR
)

361 *
ªt_fs
 = 
fs
;

363 
	`ext2fs_‰ì
(
fs
);

364  
ªtvÆ
;

365 
	}
}

372 
îrcode_t
 
	$ext2fs_gë_d©a_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 *
ﬁd_io
)

374 i‡((
fs
->
Êags
 & 
EXT2_FLAG_IMAGE_FILE
) == 0)

375  
EXT2_ET_NOT_IMAGE_FILE
;

376 i‡(
ﬁd_io
) {

377 *
ﬁd_io
 = (
fs
->
image_io
 =fs->
io
) ? 0 : fs->io;

380 
	}
}

382 
îrcode_t
 
	$ext2fs_£t_d©a_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 
√w_io
)

384 i‡((
fs
->
Êags
 & 
EXT2_FLAG_IMAGE_FILE
) == 0)

385  
EXT2_ET_NOT_IMAGE_FILE
;

386 
fs
->
io
 = 
√w_io
 ?Çew_iÿ: fs->
image_io
;

388 
	}
}

390 
îrcode_t
 
	$ext2fs_ªwrôe_to_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 
√w_io
)

392 i‡((
fs
->
Êags
 & 
EXT2_FLAG_IMAGE_FILE
) == 0)

393  
EXT2_ET_NOT_IMAGE_FILE
;

394 
fs
->
io
 = fs->
image_io
 = 
√w_io
;

395 
fs
->
Êags
 |
EXT2_FLAG_DIRTY
 | 
EXT2_FLAG_RW
 |

396 
EXT2_FLAG_BB_DIRTY
 | 
EXT2_FLAG_IB_DIRTY
;

397 
fs
->
Êags
 &~
EXT2_FLAG_IMAGE_FILE
;

399 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/read_bb.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<f˙é.h
>

18 
	~<time.h
>

19 #i‡
HAVE_SYS_STAT_H


20 
	~<sys/°©.h
>

22 #i‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 
	~"ext2_fs.h
"

27 
	~"ext2fs.h
"

29 
	sªad_bb_ªc‹d
 {

30 
ext2_badblocks_li°
 
	mbb_li°
;

31 
îrcode_t
 
	mîr
;

37 #ifde‡
__TURBOC__


38 #¥agm®
¨gsu£d


40 
m¨k_bad_block
(
ext2_fûsys
 
fs
, 
blk_t
 *
block_ƒ
,

41 
e2_blk˙t_t
 
block˙t
 
EXT2FS_ATTR
((
unu£d
)),

42 
blk_t
 
ªf_block
 
EXT2FS_ATTR
((
unu£d
)),

43 
ªf_off£t
 
EXT2FS_ATTR
((
unu£d
)),

44 *
¥iv_d©a
)

46 
ªad_bb_ªc‹d
 *
	grb
 = (ªad_bb_ªc‹d *Ë
¥iv_d©a
;

48 i‡(
	gblock˙t
 < 0)

51 i‡((*
	gblock_ƒ
 < 
	gfs
->
	gsu≥r
->
	gs_fú°_d©a_block
) ||

52 (*
	gblock_ƒ
 >
fs
->
su≥r
->
s_blocks_cou¡
))

55 
	grb
->
	gîr
 = 
ext2fs_badblocks_li°_add
(
rb
->
bb_li°
, *
block_ƒ
);

56 i‡(
	grb
->
	gîr
)

57  
	gBLOCK_ABORT
;

64 
îrcode_t
 
	$ext2fs_ªad_bb_öode
(
ext2_fûsys
 
fs
, 
ext2_badblocks_li°
 *
bb_li°
)

66 
îrcode_t
 
ªtvÆ
;

67 
ªad_bb_ªc‹d
 
rb
;

68 
ext2_öode
 
öode
;

69 
blk_t
 
numblocks
;

71 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

73 i‡(!*
bb_li°
) {

74 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
EXT2_BAD_INO
, &
öode
);

75 i‡(
ªtvÆ
)

76  
ªtvÆ
;

77 
numblocks
 = 
öode
.
i_blocks
;

78 i‡(!((
fs
->
su≥r
->
s_„©uª_ro_com∑t
 &

79 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
) &&

80 (
öode
.
i_Êags
 & 
EXT4_HUGE_FILE_FL
)))

81 
numblocks
 =Çumblock†/ (
fs
->
blocksize
 / 512);

82 
numblocks
 += 20;

83 i‡(
numblocks
 < 50)

84 
numblocks
 = 50;

85 i‡(
numblocks
 > 50000)

86 
numblocks
 = 500;

87 
ªtvÆ
 = 
	`ext2fs_badblocks_li°_¸óã
(
bb_li°
, 
numblocks
);

88 i‡(
ªtvÆ
)

89  
ªtvÆ
;

92 
rb
.
bb_li°
 = *bb_list;

93 
rb
.
îr
 = 0;

94 
ªtvÆ
 = 
	`ext2fs_block_ôî©e2
(
fs
, 
EXT2_BAD_INO
, 
BLOCK_FLAG_READ_ONLY
,

95 0, 
m¨k_bad_block
, &
rb
);

96 i‡(
ªtvÆ
)

97  
ªtvÆ
;

99  
rb
.
îr
;

100 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/read_bb_file.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<f˙é.h
>

18 
	~<time.h
>

19 #i‡
HAVE_SYS_STAT_H


20 
	~<sys/°©.h
>

22 #i‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 
	~"ext2_fs.h
"

27 
	~"ext2fs.h
"

32 
îrcode_t
 
ext2fs_ªad_bb_FILE2
(
ext2_fûsys
 
fs
, 
FILE
 *
f
,

33 
ext2_badblocks_li°
 *
bb_li°
,

34 *
¥iv_d©a
,

35 (*
övÆid
)(
ext2_fûsys
 
fs
,

36 
blk_t
 
blk
,

37 *
bad°r
,

38 *
¥iv_d©a
))

40 
îrcode_t
 
ªtvÆ
;

41 
blk_t
 
blockno
;

42 
cou¡
;

43 
buf
[128];

45 i‡(
fs
)

46 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

48 i‡(!*
bb_li°
) {

49 
ªtvÆ
 = 
	`ext2fs_badblocks_li°_¸óã
(
bb_li°
, 10);

50 i‡(
ªtvÆ
)

51  
ªtvÆ
;

54 !
	`„of
 (
f
)) {

55 i‡(
	`fgës
(
buf
, (buf), 
f
Ë=
NULL
)

57 
cou¡
 = 
	`ssˇnf
(
buf
, "%u", &
blockno
);

58 i‡(
cou¡
 <= 0)

60 i‡(
fs
 &&

61 ((
blockno
 < 
fs
->
su≥r
->
s_fú°_d©a_block
) ||

62 (
blockno
 >
fs
->
su≥r
->
s_blocks_cou¡
))) {

63 i‡(
övÆid
)

64 (
övÆid
)(
fs
, 
blockno
, 
buf
, 
¥iv_d©a
);

67 
ªtvÆ
 = 
	`ext2fs_badblocks_li°_add
(*
bb_li°
, 
blockno
);

68 i‡(
ªtvÆ
)

69  
ªtvÆ
;

72 
	}
}

74 
	scom∑t_°ru˘
 {

75 (*
	mövÆid
)(
	mext2_fûsys
, 
	mblk_t
);

78 
ˇŒ_com∑t_övÆid
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
,

79 *
bad°r
 
EXT2FS_ATTR
((
unu£d
)),

80 *
¥iv_d©a
)

82 
com∑t_°ru˘
 *
	g°
;

84 
	g°
 = (
com∑t_°ru˘
 *Ë
¥iv_d©a
;

85 i‡(
	g°
->
	gövÆid
)

86 (
	g°
->
	gövÆid
)(
	gfs
, 
	gblk
);

93 
îrcode_t
 
ext2fs_ªad_bb_FILE
(
ext2_fûsys
 
fs
, 
FILE
 *
f
,

94 
ext2_badblocks_li°
 *
bb_li°
,

95 (*
övÆid
)(
ext2_fûsys
 
fs
, 
blk_t
 
blk
))

97 
com∑t_°ru˘
 
°
;

99 
°
.
övÆid
 = invalid;

101  
	`ext2fs_ªad_bb_FILE2
(
fs
, 
f
, 
bb_li°
, &
°
,

102 
ˇŒ_com∑t_övÆid
);

103 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/res_gdt.c

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~<time.h
>

16 
	~"ext2_fs.h
"

17 
	~"ext2fs.h
"

26 
	$li°_backups
(
ext2_fûsys
 
fs
, *
thªe
,

27 *
five
, *
£ví
)

29 *
mö
 = 
thªe
;

30 
mu…
 = 3;

31 
ªt
;

33 i‡(!(
fs
->
su≥r
->
s_„©uª_ro_com∑t
 &

34 
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
)) {

35 
ªt
 = *
mö
;

36 *
mö
 += 1;

37  
ªt
;

40 i‡(*
five
 < *
mö
) {

41 
mö
 = 
five
;

42 
mu…
 = 5;

44 i‡(*
£ví
 < *
mö
) {

45 
mö
 = 
£ví
;

46 
mu…
 = 7;

49 
ªt
 = *
mö
;

50 *
mö
 *
mu…
;

52  
ªt
;

53 
	}
}

61 
îrcode_t
 
	$ext2fs_¸óã_ªsize_öode
(
ext2_fûsys
 
fs
)

63 
îrcode_t
 
ªtvÆ
, 
ªtvÆ2
;

64 
ext2_su≥r_block
 *
sb
;

65 
ext2_öode
 
öode
;

66 
__u32
 *
dödú_buf
, *
gdt_buf
;

67 
≠b
, 
öode_size
;

68 
blk_t
 
dödú_blk
, 
rsv_off
, 
gdt_off
, 
gdt_blk
;

69 
dödú_dúty
 = 0, 
öode_dúty
 = 0;

71 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

73 
sb
 = 
fs
->
su≥r
;

75 
ªtvÆ
 = 
	`ext2fs_gë_¨øy
(2, 
fs
->
blocksize
, &
dödú_buf
);

76 i‡(
ªtvÆ
)

77 
out_‰ì
;

78 
gdt_buf
 = (
__u32
 *)((*)
dödú_buf
 + 
fs
->
blocksize
);

80 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
EXT2_RESIZE_INO
, &
öode
);

81 i‡(
ªtvÆ
)

82 
out_‰ì
;

85 
≠b
 = 
	`EXT2_ADDR_PER_BLOCK
(
sb
);

86 i‡((
dödú_blk
 = 
öode
.
i_block
[
EXT2_DIND_BLOCK
])) {

87 #ifde‡
RES_GDT_DEBUG


88 
	`¥ötf
("ªadög GDT dödú %u\n", 
dödú_blk
);

90 
ªtvÆ
 = 
	`ext2fs_ªad_öd_block
(
fs
, 
dödú_blk
, 
dödú_buf
);

91 i‡(
ªtvÆ
)

92 
out_öode
;

94 
blk_t
 
gﬂl
 = 
sb
->
s_fú°_d©a_block
 + 
fs
->
desc_blocks
 +

95 
sb
->
s_ª£rved_gdt_blocks
 + 2 +

96 
fs
->
öode_blocks_≥r_group
;

98 
ªtvÆ
 = 
	`ext2fs_Æloc_block
(
fs
, 
gﬂl
, 0, &
dödú_blk
);

99 i‡(
ªtvÆ
)

100 
out_‰ì
;

101 
öode
.
i_mode
 = 
LINUX_S_IFREG
 | 0600;

102 
öode
.
i_löks_cou¡
 = 1;

103 
öode
.
i_block
[
EXT2_DIND_BLOCK
] = 
dödú_blk
;

104 
	`ext2fs_iblk_£t
(
fs
, &
öode
, 1);

105 
	`mem£t
(
dödú_buf
, 0, 
fs
->
blocksize
);

106 #ifde‡
RES_GDT_DEBUG


107 
	`¥ötf
("Æloˇãd GDT dödú %u\n", 
dödú_blk
);

109 
dödú_dúty
 = 
öode_dúty
 = 1;

110 
öode_size
 = 
≠b
*≠b +ápb + 
EXT2_NDIR_BLOCKS
;

111 
öode_size
 *
fs
->
blocksize
;

112 
öode
.
i_size
 = 
öode_size
 & 0xFFFFFFFF;

113 
öode
.
i_size_high
 = (
öode_size
 >> 32) & 0xFFFFFFFF;

114 if(
öode
.
i_size_high
) {

115 
sb
->
s_„©uª_ro_com∑t
 |=

116 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
;

118 
öode
.
i_˘ime
 = 
fs
->
now
 ? fs->now : 
	`time
(0);

121 
rsv_off
 = 0, 
gdt_off
 = 
fs
->
desc_blocks
,

122 
gdt_blk
 = 
sb
->
s_fú°_d©a_block
 + 1 + 
fs
->
desc_blocks
;

123 
rsv_off
 < 
sb
->
s_ª£rved_gdt_blocks
;

124 
rsv_off
++, 
gdt_off
++, 
gdt_blk
++) {

125 
thªe
 = 1, 
five
 = 5, 
£ví
 = 7;

126 
gΩ
, 
œ°
 = 0;

127 
gdt_dúty
 = 0;

129 
gdt_off
 %
≠b
;

130 i‡(!
dödú_buf
[
gdt_off
]) {

142 
gdt_dúty
 = 
dödú_dúty
 = 
öode_dúty
 = 1;

143 
	`mem£t
(
gdt_buf
, 0, 
fs
->
blocksize
);

144 
dödú_buf
[
gdt_off
] = 
gdt_blk
;

145 
	`ext2fs_iblk_add_blocks
(
fs
, &
öode
, 1);

146 #ifde‡
RES_GDT_DEBUG


147 
	`¥ötf
("addedÖrimary GDT block %uát %u[%u]\n",

148 
gdt_blk
, 
dödú_blk
, 
gdt_off
);

150 } i‡(
dödú_buf
[
gdt_off
] =
gdt_blk
) {

151 #ifde‡
RES_GDT_DEBUG


152 
	`¥ötf
("ªadögÖrim¨y GDT block %u\n", 
gdt_blk
);

154 
ªtvÆ
 = 
	`ext2fs_ªad_öd_block
(
fs
, 
gdt_blk
, 
gdt_buf
);

155 i‡(
ªtvÆ
)

156 
out_dödú
;

158 #ifde‡
RES_GDT_DEBUG


159 
	`¥ötf
("badÖrimary GDT %u != %uát %u[%u]\n",

160 
dödú_buf
[
gdt_off
], 
gdt_blk
,
dödú_blk
,gdt_off);

162 
ªtvÆ
 = 
EXT2_ET_RESIZE_INODE_CORRUPT
;

163 
out_dödú
;

166 (
gΩ
 = 
	`li°_backups
(
fs
, &
thªe
, &
five
, &
£ví
)) <

167 
fs
->
group_desc_cou¡
) {

168 
blk_t
 
ex≥˘
 = 
gdt_blk
 + 
gΩ
 * 
sb
->
s_blocks_≥r_group
;

170 i‡(!
gdt_buf
[
œ°
]) {

171 #ifde‡
RES_GDT_DEBUG


172 
	`¥ötf
("added backup GDT %u grp %u@%u[%u]\n",

173 
ex≥˘
, 
gΩ
, 
gdt_blk
, 
œ°
);

175 
gdt_buf
[
œ°
] = 
ex≥˘
;

176 
	`ext2fs_iblk_add_blocks
(
fs
, &
öode
, 1);

177 
gdt_dúty
 = 
öode_dúty
 = 1;

178 } i‡(
gdt_buf
[
œ°
] !
ex≥˘
) {

179 #ifde‡
RES_GDT_DEBUG


180 
	`¥ötf
("bad backup GDT %u != %uát %u[%u]\n",

181 
gdt_buf
[
œ°
], 
ex≥˘
, 
gdt_blk
,Üast);

183 
ªtvÆ
 = 
EXT2_ET_RESIZE_INODE_CORRUPT
;

184 
out_dödú
;

186 
œ°
++;

188 i‡(
gdt_dúty
) {

189 #ifde‡
RES_GDT_DEBUG


190 
	`¥ötf
("wrôögÖrim¨y GDT block %u\n", 
gdt_blk
);

192 
ªtvÆ
 = 
	`ext2fs_wrôe_öd_block
(
fs
, 
gdt_blk
, 
gdt_buf
);

193 i‡(
ªtvÆ
)

194 
out_dödú
;

198 
out_dödú
:

199 i‡(
dödú_dúty
) {

200 
ªtvÆ2
 = 
	`ext2fs_wrôe_öd_block
(
fs
, 
dödú_blk
, 
dödú_buf
);

201 i‡(!
ªtvÆ
)

202 
ªtvÆ
 = 
ªtvÆ2
;

204 
out_öode
:

205 #ifde‡
RES_GDT_DEBUG


206 
	`¥ötf
("öode.i_block†%u, i_sizê%u\n", 
öode
.
i_blocks
,

207 
öode
.
i_size
);

209 i‡(
öode_dúty
) {

210 
öode
.
i_©ime
 = inode.
i_mtime
 = 
fs
->
now
 ? fs->now : 
	`time
(0);

211 
ªtvÆ2
 = 
	`ext2fs_wrôe_√w_öode
(
fs
, 
EXT2_RESIZE_INO
, &
öode
);

212 i‡(!
ªtvÆ
)

213 
ªtvÆ
 = 
ªtvÆ2
;

215 
out_‰ì
:

216 
	`ext2fs_‰ì_mem
(&
dödú_buf
);

217  
ªtvÆ
;

218 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/rw_bitmaps.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<f˙é.h
>

18 
	~<time.h
>

19 #ifde‡
HAVE_SYS_STAT_H


20 
	~<sys/°©.h
>

22 #ifde‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 
	~"ext2_fs.h
"

27 
	~"ext2fs.h
"

28 
	~"e2image.h
"

30 
îrcode_t
 
	$wrôe_bôm≠s
(
ext2_fûsys
 
fs
, 
do_öode
, 
do_block
)

32 
dgΩ_t
 
i
;

33 
j
;

34 
block_nbyãs
, 
öode_nbyãs
;

35 
nbôs
;

36 
îrcode_t
 
ªtvÆ
;

37 *
block_buf
, *
öode_buf
;

38 
csum_Êag
 = 0;

39 
blk_t
 
blk
;

40 
blk_t
 
blk_ôr
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

41 
ext2_öo_t
 
öo_ôr
 = 1;

43 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

45 i‡(!(
fs
->
Êags
 & 
EXT2_FLAG_RW
))

46  
EXT2_ET_RO_FILSYS
;

48 i‡(
	`EXT2_HAS_RO_COMPAT_FEATURE
(
fs
->
su≥r
,

49 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
))

50 
csum_Êag
 = 1;

52 
öode_nbyãs
 = 
block_nbyãs
 = 0;

53 i‡(
do_block
) {

54 
block_nbyãs
 = 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
) / 8;

55 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
block_buf
);

56 i‡(
ªtvÆ
)

57  
ªtvÆ
;

58 
	`mem£t
(
block_buf
, 0xff, 
fs
->
blocksize
);

60 i‡(
do_öode
) {

61 
öode_nbyãs
 = (
size_t
)

62 ((
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
)+7) / 8);

63 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
öode_buf
);

64 i‡(
ªtvÆ
)

65  
ªtvÆ
;

66 
	`mem£t
(
öode_buf
, 0xff, 
fs
->
blocksize
);

69 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++) {

70 i‡(!
do_block
)

71 
skù_block_bôm≠
;

73 i‡(
csum_Êag
 && 
fs
->
group_desc
[
i
].
bg_Êags
 &

74 
EXT2_BG_BLOCK_UNINIT
)

75 
skù_this_block_bôm≠
;

77 
ªtvÆ
 = 
	`ext2fs_gë_block_bôm≠_ønge
(
fs
->
block_m≠
,

78 
blk_ôr
, 
block_nbyãs
 << 3, 
block_buf
);

79 i‡(
ªtvÆ
)

80  
ªtvÆ
;

82 i‡(
i
 =
fs
->
group_desc_cou¡
 - 1) {

84 
nbôs
 = ((
fs
->
su≥r
->
s_blocks_cou¡


85 - 
fs
->
su≥r
->
s_fú°_d©a_block
)

86 % 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
));

87 i‡(
nbôs
)

88 
j
 = 
nbôs
; j < 
fs
->
blocksize
 * 8; j++)

89 
	`ext2fs_£t_bô
(
j
, 
block_buf
);

91 
blk
 = 
fs
->
group_desc
[
i
].
bg_block_bôm≠
;

92 i‡(
blk
) {

93 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
blk
, 1,

94 
block_buf
);

95 i‡(
ªtvÆ
)

96  
EXT2_ET_BLOCK_BITMAP_WRITE
;

98 
skù_this_block_bôm≠
:

99 
blk_ôr
 +
block_nbyãs
 << 3;

100 
skù_block_bôm≠
:

102 i‡(!
do_öode
)

105 i‡(
csum_Êag
 && 
fs
->
group_desc
[
i
].
bg_Êags
 &

106 
EXT2_BG_INODE_UNINIT
)

107 
skù_this_öode_bôm≠
;

109 
ªtvÆ
 = 
	`ext2fs_gë_öode_bôm≠_ønge
(
fs
->
öode_m≠
,

110 
öo_ôr
, 
öode_nbyãs
 << 3, 
öode_buf
);

111 i‡(
ªtvÆ
)

112  
ªtvÆ
;

114 
blk
 = 
fs
->
group_desc
[
i
].
bg_öode_bôm≠
;

115 i‡(
blk
) {

116 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
blk
, 1,

117 
öode_buf
);

118 i‡(
ªtvÆ
)

119  
EXT2_ET_INODE_BITMAP_WRITE
;

121 
skù_this_öode_bôm≠
:

122 
öo_ôr
 +
öode_nbyãs
 << 3;

125 i‡(
do_block
) {

126 
fs
->
Êags
 &~
EXT2_FLAG_BB_DIRTY
;

127 
	`ext2fs_‰ì_mem
(&
block_buf
);

129 i‡(
do_öode
) {

130 
fs
->
Êags
 &~
EXT2_FLAG_IB_DIRTY
;

131 
	`ext2fs_‰ì_mem
(&
öode_buf
);

134 
	}
}

136 
îrcode_t
 
	$ªad_bôm≠s
(
ext2_fûsys
 
fs
, 
do_öode
, 
do_block
)

138 
dgΩ_t
 
i
;

139 *
block_bôm≠
 = 0, *
öode_bôm≠
 = 0;

140 *
buf
;

141 
îrcode_t
 
ªtvÆ
;

142 
block_nbyãs
 = 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
) / 8;

143 
öode_nbyãs
 = 
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
) / 8;

144 
csum_Êag
 = 0;

145 
do_image
 = 
fs
->
Êags
 & 
EXT2_FLAG_IMAGE_FILE
;

146 
˙t
;

147 
blk_t
 
blk
;

148 
blk_t
 
blk_ôr
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

149 
blk_t
 
blk_˙t
;

150 
ext2_öo_t
 
öo_ôr
 = 1;

151 
ext2_öo_t
 
öo_˙t
;

153 
	`EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

155 
fs
->
wrôe_bôm≠s
 = 
ext2fs_wrôe_bôm≠s
;

157 i‡(
	`EXT2_HAS_RO_COMPAT_FEATURE
(
fs
->
su≥r
,

158 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
))

159 
csum_Êag
 = 1;

161 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
	`°æí
(
fs
->
devi˚_«me
Ë+ 80, &
buf
);

162 i‡(
ªtvÆ
)

163  
ªtvÆ
;

164 i‡(
do_block
) {

165 i‡(
fs
->
block_m≠
)

166 
	`ext2fs_‰ì_block_bôm≠
(
fs
->
block_m≠
);

167 
	`°r˝y
(
buf
, "block bitmap for ");

168 
	`°rˇt
(
buf
, 
fs
->
devi˚_«me
);

169 
ªtvÆ
 = 
	`ext2fs_Æloˇã_block_bôm≠
(
fs
, 
buf
, &fs->
block_m≠
);

170 i‡(
ªtvÆ
)

171 
˛ónup
;

172 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
do_image
 ? 
fs
->
blocksize
 :

173 (Ë
block_nbyãs
, &
block_bôm≠
);

174 i‡(
ªtvÆ
)

175 
˛ónup
;

177 
block_nbyãs
 = 0;

178 i‡(
do_öode
) {

179 i‡(
fs
->
öode_m≠
)

180 
	`ext2fs_‰ì_öode_bôm≠
(
fs
->
öode_m≠
);

181 
	`°r˝y
(
buf
, "inode bitmap for ");

182 
	`°rˇt
(
buf
, 
fs
->
devi˚_«me
);

183 
ªtvÆ
 = 
	`ext2fs_Æloˇã_öode_bôm≠
(
fs
, 
buf
, &fs->
öode_m≠
);

184 i‡(
ªtvÆ
)

185 
˛ónup
;

186 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
do_image
 ? 
fs
->
blocksize
 :

187 (Ë
öode_nbyãs
, &
öode_bôm≠
);

188 i‡(
ªtvÆ
)

189 
˛ónup
;

191 
öode_nbyãs
 = 0;

192 
	`ext2fs_‰ì_mem
(&
buf
);

194 i‡(
fs
->
Êags
 & 
EXT2_FLAG_IMAGE_FILE
) {

195 
blk
 = (
fs
->
image_hódî
->
off£t_öodem≠
 / fs->
blocksize
);

196 
öo_˙t
 = 
fs
->
su≥r
->
s_öodes_cou¡
;

197 
öode_nbyãs
 > 0) {

198 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
image_io
, 
blk
++,

199 1, 
öode_bôm≠
);

200 i‡(
ªtvÆ
)

201 
˛ónup
;

202 
˙t
 = 
fs
->
blocksize
 << 3;

203 i‡(
˙t
 > 
öo_˙t
)

204 
˙t
 = 
öo_˙t
;

205 
ªtvÆ
 = 
	`ext2fs_£t_öode_bôm≠_ønge
(
fs
->
öode_m≠
,

206 
öo_ôr
, 
˙t
, 
öode_bôm≠
);

207 i‡(
ªtvÆ
)

208 
˛ónup
;

209 
öo_ôr
 +
fs
->
blocksize
 << 3;

210 
öo_˙t
 -
fs
->
blocksize
 << 3;

211 
öode_nbyãs
 -
fs
->
blocksize
;

213 
blk
 = (
fs
->
image_hódî
->
off£t_blockm≠
 /

214 
fs
->
blocksize
);

215 
blk_˙t
 = 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
) *

216 
fs
->
group_desc_cou¡
;

217 
block_nbyãs
 > 0) {

218 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
image_io
, 
blk
++,

219 1, 
block_bôm≠
);

220 i‡(
ªtvÆ
)

221 
˛ónup
;

222 
˙t
 = 
fs
->
blocksize
 << 3;

223 i‡(
˙t
 > 
blk_˙t
)

224 
˙t
 = 
blk_˙t
;

225 
ªtvÆ
 = 
	`ext2fs_£t_block_bôm≠_ønge
(
fs
->
block_m≠
,

226 
blk_ôr
, 
˙t
, 
block_bôm≠
);

227 i‡(
ªtvÆ
)

228 
˛ónup
;

229 
blk_ôr
 +
fs
->
blocksize
 << 3;

230 
blk_˙t
 -
fs
->
blocksize
 << 3;

231 
block_nbyãs
 -
fs
->
blocksize
;

233 
suc˚ss_˛ónup
;

236 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++) {

237 i‡(
block_bôm≠
) {

238 
blk
 = 
fs
->
group_desc
[
i
].
bg_block_bôm≠
;

239 i‡(
csum_Êag
 && 
fs
->
group_desc
[
i
].
bg_Êags
 &

240 
EXT2_BG_BLOCK_UNINIT
 &&

241 
	`ext2fs_group_desc_csum_vîify
(
fs
, 
i
))

242 
blk
 = 0;

243 i‡(
blk
) {

244 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
blk
,

245 -
block_nbyãs
, 
block_bôm≠
);

246 i‡(
ªtvÆ
) {

247 
ªtvÆ
 = 
EXT2_ET_BLOCK_BITMAP_READ
;

248 
˛ónup
;

251 
	`mem£t
(
block_bôm≠
, 0, 
block_nbyãs
);

252 
˙t
 = 
block_nbyãs
 << 3;

253 
ªtvÆ
 = 
	`ext2fs_£t_block_bôm≠_ønge
(
fs
->
block_m≠
,

254 
blk_ôr
, 
˙t
, 
block_bôm≠
);

255 i‡(
ªtvÆ
)

256 
˛ónup
;

257 
blk_ôr
 +
block_nbyãs
 << 3;

259 i‡(
öode_bôm≠
) {

260 
blk
 = 
fs
->
group_desc
[
i
].
bg_öode_bôm≠
;

261 i‡(
csum_Êag
 && 
fs
->
group_desc
[
i
].
bg_Êags
 &

262 
EXT2_BG_INODE_UNINIT
 &&

263 
	`ext2fs_group_desc_csum_vîify
(
fs
, 
i
))

264 
blk
 = 0;

265 i‡(
blk
) {

266 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
blk
,

267 -
öode_nbyãs
, 
öode_bôm≠
);

268 i‡(
ªtvÆ
) {

269 
ªtvÆ
 = 
EXT2_ET_INODE_BITMAP_READ
;

270 
˛ónup
;

273 
	`mem£t
(
öode_bôm≠
, 0, 
öode_nbyãs
);

274 
˙t
 = 
öode_nbyãs
 << 3;

275 
ªtvÆ
 = 
	`ext2fs_£t_öode_bôm≠_ønge
(
fs
->
öode_m≠
,

276 
öo_ôr
, 
˙t
, 
öode_bôm≠
);

277 i‡(
ªtvÆ
)

278 
˛ónup
;

279 
öo_ôr
 +
öode_nbyãs
 << 3;

282 
suc˚ss_˛ónup
:

283 i‡(
öode_bôm≠
)

284 
	`ext2fs_‰ì_mem
(&
öode_bôm≠
);

285 i‡(
block_bôm≠
)

286 
	`ext2fs_‰ì_mem
(&
block_bôm≠
);

289 
˛ónup
:

290 i‡(
do_block
) {

291 
	`ext2fs_‰ì_mem
(&
fs
->
block_m≠
);

292 
fs
->
block_m≠
 = 0;

294 i‡(
do_öode
) {

295 
	`ext2fs_‰ì_mem
(&
fs
->
öode_m≠
);

296 
fs
->
öode_m≠
 = 0;

298 i‡(
öode_bôm≠
)

299 
	`ext2fs_‰ì_mem
(&
öode_bôm≠
);

300 i‡(
block_bôm≠
)

301 
	`ext2fs_‰ì_mem
(&
block_bôm≠
);

302 i‡(
buf
)

303 
	`ext2fs_‰ì_mem
(&
buf
);

304  
ªtvÆ
;

305 
	}
}

307 
îrcode_t
 
	$ext2fs_ªad_öode_bôm≠
(
ext2_fûsys
 
fs
)

309  
	`ªad_bôm≠s
(
fs
, 1, 0);

310 
	}
}

312 
îrcode_t
 
	$ext2fs_ªad_block_bôm≠
(
ext2_fûsys
 
fs
)

314  
	`ªad_bôm≠s
(
fs
, 0, 1);

315 
	}
}

317 
îrcode_t
 
	$ext2fs_wrôe_öode_bôm≠
(
ext2_fûsys
 
fs
)

319  
	`wrôe_bôm≠s
(
fs
, 1, 0);

320 
	}
}

322 
îrcode_t
 
	$ext2fs_wrôe_block_bôm≠
 (
ext2_fûsys
 
fs
)

324  
	`wrôe_bôm≠s
(
fs
, 0, 1);

325 
	}
}

327 
îrcode_t
 
	$ext2fs_ªad_bôm≠s
(
ext2_fûsys
 
fs
)

329 i‡(
fs
->
öode_m≠
 && fs->
block_m≠
)

332  
	`ªad_bôm≠s
(
fs
, !fs->
öode_m≠
, !fs->
block_m≠
);

333 
	}
}

335 
îrcode_t
 
	$ext2fs_wrôe_bôm≠s
(
ext2_fûsys
 
fs
)

337 
do_öode
 = 
fs
->
öode_m≠
 && 
	`ext2fs_ã°_ib_dúty
(fs);

338 
do_block
 = 
fs
->
block_m≠
 && 
	`ext2fs_ã°_bb_dúty
(fs);

340 i‡(!
do_öode
 && !
do_block
)

343  
	`wrôe_bôm≠s
(
fs
, 
do_öode
, 
do_block
);

344 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/swapfs.c

12 
	~<c⁄fig.h
>

13 
	~<°dio.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<°rög.h
>

18 
	~<time.h
>

20 
	~"ext2_fs.h
"

21 
	~"ext2fs.h
"

22 
	~<ext2fs/ext2_ext_©å.h
>

24 #i‡
deföed
(
WORDS_BIGENDIAN
Ë|| (
BYTE_ORDER
 =
BIG_ENDIAN
)

25 
	$ext2fs_sw≠_su≥r
(
ext2_su≥r_block
 * 
sb
)

27 
i
;

28 
sb
->
s_öodes_cou¡
 = 
	`ext2fs_swab32
(sb->s_inodes_count);

29 
sb
->
s_blocks_cou¡
 = 
	`ext2fs_swab32
(sb->s_blocks_count);

30 
sb
->
s_r_blocks_cou¡
 = 
	`ext2fs_swab32
(sb->s_r_blocks_count);

31 
sb
->
s_‰ì_blocks_cou¡
 = 
	`ext2fs_swab32
(sb->s_free_blocks_count);

32 
sb
->
s_‰ì_öodes_cou¡
 = 
	`ext2fs_swab32
(sb->s_free_inodes_count);

33 
sb
->
s_fú°_d©a_block
 = 
	`ext2fs_swab32
(sb->s_first_data_block);

34 
sb
->
s_log_block_size
 = 
	`ext2fs_swab32
(sb->s_log_block_size);

35 
sb
->
s_log_‰ag_size
 = 
	`ext2fs_swab32
(sb->s_log_frag_size);

36 
sb
->
s_blocks_≥r_group
 = 
	`ext2fs_swab32
(sb->s_blocks_per_group);

37 
sb
->
s_‰ags_≥r_group
 = 
	`ext2fs_swab32
(sb->s_frags_per_group);

38 
sb
->
s_öodes_≥r_group
 = 
	`ext2fs_swab32
(sb->s_inodes_per_group);

39 
sb
->
s_mtime
 = 
	`ext2fs_swab32
(sb->s_mtime);

40 
sb
->
s_wtime
 = 
	`ext2fs_swab32
(sb->s_wtime);

41 
sb
->
s_m¡_cou¡
 = 
	`ext2fs_swab16
(sb->s_mnt_count);

42 
sb
->
s_max_m¡_cou¡
 = 
	`ext2fs_swab16
(sb->s_max_mnt_count);

43 
sb
->
s_magic
 = 
	`ext2fs_swab16
(sb->s_magic);

44 
sb
->
s_°©e
 = 
	`ext2fs_swab16
(sb->s_state);

45 
sb
->
s_îr‹s
 = 
	`ext2fs_swab16
(sb->s_errors);

46 
sb
->
s_mö‹_ªv_Àvñ
 = 
	`ext2fs_swab16
(sb->s_minor_rev_level);

47 
sb
->
s_œ°check
 = 
	`ext2fs_swab32
(sb->s_lastcheck);

48 
sb
->
s_checköãrvÆ
 = 
	`ext2fs_swab32
(sb->s_checkinterval);

49 
sb
->
s_¸ót‹_os
 = 
	`ext2fs_swab32
(sb->s_creator_os);

50 
sb
->
s_ªv_Àvñ
 = 
	`ext2fs_swab32
(sb->s_rev_level);

51 
sb
->
s_def_ªsuid
 = 
	`ext2fs_swab16
(sb->s_def_resuid);

52 
sb
->
s_def_ªsgid
 = 
	`ext2fs_swab16
(sb->s_def_resgid);

53 
sb
->
s_fú°_öo
 = 
	`ext2fs_swab32
(sb->s_first_ino);

54 
sb
->
s_öode_size
 = 
	`ext2fs_swab16
(sb->s_inode_size);

55 
sb
->
s_block_group_ƒ
 = 
	`ext2fs_swab16
(sb->s_block_group_nr);

56 
sb
->
s_„©uª_com∑t
 = 
	`ext2fs_swab32
(sb->s_feature_compat);

57 
sb
->
s_„©uª_öcom∑t
 = 
	`ext2fs_swab32
(sb->s_feature_incompat);

58 
sb
->
s_„©uª_ro_com∑t
 = 
	`ext2fs_swab32
(sb->s_feature_ro_compat);

59 
sb
->
s_Æg‹ôhm_ußge_bôm≠
 = 
	`ext2fs_swab32
(sb->s_algorithm_usage_bitmap);

60 
sb
->
s_ª£rved_gdt_blocks
 = 
	`ext2fs_swab16
(sb->s_reserved_gdt_blocks);

61 
sb
->
s_jou∫Æ_öum
 = 
	`ext2fs_swab32
(sb->s_journal_inum);

62 
sb
->
s_jou∫Æ_dev
 = 
	`ext2fs_swab32
(sb->s_journal_dev);

63 
sb
->
s_œ°_‹ph™
 = 
	`ext2fs_swab32
(sb->s_last_orphan);

64 
sb
->
s_desc_size
 = 
	`ext2fs_swab16
(sb->s_desc_size);

65 
sb
->
s_deÁu…_mou¡_›ts
 = 
	`ext2fs_swab32
(sb->s_default_mount_opts);

66 
sb
->
s_fú°_mëa_bg
 = 
	`ext2fs_swab32
(sb->s_first_meta_bg);

67 
sb
->
s_mkfs_time
 = 
	`ext2fs_swab32
(sb->s_mkfs_time);

68 
sb
->
s_blocks_cou¡_hi
 = 
	`ext2fs_swab32
(sb->s_blocks_count_hi);

69 
sb
->
s_r_blocks_cou¡_hi
 = 
	`ext2fs_swab32
(sb->s_r_blocks_count_hi);

70 
sb
->
s_‰ì_blocks_hi
 = 
	`ext2fs_swab32
(sb->s_free_blocks_hi);

71 
sb
->
s_mö_exåa_isize
 = 
	`ext2fs_swab16
(sb->s_min_extra_isize);

72 
sb
->
s_w™t_exåa_isize
 = 
	`ext2fs_swab16
(sb->s_want_extra_isize);

73 
sb
->
s_Êags
 = 
	`ext2fs_swab32
(sb->s_flags);

74 
sb
->
s_kbyãs_wrôãn
 = 
	`ext2fs_swab64
(sb->s_kbytes_written);

75 
i
=0; i < 4; i++)

76 
sb
->
s_hash_£ed
[
i
] = 
	`ext2fs_swab32
(sb->s_hash_seed[i]);

77 
i
=0; i < 17; i++)

78 
sb
->
s_j∆_blocks
[
i
] = 
	`ext2fs_swab32
(sb->s_jnl_blocks[i]);

80 
	}
}

82 
	$ext2fs_sw≠_group_desc
(
ext2_group_desc
 *
gdp
)

84 
gdp
->
bg_block_bôm≠
 = 
	`ext2fs_swab32
(gdp->bg_block_bitmap);

85 
gdp
->
bg_öode_bôm≠
 = 
	`ext2fs_swab32
(gdp->bg_inode_bitmap);

86 
gdp
->
bg_öode_èbÀ
 = 
	`ext2fs_swab32
(gdp->bg_inode_table);

87 
gdp
->
bg_‰ì_blocks_cou¡
 = 
	`ext2fs_swab16
(gdp->bg_free_blocks_count);

88 
gdp
->
bg_‰ì_öodes_cou¡
 = 
	`ext2fs_swab16
(gdp->bg_free_inodes_count);

89 
gdp
->
bg_u£d_dús_cou¡
 = 
	`ext2fs_swab16
(gdp->bg_used_dirs_count);

90 
gdp
->
bg_Êags
 = 
	`ext2fs_swab16
(gdp->bg_flags);

91 
gdp
->
bg_ôabÀ_unu£d
 = 
	`ext2fs_swab16
(gdp->bg_itable_unused);

92 
gdp
->
bg_checksum
 = 
	`ext2fs_swab16
(gdp->bg_checksum);

93 
	}
}

95 
	$ext2fs_sw≠_ext_©å_hódî
(
ext2_ext_©å_hódî
 *
to_hódî
,

96 
ext2_ext_©å_hódî
 *
‰om_hódî
)

98 
n
;

100 
to_hódî
->
h_magic
 = 
	`ext2fs_swab32
(
‰om_hódî
->h_magic);

101 
to_hódî
->
h_blocks
 = 
	`ext2fs_swab32
(
‰om_hódî
->h_blocks);

102 
to_hódî
->
h_ªfcou¡
 = 
	`ext2fs_swab32
(
‰om_hódî
->h_refcount);

103 
to_hódî
->
h_hash
 = 
	`ext2fs_swab32
(
‰om_hódî
->h_hash);

104 
n
 = 0;Ç < 4;Ç++)

105 
to_hódî
->
h_ª£rved
[
n
] =

106 
	`ext2fs_swab32
(
‰om_hódî
->
h_ª£rved
[
n
]);

107 
	}
}

109 
	$ext2fs_sw≠_ext_©å_íåy
(
ext2_ext_©å_íåy
 *
to_íåy
,

110 
ext2_ext_©å_íåy
 *
‰om_íåy
)

112 
to_íåy
->
e_vÆue_offs
 = 
	`ext2fs_swab16
(
‰om_íåy
->e_value_offs);

113 
to_íåy
->
e_vÆue_block
 = 
	`ext2fs_swab32
(
‰om_íåy
->e_value_block);

114 
to_íåy
->
e_vÆue_size
 = 
	`ext2fs_swab32
(
‰om_íåy
->e_value_size);

115 
to_íåy
->
e_hash
 = 
	`ext2fs_swab32
(
‰om_íåy
->e_hash);

116 
	}
}

118 
	$ext2fs_sw≠_ext_©å
(*
to
, *
‰om
, 
bufsize
, 
has_hódî
)

120 
ext2_ext_©å_hódî
 *
‰om_hódî
 =

121 (
ext2_ext_©å_hódî
 *)
‰om
;

122 
ext2_ext_©å_hódî
 *
to_hódî
 =

123 (
ext2_ext_©å_hódî
 *)
to
;

124 
ext2_ext_©å_íåy
 *
‰om_íåy
, *
to_íåy
;

125 *
‰om_íd
 = (*)
‰om_hódî
 + 
bufsize
;

127 i‡(
to_hódî
 !
‰om_hódî
)

128 
	`mem˝y
(
to_hódî
, 
‰om_hódî
, 
bufsize
);

130 i‡(
has_hódî
) {

131 
	`ext2fs_sw≠_ext_©å_hódî
(
to_hódî
, 
‰om_hódî
);

133 
‰om_íåy
 = (
ext2_ext_©å_íåy
 *)(
‰om_hódî
+1);

134 
to_íåy
 = (
ext2_ext_©å_íåy
 *)(
to_hódî
+1);

136 
‰om_íåy
 = (
ext2_ext_©å_íåy
 *)
‰om_hódî
;

137 
to_íåy
 = (
ext2_ext_©å_íåy
 *)
to_hódî
;

140 (*)
‰om_íåy
 < 
‰om_íd
 && *(
__u32
 *)from_entry) {

141 
	`ext2fs_sw≠_ext_©å_íåy
(
to_íåy
, 
‰om_íåy
);

142 
‰om_íåy
 = 
	`EXT2_EXT_ATTR_NEXT
(from_entry);

143 
to_íåy
 = 
	`EXT2_EXT_ATTR_NEXT
(to_entry);

145 
	}
}

147 
	$ext2fs_sw≠_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öode_œrge
 *
t
,

148 
ext2_öode_œrge
 *
f
, 
ho°‹dî
,

149 
bufsize
)

151 
i
, 
has_d©a_blocks
, 
exåa_isize
, 
©å_magic
;

152 
has_exã¡s
 = 0;

153 
i¶nk
 = 0;

154 
__u32
 *
óf
, *
ót
;

156 i‡(
ho°‹dî
 && 
	`LINUX_S_ISLNK
(
f
->
i_mode
))

157 
i¶nk
 = 1;

158 
t
->
i_mode
 = 
	`ext2fs_swab16
(
f
->i_mode);

159 i‡(!
ho°‹dî
 && 
	`LINUX_S_ISLNK
(
t
->
i_mode
))

160 
i¶nk
 = 1;

161 
t
->
i_uid
 = 
	`ext2fs_swab16
(
f
->i_uid);

162 
t
->
i_size
 = 
	`ext2fs_swab32
(
f
->i_size);

163 
t
->
i_©ime
 = 
	`ext2fs_swab32
(
f
->i_atime);

164 
t
->
i_˘ime
 = 
	`ext2fs_swab32
(
f
->i_ctime);

165 
t
->
i_mtime
 = 
	`ext2fs_swab32
(
f
->i_mtime);

166 
t
->
i_dtime
 = 
	`ext2fs_swab32
(
f
->i_dtime);

167 
t
->
i_gid
 = 
	`ext2fs_swab16
(
f
->i_gid);

168 
t
->
i_löks_cou¡
 = 
	`ext2fs_swab16
(
f
->i_links_count);

169 
t
->
i_fûe_a˛
 = 
	`ext2fs_swab32
(
f
->i_file_acl);

170 i‡(
ho°‹dî
)

171 
has_d©a_blocks
 = 
	`ext2fs_öode_d©a_blocks
(
fs
,

172 (
ext2_öode
 *Ë
f
);

173 
t
->
i_blocks
 = 
	`ext2fs_swab32
(
f
->i_blocks);

174 i‡(!
ho°‹dî
)

175 
has_d©a_blocks
 = 
	`ext2fs_öode_d©a_blocks
(
fs
,

176 (
ext2_öode
 *Ë
t
);

177 i‡(
ho°‹dî
 && (
f
->
i_Êags
 & 
EXT4_EXTENTS_FL
))

178 
has_exã¡s
 = 1;

179 
t
->
i_Êags
 = 
	`ext2fs_swab32
(
f
->i_flags);

180 i‡(!
ho°‹dî
 && (
t
->
i_Êags
 & 
EXT4_EXTENTS_FL
))

181 
has_exã¡s
 = 1;

182 
t
->
i_dú_a˛
 = 
	`ext2fs_swab32
(
f
->i_dir_acl);

184 i‡(!
has_exã¡s
 && (!
i¶nk
 || 
has_d©a_blocks
)) {

185 
i
 = 0; i < 
EXT2_N_BLOCKS
; i++)

186 
t
->
i_block
[
i
] = 
	`ext2fs_swab32
(
f
->i_block[i]);

187 } i‡(
t
 !
f
) {

188 
i
 = 0; i < 
EXT2_N_BLOCKS
; i++)

189 
t
->
i_block
[
i
] = 
f
->i_block[i];

191 
t
->
i_gíî©i⁄
 = 
	`ext2fs_swab32
(
f
->i_generation);

192 
t
->
i_Áddr
 = 
	`ext2fs_swab32
(
f
->i_faddr);

194 
fs
->
su≥r
->
s_¸ót‹_os
) {

195 
EXT2_OS_LINUX
:

196 
t
->
osd1
.
löux1
.
l_i_vîsi⁄
 =

197 
	`ext2fs_swab32
(
f
->
osd1
.
löux1
.
l_i_vîsi⁄
);

198 
t
->
osd2
.
löux2
.
l_i_blocks_hi
 =

199 
	`ext2fs_swab16
(
f
->
osd2
.
löux2
.
l_i_blocks_hi
);

200 
t
->
osd2
.
löux2
.
l_i_fûe_a˛_high
 =

201 
	`ext2fs_swab16
(
f
->
osd2
.
löux2
.
l_i_fûe_a˛_high
);

202 
t
->
osd2
.
löux2
.
l_i_uid_high
 =

203 
	`ext2fs_swab16
 (
f
->
osd2
.
löux2
.
l_i_uid_high
);

204 
t
->
osd2
.
löux2
.
l_i_gid_high
 =

205 
	`ext2fs_swab16
 (
f
->
osd2
.
löux2
.
l_i_gid_high
);

206 
t
->
osd2
.
löux2
.
l_i_ª£rved2
 =

207 
	`ext2fs_swab32
(
f
->
osd2
.
löux2
.
l_i_ª£rved2
);

209 
EXT2_OS_HURD
:

210 
t
->
osd1
.
hurd1
.
h_i_å™¶©‹
 =

211 
	`ext2fs_swab32
 (
f
->
osd1
.
hurd1
.
h_i_å™¶©‹
);

212 
t
->
osd2
.
hurd2
.
h_i_‰ag
 = 
f
->osd2.hurd2.h_i_frag;

213 
t
->
osd2
.
hurd2
.
h_i_fsize
 = 
f
->osd2.hurd2.h_i_fsize;

214 
t
->
osd2
.
hurd2
.
h_i_mode_high
 =

215 
	`ext2fs_swab16
 (
f
->
osd2
.
hurd2
.
h_i_mode_high
);

216 
t
->
osd2
.
hurd2
.
h_i_uid_high
 =

217 
	`ext2fs_swab16
 (
f
->
osd2
.
hurd2
.
h_i_uid_high
);

218 
t
->
osd2
.
hurd2
.
h_i_gid_high
 =

219 
	`ext2fs_swab16
 (
f
->
osd2
.
hurd2
.
h_i_gid_high
);

220 
t
->
osd2
.
hurd2
.
h_i_auth‹
 =

221 
	`ext2fs_swab32
 (
f
->
osd2
.
hurd2
.
h_i_auth‹
);

227 i‡(
bufsize
 < (Ë((
ext2_öode
Ë+ (
__u16
)))

230 i‡(
ho°‹dî
)

231 
exåa_isize
 = 
f
->
i_exåa_isize
;

232 
t
->
i_exåa_isize
 = 
	`ext2fs_swab16
(
f
->i_extra_isize);

233 i‡(!
ho°‹dî
)

234 
exåa_isize
 = 
t
->
i_exåa_isize
;

235 i‡(
exåa_isize
 > 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
) -

236 (
ext2_öode
)) {

241 
i
 = (
ext2_öode
Ë+ 
exåa_isize
 + (
__u32
);

242 i‡(
bufsize
 < (Ë
i
)

245 
óf
 = (
__u32
 *Ë(((*Ë
f
Ë+ (
ext2_öode
) +

246 
exåa_isize
);

248 
©å_magic
 = *
óf
;

249 i‡(!
ho°‹dî
)

250 
©å_magic
 = 
	`ext2fs_swab32
(attr_magic);

252 i‡(
©å_magic
 !
EXT2_EXT_ATTR_MAGIC
)

255 
ót
 = (
__u32
 *Ë(((*Ë
t
Ë+ (
ext2_öode
) +

256 
exåa_isize
);

257 *
ót
 = 
	`ext2fs_swab32
(*
óf
);

260 
	`ext2fs_sw≠_ext_©å
((*Ë(
ót
 + 1), (*Ë(
óf
 + 1),

261 
bufsize
 - (
ext2_öode
) -

262 
exåa_isize
 - (
__u32
), 0);

264 
	}
}

266 
	$ext2fs_sw≠_öode
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
t
,

267 
ext2_öode
 *
f
, 
ho°‹dî
)

269 
	`ext2fs_sw≠_öode_fuŒ
(
fs
, (
ext2_öode_œrge
 *Ë
t
,

270 (
ext2_öode_œrge
 *Ë
f
, 
ho°‹dî
,

271 (
ext2_öode
));

272 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/tdb.c

32 #ifde‡
CONFIG_STAND_ALONE


33 
	#HAVE_MMAP


	)

34 
	#HAVE_STRDUP


	)

35 
	#HAVE_SYS_MMAN_H


	)

36 
	#HAVE_UTIME_H


	)

37 
	#HAVE_UTIME


	)

39 
	#_XOPEN_SOURCE
 600

	)

41 
	~<uni°d.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<°d¨g.h
>

45 
	~<°ddef.h
>

46 
	~<î∫o.h
>

47 
	~<°rög.h
>

48 #ifde‡
HAVE_SYS_SELECT_H


49 
	~<sys/£À˘.h
>

51 
	~<sys/time.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<time.h
>

54 #ifde‡
HAVE_UTIME_H


55 
	~<utime.h
>

57 
	~<sys/°©.h
>

58 
	~<sys/fûe.h
>

59 
	~<f˙é.h
>

61 #ifde‡
HAVE_SYS_MMAN_H


62 
	~<sys/mm™.h
>

65 #i‚de‡
MAP_FILE


66 
	#MAP_FILE
 0

	)

69 #i‚de‡
MAP_FAILED


70 
	#MAP_FAILED
 ((*)-1)

	)

73 #i‚de‡
HAVE_STRDUP


74 
	#°rdup
 
ªp_°rdup


	)

75 *
	$ªp_°rdup
(c⁄° *
s
)

77 *
ªt
;

78 
Àngth
;

79 i‡(!
s
)

80  
NULL
;

82 i‡(!
Àngth
)

83 
Àngth
 = 
	`°æí
(
s
);

85 
ªt
 = 
	`mÆloc
(
Àngth
 + 1);

86 i‡(
ªt
) {

87 
	`°∫˝y
(
ªt
, 
s
, 
Àngth
);

88 
ªt
[
Àngth
] = '\0';

90  
ªt
;

91 
	}
}

94 #i‚de‡
PRINTF_ATTRIBUTE


95 #i‡(
__GNUC__
 >3Ë&& (
__GNUC_MINOR__
 >= 1 )

100 
	#PRINTF_ATTRIBUTE
(
a1
, 
a2
Ë
	`__©åibuã__
 ((
	`f‹m©
 (
__¥ötf__
,á1,á2)))

	)

102 
	#PRINTF_ATTRIBUTE
(
a1
, 
a2
)

	)

106 
	tboﬁ
;

108 
	~"tdb.h
"

110 #i‚de‡
u32


111 
	#u32
 

	)

114 #i‚de‡
HAVE_GETPAGESIZE


115 
	#gë∑gesize
(Ë0x2000

	)

118 
u32
 
	ttdb_Àn_t
;

119 
u32
 
	ttdb_off_t
;

121 #i‚de‡
off£tof


122 
	#off£tof
(
t
,
f
Ë(()&(— *)0)->f)

	)

125 
	#TDB_MAGIC_FOOD
 "TDB fûe\n"

	)

126 
	#TDB_VERSION
 (0x26011967 + 6)

	)

127 
	#TDB_MAGIC
 (0x26011999U)

	)

128 
	#TDB_FREE_MAGIC
 (~
TDB_MAGIC
)

	)

129 
	#TDB_DEAD_MAGIC
 (0xFEE1DEAD)

	)

130 
	#TDB_RECOVERY_MAGIC
 (0xf53bc0e7U)

	)

131 
	#TDB_ALIGNMENT
 4

	)

132 
	#MIN_REC_SIZE
 (2*(
li°_°ru˘
Ë+ 
TDB_ALIGNMENT
)

	)

133 
	#DEFAULT_HASH_SIZE
 131

	)

134 
	#FREELIST_TOP
 ((
tdb_hódî
))

	)

135 
	#TDB_ALIGN
(
x
,
a
Ë(((xË+ (a)-1Ë& ~(◊)-1))

	)

136 
	#TDB_BYTEREV
(
x
Ë(((((x)&0xff)<<24)|((x)&0xFF00)<<8)|(((x)>>8)&0xFF00)|((x)>>24))

	)

137 
	#TDB_DEAD
(
r
Ë(‘)->
magic
 =
TDB_DEAD_MAGIC
)

	)

138 
	#TDB_BAD_MAGIC
(
r
Ë(‘)->
magic
 !
TDB_MAGIC
 && !
	`TDB_DEAD
‘))

	)

139 
	#TDB_HASH_TOP
(
hash
Ë(
FREELIST_TOP
 + (
	`BUCKET
(hash)+1)*(
tdb_off_t
))

	)

140 
	#TDB_HASHTABLE_SIZE
(
tdb
Ë(—db->
hódî
.
hash_size
+1)*(
tdb_off_t
))

	)

141 
	#TDB_DATA_START
(
hash_size
Ë
	`TDB_HASH_TOP
(hash_size-1)

	)

142 
	#TDB_RECOVERY_HEAD
 
	`off£tof
(
tdb_hódî
, 
ªcovîy_°¨t
)

	)

143 
	#TDB_SEQNUM_OFS
 
	`off£tof
(
tdb_hódî
, 
£quí˚_numbî
)

	)

144 
	#TDB_PAD_BYTE
 0x42

	)

145 
	#TDB_PAD_U32
 0x42424242

	)

150 
	#TDB_LOG
(
x
Ë
tdb
->
log
.
log_‚
 
	)
x

153 
	#GLOBAL_LOCK
 0

	)

154 
	#ACTIVE_LOCK
 4

	)

155 
	#TRANSACTION_LOCK
 8

	)

158 #i‚de‡
SAFE_FREE


159 
	#SAFE_FREE
(
x
Ëdÿ{ i‡((xË!
NULL
Ë{
	`‰ì
(x); (x)=NULL;} } 0)

	)

162 
	#BUCKET
(
hash
Ë((hashË% 
tdb
->
hódî
.
hash_size
)

	)

164 
	#DOCONV
(Ë(
tdb
->
Êags
 & 
TDB_CONVERT
)

	)

165 
	#CONVERT
(
x
Ë(
	`DOCONV
(Ë? 
	`tdb_c⁄vît
(&x, (x)Ë: &x)

	)

170 
	sli°_°ru˘
 {

171 
tdb_off_t
 
	m√xt
;

172 
tdb_Àn_t
 
	mªc_Àn
;

173 
tdb_Àn_t
 
	mkey_Àn
;

174 
tdb_Àn_t
 
	md©a_Àn
;

175 
u32
 
	mfuŒ_hash
;

176 
u32
 
	mmagic
;

191 
	stdb_hódî
 {

192 
	mmagic_food
[32];

193 
u32
 
	mvîsi⁄
;

194 
u32
 
	mhash_size
;

195 
tdb_off_t
 
	mrwlocks
;

196 
tdb_off_t
 
	mªcovîy_°¨t
;

197 
tdb_off_t
 
	m£quí˚_numbî
;

198 
tdb_off_t
 
	mª£rved
[29];

201 
	stdb_lock_ty≥
 {

202 
	mli°
;

203 
u32
 
	mcou¡
;

204 
u32
 
	m…y≥
;

207 
	stdb_åavî£_lock
 {

208 
tdb_åavî£_lock
 *
	m√xt
;

209 
u32
 
	moff
;

210 
u32
 
	mhash
;

211 
	mlock_rw
;

215 
	stdb_mëhods
 {

216 (*
	mtdb_ªad
)(
	mtdb_c⁄ãxt
 *, 
	mtdb_off_t
 , *, 
	mtdb_Àn_t
 , );

217 (*
	mtdb_wrôe
)(
	mtdb_c⁄ãxt
 *, 
	mtdb_off_t
, c⁄° *, 
	mtdb_Àn_t
);

218 (*
	m√xt_hash_chaö
)(
	mtdb_c⁄ãxt
 *, 
	mu32
 *);

219 (*
	mtdb_oob
)(
	mtdb_c⁄ãxt
 *, 
	mtdb_off_t
 , );

220 (*
	mtdb_ex∑nd_fûe
)(
	mtdb_c⁄ãxt
 *, 
	mtdb_off_t
 ,Ådb_off_t );

221 (*
	mtdb_bæock
)(
	mtdb_c⁄ãxt
 *, 
	mtdb_off_t
 , , , , 
	msize_t
);

224 
	stdb_c⁄ãxt
 {

225 *
	m«me
;

226 *
	mm≠_±r
;

227 
	mfd
;

228 
tdb_Àn_t
 
	mm≠_size
;

229 
	mªad_⁄ly
;

230 
	måavî£_ªad
;

231 
tdb_lock_ty≥
 
	mglobÆ_lock
;

232 
	mnum_lockªcs
;

233 
tdb_lock_ty≥
 *
	mlockªcs
;

234 
TDB_ERROR
 
	mecode
;

235 
tdb_hódî
 
	mhódî
;

236 
u32
 
	mÊags
;

237 
tdb_åavî£_lock
 
	måavlocks
;

238 
tdb_c⁄ãxt
 *
	m√xt
;

239 
dev_t
 
	mdevi˚
;

240 
öo_t
 
	möode
;

241 
tdb_loggög_c⁄ãxt
 
	mlog
;

242 (*
	mhash_‚
)(
TDB_DATA
 *
	mkey
);

243 
	m›í_Êags
;

244 
	mnum_locks
;

245 c⁄° 
tdb_mëhods
 *
	mmëhods
;

246 
tdb_å™ß˘i⁄
 *
	må™ß˘i⁄
;

247 
	m∑ge_size
;

248 
	mmax_dód_ªc‹ds
;

249 
boﬁ
 
	mhave_å™ß˘i⁄_lock
;

256 
tdb_munm≠
(
tdb_c⁄ãxt
 *
tdb
);

257 
tdb_mm≠
(
tdb_c⁄ãxt
 *
tdb
);

258 
tdb_lock
(
tdb_c⁄ãxt
 *
tdb
, 
li°
, 
…y≥
);

259 
tdb_u∆ock
(
tdb_c⁄ãxt
 *
tdb
, 
li°
, 
…y≥
);

260 
tdb_bæock
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
, 
rw_ty≥
, 
lck_ty≥
, 
¥obe
, 
size_t
 
Àn
);

261 
tdb_å™ß˘i⁄_lock
(
tdb_c⁄ãxt
 *
tdb
, 
…y≥
);

262 
tdb_å™ß˘i⁄_u∆ock
(
tdb_c⁄ãxt
 *
tdb
);

263 
tdb_bæock_upgøde
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
, 
size_t
 
Àn
);

264 
tdb_wrôe_lock_ªc‹d
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
);

265 
tdb_wrôe_u∆ock_ªc‹d
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
);

266 
tdb_ofs_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
,Ådb_off_à*
d
);

267 
tdb_ofs_wrôe
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
,Ådb_off_à*
d
);

268 *
tdb_c⁄vît
(*
buf
, 
u32
 
size
);

269 
tdb_‰ì
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
, 
li°_°ru˘
 *
ªc
);

270 
tdb_off_t
 
tdb_Æloˇã
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_Àn_t
 
Àngth
, 
li°_°ru˘
 *
ªc
);

271 
tdb_ofs_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
,Ådb_off_à*
d
);

272 
tdb_ofs_wrôe
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
,Ådb_off_à*
d
);

273 
tdb_lock_ªc‹d
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
);

274 
tdb_u∆ock_ªc‹d
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
);

275 
tdb_ªc_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
, 
li°_°ru˘
 *
ªc
);

276 
tdb_ªc_wrôe
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
, 
li°_°ru˘
 *
ªc
);

277 
tdb_do_dñëe
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
ªc_±r
, 
li°_°ru˘
 *
ªc
);

278 *
tdb_Æloc_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
, 
tdb_Àn_t
 
Àn
);

279 
tdb_∑r£_d©a
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
,

280 
tdb_off_t
 
off£t
, 
tdb_Àn_t
 
Àn
,

281 (*
∑r£r
)(
TDB_DATA
 
key
, TDB_DATA 
d©a
,

282 *
¥iv©e_d©a
),

283 *
¥iv©e_d©a
);

284 
tdb_off_t
 
	`tdb_föd_lock_hash
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, 
u32
 
hash
, 
lockty≥
,

285 
li°_°ru˘
 *
ªc
);

286 
	`tdb_io_öô
(
tdb_c⁄ãxt
 *
tdb
);

287 
	`tdb_ex∑nd
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
size
);

288 
	`tdb_ªc_‰ì_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
,

289 
li°_°ru˘
 *
ªc
);

294 
TDB_ERROR
 
	$tdb_îr‹
(
tdb_c⁄ãxt
 *
tdb
)

296  
tdb
->
ecode
;

297 
	}
}

299 
	stdb_î∫ame
 {

300 
TDB_ERROR
 
	mecode
; c⁄° *
	me°rög
;

301 } 
	gem≠
[] = { {
TDB_SUCCESS
, "Success"},

302 {
TDB_ERR_CORRUPT
, "Corrupt database"},

303 {
TDB_ERR_IO
, "IO Error"},

304 {
TDB_ERR_LOCK
, "LockingÉrror"},

305 {
TDB_ERR_OOM
, "Out of memory"},

306 {
TDB_ERR_EXISTS
, "RecordÉxists"},

307 {
TDB_ERR_NOLOCK
, "LockÉxists on other keys"},

308 {
TDB_ERR_EINVAL
, "InvalidÖarameter"},

309 {
TDB_ERR_NOEXIST
, "Record doesÇotÉxist"},

310 {
TDB_ERR_RDONLY
, "writeÇotÖermitted"} };

313 c⁄° *
	$tdb_îr‹°r
(
tdb_c⁄ãxt
 *
tdb
)

315 
u32
 
i
;

316 
i
 = 0; i < (
em≠
Ë/ (
tdb_î∫ame
); i++)

317 i‡(
tdb
->
ecode
 =
em≠
[
i
].ecode)

318  
em≠
[
i
].
e°rög
;

320 
	}
}

324 
	#TDB_MARK_LOCK
 0x80000000

	)

334 
	$tdb_bæock
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
,

335 
rw_ty≥
, 
lck_ty≥
, 
¥obe
, 
size_t
 
Àn
)

337 
Êock
 
Ê
;

338 
ªt
;

340 i‡(
tdb
->
Êags
 & 
TDB_NOLOCK
) {

344 i‡((
rw_ty≥
 =
F_WRLCK
Ë&& (
tdb
->
ªad_⁄ly
 ||Ådb->
åavî£_ªad
)) {

345 
tdb
->
ecode
 = 
TDB_ERR_RDONLY
;

349 
Ê
.
l_ty≥
 = 
rw_ty≥
;

350 
Ê
.
l_whí˚
 = 
SEEK_SET
;

351 
Ê
.
l_°¨t
 = 
off£t
;

352 
Ê
.
l_Àn
 = 
Àn
;

353 
Ê
.
l_pid
 = 0;

356 
ªt
 = 
	`f˙é
(
tdb
->
fd
,
lck_ty≥
,&
Ê
);

357 } 
ªt
 =-1 && 
î∫o
 =
EINTR
);

359 i‡(
ªt
 == -1) {

363 i‡(!
¥obe
 && 
lck_ty≥
 !
F_SETLK
) {

365 
tdb
->
ecode
 = 
TDB_ERR_LOCK
;

366 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_TRACE
,"tdb_brlock failed (fd=%d)át offset %dÑw_type=%dÜck_type=%dÜen=%d\n",

367 
tdb
->
fd
, 
off£t
, 
rw_ty≥
, 
lck_ty≥
, ()
Àn
));

369  
	`TDB_ERRCODE
(
TDB_ERR_LOCK
, -1);

372 
	}
}

381 
	$tdb_bæock_upgøde
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
, 
size_t
 
Àn
)

383 
cou¡
 = 1000;

384 
cou¡
--) {

385 
timevÆ
 
tv
;

386 i‡(
	`tdb_bæock
(
tdb
, 
off£t
, 
F_WRLCK
, 
F_SETLKW
, 1, 
Àn
) == 0) {

389 i‡(
î∫o
 !
EDEADLK
) {

393 
tv
.
tv_£c
 = 0;

394 
tv
.
tv_u£c
 = 1;

395 
	`£À˘
(0, 
NULL
, NULL, NULL, &
tv
);

397 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_TRACE
,"tdb_bæock_upgødêÁûedáàoff£à%d\n", 
off£t
));

399 
	}
}

403 
	$_tdb_lock
(
tdb_c⁄ãxt
 *
tdb
, 
li°
, 
…y≥
, 
›
)

405 
tdb_lock_ty≥
 *
√w_lck
;

406 
i
;

407 
boﬁ
 
m¨k_lock
 = ((
…y≥
 & 
TDB_MARK_LOCK
) == TDB_MARK_LOCK);

409 
…y≥
 &~
TDB_MARK_LOCK
;

412 i‡(
tdb
->
globÆ_lock
.
cou¡
 &&

413 (
…y≥
 =
tdb
->
globÆ_lock
.…y≥ ||Üty≥ =
F_RDLCK
)) {

417 i‡(
tdb
->
globÆ_lock
.
cou¡
) {

418  
	`TDB_ERRCODE
(
TDB_ERR_LOCK
, -1);

421 i‡(
li°
 < -1 ||Üi° >()
tdb
->
hódî
.
hash_size
) {

422 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
,"tdb_lock: invalidÜist %d forÜtype=%d\n",

423 
li°
, 
…y≥
));

426 i‡(
tdb
->
Êags
 & 
TDB_NOLOCK
)

429 
i
=0; i<
tdb
->
num_lockªcs
; i++) {

430 i‡(
tdb
->
lockªcs
[
i
].
li°
 ==Üist) {

431 i‡(
tdb
->
lockªcs
[
i
].
cou¡
 == 0) {

436 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_lock: "

437 "lck->cou¡ =0 f‹Üi° %d", 
li°
));

443 
tdb
->
lockªcs
[
i
].
cou¡
++;

448 
√w_lck
 = (
tdb_lock_ty≥
 *)
	`ªÆloc
(

449 
tdb
->
lockªcs
,

450 (*
tdb
->
lockªcs
Ë* (tdb->
num_lockªcs
+1));

451 i‡(
√w_lck
 =
NULL
) {

452 
î∫o
 = 
ENOMEM
;

455 
tdb
->
lockªcs
 = 
√w_lck
;

459 i‡(!
m¨k_lock
 &&

460 
tdb
->
mëhods
->
	`tdb_bæock
—db,
FREELIST_TOP
+4*
li°
, 
…y≥
, 
›
,

465 
tdb
->
num_locks
++;

467 
tdb
->
lockªcs
[tdb->
num_lockªcs
].
li°
 =Üist;

468 
tdb
->
lockªcs
[tdb->
num_lockªcs
].
cou¡
 = 1;

469 
tdb
->
lockªcs
[tdb->
num_lockªcs
].
…y≥
 =Ütype;

470 
tdb
->
num_lockªcs
 += 1;

473 
	}
}

476 
	$tdb_lock
(
tdb_c⁄ãxt
 *
tdb
, 
li°
, 
…y≥
)

478 
ªt
;

479 
ªt
 = 
	`_tdb_lock
(
tdb
, 
li°
, 
…y≥
, 
F_SETLKW
);

480 i‡(
ªt
) {

481 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_lock failed onÜist %d "

482 "…y≥=%d (%s)\n", 
li°
, 
…y≥
, 
	`°ªº‹
(
î∫o
)));

484  
ªt
;

485 
	}
}

488 
	$tdb_lock_n⁄block
(
tdb_c⁄ãxt
 *
tdb
, 
li°
, 
…y≥
)

490  
	`_tdb_lock
(
tdb
, 
li°
, 
…y≥
, 
F_SETLK
);

491 
	}
}

497 
	$tdb_u∆ock
(
tdb_c⁄ãxt
 *
tdb
, 
li°
, 
…y≥
)

499 
ªt
 = -1;

500 
i
;

501 
tdb_lock_ty≥
 *
lck
 = 
NULL
;

502 
boﬁ
 
m¨k_lock
 = ((
…y≥
 & 
TDB_MARK_LOCK
) == TDB_MARK_LOCK);

504 
…y≥
 &~
TDB_MARK_LOCK
;

507 i‡(
tdb
->
globÆ_lock
.
cou¡
 &&

508 (
…y≥
 =
tdb
->
globÆ_lock
.…y≥ ||Üty≥ =
F_RDLCK
)) {

512 i‡(
tdb
->
globÆ_lock
.
cou¡
) {

513  
	`TDB_ERRCODE
(
TDB_ERR_LOCK
, -1);

516 i‡(
tdb
->
Êags
 & 
TDB_NOLOCK
)

520 i‡(
li°
 < -1 ||Üi° >()
tdb
->
hódî
.
hash_size
) {

521 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_u∆ock:Üi° %d invÆid (%d)\n", 
li°
,Ådb->
hódî
.
hash_size
));

522  
ªt
;

525 
i
=0; i<
tdb
->
num_lockªcs
; i++) {

526 i‡(
tdb
->
lockªcs
[
i
].
li°
 ==Üist) {

527 
lck
 = &
tdb
->
lockªcs
[
i
];

532 i‡((
lck
 =
NULL
Ë|| (lck->
cou¡
 == 0)) {

533 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_unlock: count is 0\n"));

537 i‡(
lck
->
cou¡
 > 1) {

538 
lck
->
cou¡
--;

549 i‡(
m¨k_lock
) {

550 
ªt
 = 0;

552 
ªt
 = 
tdb
->
mëhods
->
	`tdb_bæock
—db, 
FREELIST_TOP
+4*
li°
, 
F_UNLCK
,

553 
F_SETLKW
, 0, 1);

555 
tdb
->
num_locks
--;

562 i‡(
tdb
->
num_lockªcs
 > 1) {

563 *
lck
 = 
tdb
->
lockªcs
[tdb->
num_lockªcs
-1];

565 
tdb
->
num_lockªcs
 -= 1;

572 i‡(
tdb
->
num_lockªcs
 == 0) {

573 
	`SAFE_FREE
(
tdb
->
lockªcs
);

576 i‡(
ªt
)

577 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_unlock: AnÉrror occurred unlocking!\n"));

578  
ªt
;

579 
	}
}

584 
	$tdb_å™ß˘i⁄_lock
(
tdb_c⁄ãxt
 *
tdb
, 
…y≥
)

586 i‡(
tdb
->
have_å™ß˘i⁄_lock
 ||Ådb->
globÆ_lock
.
cou¡
) {

589 i‡(
tdb
->
mëhods
->
	`tdb_bæock
—db, 
TRANSACTION_LOCK
, 
…y≥
,

590 
F_SETLKW
, 0, 1) == -1) {

591 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_transaction_lock: failedÅo getÅransactionÜock\n"));

592 
tdb
->
ecode
 = 
TDB_ERR_LOCK
;

595 
tdb
->
have_å™ß˘i⁄_lock
 = 1;

597 
	}
}

602 
	$tdb_å™ß˘i⁄_u∆ock
(
tdb_c⁄ãxt
 *
tdb
)

604 
ªt
;

605 i‡(!
tdb
->
have_å™ß˘i⁄_lock
) {

608 
ªt
 = 
tdb
->
mëhods
->
	`tdb_bæock
—db, 
TRANSACTION_LOCK
, 
F_UNLCK
, 
F_SETLKW
, 0, 1);

609 i‡(
ªt
 == 0) {

610 
tdb
->
have_å™ß˘i⁄_lock
 = 0;

612  
ªt
;

613 
	}
}

619 
	$_tdb_lockÆl
(
tdb_c⁄ãxt
 *
tdb
, 
…y≥
, 
›
)

621 
boﬁ
 
m¨k_lock
 = ((
…y≥
 & 
TDB_MARK_LOCK
) == TDB_MARK_LOCK);

623 
…y≥
 &~
TDB_MARK_LOCK
;

626 i‡(
tdb
->
ªad_⁄ly
 ||Ådb->
åavî£_ªad
)

627  
	`TDB_ERRCODE
(
TDB_ERR_LOCK
, -1);

629 i‡(
tdb
->
globÆ_lock
.
cou¡
 &&Ådb->globÆ_lock.
…y≥
 ==Ütype) {

630 
tdb
->
globÆ_lock
.
cou¡
++;

634 i‡(
tdb
->
globÆ_lock
.
cou¡
) {

636  
	`TDB_ERRCODE
(
TDB_ERR_LOCK
, -1);

639 i‡(
tdb
->
num_locks
 != 0) {

641  
	`TDB_ERRCODE
(
TDB_ERR_LOCK
, -1);

644 i‡(!
m¨k_lock
 &&

645 
tdb
->
mëhods
->
	`tdb_bæock
—db, 
FREELIST_TOP
, 
…y≥
, 
›
,

646 0, 4*
tdb
->
hódî
.
hash_size
)) {

647 i‡(
›
 =
F_SETLKW
) {

648 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_lockÆ»Áûed (%s)\n", 
	`°ªº‹
(
î∫o
)));

653 
tdb
->
globÆ_lock
.
cou¡
 = 1;

654 
tdb
->
globÆ_lock
.
…y≥
 =Ütype;

657 
	}
}

662 
	$_tdb_u∆ockÆl
(
tdb_c⁄ãxt
 *
tdb
, 
…y≥
)

664 
boﬁ
 
m¨k_lock
 = ((
…y≥
 & 
TDB_MARK_LOCK
) == TDB_MARK_LOCK);

666 
…y≥
 &~
TDB_MARK_LOCK
;

669 i‡(
tdb
->
ªad_⁄ly
 ||Ådb->
åavî£_ªad
) {

670  
	`TDB_ERRCODE
(
TDB_ERR_LOCK
, -1);

673 i‡(
tdb
->
globÆ_lock
.
…y≥
 !…y≥ ||Ådb->globÆ_lock.
cou¡
 == 0) {

674  
	`TDB_ERRCODE
(
TDB_ERR_LOCK
, -1);

677 i‡(
tdb
->
globÆ_lock
.
cou¡
 > 1) {

678 
tdb
->
globÆ_lock
.
cou¡
--;

682 i‡(!
m¨k_lock
 &&

683 
tdb
->
mëhods
->
	`tdb_bæock
—db, 
FREELIST_TOP
, 
F_UNLCK
, 
F_SETLKW
,

684 0, 4*
tdb
->
hódî
.
hash_size
)) {

685 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_u∆ockÆ»Áûed (%s)\n", 
	`°ªº‹
(
î∫o
)));

689 
tdb
->
globÆ_lock
.
cou¡
 = 0;

690 
tdb
->
globÆ_lock
.
…y≥
 = 0;

693 
	}
}

696 
	$tdb_lockÆl
(
tdb_c⁄ãxt
 *
tdb
)

698  
	`_tdb_lockÆl
(
tdb
, 
F_WRLCK
, 
F_SETLKW
);

699 
	}
}

702 
	$tdb_lockÆl_m¨k
(
tdb_c⁄ãxt
 *
tdb
)

704  
	`_tdb_lockÆl
(
tdb
, 
F_WRLCK
 | 
TDB_MARK_LOCK
, 
F_SETLKW
);

705 
	}
}

708 
	$tdb_lockÆl_unm¨k
(
tdb_c⁄ãxt
 *
tdb
)

710  
	`_tdb_u∆ockÆl
(
tdb
, 
F_WRLCK
 | 
TDB_MARK_LOCK
);

711 
	}
}

714 
	$tdb_lockÆl_n⁄block
(
tdb_c⁄ãxt
 *
tdb
)

716  
	`_tdb_lockÆl
(
tdb
, 
F_WRLCK
, 
F_SETLK
);

717 
	}
}

720 
	$tdb_u∆ockÆl
(
tdb_c⁄ãxt
 *
tdb
)

722  
	`_tdb_u∆ockÆl
(
tdb
, 
F_WRLCK
);

723 
	}
}

726 
	$tdb_lockÆl_ªad
(
tdb_c⁄ãxt
 *
tdb
)

728  
	`_tdb_lockÆl
(
tdb
, 
F_RDLCK
, 
F_SETLKW
);

729 
	}
}

732 
	$tdb_lockÆl_ªad_n⁄block
(
tdb_c⁄ãxt
 *
tdb
)

734  
	`_tdb_lockÆl
(
tdb
, 
F_RDLCK
, 
F_SETLK
);

735 
	}
}

738 
	$tdb_u∆ockÆl_ªad
(
tdb_c⁄ãxt
 *
tdb
)

740  
	`_tdb_u∆ockÆl
(
tdb
, 
F_RDLCK
);

741 
	}
}

745 
	$tdb_chaölock
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
)

747  
	`tdb_lock
(
tdb
, 
	`BUCKET
—db->
	`hash_‚
(&
key
)), 
F_WRLCK
);

748 
	}
}

753 
	$tdb_chaölock_n⁄block
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
)

755  
	`tdb_lock_n⁄block
(
tdb
, 
	`BUCKET
—db->
	`hash_‚
(&
key
)), 
F_WRLCK
);

756 
	}
}

759 
	$tdb_chaölock_m¨k
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
)

761  
	`tdb_lock
(
tdb
, 
	`BUCKET
—db->
	`hash_‚
(&
key
)), 
F_WRLCK
 | 
TDB_MARK_LOCK
);

762 
	}
}

765 
	$tdb_chaölock_unm¨k
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
)

767  
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
—db->
	`hash_‚
(&
key
)), 
F_WRLCK
 | 
TDB_MARK_LOCK
);

768 
	}
}

770 
	$tdb_chaöu∆ock
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
)

772  
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
—db->
	`hash_‚
(&
key
)), 
F_WRLCK
);

773 
	}
}

775 
	$tdb_chaölock_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
)

777  
	`tdb_lock
(
tdb
, 
	`BUCKET
—db->
	`hash_‚
(&
key
)), 
F_RDLCK
);

778 
	}
}

780 
	$tdb_chaöu∆ock_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
)

782  
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
—db->
	`hash_‚
(&
key
)), 
F_RDLCK
);

783 
	}
}

788 
	$tdb_lock_ªc‹d
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
)

790  
off
 ? 
tdb
->
mëhods
->
	`tdb_bæock
—db, off, 
F_RDLCK
, 
F_SETLKW
, 0, 1) : 0;

791 
	}
}

798 
	$tdb_wrôe_lock_ªc‹d
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
)

800 
tdb_åavî£_lock
 *
i
;

801 
i
 = &
tdb
->
åavlocks
; i; i = i->
√xt
)

802 i‡(
i
->
off
 == off)

804  
tdb
->
mëhods
->
	`tdb_bæock
—db, 
off
, 
F_WRLCK
, 
F_SETLK
, 1, 1);

805 
	}
}

811 
	$tdb_wrôe_u∆ock_ªc‹d
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
)

813  
tdb
->
mëhods
->
	`tdb_bæock
—db, 
off
, 
F_UNLCK
, 
F_SETLK
, 0, 1);

814 
	}
}

817 
	$tdb_u∆ock_ªc‹d
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
)

819 
tdb_åavî£_lock
 *
i
;

820 
u32
 
cou¡
 = 0;

822 i‡(
off
 == 0)

824 
i
 = &
tdb
->
åavlocks
; i; i = i->
√xt
)

825 i‡(
i
->
off
 == off)

826 
cou¡
++;

827  (
cou¡
 =1 ? 
tdb
->
mëhods
->
	`tdb_bæock
—db, 
off
, 
F_UNLCK
, 
F_SETLKW
, 0, 1) : 0);

828 
	}
}

837 
	$tdb_oob
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
Àn
, 
¥obe
)

839 
°©
 
°
;

840 i‡(
Àn
 <
tdb
->
m≠_size
)

842 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
) {

843 i‡(!
¥obe
) {

845 
tdb
->
ecode
 = 
TDB_ERR_IO
;

846 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
,"tdb_oobÜen %d beyond internal malloc size %d\n",

847 ()
Àn
, ()
tdb
->
m≠_size
));

849  
	`TDB_ERRCODE
(
TDB_ERR_IO
, -1);

852 i‡(
	`f°©
(
tdb
->
fd
, &
°
) == -1) {

853  
	`TDB_ERRCODE
(
TDB_ERR_IO
, -1);

856 i‡(
°
.
°_size
 < (
size_t
)
Àn
) {

857 i‡(!
¥obe
) {

859 
tdb
->
ecode
 = 
TDB_ERR_IO
;

860 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
,"tdb_oobÜen %d beyondÉofát %d\n",

861 ()
Àn
, ()
°
.
°_size
));

863  
	`TDB_ERRCODE
(
TDB_ERR_IO
, -1);

867 i‡(
	`tdb_munm≠
(
tdb
) == -1)

868  
	`TDB_ERRCODE
(
TDB_ERR_IO
, -1);

869 
tdb
->
m≠_size
 = 
°
.
°_size
;

870 
	`tdb_mm≠
(
tdb
);

872 
	}
}

875 
	$tdb_wrôe
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
,

876 c⁄° *
buf
, 
tdb_Àn_t
 
Àn
)

878 i‡(
Àn
 == 0) {

882 i‡(
tdb
->
ªad_⁄ly
 ||Ådb->
åavî£_ªad
) {

883 
tdb
->
ecode
 = 
TDB_ERR_RDONLY
;

887 i‡(
tdb
->
mëhods
->
	`tdb_oob
—db, 
off
 + 
Àn
, 0) != 0)

890 i‡(
tdb
->
m≠_±r
) {

891 
	`mem˝y
(
off
 + (*)
tdb
->
m≠_±r
, 
buf
, 
Àn
);

892 } i‡(
	`pwrôe
(
tdb
->
fd
, 
buf
, 
Àn
, 
off
Ë!(
ssize_t
)len) {

894 
tdb
->
ecode
 = 
TDB_ERR_IO
;

895 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
,"tdb_write failedát %dÜen=%d (%s)\n",

896 
off
, 
Àn
, 
	`°ªº‹
(
î∫o
)));

897  
	`TDB_ERRCODE
(
TDB_ERR_IO
, -1);

900 
	}
}

903 *
	$tdb_c⁄vît
(*
buf
, 
u32
 
size
)

905 
u32
 
i
, *
p
 = (u32 *)
buf
;

906 
i
 = 0; i < 
size
 / 4; i++)

907 
p
[
i
] = 
	`TDB_BYTEREV
(p[i]);

908  
buf
;

909 
	}
}

913 
	$tdb_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
, *
buf
,

914 
tdb_Àn_t
 
Àn
, 
cv
)

916 i‡(
tdb
->
mëhods
->
	`tdb_oob
—db, 
off
 + 
Àn
, 0) != 0) {

920 i‡(
tdb
->
m≠_±r
) {

921 
	`mem˝y
(
buf
, 
off
 + (*)
tdb
->
m≠_±r
, 
Àn
);

923 
ssize_t
 
ªt
 = 
	`¥ód
(
tdb
->
fd
, 
buf
, 
Àn
, 
off
);

924 i‡(
ªt
 !(
ssize_t
)
Àn
) {

926 
tdb
->
ecode
 = 
TDB_ERR_IO
;

927 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
,"tdb_read failedát %d "

929 ()
off
, ()
Àn
, ()
ªt
, 
	`°ªº‹
(
î∫o
),

930 ()
tdb
->
m≠_size
));

931  
	`TDB_ERRCODE
(
TDB_ERR_IO
, -1);

934 i‡(
cv
) {

935 
	`tdb_c⁄vît
(
buf
, 
Àn
);

938 
	}
}

946 
	$tdb_√xt_hash_chaö
(
tdb_c⁄ãxt
 *
tdb
, 
u32
 *
chaö
)

948 
u32
 
h
 = *
chaö
;

949 i‡(
tdb
->
m≠_±r
) {

950 ;
h
 < 
tdb
->
hódî
.
hash_size
;h++) {

951 i‡(0 !*(
u32
 *)(
	`TDB_HASH_TOP
(
h
Ë+ (*)
tdb
->
m≠_±r
)) {

956 
u32
 
off
=0;

957 ;
h
 < 
tdb
->
hódî
.
hash_size
;h++) {

958 i‡(
	`tdb_ofs_ªad
(
tdb
, 
	`TDB_HASH_TOP
(
h
), &
off
) != 0 || off != 0) {

963 (*
chaö
Ë
h
;

964 
	}
}

967 
	$tdb_munm≠
(
tdb_c⁄ãxt
 *
tdb
)

969 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
)

972 #ifde‡
HAVE_MMAP


973 i‡(
tdb
->
m≠_±r
) {

974 
ªt
 = 
	`munm≠
(
tdb
->
m≠_±r
,Ådb->
m≠_size
);

975 i‡(
ªt
 != 0)

976  
ªt
;

979 
tdb
->
m≠_±r
 = 
NULL
;

981 
	}
}

983 
	$tdb_mm≠
(
tdb_c⁄ãxt
 *
tdb
)

985 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
)

988 #ifde‡
HAVE_MMAP


989 i‡(!(
tdb
->
Êags
 & 
TDB_NOMMAP
)) {

990 
tdb
->
m≠_±r
 = 
	`mm≠
(
NULL
,Ådb->
m≠_size
,

991 
PROT_READ
|(
tdb
->
ªad_⁄ly
? 0:
PROT_WRITE
),

992 
MAP_SHARED
|
MAP_FILE
, 
tdb
->
fd
, 0);

998 i‡(
tdb
->
m≠_±r
 =
MAP_FAILED
) {

999 
tdb
->
m≠_±r
 = 
NULL
;

1000 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_WARNING
, "tdb_mmap failed for size %d (%s)\n",

1001 
tdb
->
m≠_size
, 
	`°ªº‹
(
î∫o
)));

1004 
tdb
->
m≠_±r
 = 
NULL
;

1007 
tdb
->
m≠_±r
 = 
NULL
;

1009 
	}
}

1013 
	$tdb_ex∑nd_fûe
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
size
,Ådb_off_à
addôi⁄
)

1015 
buf
[1024];

1017 i‡(
tdb
->
ªad_⁄ly
 ||Ådb->
åavî£_ªad
) {

1018 
tdb
->
ecode
 = 
TDB_ERR_RDONLY
;

1022 i‡(
	`·runˇã
(
tdb
->
fd
, 
size
+
addôi⁄
) == -1) {

1023 
b
 = 0;

1024 i‡(
	`pwrôe
(
tdb
->
fd
, &
b
, 1, (
size
+
addôi⁄
) - 1) != 1) {

1025 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "expand_fileÅo %d failed (%s)\n",

1026 
size
+
addôi⁄
, 
	`°ªº‹
(
î∫o
)));

1034 
	`mem£t
(
buf
, 
TDB_PAD_BYTE
, (buf));

1035 
addôi⁄
) {

1036 
n
 = 
addôi⁄
>(
buf
)?(buf):addition;

1037 
ªt
 = 
	`pwrôe
(
tdb
->
fd
, 
buf
, 
n
, 
size
);

1038 i‡(
ªt
 !
n
) {

1039 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "expand_file write of %d failed (%s)\n",

1040 
n
, 
	`°ªº‹
(
î∫o
)));

1043 
addôi⁄
 -
n
;

1044 
size
 +
n
;

1047 
	}
}

1052 
	$tdb_ex∑nd
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
size
)

1054 
li°_°ru˘
 
ªc
;

1055 
tdb_off_t
 
off£t
;

1057 i‡(
	`tdb_lock
(
tdb
, -1, 
F_WRLCK
) == -1) {

1058 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "lock failed inÅdb_expand\n"));

1063 
tdb
->
mëhods
->
	`tdb_oob
—db,Ådb->
m≠_size
 + 1, 1);

1067 
size
 = 
	`TDB_ALIGN
(
tdb
->
m≠_size
 + size*10,Ådb->
∑ge_size
) -Ådb->map_size;

1069 i‡(!(
tdb
->
Êags
 & 
TDB_INTERNAL
))

1070 
	`tdb_munm≠
(
tdb
);

1079 i‡(!(
tdb
->
Êags
 & 
TDB_INTERNAL
)) {

1080 i‡(
tdb
->
mëhods
->
	`tdb_ex∑nd_fûe
—db,Ådb->
m≠_size
, 
size
) != 0)

1081 
Áû
;

1084 
tdb
->
m≠_size
 +
size
;

1086 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
) {

1087 *
√w_m≠_±r
 = (*)
	`ªÆloc
(
tdb
->
m≠_±r
,

1088 
tdb
->
m≠_size
);

1089 i‡(!
√w_m≠_±r
) {

1090 
tdb
->
m≠_size
 -
size
;

1091 
Áû
;

1093 
tdb
->
m≠_±r
 = 
√w_m≠_±r
;

1102 
	`tdb_mm≠
(
tdb
);

1106 
	`mem£t
(&
ªc
,'\0',(rec));

1107 
ªc
.
ªc_Àn
 = 
size
 - (rec);

1110 
off£t
 = 
tdb
->
m≠_size
 - 
size
;

1111 i‡(
	`tdb_‰ì
(
tdb
, 
off£t
, &
ªc
) == -1)

1112 
Áû
;

1114 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

1116 
Áû
:

1117 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

1119 
	}
}

1122 
	$tdb_ofs_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
,Ådb_off_à*
d
)

1124  
tdb
->
mëhods
->
	`tdb_ªad
—db, 
off£t
, (*)
d
, (*d), 
	`DOCONV
());

1125 
	}
}

1127 
	$tdb_ofs_wrôe
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
,Ådb_off_à*
d
)

1129 
tdb_off_t
 
off
 = *
d
;

1130  
tdb
->
mëhods
->
	`tdb_wrôe
—db, 
off£t
, 
	`CONVERT
(
off
), (*
d
));

1131 
	}
}

1135 *
	$tdb_Æloc_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
, 
tdb_Àn_t
 
Àn
)

1137 *
buf
;

1140 i‡(
Àn
 == 0) {

1141 
Àn
 = 1;

1144 i‡(!(
buf
 = (*)
	`mÆloc
(
Àn
))) {

1146 
tdb
->
ecode
 = 
TDB_ERR_OOM
;

1147 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
,"tdb_alloc_read malloc failedÜen=%d (%s)\n",

1148 
Àn
, 
	`°ªº‹
(
î∫o
)));

1149  
	`TDB_ERRCODE
(
TDB_ERR_OOM
, 
buf
);

1151 i‡(
tdb
->
mëhods
->
	`tdb_ªad
—db, 
off£t
, 
buf
, 
Àn
, 0) == -1) {

1152 
	`SAFE_FREE
(
buf
);

1153  
NULL
;

1155  
buf
;

1156 
	}
}

1160 
tdb_∑r£_d©a
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
,

1161 
tdb_off_t
 
off£t
, 
tdb_Àn_t
 
Àn
,

1162 (*
∑r£r
)(
TDB_DATA
 
key
, TDB_DATA 
d©a
,

1163 *
¥iv©e_d©a
),

1164 *
¥iv©e_d©a
)

1166 
TDB_DATA
 
d©a
;

1167 
ªsu…
;

1169 
d©a
.
dsize
 = 
Àn
;

1171 i‡((
tdb
->
å™ß˘i⁄
 =
NULL
Ë&& (tdb->
m≠_±r
 != NULL)) {

1176 i‡(
tdb
->
mëhods
->
	`tdb_oob
—db, 
off£t
+
Àn
, 0) != 0) {

1179 
d©a
.
d±r
 = 
off£t
 + (*)
tdb
->
m≠_±r
;

1180  
	`∑r£r
(
key
, 
d©a
, 
¥iv©e_d©a
);

1183 i‡(!(
d©a
.
d±r
 = 
	`tdb_Æloc_ªad
(
tdb
, 
off£t
, 
Àn
))) {

1187 
ªsu…
 = 
	`∑r£r
(
key
, 
d©a
, 
¥iv©e_d©a
);

1188 
	`‰ì
(
d©a
.
d±r
);

1189  
ªsu…
;

1190 
	}
}

1193 
	$tdb_ªc_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
, 
li°_°ru˘
 *
ªc
)

1195 i‡(
tdb
->
mëhods
->
	`tdb_ªad
—db, 
off£t
, 
ªc
, (*ªc),
	`DOCONV
()) == -1)

1197 i‡(
	`TDB_BAD_MAGIC
(
ªc
)) {

1199 
tdb
->
ecode
 = 
TDB_ERR_CORRUPT
;

1200 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
,"tdb_ªc_ªad bad magi¯0x%xáàoff£t=%d\n", 
ªc
->
magic
, 
off£t
));

1201  
	`TDB_ERRCODE
(
TDB_ERR_CORRUPT
, -1);

1203  
tdb
->
mëhods
->
	`tdb_oob
—db, 
ªc
->
√xt
+(*rec), 0);

1204 
	}
}

1206 
	$tdb_ªc_wrôe
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
, 
li°_°ru˘
 *
ªc
)

1208 
li°_°ru˘
 
r
 = *
ªc
;

1209  
tdb
->
mëhods
->
	`tdb_wrôe
—db, 
off£t
, 
	`CONVERT
(
r
), (r));

1210 
	}
}

1212 c⁄° 
tdb_mëhods
 
	gio_mëhods
 = {

1213 
tdb_ªad
,

1214 
tdb_wrôe
,

1215 
tdb_√xt_hash_chaö
,

1216 
tdb_oob
,

1217 
tdb_ex∑nd_fûe
,

1218 
tdb_bæock


1224 
	$tdb_io_öô
(
tdb_c⁄ãxt
 *
tdb
)

1226 
tdb
->
mëhods
 = &
io_mëhods
;

1227 
	}
}

1293 
	stdb_å™ß˘i⁄_ñ
 {

1294 
tdb_å™ß˘i⁄_ñ
 *
	m√xt
, *
	m¥ev
;

1295 
tdb_off_t
 
	moff£t
;

1296 
tdb_Àn_t
 
	mÀngth
;

1297 *
	md©a
;

1303 
	stdb_å™ß˘i⁄
 {

1306 
u32
 *
	mhash_hóds
;

1309 c⁄° 
tdb_mëhods
 *
	mio_mëhods
;

1316 
tdb_å™ß˘i⁄_ñ
 *
	mñemíts
, *
	mñemíts_œ°
;

1321 
	må™ß˘i⁄_îr‹
;

1326 
	m√°ög
;

1329 
tdb_Àn_t
 
	mﬁd_m≠_size
;

1337 
	$å™ß˘i⁄_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
, *
buf
,

1338 
tdb_Àn_t
 
Àn
, 
cv
)

1340 
tdb_å™ß˘i⁄_ñ
 *
ñ
;

1343 
ñ
=
tdb
->
å™ß˘i⁄
->
ñemíts_œ°
;ñ;ñÛl->
¥ev
) {

1344 
tdb_Àn_t
 
∑πül
;

1346 i‡(
off
+
Àn
 <
ñ
->
off£t
) {

1349 i‡(
off
 >
ñ
->
off£t
 +Él->
Àngth
) {

1355 i‡(
off
 < 
ñ
->
off£t
) {

1356 
∑πül
 = 
ñ
->
off£t
 - 
off
;

1357 i‡(
	`å™ß˘i⁄_ªad
(
tdb
, 
off
, 
buf
, 
∑πül
, 
cv
) != 0) {

1358 
Áû
;

1360 
Àn
 -
∑πül
;

1361 
off
 +
∑πül
;

1362 
buf
 = (*)(
∑πül
 + (*)buf);

1364 i‡(
off
 + 
Àn
 <
ñ
->
off£t
 +Él->
Àngth
) {

1365 
∑πül
 = 
Àn
;

1367 
∑πül
 = 
ñ
->
off£t
 +Él->
Àngth
 - 
off
;

1369 
	`mem˝y
(
buf
, 
ñ
->
d©a
 + (
off
 -Él->
off£t
), 
∑πül
);

1370 i‡(
cv
) {

1371 
	`tdb_c⁄vît
(
buf
, 
Àn
);

1373 
Àn
 -
∑πül
;

1374 
off
 +
∑πül
;

1375 
buf
 = (*)(
∑πül
 + (*)buf);

1377 i‡(
Àn
 !0 && 
	`å™ß˘i⁄_ªad
(
tdb
, 
off
, 
buf
,Üí, 
cv
) != 0) {

1378 
Áû
;

1385  
tdb
->
å™ß˘i⁄
->
io_mëhods
->
	`tdb_ªad
—db, 
off
, 
buf
, 
Àn
, 
cv
);

1387 
Áû
:

1388 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "å™ß˘i⁄_ªad: faûedáàoff=%dÜí=%d\n", 
off
, 
Àn
));

1389 
tdb
->
ecode
 = 
TDB_ERR_IO
;

1390 
tdb
->
å™ß˘i⁄
->
å™ß˘i⁄_îr‹
 = 1;

1392 
	}
}

1398 
	$å™ß˘i⁄_wrôe
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
,

1399 c⁄° *
buf
, 
tdb_Àn_t
 
Àn
)

1401 
tdb_å™ß˘i⁄_ñ
 *
ñ
, *
be°_ñ
=
NULL
;

1403 i‡(
Àn
 == 0) {

1409 i‡(
Àn
 =(
tdb_off_t
Ë&& 
off
 >
FREELIST_TOP
 &&

1410 
off
 < 
FREELIST_TOP
+
	`TDB_HASHTABLE_SIZE
(
tdb
)) {

1411 
u32
 
chaö
 = (
off
-
FREELIST_TOP
Ë/ (
tdb_off_t
);

1412 
	`mem˝y
(&
tdb
->
å™ß˘i⁄
->
hash_hóds
[
chaö
], 
buf
, 
Àn
);

1416 
ñ
=
tdb
->
å™ß˘i⁄
->
ñemíts_œ°
;ñ;ñÛl->
¥ev
) {

1417 
tdb_Àn_t
 
∑πül
;

1419 i‡(
be°_ñ
 =
NULL
 && 
off
 =
ñ
->
off£t
+ñ->
Àngth
) {

1420 
be°_ñ
 = 
ñ
;

1423 i‡(
off
+
Àn
 <
ñ
->
off£t
) {

1426 i‡(
off
 >
ñ
->
off£t
 +Él->
Àngth
) {

1432 i‡(
off
 < 
ñ
->
off£t
) {

1433 
∑πül
 = 
ñ
->
off£t
 - 
off
;

1434 i‡(
	`å™ß˘i⁄_wrôe
(
tdb
, 
off
, 
buf
, 
∑πül
) != 0) {

1435 
Áû
;

1437 
Àn
 -
∑πül
;

1438 
off
 +
∑πül
;

1439 
buf
 = (c⁄° *)(
∑πül
 + (const *)buf);

1441 i‡(
off
 + 
Àn
 <
ñ
->
off£t
 +Él->
Àngth
) {

1442 
∑πül
 = 
Àn
;

1444 
∑πül
 = 
ñ
->
off£t
 +Él->
Àngth
 - 
off
;

1446 
	`mem˝y
(
ñ
->
d©a
 + (
off
 -Él->
off£t
), 
buf
, 
∑πül
);

1447 
Àn
 -
∑πül
;

1448 
off
 +
∑πül
;

1449 
buf
 = (c⁄° *)(
∑πül
 + (const *)buf);

1451 i‡(
Àn
 !0 && 
	`å™ß˘i⁄_wrôe
(
tdb
, 
off
, 
buf
,Üen) != 0) {

1452 
Áû
;

1459 i‡(
be°_ñ
 && be°_ñ->
off£t
 + be°_ñ->
Àngth
 =
off
 &&

1460 (
off
+
Àn
 < 
tdb
->
å™ß˘i⁄
->
ﬁd_m≠_size
 ||

1461 
off
 > 
tdb
->
å™ß˘i⁄
->
ﬁd_m≠_size
)) {

1462 *
d©a
 = 
be°_ñ
->data;

1463 
ñ
 = 
be°_ñ
;

1464 
ñ
->
d©a
 = (*)
	`ªÆloc
(el->data,

1465 
ñ
->
Àngth
 + 
Àn
);

1466 i‡(
ñ
->
d©a
 =
NULL
) {

1467 
tdb
->
ecode
 = 
TDB_ERR_OOM
;

1468 
tdb
->
å™ß˘i⁄
->
å™ß˘i⁄_îr‹
 = 1;

1469 
ñ
->
d©a
 = data;

1472 i‡(
buf
) {

1473 
	`mem˝y
(
ñ
->
d©a
 +Él->
Àngth
, 
buf
, 
Àn
);

1475 
	`mem£t
(
ñ
->
d©a
 +Él->
Àngth
, 
TDB_PAD_BYTE
, 
Àn
);

1477 
ñ
->
Àngth
 +
Àn
;

1482 
ñ
 = (
tdb_å™ß˘i⁄_ñ
 *)
	`mÆloc
((*el));

1483 i‡(
ñ
 =
NULL
) {

1484 
tdb
->
ecode
 = 
TDB_ERR_OOM
;

1485 
tdb
->
å™ß˘i⁄
->
å™ß˘i⁄_îr‹
 = 1;

1488 
ñ
->
√xt
 = 
NULL
;

1489 
ñ
->
¥ev
 = 
tdb
->
å™ß˘i⁄
->
ñemíts_œ°
;

1490 
ñ
->
off£t
 = 
off
;

1491 
ñ
->
Àngth
 = 
Àn
;

1492 
ñ
->
d©a
 = (*)
	`mÆloc
(
Àn
);

1493 i‡(
ñ
->
d©a
 =
NULL
) {

1494 
	`‰ì
(
ñ
);

1495 
tdb
->
ecode
 = 
TDB_ERR_OOM
;

1496 
tdb
->
å™ß˘i⁄
->
å™ß˘i⁄_îr‹
 = 1;

1499 i‡(
buf
) {

1500 
	`mem˝y
(
ñ
->
d©a
, 
buf
, 
Àn
);

1502 
	`mem£t
(
ñ
->
d©a
, 
TDB_PAD_BYTE
, 
Àn
);

1504 i‡(
ñ
->
¥ev
) {

1505 
ñ
->
¥ev
->
√xt
 =Él;

1507 
tdb
->
å™ß˘i⁄
->
ñemíts
 = 
ñ
;

1509 
tdb
->
å™ß˘i⁄
->
ñemíts_œ°
 = 
ñ
;

1512 
Áû
:

1513 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "å™ß˘i⁄_wrôe: faûedáàoff=%dÜí=%d\n", 
off
, 
Àn
));

1514 
tdb
->
ecode
 = 
TDB_ERR_IO
;

1515 
tdb
->
å™ß˘i⁄
->
å™ß˘i⁄_îr‹
 = 1;

1517 
	}
}

1522 
	$å™ß˘i⁄_√xt_hash_chaö
(
tdb_c⁄ãxt
 *
tdb
, 
u32
 *
chaö
)

1524 
u32
 
h
 = *
chaö
;

1525 ;
h
 < 
tdb
->
hódî
.
hash_size
;h++) {

1527 i‡(0 !
tdb
->
å™ß˘i⁄
->
hash_hóds
[
h
+1]) {

1531 (*
chaö
Ë
h
;

1532 
	}
}

1537 
	$å™ß˘i⁄_oob
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
Àn
, 
¥obe
)

1539 i‡(
Àn
 <
tdb
->
m≠_size
) {

1542  
	`TDB_ERRCODE
(
TDB_ERR_IO
, -1);

1543 
	}
}

1548 
	$å™ß˘i⁄_ex∑nd_fûe
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
size
,

1549 
tdb_off_t
 
addôi⁄
)

1553 i‡(
	`å™ß˘i⁄_wrôe
(
tdb
, 
size
, 
NULL
, 
addôi⁄
) != 0) {

1558 
	}
}

1563 
	$å™ß˘i⁄_bæock
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
,

1564 
rw_ty≥
, 
lck_ty≥
, 
¥obe
, 
size_t
 
Àn
)

1567 
	}
}

1569 c⁄° 
tdb_mëhods
 
	gå™ß˘i⁄_mëhods
 = {

1570 
å™ß˘i⁄_ªad
,

1571 
å™ß˘i⁄_wrôe
,

1572 
å™ß˘i⁄_√xt_hash_chaö
,

1573 
å™ß˘i⁄_oob
,

1574 
å™ß˘i⁄_ex∑nd_fûe
,

1575 
å™ß˘i⁄_bæock


1583 
	$tdb_å™ß˘i⁄_°¨t
(
tdb_c⁄ãxt
 *
tdb
)

1586 i‡(
tdb
->
ªad_⁄ly
 || (tdb->
Êags
 & 
TDB_INTERNAL
Ë||Ådb->
åavî£_ªad
) {

1587 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_transaction_start: cannot startáÅransaction onáÑead-only or internal db\n"));

1588 
tdb
->
ecode
 = 
TDB_ERR_EINVAL
;

1593 i‡(
tdb
->
å™ß˘i⁄
 !
NULL
) {

1594 
tdb
->
å™ß˘i⁄
->
√°ög
++;

1595 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_TRACE
, "tdb_transaction_start:Çesting %d\n",

1596 
tdb
->
å™ß˘i⁄
->
√°ög
));

1600 i‡(
tdb
->
num_locks
 !0 ||Ådb->
globÆ_lock
.
cou¡
) {

1604 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_transaction_start: cannot startáÅransaction withÜocks held\n"));

1605 
tdb
->
ecode
 = 
TDB_ERR_LOCK
;

1609 i‡(
tdb
->
åavlocks
.
√xt
 !
NULL
) {

1613 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_transaction_start: cannot startáÅransaction withináÅraverse\n"));

1614 
tdb
->
ecode
 = 
TDB_ERR_LOCK
;

1618 
tdb
->
å™ß˘i⁄
 = (
tdb_å™ß˘i⁄
 *)

1619 
	`ˇŒoc
((
tdb_å™ß˘i⁄
), 1);

1620 i‡(
tdb
->
å™ß˘i⁄
 =
NULL
) {

1621 
tdb
->
ecode
 = 
TDB_ERR_OOM
;

1628 i‡(
	`tdb_å™ß˘i⁄_lock
(
tdb
, 
F_WRLCK
) == -1) {

1629 
	`SAFE_FREE
(
tdb
->
å™ß˘i⁄
);

1635 i‡(
	`tdb_bæock
(
tdb
, 
FREELIST_TOP
, 
F_RDLCK
, 
F_SETLKW
, 0, 0) == -1) {

1636 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_transaction_start: failedÅo get hashÜocks\n"));

1637 
tdb
->
ecode
 = 
TDB_ERR_LOCK
;

1638 
Áû
;

1643 
tdb
->
å™ß˘i⁄
->
hash_hóds
 = (
u32
 *)

1644 
	`ˇŒoc
(
tdb
->
hódî
.
hash_size
+1, (
u32
));

1645 i‡(
tdb
->
å™ß˘i⁄
->
hash_hóds
 =
NULL
) {

1646 
tdb
->
ecode
 = 
TDB_ERR_OOM
;

1647 
Áû
;

1649 i‡(
tdb
->
mëhods
->
	`tdb_ªad
—db, 
FREELIST_TOP
,Ådb->
å™ß˘i⁄
->
hash_hóds
,

1650 
	`TDB_HASHTABLE_SIZE
(
tdb
), 0) != 0) {

1651 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_start: failedÅoÑead hash heads\n"));

1652 
tdb
->
ecode
 = 
TDB_ERR_IO
;

1653 
Áû
;

1658 
tdb
->
mëhods
->
	`tdb_oob
—db,Ådb->
m≠_size
 + 1, 1);

1659 
tdb
->
å™ß˘i⁄
->
ﬁd_m≠_size
 =Ådb->
m≠_size
;

1663 
tdb
->
å™ß˘i⁄
->
io_mëhods
 =Ådb->
mëhods
;

1664 
tdb
->
mëhods
 = &
å™ß˘i⁄_mëhods
;

1668 i‡(
	`å™ß˘i⁄_wrôe
(
tdb
, 
FREELIST_TOP
,Ådb->
å™ß˘i⁄
->
hash_hóds
,

1669 
	`TDB_HASHTABLE_SIZE
(
tdb
)) != 0) {

1670 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_start: failedÅoÖrime hashÅable\n"));

1671 
tdb
->
ecode
 = 
TDB_ERR_IO
;

1672 
tdb
->
mëhods
 =Ådb->
å™ß˘i⁄
->
io_mëhods
;

1673 
Áû
;

1678 
Áû
:

1679 
	`tdb_bæock
(
tdb
, 
FREELIST_TOP
, 
F_UNLCK
, 
F_SETLKW
, 0, 0);

1680 
	`tdb_å™ß˘i⁄_u∆ock
(
tdb
);

1681 
	`SAFE_FREE
(
tdb
->
å™ß˘i⁄
->
hash_hóds
);

1682 
	`SAFE_FREE
(
tdb
->
å™ß˘i⁄
);

1684 
	}
}

1690 
	$tdb_å™ß˘i⁄_ˇn˚l
(
tdb_c⁄ãxt
 *
tdb
)

1692 i‡(
tdb
->
å™ß˘i⁄
 =
NULL
) {

1693 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_transaction_cancel:ÇoÅransaction\n"));

1697 i‡(
tdb
->
å™ß˘i⁄
->
√°ög
 != 0) {

1698 
tdb
->
å™ß˘i⁄
->
å™ß˘i⁄_îr‹
 = 1;

1699 
tdb
->
å™ß˘i⁄
->
√°ög
--;

1703 
tdb
->
m≠_size
 =Ådb->
å™ß˘i⁄
->
ﬁd_m≠_size
;

1706 
tdb
->
å™ß˘i⁄
->
ñemíts
) {

1707 
tdb_å™ß˘i⁄_ñ
 *
ñ
 = 
tdb
->
å™ß˘i⁄
->
ñemíts
;

1708 
tdb
->
å™ß˘i⁄
->
ñemíts
 = 
ñ
->
√xt
;

1709 
	`‰ì
(
ñ
->
d©a
);

1710 
	`‰ì
(
ñ
);

1714 i‡(
tdb
->
globÆ_lock
.
cou¡
 != 0) {

1715 
	`tdb_bæock
(
tdb
, 
FREELIST_TOP
, 
F_UNLCK
, 
F_SETLKW
, 0, 4*tdb->
hódî
.
hash_size
);

1716 
tdb
->
globÆ_lock
.
cou¡
 = 0;

1720 i‡(
tdb
->
num_locks
 != 0) {

1721 
i
;

1722 
i
=0;i<
tdb
->
num_lockªcs
;i++) {

1723 
	`tdb_bæock
(
tdb
,
FREELIST_TOP
+4*tdb->
lockªcs
[
i
].
li°
,

1724 
F_UNLCK
,
F_SETLKW
, 0, 1);

1726 
tdb
->
num_locks
 = 0;

1727 
tdb
->
num_lockªcs
 = 0;

1728 
	`SAFE_FREE
(
tdb
->
lockªcs
);

1732 
tdb
->
mëhods
 =Ådb->
å™ß˘i⁄
->
io_mëhods
;

1734 
	`tdb_bæock
(
tdb
, 
FREELIST_TOP
, 
F_UNLCK
, 
F_SETLKW
, 0, 0);

1735 
	`tdb_å™ß˘i⁄_u∆ock
(
tdb
);

1736 
	`SAFE_FREE
(
tdb
->
å™ß˘i⁄
->
hash_hóds
);

1737 
	`SAFE_FREE
(
tdb
->
å™ß˘i⁄
);

1740 
	}
}

1745 
	$å™ß˘i⁄_sync
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
, 
tdb_Àn_t
 
Àngth
)

1747 i‡(
	`fsync
(
tdb
->
fd
) != 0) {

1748 
tdb
->
ecode
 = 
TDB_ERR_IO
;

1749 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction: fsync failed\n"));

1752 #ifde‡
MS_SYNC


1753 i‡(
tdb
->
m≠_±r
) {

1754 
tdb_off_t
 
moff£t
 = 
off£t
 & ~(
tdb
->
∑ge_size
-1);

1755 i‡(
	`msync
(
moff£t
 + (*)
tdb
->
m≠_±r
,

1756 
Àngth
 + (
off£t
 - 
moff£t
), 
MS_SYNC
) != 0) {

1757 
tdb
->
ecode
 = 
TDB_ERR_IO
;

1758 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction: msync failed - %s\n",

1759 
	`°ªº‹
(
î∫o
)));

1765 
	}
}

1771 
tdb_Àn_t
 
	$tdb_ªcovîy_size
(
tdb_c⁄ãxt
 *
tdb
)

1773 
tdb_å™ß˘i⁄_ñ
 *
ñ
;

1774 
tdb_Àn_t
 
ªcovîy_size
 = 0;

1776 
ªcovîy_size
 = (
u32
);

1777 
ñ
=
tdb
->
å™ß˘i⁄
->
ñemíts
;ñ;ñÛl->
√xt
) {

1778 i‡(
ñ
->
off£t
 >
tdb
->
å™ß˘i⁄
->
ﬁd_m≠_size
) {

1781 
ªcovîy_size
 +2*(
tdb_off_t
Ë+ 
ñ
->
Àngth
;

1784  
ªcovîy_size
;

1785 
	}
}

1791 
	$tdb_ªcovîy_Æloˇã
(
tdb_c⁄ãxt
 *
tdb
,

1792 
tdb_Àn_t
 *
ªcovîy_size
,

1793 
tdb_off_t
 *
ªcovîy_off£t
,

1794 
tdb_Àn_t
 *
ªcovîy_max_size
)

1796 
li°_°ru˘
 
ªc
;

1797 c⁄° 
tdb_mëhods
 *
mëhods
 = 
tdb
->
å™ß˘i⁄
->
io_mëhods
;

1798 
tdb_off_t
 
ªcovîy_hód
;

1800 i‡(
	`tdb_ofs_ªad
(
tdb
, 
TDB_RECOVERY_HEAD
, &
ªcovîy_hód
) == -1) {

1801 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_recovery_allocate: failedÅoÑeadÑecovery head\n"));

1805 
ªc
.
ªc_Àn
 = 0;

1807 i‡(
ªcovîy_hód
 != 0 &&

1808 
mëhods
->
	`tdb_ªad
(
tdb
, 
ªcovîy_hód
, &
ªc
, ‘ec), 
	`DOCONV
()) == -1) {

1809 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_recovery_allocate: failedÅoÑeadÑecoveryÑecord\n"));

1813 *
ªcovîy_size
 = 
	`tdb_ªcovîy_size
(
tdb
);

1815 i‡(
ªcovîy_hód
 !0 && *
ªcovîy_size
 <
ªc
.
ªc_Àn
) {

1817 *
ªcovîy_max_size
 = 
ªc
.
ªc_Àn
;

1818 *
ªcovîy_off£t
 = 
ªcovîy_hód
;

1827 i‡(
ªcovîy_hód
 != 0) {

1828 i‡(
	`tdb_‰ì
(
tdb
, 
ªcovîy_hód
, &
ªc
) == -1) {

1829 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_recovery_allocate: failedÅo freeÖreviousÑecoveryárea\n"));

1835 *
ªcovîy_size
 = 
	`tdb_ªcovîy_size
(
tdb
);

1838 *
ªcovîy_max_size
 = 
	`TDB_ALIGN
((
ªc
Ë+ *
ªcovîy_size
, 
tdb
->
∑ge_size
) - (rec);

1839 *
ªcovîy_off£t
 = 
tdb
->
m≠_size
;

1840 
ªcovîy_hód
 = *
ªcovîy_off£t
;

1842 i‡(
mëhods
->
	`tdb_ex∑nd_fûe
(
tdb
,Ådb->
å™ß˘i⁄
->
ﬁd_m≠_size
,

1843 (
tdb
->
m≠_size
 -Ådb->
å™ß˘i⁄
->
ﬁd_m≠_size
) +

1844 (
ªc
Ë+ *
ªcovîy_max_size
) == -1) {

1845 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_recovery_allocate: failedÅo createÑecoveryárea\n"));

1850 
mëhods
->
	`tdb_oob
(
tdb
,Ådb->
m≠_size
 + 1, 1);

1854 
tdb
->
å™ß˘i⁄
->
ﬁd_m≠_size
 =Ådb->
m≠_size
;

1858 
	`CONVERT
(
ªcovîy_hód
);

1859 i‡(
mëhods
->
	`tdb_wrôe
(
tdb
, 
TDB_RECOVERY_HEAD
,

1860 &
ªcovîy_hód
, (
tdb_off_t
)) == -1) {

1861 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_recovery_allocate: failedÅo writeÑecovery head\n"));

1866 
	}
}

1872 
	$å™ß˘i⁄_£tup_ªcovîy
(
tdb_c⁄ãxt
 *
tdb
,

1873 
tdb_off_t
 *
magic_off£t
)

1875 
tdb_å™ß˘i⁄_ñ
 *
ñ
;

1876 
tdb_Àn_t
 
ªcovîy_size
;

1877 *
d©a
, *
p
;

1878 c⁄° 
tdb_mëhods
 *
mëhods
 = 
tdb
->
å™ß˘i⁄
->
io_mëhods
;

1879 
li°_°ru˘
 *
ªc
;

1880 
tdb_off_t
 
ªcovîy_off£t
, 
ªcovîy_max_size
;

1881 
tdb_off_t
 
ﬁd_m≠_size
 = 
tdb
->
å™ß˘i⁄
->old_map_size;

1882 
u32
 
magic
, 
èûî
;

1887 i‡(
	`tdb_ªcovîy_Æloˇã
(
tdb
, &
ªcovîy_size
,

1888 &
ªcovîy_off£t
, &
ªcovîy_max_size
) == -1) {

1892 
d©a
 = (*)
	`mÆloc
(
ªcovîy_size
 + (*
ªc
));

1893 i‡(
d©a
 =
NULL
) {

1894 
tdb
->
ecode
 = 
TDB_ERR_OOM
;

1898 
ªc
 = (
li°_°ru˘
 *)
d©a
;

1899 
	`mem£t
(
ªc
, 0, (*rec));

1901 
ªc
->
magic
 = 0;

1902 
ªc
->
d©a_Àn
 = 
ªcovîy_size
;

1903 
ªc
->
ªc_Àn
 = 
ªcovîy_max_size
;

1904 
ªc
->
key_Àn
 = 
ﬁd_m≠_size
;

1905 
	`CONVERT
(
ªc
);

1909 
p
 = 
d©a
 + (*
ªc
);

1910 
ñ
=
tdb
->
å™ß˘i⁄
->
ñemíts
;ñ;ñÛl->
√xt
) {

1911 i‡(
ñ
->
off£t
 >
ﬁd_m≠_size
) {

1914 i‡(
ñ
->
off£t
 +Él->
Àngth
 > 
tdb
->
å™ß˘i⁄
->
ﬁd_m≠_size
) {

1915 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_setup_recovery:Åransaction data overÇewÑegion boundary\n"));

1916 
	`‰ì
(
d©a
);

1917 
tdb
->
ecode
 = 
TDB_ERR_CORRUPT
;

1920 
	`mem˝y
(
p
, &
ñ
->
off£t
, 4);

1921 
	`mem˝y
(
p
+4, &
ñ
->
Àngth
, 4);

1922 i‡(
	`DOCONV
()) {

1923 
	`tdb_c⁄vît
(
p
, 8);

1928 i‡(
mëhods
->
	`tdb_ªad
(
tdb
, 
ñ
->
off£t
, 
p
 + 8,Él->
Àngth
, 0) != 0) {

1929 
	`‰ì
(
d©a
);

1930 
tdb
->
ecode
 = 
TDB_ERR_IO
;

1933 
p
 +8 + 
ñ
->
Àngth
;

1937 
èûî
 = (*
ªc
Ë+ 
ªcovîy_max_size
;

1938 
	`mem˝y
(
p
, &
èûî
, 4);

1939 
	`CONVERT
(
p
);

1942 i‡(
mëhods
->
	`tdb_wrôe
(
tdb
, 
ªcovîy_off£t
, 
d©a
, (*
ªc
Ë+ 
ªcovîy_size
) == -1) {

1943 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_setup_recovery: failedÅo writeÑecovery data\n"));

1944 
	`‰ì
(
d©a
);

1945 
tdb
->
ecode
 = 
TDB_ERR_IO
;

1952 i‡(
	`å™ß˘i⁄_sync
(
tdb
, 
ªcovîy_off£t
, (*
ªc
Ë+ 
ªcovîy_size
) == -1) {

1953 
	`‰ì
(
d©a
);

1957 
	`‰ì
(
d©a
);

1959 
magic
 = 
TDB_RECOVERY_MAGIC
;

1960 
	`CONVERT
(
magic
);

1962 *
magic_off£t
 = 
ªcovîy_off£t
 + 
	`off£tof
(
li°_°ru˘
, 
magic
);

1964 i‡(
mëhods
->
	`tdb_wrôe
(
tdb
, *
magic_off£t
, &
magic
, (magic)) == -1) {

1965 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_setup_recovery: failedÅo writeÑecovery magic\n"));

1966 
tdb
->
ecode
 = 
TDB_ERR_IO
;

1971 i‡(
	`å™ß˘i⁄_sync
(
tdb
, *
magic_off£t
, (
magic
)) == -1) {

1976 
	}
}

1981 
	$tdb_å™ß˘i⁄_commô
(
tdb_c⁄ãxt
 *
tdb
)

1983 c⁄° 
tdb_mëhods
 *
mëhods
;

1984 
tdb_off_t
 
magic_off£t
 = 0;

1985 
u32
 
zîo
 = 0;

1987 i‡(
tdb
->
å™ß˘i⁄
 =
NULL
) {

1988 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_transaction_commit:ÇoÅransaction\n"));

1992 i‡(
tdb
->
å™ß˘i⁄
->
å™ß˘i⁄_îr‹
) {

1993 
tdb
->
ecode
 = 
TDB_ERR_IO
;

1994 
	`tdb_å™ß˘i⁄_ˇn˚l
(
tdb
);

1995 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_transaction_commit:ÅransactionÉrrorÖending\n"));

1999 i‡(
tdb
->
å™ß˘i⁄
->
√°ög
 != 0) {

2000 
tdb
->
å™ß˘i⁄
->
√°ög
--;

2005 i‡(
tdb
->
å™ß˘i⁄
->
ñemíts
 =
NULL
) {

2006 
	`tdb_å™ß˘i⁄_ˇn˚l
(
tdb
);

2010 
mëhods
 = 
tdb
->
å™ß˘i⁄
->
io_mëhods
;

2014 i‡(
tdb
->
num_locks
 ||Ådb->
globÆ_lock
.
cou¡
) {

2015 
tdb
->
ecode
 = 
TDB_ERR_LOCK
;

2016 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_transaction_commit:ÜocksÖending on commit\n"));

2017 
	`tdb_å™ß˘i⁄_ˇn˚l
(
tdb
);

2022 i‡(
	`tdb_bæock_upgøde
(
tdb
, 
FREELIST_TOP
, 0) == -1) {

2023 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_transaction_start: failedÅo upgrade hashÜocks\n"));

2024 
tdb
->
ecode
 = 
TDB_ERR_LOCK
;

2025 
	`tdb_å™ß˘i⁄_ˇn˚l
(
tdb
);

2031 i‡(
	`tdb_bæock
(
tdb
, 
GLOBAL_LOCK
, 
F_WRLCK
, 
F_SETLKW
, 0, 1) == -1) {

2032 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_transaction_commit: failedÅo get globalÜock\n"));

2033 
tdb
->
ecode
 = 
TDB_ERR_LOCK
;

2034 
	`tdb_å™ß˘i⁄_ˇn˚l
(
tdb
);

2038 i‡(!(
tdb
->
Êags
 & 
TDB_NOSYNC
)) {

2040 i‡(
	`å™ß˘i⁄_£tup_ªcovîy
(
tdb
, &
magic_off£t
) == -1) {

2041 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_commit: failedÅo setupÑecovery data\n"));

2042 
	`tdb_bæock
(
tdb
, 
GLOBAL_LOCK
, 
F_UNLCK
, 
F_SETLKW
, 0, 1);

2043 
	`tdb_å™ß˘i⁄_ˇn˚l
(
tdb
);

2049 i‡(
tdb
->
m≠_size
 !tdb->
å™ß˘i⁄
->
ﬁd_m≠_size
) {

2050 i‡(
mëhods
->
	`tdb_ex∑nd_fûe
(
tdb
,Ådb->
å™ß˘i⁄
->
ﬁd_m≠_size
,

2051 
tdb
->
m≠_size
 -

2052 
tdb
->
å™ß˘i⁄
->
ﬁd_m≠_size
) == -1) {

2053 
tdb
->
ecode
 = 
TDB_ERR_IO
;

2054 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_commit:Éxpansion failed\n"));

2055 
	`tdb_bæock
(
tdb
, 
GLOBAL_LOCK
, 
F_UNLCK
, 
F_SETLKW
, 0, 1);

2056 
	`tdb_å™ß˘i⁄_ˇn˚l
(
tdb
);

2059 
tdb
->
m≠_size
 =Ådb->
å™ß˘i⁄
->
ﬁd_m≠_size
;

2060 
mëhods
->
	`tdb_oob
(
tdb
,Ådb->
m≠_size
 + 1, 1);

2064 
tdb
->
å™ß˘i⁄
->
ñemíts
) {

2065 
tdb_å™ß˘i⁄_ñ
 *
ñ
 = 
tdb
->
å™ß˘i⁄
->
ñemíts
;

2067 i‡(
mëhods
->
	`tdb_wrôe
(
tdb
, 
ñ
->
off£t
,Él->
d©a
,Él->
Àngth
) == -1) {

2068 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_commit: write failed during commit\n"));

2073 
tdb
->
mëhods
 = methods;

2074 
	`tdb_å™ß˘i⁄_ªcovî
(
tdb
);

2076 
	`tdb_å™ß˘i⁄_ˇn˚l
(
tdb
);

2077 
	`tdb_bæock
(
tdb
, 
GLOBAL_LOCK
, 
F_UNLCK
, 
F_SETLKW
, 0, 1);

2079 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_commit: write failed\n"));

2082 
tdb
->
å™ß˘i⁄
->
ñemíts
 = 
ñ
->
√xt
;

2083 
	`‰ì
(
ñ
->
d©a
);

2084 
	`‰ì
(
ñ
);

2087 i‡(!(
tdb
->
Êags
 & 
TDB_NOSYNC
)) {

2089 i‡(
	`å™ß˘i⁄_sync
(
tdb
, 0,Ådb->
m≠_size
) == -1) {

2094 i‡(
mëhods
->
	`tdb_wrôe
(
tdb
, 
magic_off£t
, &
zîo
, 4) == -1) {

2095 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_commit: failedÅoÑemoveÑecovery magic\n"));

2100 i‡(
	`å™ß˘i⁄_sync
(
tdb
, 
magic_off£t
, 4) == -1) {

2105 
	`tdb_bæock
(
tdb
, 
GLOBAL_LOCK
, 
F_UNLCK
, 
F_SETLKW
, 0, 1);

2118 #ifde‡
HAVE_UTIME


2119 
	`utime
(
tdb
->
«me
, 
NULL
);

2124 
	`tdb_å™ß˘i⁄_ˇn˚l
(
tdb
);

2126 
	}
}

2134 
	$tdb_å™ß˘i⁄_ªcovî
(
tdb_c⁄ãxt
 *
tdb
)

2136 
tdb_off_t
 
ªcovîy_hód
, 
ªcovîy_eof
;

2137 *
d©a
, *
p
;

2138 
u32
 
zîo
 = 0;

2139 
li°_°ru˘
 
ªc
;

2142 i‡(
	`tdb_ofs_ªad
(
tdb
, 
TDB_RECOVERY_HEAD
, &
ªcovîy_hód
) == -1) {

2143 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_recover: failedÅoÑeadÑecovery head\n"));

2144 
tdb
->
ecode
 = 
TDB_ERR_IO
;

2148 i‡(
ªcovîy_hód
 == 0) {

2154 i‡(
tdb
->
mëhods
->
	`tdb_ªad
—db, 
ªcovîy_hód
, &
ªc
,

2155 (
ªc
), 
	`DOCONV
()) == -1) {

2156 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_recover: failedÅoÑeadÑecoveryÑecord\n"));

2157 
tdb
->
ecode
 = 
TDB_ERR_IO
;

2161 i‡(
ªc
.
magic
 !
TDB_RECOVERY_MAGIC
) {

2166 i‡(
tdb
->
ªad_⁄ly
) {

2167 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_recover:áttemptÅoÑecoverÑead only database\n"));

2168 
tdb
->
ecode
 = 
TDB_ERR_CORRUPT
;

2172 
ªcovîy_eof
 = 
ªc
.
key_Àn
;

2174 
d©a
 = (*)
	`mÆloc
(
ªc
.
d©a_Àn
);

2175 i‡(
d©a
 =
NULL
) {

2176 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_recover: failedÅoállocateÑecovery data\n"));

2177 
tdb
->
ecode
 = 
TDB_ERR_OOM
;

2182 i‡(
tdb
->
mëhods
->
	`tdb_ªad
—db, 
ªcovîy_hód
 + (
ªc
), 
d©a
,

2183 
ªc
.
d©a_Àn
, 0) == -1) {

2184 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_recover: failedÅoÑeadÑecovery data\n"));

2185 
tdb
->
ecode
 = 
TDB_ERR_IO
;

2190 
p
 = 
d©a
;

2191 
p
+8 < 
d©a
 + 
ªc
.
d©a_Àn
) {

2192 
u32
 
ofs
, 
Àn
;

2193 i‡(
	`DOCONV
()) {

2194 
	`tdb_c⁄vît
(
p
, 8);

2196 
	`mem˝y
(&
ofs
, 
p
, 4);

2197 
	`mem˝y
(&
Àn
, 
p
+4, 4);

2199 i‡(
tdb
->
mëhods
->
	`tdb_wrôe
—db, 
ofs
, 
p
+8, 
Àn
) == -1) {

2200 
	`‰ì
(
d©a
);

2201 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_å™ß˘i⁄_ªcovî: faûedÅÿªcovî %d byã†© off£à%d\n", 
Àn
, 
ofs
));

2202 
tdb
->
ecode
 = 
TDB_ERR_IO
;

2205 
p
 +8 + 
Àn
;

2208 
	`‰ì
(
d©a
);

2210 i‡(
	`å™ß˘i⁄_sync
(
tdb
, 0,Ådb->
m≠_size
) == -1) {

2211 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_recover: failedÅo syncÑecovery\n"));

2212 
tdb
->
ecode
 = 
TDB_ERR_IO
;

2217 i‡(
ªcovîy_eof
 <
ªcovîy_hód
) {

2218 i‡(
	`tdb_ofs_wrôe
(
tdb
, 
TDB_RECOVERY_HEAD
, &
zîo
) == -1) {

2219 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_recover: failedÅoÑemoveÑecovery head\n"));

2220 
tdb
->
ecode
 = 
TDB_ERR_IO
;

2226 i‡(
	`tdb_ofs_wrôe
(
tdb
, 
ªcovîy_hód
 + 
	`off£tof
(
li°_°ru˘
, 
magic
),

2227 &
zîo
) == -1) {

2228 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_recover: failedÅoÑemoveÑecovery magic\n"));

2229 
tdb
->
ecode
 = 
TDB_ERR_IO
;

2234 
	`tdb_munm≠
(
tdb
);

2235 i‡(
	`·runˇã
(
tdb
->
fd
, 
ªcovîy_eof
) != 0) {

2236 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_recover: failedÅoÑeduceÅoÑecovery size\n"));

2237 
tdb
->
ecode
 = 
TDB_ERR_IO
;

2240 
tdb
->
m≠_size
 = 
ªcovîy_eof
;

2241 
	`tdb_mm≠
(
tdb
);

2243 i‡(
	`å™ß˘i⁄_sync
(
tdb
, 0, 
ªcovîy_eof
) == -1) {

2244 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_transaction_recover: failedÅo sync2Ñecovery\n"));

2245 
tdb
->
ecode
 = 
TDB_ERR_IO
;

2249 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_TRACE
, "tdb_transaction_recover:Ñecovered %d byte database\n",

2250 
ªcovîy_eof
));

2254 
	}
}

2259 
	$tdb_ªc_‰ì_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
, 
li°_°ru˘
 *
ªc
)

2261 i‡(
tdb
->
mëhods
->
	`tdb_ªad
—db, 
off
, 
ªc
, (*ªc),
	`DOCONV
()) == -1)

2264 i‡(
ªc
->
magic
 =
TDB_MAGIC
) {

2267 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_WARNING
, "tdb_rec_free_readÇon-free magic 0x%xát offset=%d - fixing\n",

2268 
ªc
->
magic
, 
off
));

2269 
ªc
->
magic
 = 
TDB_FREE_MAGIC
;

2270 i‡(
tdb
->
mëhods
->
	`tdb_wrôe
—db, 
off
, 
ªc
, (*rec)) == -1)

2274 i‡(
ªc
->
magic
 !
TDB_FREE_MAGIC
) {

2276 
tdb
->
ecode
 = 
TDB_ERR_CORRUPT
;

2277 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_WARNING
, "tdb_rec_free_read bad magic 0x%xát offset=%d\n",

2278 
ªc
->
magic
, 
off
));

2279  
	`TDB_ERRCODE
(
TDB_ERR_CORRUPT
, -1);

2281 i‡(
tdb
->
mëhods
->
	`tdb_oob
—db, 
ªc
->
√xt
+(*rec), 0) != 0)

2284 
	}
}

2289 
	$ªmove_‰om_‰ìli°
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off
,Ådb_off_à
√xt
)

2291 
tdb_off_t
 
œ°_±r
, 
i
;

2294 
œ°_±r
 = 
FREELIST_TOP
;

2295 
	`tdb_ofs_ªad
(
tdb
, 
œ°_±r
, &
i
) != -1 && i != 0) {

2296 i‡(
i
 =
off
) {

2298  
	`tdb_ofs_wrôe
(
tdb
, 
œ°_±r
, &
√xt
);

2301 
œ°_±r
 = 
i
;

2303 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
,"ªmove_‰om_‰ìli°:ÇŸ o¿li°áàoff=%d\n", 
off
));

2304  
	`TDB_ERRCODE
(
TDB_ERR_CORRUPT
, -1);

2305 
	}
}

2309 
	$upd©e_èûî
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
,

2310 c⁄° 
li°_°ru˘
 *
ªc
)

2312 
tdb_off_t
 
tŸÆsize
;

2315 
tŸÆsize
 = (*
ªc
Ë+Ñec->
ªc_Àn
;

2316  
	`tdb_ofs_wrôe
(
tdb
, 
off£t
 + 
tŸÆsize
 - (
tdb_off_t
),

2317 &
tŸÆsize
);

2318 
	}
}

2322 
	$tdb_‰ì
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
off£t
, 
li°_°ru˘
 *
ªc
)

2324 
tdb_off_t
 
right
, 
À·
;

2327 i‡(
	`tdb_lock
(
tdb
, -1, 
F_WRLCK
) != 0)

2331 i‡(
	`upd©e_èûî
(
tdb
, 
off£t
, 
ªc
) != 0) {

2332 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_free: update_tailer failed!\n"));

2333 
Áû
;

2337 
right
 = 
off£t
 + (*
ªc
Ë+Ñec->
ªc_Àn
;

2338 i‡(
right
 + (*
ªc
Ë<
tdb
->
m≠_size
) {

2339 
li°_°ru˘
 
r
;

2341 i‡(
tdb
->
mëhods
->
	`tdb_ªad
—db, 
right
, &
r
, ‘), 
	`DOCONV
()) == -1) {

2342 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_‰ì:Ñighàªad faûedáà%u\n", 
right
));

2343 
À·
;

2347 i‡(
r
.
magic
 =
TDB_FREE_MAGIC
) {

2348 i‡(
	`ªmove_‰om_‰ìli°
(
tdb
, 
right
, 
r
.
√xt
) == -1) {

2349 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_‰ì:Ñighà‰ì faûedáà%u\n", 
right
));

2350 
À·
;

2352 
ªc
->
ªc_Àn
 +(
r
) +Ñ.rec_len;

2356 
À·
:

2358 
À·
 = 
off£t
 - (
tdb_off_t
);

2359 i‡(
À·
 > 
	`TDB_DATA_START
(
tdb
->
hódî
.
hash_size
)) {

2360 
li°_°ru˘
 
l
;

2361 
tdb_off_t
 
À·size
;

2364 i‡(
	`tdb_ofs_ªad
(
tdb
, 
À·
, &
À·size
) == -1) {

2365 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_‰ì:Üe· off£àªad faûedáà%u\n", 
À·
));

2366 
upd©e
;

2370 i‡(
À·size
 =0 ||Üe·sizê=
TDB_PAD_U32
) {

2371 
upd©e
;

2374 
À·
 = 
off£t
 - 
À·size
;

2377 i‡(
tdb
->
mëhods
->
	`tdb_ªad
—db, 
À·
, &
l
, ÷), 
	`DOCONV
()) == -1) {

2378 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_‰ì:Üe·Ñód faûedáà%u (%u)\n", 
À·
, 
À·size
));

2379 
upd©e
;

2383 i‡(
l
.
magic
 =
TDB_FREE_MAGIC
) {

2384 i‡(
	`ªmove_‰om_‰ìli°
(
tdb
, 
À·
, 
l
.
√xt
) == -1) {

2385 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_‰ì:Üe· fªêÁûedáà%u\n", 
À·
));

2386 
upd©e
;

2388 
off£t
 = 
À·
;

2389 
ªc
->
ªc_Àn
 +
À·size
;

2394 
upd©e
:

2395 i‡(
	`upd©e_èûî
(
tdb
, 
off£t
, 
ªc
) == -1) {

2396 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_‰ì: upd©e_èûî faûedáà%u\n", 
off£t
));

2397 
Áû
;

2401 
ªc
->
magic
 = 
TDB_FREE_MAGIC
;

2403 i‡(
	`tdb_ofs_ªad
(
tdb
, 
FREELIST_TOP
, &
ªc
->
√xt
) == -1 ||

2404 
	`tdb_ªc_wrôe
(
tdb
, 
off£t
, 
ªc
) == -1 ||

2405 
	`tdb_ofs_wrôe
(
tdb
, 
FREELIST_TOP
, &
off£t
) == -1) {

2406 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_‰ìÑec‹d wrôêÁûedáàoff£t=%d\n", 
off£t
));

2407 
Áû
;

2411 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

2414 
Áû
:

2415 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

2417 
	}
}

2424 
tdb_off_t
 
	$tdb_Æloˇã_ofs
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_Àn_t
 
Àngth
, 
tdb_off_t
 
ªc_±r
,

2425 
li°_°ru˘
 *
ªc
, 
tdb_off_t
 
œ°_±r
)

2427 
li°_°ru˘
 
√wªc
;

2428 
tdb_off_t
 
√wªc_±r
;

2430 
	`mem£t
(&
√wªc
, '\0', (newrec));

2433 i‡(
ªc
->
ªc_Àn
 > 
Àngth
 + 
MIN_REC_SIZE
) {

2435 
Àngth
 = 
	`TDB_ALIGN
÷ígth, 
TDB_ALIGNMENT
);

2438 
√wªc
.
ªc_Àn
 = 
ªc
->ªc_À¿- ((*ªcË+ 
Àngth
);

2439 
√wªc_±r
 = 
ªc_±r
 + (*
ªc
Ë+ 
Àngth
;

2442 
ªc
->
ªc_Àn
 = 
Àngth
;

2444 
√wªc_±r
 = 0;

2448 i‡(
	`tdb_ofs_wrôe
(
tdb
, 
œ°_±r
, &
ªc
->
√xt
) == -1) {

2456 
ªc
->
magic
 = 
TDB_MAGIC
;

2457 i‡(
	`tdb_ªc_wrôe
(
tdb
, 
ªc_±r
, 
ªc
) == -1) {

2462 i‡(
√wªc_±r
) {

2465 i‡(
	`upd©e_èûî
(
tdb
, 
ªc_±r
, 
ªc
) == -1) {

2470 i‡(
	`tdb_‰ì
(
tdb
, 
√wªc_±r
, &
√wªc
) == -1) {

2476  
ªc_±r
;

2477 
	}
}

2485 
tdb_off_t
 
	$tdb_Æloˇã
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_Àn_t
 
Àngth
, 
li°_°ru˘
 *
ªc
)

2487 
tdb_off_t
 
ªc_±r
, 
œ°_±r
, 
√wªc_±r
;

2489 
tdb_off_t
 
ªc_±r
, 
œ°_±r
;

2490 
tdb_Àn_t
 
ªc_Àn
;

2491 } 
be°fô
;

2493 i‡(
	`tdb_lock
(
tdb
, -1, 
F_WRLCK
) == -1)

2497 
Àngth
 +(
tdb_off_t
);

2499 
agaö
:

2500 
œ°_±r
 = 
FREELIST_TOP
;

2503 i‡(
	`tdb_ofs_ªad
(
tdb
, 
FREELIST_TOP
, &
ªc_±r
) == -1)

2504 
Áû
;

2506 
be°fô
.
ªc_±r
 = 0;

2507 
be°fô
.
œ°_±r
 = 0;

2508 
be°fô
.
ªc_Àn
 = 0;

2515 
ªc_±r
) {

2516 i‡(
	`tdb_ªc_‰ì_ªad
(
tdb
, 
ªc_±r
, 
ªc
) == -1) {

2517 
Áû
;

2520 i‡(
ªc
->
ªc_Àn
 >
Àngth
) {

2521 i‡(
be°fô
.
ªc_±r
 == 0 ||

2522 
ªc
->
ªc_Àn
 < 
be°fô
.rec_len) {

2523 
be°fô
.
ªc_Àn
 = 
ªc
->rec_len;

2524 
be°fô
.
ªc_±r
 =Ñec_ptr;

2525 
be°fô
.
œ°_±r
 =Üast_ptr;

2529 i‡(
be°fô
.
ªc_Àn
 < 2*
Àngth
) {

2536 
œ°_±r
 = 
ªc_±r
;

2537 
ªc_±r
 = 
ªc
->
√xt
;

2540 i‡(
be°fô
.
ªc_±r
 != 0) {

2541 i‡(
	`tdb_ªc_‰ì_ªad
(
tdb
, 
be°fô
.
ªc_±r
, 
ªc
) == -1) {

2542 
Áû
;

2545 
√wªc_±r
 = 
	`tdb_Æloˇã_ofs
(
tdb
, 
Àngth
, 
be°fô
.
ªc_±r
, 
ªc
, be°fô.
œ°_±r
);

2546 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

2547  
√wªc_±r
;

2552 i‡(
	`tdb_ex∑nd
(
tdb
, 
Àngth
 + (*
ªc
)) == 0)

2553 
agaö
;

2554 
Áû
:

2555 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

2557 
	}
}

2569 
	$£í_ö£π
(
tdb_c⁄ãxt
 *
mem_tdb
, 
tdb_off_t
 
ªc_±r
)

2571 
TDB_DATA
 
key
, 
d©a
;

2573 
	`mem£t
(&
d©a
, '\0', (data));

2574 
key
.
d±r
 = (*)&
ªc_±r
;

2575 
key
.
dsize
 = (
ªc_±r
);

2576  
	`tdb_°‹e
(
mem_tdb
, 
key
, 
d©a
, 
TDB_INSERT
);

2577 
	}
}

2579 
	$tdb_vÆid©e_‰ìli°
(
tdb_c⁄ãxt
 *
tdb
, *
≤um_íåõs
)

2581 
tdb_c⁄ãxt
 *
mem_tdb
 = 
NULL
;

2582 
li°_°ru˘
 
ªc
;

2583 
tdb_off_t
 
ªc_±r
, 
œ°_±r
;

2584 
ªt
 = -1;

2586 *
≤um_íåõs
 = 0;

2588 
mem_tdb
 = 
	`tdb_›í
("ÊvÆ", 
tdb
->
hódî
.
hash_size
,

2589 
TDB_INTERNAL
, 
O_RDWR
, 0600);

2590 i‡(!
mem_tdb
) {

2594 i‡(
	`tdb_lock
(
tdb
, -1, 
F_WRLCK
) == -1) {

2595 
	`tdb_˛o£
(
mem_tdb
);

2599 
œ°_±r
 = 
FREELIST_TOP
;

2602 i‡(
	`£í_ö£π
(
mem_tdb
, 
œ°_±r
) == -1) {

2603 
ªt
 = 
	`TDB_ERRCODE
(
TDB_ERR_CORRUPT
, -1);

2604 
Áû
;

2608 i‡(
	`tdb_ofs_ªad
(
tdb
, 
FREELIST_TOP
, &
ªc_±r
) == -1) {

2609 
Áû
;

2612 
ªc_±r
) {

2618 i‡(
	`£í_ö£π
(
mem_tdb
, 
ªc_±r
)) {

2619 
ªt
 = 
	`TDB_ERRCODE
(
TDB_ERR_CORRUPT
, -1);

2620 
Áû
;

2623 i‡(
	`tdb_ªc_‰ì_ªad
(
tdb
, 
ªc_±r
, &
ªc
) == -1) {

2624 
Áû
;

2628 
œ°_±r
 = 
ªc_±r
;

2629 
ªc_±r
 = 
ªc
.
√xt
;

2630 *
≤um_íåõs
 += 1;

2633 
ªt
 = 0;

2635 
Áû
:

2637 
	`tdb_˛o£
(
mem_tdb
);

2638 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

2639  
ªt
;

2640 
	}
}

2645 
	$tdb_√xt_lock
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_åavî£_lock
 *
éock
,

2646 
li°_°ru˘
 *
ªc
)

2648 
w™t_√xt
 = (
éock
->
off
 != 0);

2651 ; 
éock
->
hash
 < 
tdb
->
hódî
.
hash_size
;Ålock->hash++) {

2652 i‡(!
éock
->
off
 &&Ålock->
hash
 != 0) {

2681 
tdb
->
mëhods
->
	`√xt_hash_chaö
—db, &
éock
->
hash
);

2682 i‡(
éock
->
hash
 =
tdb
->
hódî
.
hash_size
) {

2687 i‡(
	`tdb_lock
(
tdb
, 
éock
->
hash
,Ålock->
lock_rw
) == -1)

2691 i‡(!
éock
->
off
) {

2692 i‡(
	`tdb_ofs_ªad
(
tdb
, 
	`TDB_HASH_TOP
(
éock
->
hash
),

2693 &
éock
->
off
) == -1)

2694 
Áû
;

2697 i‡(
	`tdb_u∆ock_ªc‹d
(
tdb
, 
éock
->
off
) != 0)

2698 
Áû
;

2701 i‡(
w™t_√xt
) {

2703 i‡(
	`tdb_ªc_ªad
(
tdb
, 
éock
->
off
, 
ªc
) == -1)

2704 
Áû
;

2705 
éock
->
off
 = 
ªc
->
√xt
;

2709  
éock
->
off
) {

2710 
tdb_off_t
 
cuºít
;

2711 i‡(
	`tdb_ªc_ªad
(
tdb
, 
éock
->
off
, 
ªc
) == -1)

2712 
Áû
;

2715 i‡(
éock
->
off
 =
ªc
->
√xt
) {

2716 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_next_lock:Üoop detected.\n"));

2717 
Áû
;

2720 i‡(!
	`TDB_DEAD
(
ªc
)) {

2722 i‡(
	`tdb_lock_ªc‹d
(
tdb
, 
éock
->
off
) != 0)

2723 
Áû
;

2724  
éock
->
off
;

2728 
cuºít
 = 
éock
->
off
;

2729 
éock
->
off
 = 
ªc
->
√xt
;

2730 i‡(!(
tdb
->
ªad_⁄ly
 ||Ådb->
åavî£_ªad
) &&

2731 
	`tdb_do_dñëe
(
tdb
, 
cuºít
, 
ªc
) != 0)

2732 
Áû
;

2734 
	`tdb_u∆ock
(
tdb
, 
éock
->
hash
,Ålock->
lock_rw
);

2735 
w™t_√xt
 = 0;

2738  
	`TDB_ERRCODE
(
TDB_SUCCESS
, 0);

2740 
Áû
:

2741 
éock
->
off
 = 0;

2742 i‡(
	`tdb_u∆ock
(
tdb
, 
éock
->
hash
,Ålock->
lock_rw
) != 0)

2743 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_next_lock: OnÉrror unlock failed!\n"));

2745 
	}
}

2752 
	$tdb_åavî£_öã∫Æ
(
tdb_c⁄ãxt
 *
tdb
,

2753 
tdb_åavî£_func
 
‚
, *
¥iv©e_d©a
,

2754 
tdb_åavî£_lock
 *
é
)

2756 
TDB_DATA
 
key
, 
dbuf
;

2757 
li°_°ru˘
 
ªc
;

2758 
ªt
, 
cou¡
 = 0;

2763 
é
->
√xt
 = 
tdb
->
åavlocks
.next;

2766 
tdb
->
åavlocks
.
√xt
 = 
é
;

2769 (
ªt
 = 
	`tdb_√xt_lock
(
tdb
, 
é
, &
ªc
)) > 0) {

2770 
cou¡
++;

2772 
key
.
d±r
 = 
	`tdb_Æloc_ªad
(
tdb
, 
é
->
off
 + (
ªc
),

2773 
ªc
.
key_Àn
 +Ñec.
d©a_Àn
);

2774 i‡(!
key
.
d±r
) {

2775 
ªt
 = -1;

2776 i‡(
	`tdb_u∆ock
(
tdb
, 
é
->
hash
,Ål->
lock_rw
) != 0)

2777 
out
;

2778 i‡(
	`tdb_u∆ock_ªc‹d
(
tdb
, 
é
->
off
) != 0)

2779 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_traverse: key.dptr == NULLánd unlock_record failed!\n"));

2780 
out
;

2782 
key
.
dsize
 = 
ªc
.
key_Àn
;

2783 
dbuf
.
d±r
 = 
key
.d±∏+ 
ªc
.
key_Àn
;

2784 
dbuf
.
dsize
 = 
ªc
.
d©a_Àn
;

2787 i‡(
	`tdb_u∆ock
(
tdb
, 
é
->
hash
,Ål->
lock_rw
) != 0) {

2788 
ªt
 = -1;

2789 
	`SAFE_FREE
(
key
.
d±r
);

2790 
out
;

2792 i‡(
‚
 && 
	`‚
(
tdb
, 
key
, 
dbuf
, 
¥iv©e_d©a
)) {

2794 
ªt
 = 
cou¡
;

2795 i‡(
	`tdb_u∆ock_ªc‹d
(
tdb
, 
é
->
off
) != 0) {

2796 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_traverse: unlock_record failed!\n"));;

2797 
ªt
 = -1;

2799 
	`SAFE_FREE
(
key
.
d±r
);

2800 
out
;

2802 
	`SAFE_FREE
(
key
.
d±r
);

2804 
out
:

2805 
tdb
->
åavlocks
.
√xt
 = 
é
->next;

2806 i‡(
ªt
 < 0)

2809  
cou¡
;

2810 
	}
}

2816 
	$tdb_åavî£_ªad
(
tdb_c⁄ãxt
 *
tdb
,

2817 
tdb_åavî£_func
 
‚
, *
¥iv©e_d©a
)

2819 
tdb_åavî£_lock
 
é
 = { 
NULL
, 0, 0, 
F_RDLCK
 };

2820 
ªt
;

2824 i‡(
	`tdb_å™ß˘i⁄_lock
(
tdb
, 
F_RDLCK
)) {

2828 
tdb
->
åavî£_ªad
++;

2829 
ªt
 = 
	`tdb_åavî£_öã∫Æ
(
tdb
, 
‚
, 
¥iv©e_d©a
, &
é
);

2830 
tdb
->
åavî£_ªad
--;

2832 
	`tdb_å™ß˘i⁄_u∆ock
(
tdb
);

2834  
ªt
;

2835 
	}
}

2841 
	$tdb_åavî£
(
tdb_c⁄ãxt
 *
tdb
,

2842 
tdb_åavî£_func
 
‚
, *
¥iv©e_d©a
)

2844 
tdb_åavî£_lock
 
é
 = { 
NULL
, 0, 0, 
F_WRLCK
 };

2845 
ªt
;

2847 i‡(
tdb
->
ªad_⁄ly
 ||Ådb->
åavî£_ªad
) {

2848  
	`tdb_åavî£_ªad
(
tdb
, 
‚
, 
¥iv©e_d©a
);

2851 i‡(
	`tdb_å™ß˘i⁄_lock
(
tdb
, 
F_WRLCK
)) {

2855 
ªt
 = 
	`tdb_åavî£_öã∫Æ
(
tdb
, 
‚
, 
¥iv©e_d©a
, &
é
);

2857 
	`tdb_å™ß˘i⁄_u∆ock
(
tdb
);

2859  
ªt
;

2860 
	}
}

2864 
TDB_DATA
 
	$tdb_fú°key
(
tdb_c⁄ãxt
 *
tdb
)

2866 
TDB_DATA
 
key
;

2867 
li°_°ru˘
 
ªc
;

2870 i‡(
	`tdb_u∆ock_ªc‹d
(
tdb
,Ådb->
åavlocks
.
off
) != 0)

2871  
tdb_nuŒ
;

2872 
tdb
->
åavlocks
.
off
 =Ådb->åavlocks.
hash
 = 0;

2873 
tdb
->
åavlocks
.
lock_rw
 = 
F_RDLCK
;

2876 i‡(
	`tdb_√xt_lock
(
tdb
, &tdb->
åavlocks
, &
ªc
) <= 0)

2877  
tdb_nuŒ
;

2879 
key
.
dsize
 = 
ªc
.
key_Àn
;

2880 
key
.
d±r
 =
	`tdb_Æloc_ªad
(
tdb
,tdb->
åavlocks
.
off
+(
ªc
),key.
dsize
);

2883 i‡(
	`tdb_u∆ock
(
tdb
,Ådb->
åavlocks
.
hash
,Ådb->åavlocks.
lock_rw
) != 0)

2884 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_firstkey:Érror occurred whileÅdb_unlocking!\n"));

2885  
key
;

2886 
	}
}

2889 
TDB_DATA
 
	$tdb_√xtkey
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
ﬁdkey
)

2891 
u32
 
ﬁdhash
;

2892 
TDB_DATA
 
key
 = 
tdb_nuŒ
;

2893 
li°_°ru˘
 
ªc
;

2894 *
k
 = 
NULL
;

2897 i‡(
tdb
->
åavlocks
.
off
) {

2898 i‡(
	`tdb_lock
(
tdb
,tdb->
åavlocks
.
hash
,tdb->åavlocks.
lock_rw
))

2899  
tdb_nuŒ
;

2900 i‡(
	`tdb_ªc_ªad
(
tdb
,Ådb->
åavlocks
.
off
, &
ªc
) == -1

2901 || !(
k
 = 
	`tdb_Æloc_ªad
(
tdb
,tdb->
åavlocks
.
off
+(
ªc
),

2902 
ªc
.
key_Àn
))

2903 || 
	`memcmp
(
k
, 
ﬁdkey
.
d±r
, oldkey.
dsize
) != 0) {

2905 i‡(
	`tdb_u∆ock_ªc‹d
(
tdb
,Ådb->
åavlocks
.
off
) != 0) {

2906 
	`SAFE_FREE
(
k
);

2907  
tdb_nuŒ
;

2909 i‡(
	`tdb_u∆ock
(
tdb
,Ådb->
åavlocks
.
hash
,Ådb->åavlocks.
lock_rw
) != 0) {

2910 
	`SAFE_FREE
(
k
);

2911  
tdb_nuŒ
;

2913 
tdb
->
åavlocks
.
off
 = 0;

2916 
	`SAFE_FREE
(
k
);

2919 i‡(!
tdb
->
åavlocks
.
off
) {

2921 
tdb
->
åavlocks
.
off
 = 
	`tdb_föd_lock_hash
—db, 
ﬁdkey
,Ådb->
	`hash_‚
(&ﬁdkey),Ådb->åavlocks.
lock_rw
, &
ªc
);

2922 i‡(!
tdb
->
åavlocks
.
off
)

2923  
tdb_nuŒ
;

2924 
tdb
->
åavlocks
.
hash
 = 
	`BUCKET
(
ªc
.
fuŒ_hash
);

2925 i‡(
	`tdb_lock_ªc‹d
(
tdb
,Ådb->
åavlocks
.
off
) != 0) {

2926 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_√xtkey:Üock_ªc‹d faûed (%s)!\n", 
	`°ªº‹
(
î∫o
)));

2927  
tdb_nuŒ
;

2930 
ﬁdhash
 = 
tdb
->
åavlocks
.
hash
;

2934 i‡(
	`tdb_√xt_lock
(
tdb
, &tdb->
åavlocks
, &
ªc
) > 0) {

2935 
key
.
dsize
 = 
ªc
.
key_Àn
;

2936 
key
.
d±r
 = 
	`tdb_Æloc_ªad
(
tdb
,Ådb->
åavlocks
.
off
+(
ªc
),

2937 
key
.
dsize
);

2939 i‡(
	`tdb_u∆ock
(
tdb
,Ådb->
åavlocks
.
hash
,Ådb->åavlocks.
lock_rw
) != 0)

2940 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_nextkey: WARNINGÅdb_unlock failed!\n"));

2943 i‡(
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
ﬁdhash
),Ådb->
åavlocks
.
lock_rw
) != 0)

2944 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_nextkey: WARNINGÅdb_unlock failed!\n"));

2945  
key
;

2946 
	}
}

2950 
tdb_off_t
 
	$tdb_dump_ªc‹d
(
tdb_c⁄ãxt
 *
tdb
, 
hash
,

2951 
tdb_off_t
 
off£t
)

2953 
li°_°ru˘
 
ªc
;

2954 
tdb_off_t
 
èûî_ofs
, 
èûî
;

2956 i‡(
tdb
->
mëhods
->
	`tdb_ªad
—db, 
off£t
, (*)&
ªc
,

2957 (
ªc
), 
	`DOCONV
()) == -1) {

2958 
	`¥ötf
("ERROR: faûedÅÿªadÑec‹dáà%u\n", 
off£t
);

2962 
	`¥ötf
("Ñec: hash=%d offset=0x%08xÇext=0x%08xÑec_len=%d "

2964 
hash
, 
off£t
, 
ªc
.
√xt
,Ñec.
ªc_Àn
,Ñec.
key_Àn
,Ñec.
d©a_Àn
,

2965 
ªc
.
fuŒ_hash
,Ñec.
magic
);

2967 
èûî_ofs
 = 
off£t
 + (
ªc
Ë+Ñec.
ªc_Àn
 - (
tdb_off_t
);

2969 i‡(
	`tdb_ofs_ªad
(
tdb
, 
èûî_ofs
, &
èûî
) == -1) {

2970 
	`¥ötf
("ERROR: faûedÅÿªadÅaûîáà%u\n", 
èûî_ofs
);

2971  
ªc
.
√xt
;

2974 i‡(
èûî
 !
ªc
.
ªc_Àn
 + (rec)) {

2975 
	`¥ötf
("ERROR:Åailer doesÇot matchÑecord!Åailer=%uÅotalsize=%u\n",

2976 ()
èûî
, ()(
ªc
.
ªc_Àn
 + (rec)));

2978  
ªc
.
√xt
;

2979 
	}
}

2981 
	$tdb_dump_chaö
(
tdb_c⁄ãxt
 *
tdb
, 
i
)

2983 
tdb_off_t
 
ªc_±r
, 
t›
;

2985 
t›
 = 
	`TDB_HASH_TOP
(
i
);

2987 i‡(
	`tdb_lock
(
tdb
, 
i
, 
F_WRLCK
) != 0)

2990 i‡(
	`tdb_ofs_ªad
(
tdb
, 
t›
, &
ªc_±r
) == -1)

2991  
	`tdb_u∆ock
(
tdb
, 
i
, 
F_WRLCK
);

2993 i‡(
ªc_±r
)

2994 
	`¥ötf
("hash=%d\n", 
i
);

2996 
ªc_±r
) {

2997 
ªc_±r
 = 
	`tdb_dump_ªc‹d
(
tdb
, 
i
,Ñec_ptr);

3000  
	`tdb_u∆ock
(
tdb
, 
i
, 
F_WRLCK
);

3001 
	}
}

3003 
	$tdb_dump_Æl
(
tdb_c⁄ãxt
 *
tdb
)

3005 
i
;

3006 
i
=0;i<
tdb
->
hódî
.
hash_size
;i++) {

3007 
	`tdb_dump_chaö
(
tdb
, 
i
);

3009 
	`¥ötf
("freelist:\n");

3010 
	`tdb_dump_chaö
(
tdb
, -1);

3011 
	}
}

3013 
	$tdb_¥öt‰ìli°
(
tdb_c⁄ãxt
 *
tdb
)

3015 
ªt
;

3016 
tŸÆ_‰ì
 = 0;

3017 
tdb_off_t
 
off£t
, 
ªc_±r
;

3018 
li°_°ru˘
 
ªc
;

3020 i‡((
ªt
 = 
	`tdb_lock
(
tdb
, -1, 
F_WRLCK
)) != 0)

3021  
ªt
;

3023 
off£t
 = 
FREELIST_TOP
;

3026 i‡(
	`tdb_ofs_ªad
(
tdb
, 
off£t
, &
ªc_±r
) == -1) {

3027 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

3031 
	`¥ötf
("‰ìli°Å›=[0x%08x]\n", 
ªc_±r
 );

3032 
ªc_±r
) {

3033 i‡(
tdb
->
mëhods
->
	`tdb_ªad
—db, 
ªc_±r
, (*)&
ªc
,

3034 (
ªc
), 
	`DOCONV
()) == -1) {

3035 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

3039 i‡(
ªc
.
magic
 !
TDB_FREE_MAGIC
) {

3040 
	`¥ötf
("bad magi¯0x%08x i¿‰ìÜi°\n", 
ªc
.
magic
);

3041 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

3045 
	`¥ötf
("entry offset=[0x%08x],Ñec.rec_len = [0x%08x (%d)] (end = 0x%08x)\n",

3046 
ªc_±r
, 
ªc
.
ªc_Àn
,Ñec.rec_len,Ñec_ptr +Ñec.rec_len);

3047 
tŸÆ_‰ì
 +
ªc
.
ªc_Àn
;

3050 
ªc_±r
 = 
ªc
.
√xt
;

3052 
	`¥ötf
("tŸÆÑec_À¿[0x%08x (%d)]\n", ()
tŸÆ_‰ì
,

3053 ()
tŸÆ_‰ì
);

3055  
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

3056 
	}
}

3060 
TDB_DATA
 
	gtdb_nuŒ
;

3066 
	$tdb_ö¸emít_£qnum_n⁄block
(
tdb_c⁄ãxt
 *
tdb
)

3068 
tdb_off_t
 
£qnum
=0;

3070 i‡(!(
tdb
->
Êags
 & 
TDB_SEQNUM
)) {

3077 
	`tdb_ofs_ªad
(
tdb
, 
TDB_SEQNUM_OFS
, &
£qnum
);

3078 
£qnum
++;

3079 
	`tdb_ofs_wrôe
(
tdb
, 
TDB_SEQNUM_OFS
, &
£qnum
);

3080 
	}
}

3086 
	$tdb_ö¸emít_£qnum
(
tdb_c⁄ãxt
 *
tdb
)

3088 i‡(!(
tdb
->
Êags
 & 
TDB_SEQNUM
)) {

3092 i‡(
	`tdb_bæock
(
tdb
, 
TDB_SEQNUM_OFS
, 
F_WRLCK
, 
F_SETLKW
, 1, 1) != 0) {

3096 
	`tdb_ö¸emít_£qnum_n⁄block
(
tdb
);

3098 
	`tdb_bæock
(
tdb
, 
TDB_SEQNUM_OFS
, 
F_UNLCK
, 
F_SETLKW
, 1, 1);

3099 
	}
}

3101 
	$tdb_key_com∑ª
(
TDB_DATA
 
key
, TDB_DATA 
d©a
, *
¥iv©e_d©a
)

3103  
	`memcmp
(
d©a
.
d±r
, 
key
.d±r, d©a.
dsize
);

3104 
	}
}

3108 
tdb_off_t
 
	$tdb_föd
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, 
u32
 
hash
,

3109 
li°_°ru˘
 *
r
)

3111 
tdb_off_t
 
ªc_±r
;

3114 i‡(
	`tdb_ofs_ªad
(
tdb
, 
	`TDB_HASH_TOP
(
hash
), &
ªc_±r
) == -1)

3118 
ªc_±r
) {

3119 i‡(
	`tdb_ªc_ªad
(
tdb
, 
ªc_±r
, 
r
) == -1)

3122 i‡(!
	`TDB_DEAD
(
r
Ë&& 
hash
=Ù->
fuŒ_hash


3123 && 
key
.
dsize
==
r
->
key_Àn


3124 && 
	`tdb_∑r£_d©a
(
tdb
, 
key
, 
ªc_±r
 + (*
r
),

3125 
r
->
key_Àn
, 
tdb_key_com∑ª
,

3126 
NULL
) == 0) {

3127  
ªc_±r
;

3129 
ªc_±r
 = 
r
->
√xt
;

3131  
	`TDB_ERRCODE
(
TDB_ERR_NOEXIST
, 0);

3132 
	}
}

3135 
tdb_off_t
 
	$tdb_föd_lock_hash
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, 
u32
 
hash
, 
lockty≥
,

3136 
li°_°ru˘
 *
ªc
)

3138 
u32
 
ªc_±r
;

3140 i‡(
	`tdb_lock
(
tdb
, 
	`BUCKET
(
hash
), 
lockty≥
) == -1)

3142 i‡(!(
ªc_±r
 = 
	`tdb_föd
(
tdb
, 
key
, 
hash
, 
ªc
)))

3143 
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
hash
), 
lockty≥
);

3144  
ªc_±r
;

3145 
	}
}

3152 
	$tdb_upd©e_hash
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, 
u32
 
hash
, TDB_DATA 
dbuf
)

3154 
li°_°ru˘
 
ªc
;

3155 
tdb_off_t
 
ªc_±r
;

3158 i‡(!(
ªc_±r
 = 
	`tdb_föd
(
tdb
, 
key
, 
hash
, &
ªc
)))

3162 i‡(
ªc
.
ªc_Àn
 < 
key
.
dsize
 + 
dbuf
.dsizê+ (
tdb_off_t
)) {

3163 
tdb
->
ecode
 = 
TDB_SUCCESS
;

3167 i‡(
tdb
->
mëhods
->
	`tdb_wrôe
—db, 
ªc_±r
 + (
ªc
Ë+Ñec.
key_Àn
,

3168 
dbuf
.
d±r
, dbuf.
dsize
) == -1)

3171 i‡(
dbuf
.
dsize
 !
ªc
.
d©a_Àn
) {

3173 
ªc
.
d©a_Àn
 = 
dbuf
.
dsize
;

3174  
	`tdb_ªc_wrôe
(
tdb
, 
ªc_±r
, &
ªc
);

3178 
	}
}

3186 
TDB_DATA
 
	$tdb_„tch
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
)

3188 
tdb_off_t
 
ªc_±r
;

3189 
li°_°ru˘
 
ªc
;

3190 
TDB_DATA
 
ªt
;

3191 
u32
 
hash
;

3194 
hash
 = 
tdb
->
	`hash_‚
(&
key
);

3195 i‡(!(
ªc_±r
 = 
	`tdb_föd_lock_hash
(
tdb
,
key
,
hash
,
F_RDLCK
,&
ªc
)))

3196  
tdb_nuŒ
;

3198 
ªt
.
d±r
 = 
	`tdb_Æloc_ªad
(
tdb
, 
ªc_±r
 + (
ªc
Ë+Ñec.
key_Àn
,

3199 
ªc
.
d©a_Àn
);

3200 
ªt
.
dsize
 = 
ªc
.
d©a_Àn
;

3201 
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
ªc
.
fuŒ_hash
), 
F_RDLCK
);

3202  
ªt
;

3203 
	}
}

3221 
tdb_∑r£_ªc‹d
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
,

3222 (*
∑r£r
)(
TDB_DATA
 
key
, TDB_DATA 
d©a
,

3223 *
¥iv©e_d©a
),

3224 *
¥iv©e_d©a
)

3226 
tdb_off_t
 
ªc_±r
;

3227 
li°_°ru˘
 
ªc
;

3228 
ªt
;

3229 
u32
 
hash
;

3232 
hash
 = 
tdb
->
	`hash_‚
(&
key
);

3234 i‡(!(
ªc_±r
 = 
	`tdb_föd_lock_hash
(
tdb
,
key
,
hash
,
F_RDLCK
,&
ªc
))) {

3235  
	`TDB_ERRCODE
(
TDB_ERR_NOEXIST
, 0);

3238 
ªt
 = 
	`tdb_∑r£_d©a
(
tdb
, 
key
, 
ªc_±r
 + (
ªc
Ë+Ñec.
key_Àn
,

3239 
ªc
.
d©a_Àn
, 
∑r£r
, 
¥iv©e_d©a
);

3241 
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
ªc
.
fuŒ_hash
), 
F_RDLCK
);

3243  
ªt
;

3244 
	}
}

3252 
	$tdb_exi°s_hash
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, 
u32
 
hash
)

3254 
li°_°ru˘
 
ªc
;

3256 i‡(
	`tdb_föd_lock_hash
(
tdb
, 
key
, 
hash
, 
F_RDLCK
, &
ªc
) == 0)

3258 
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
ªc
.
fuŒ_hash
), 
F_RDLCK
);

3260 
	}
}

3262 
	$tdb_exi°s
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
)

3264 
u32
 
hash
 = 
tdb
->
	`hash_‚
(&
key
);

3265  
	`tdb_exi°s_hash
(
tdb
, 
key
, 
hash
);

3266 
	}
}

3269 
	$tdb_do_dñëe
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_off_t
 
ªc_±r
, 
li°_°ru˘
*
ªc
)

3271 
tdb_off_t
 
œ°_±r
, 
i
;

3272 
li°_°ru˘
 
œ°ªc
;

3274 i‡(
tdb
->
ªad_⁄ly
 ||Ådb->
åavî£_ªad
)  -1;

3276 i‡(
	`tdb_wrôe_lock_ªc‹d
(
tdb
, 
ªc_±r
) == -1) {

3278 
ªc
->
magic
 = 
TDB_DEAD_MAGIC
;

3279  
	`tdb_ªc_wrôe
(
tdb
, 
ªc_±r
, 
ªc
);

3281 i‡(
	`tdb_wrôe_u∆ock_ªc‹d
(
tdb
, 
ªc_±r
) != 0)

3285 i‡(
	`tdb_ofs_ªad
(
tdb
, 
	`TDB_HASH_TOP
(
ªc
->
fuŒ_hash
), &
i
) == -1)

3287 
œ°_±r
 = 0; 
i
 !
ªc_±r
;Üa°_±∏i, i = 
œ°ªc
.
√xt
)

3288 i‡(
	`tdb_ªc_ªad
(
tdb
, 
i
, &
œ°ªc
) == -1)

3292 i‡(
œ°_±r
 == 0)

3293 
œ°_±r
 = 
	`TDB_HASH_TOP
(
ªc
->
fuŒ_hash
);

3294 i‡(
	`tdb_ofs_wrôe
(
tdb
, 
œ°_±r
, &
ªc
->
√xt
) == -1)

3298 i‡(
	`tdb_‰ì
(
tdb
, 
ªc_±r
, 
ªc
) == -1)

3301 
	}
}

3303 
	$tdb_cou¡_dód
(
tdb_c⁄ãxt
 *
tdb
, 
u32
 
hash
)

3305 
ªs
 = 0;

3306 
tdb_off_t
 
ªc_±r
;

3307 
li°_°ru˘
 
ªc
;

3310 i‡(
	`tdb_ofs_ªad
(
tdb
, 
	`TDB_HASH_TOP
(
hash
), &
ªc_±r
) == -1)

3313 
ªc_±r
) {

3314 i‡(
	`tdb_ªc_ªad
(
tdb
, 
ªc_±r
, &
ªc
) == -1)

3317 i‡(
ªc
.
magic
 =
TDB_DEAD_MAGIC
) {

3318 
ªs
 += 1;

3320 
ªc_±r
 = 
ªc
.
√xt
;

3322  
ªs
;

3323 
	}
}

3328 
	$tdb_purge_dód
(
tdb_c⁄ãxt
 *
tdb
, 
u32
 
hash
)

3330 
ªs
 = -1;

3331 
li°_°ru˘
 
ªc
;

3332 
tdb_off_t
 
ªc_±r
;

3334 i‡(
	`tdb_lock
(
tdb
, -1, 
F_WRLCK
) == -1) {

3339 i‡(
	`tdb_ofs_ªad
(
tdb
, 
	`TDB_HASH_TOP
(
hash
), &
ªc_±r
) == -1)

3340 
Áû
;

3342 
ªc_±r
) {

3343 
tdb_off_t
 
√xt
;

3345 i‡(
	`tdb_ªc_ªad
(
tdb
, 
ªc_±r
, &
ªc
) == -1) {

3346 
Áû
;

3349 
√xt
 = 
ªc
.next;

3351 i‡(
ªc
.
magic
 =
TDB_DEAD_MAGIC


3352 && 
	`tdb_do_dñëe
(
tdb
, 
ªc_±r
, &
ªc
) == -1) {

3353 
Áû
;

3355 
ªc_±r
 = 
√xt
;

3357 
ªs
 = 0;

3358 
Áû
:

3359 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

3360  
ªs
;

3361 
	}
}

3364 
	$tdb_dñëe_hash
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, 
u32
 
hash
)

3366 
tdb_off_t
 
ªc_±r
;

3367 
li°_°ru˘
 
ªc
;

3368 
ªt
;

3370 i‡(
tdb
->
max_dód_ªc‹ds
 != 0) {

3377 i‡(
	`tdb_lock
(
tdb
, 
	`BUCKET
(
hash
), 
F_WRLCK
) == -1)

3380 i‡(
	`tdb_cou¡_dód
(
tdb
, 
hash
Ë>tdb->
max_dód_ªc‹ds
) {

3385 
	`tdb_purge_dód
(
tdb
, 
hash
);

3388 i‡(!(
ªc_±r
 = 
	`tdb_föd
(
tdb
, 
key
, 
hash
, &
ªc
))) {

3389 
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
hash
), 
F_WRLCK
);

3396 
ªc
.
magic
 = 
TDB_DEAD_MAGIC
;

3397 
ªt
 = 
	`tdb_ªc_wrôe
(
tdb
, 
ªc_±r
, &
ªc
);

3400 i‡(!(
ªc_±r
 = 
	`tdb_föd_lock_hash
(
tdb
, 
key
, 
hash
, 
F_WRLCK
,

3401 &
ªc
)))

3404 
ªt
 = 
	`tdb_do_dñëe
(
tdb
, 
ªc_±r
, &
ªc
);

3407 i‡(
ªt
 == 0) {

3408 
	`tdb_ö¸emít_£qnum
(
tdb
);

3411 i‡(
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
ªc
.
fuŒ_hash
), 
F_WRLCK
) != 0)

3412 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_WARNING
, "tdb_delete: WARNINGÅdb_unlock failed!\n"));

3413  
ªt
;

3414 
	}
}

3416 
	$tdb_dñëe
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
)

3418 
u32
 
hash
 = 
tdb
->
	`hash_‚
(&
key
);

3419  
	`tdb_dñëe_hash
(
tdb
, 
key
, 
hash
);

3420 
	}
}

3425 
tdb_off_t
 
	$tdb_föd_dód
(
tdb_c⁄ãxt
 *
tdb
, 
u32
 
hash
,

3426 
li°_°ru˘
 *
r
, 
tdb_Àn_t
 
Àngth
)

3428 
tdb_off_t
 
ªc_±r
;

3431 i‡(
	`tdb_ofs_ªad
(
tdb
, 
	`TDB_HASH_TOP
(
hash
), &
ªc_±r
) == -1)

3435 
ªc_±r
) {

3436 i‡(
	`tdb_ªc_ªad
(
tdb
, 
ªc_±r
, 
r
) == -1)

3439 i‡(
	`TDB_DEAD
(
r
Ë&&Ñ->
ªc_Àn
 >
Àngth
) {

3444  
ªc_±r
;

3446 
ªc_±r
 = 
r
->
√xt
;

3449 
	}
}

3456 
	$tdb_°‹e
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, TDB_DATA 
dbuf
, 
Êag
)

3458 
li°_°ru˘
 
ªc
;

3459 
u32
 
hash
;

3460 
tdb_off_t
 
ªc_±r
;

3461 *
p
 = 
NULL
;

3462 
ªt
 = -1;

3464 i‡(
tdb
->
ªad_⁄ly
 ||Ådb->
åavî£_ªad
) {

3465 
tdb
->
ecode
 = 
TDB_ERR_RDONLY
;

3470 
hash
 = 
tdb
->
	`hash_‚
(&
key
);

3471 i‡(
	`tdb_lock
(
tdb
, 
	`BUCKET
(
hash
), 
F_WRLCK
) == -1)

3475 i‡(
Êag
 =
TDB_INSERT
) {

3476 i‡(
	`tdb_exi°s_hash
(
tdb
, 
key
, 
hash
)) {

3477 
tdb
->
ecode
 = 
TDB_ERR_EXISTS
;

3478 
Áû
;

3482 i‡(
	`tdb_upd©e_hash
(
tdb
, 
key
, 
hash
, 
dbuf
) == 0) {

3483 
d⁄e
;

3485 i‡(
tdb
->
ecode
 =
TDB_ERR_NOEXIST
 &&

3486 
Êag
 =
TDB_MODIFY
) {

3489 
Áû
;

3493 
tdb
->
ecode
 = 
TDB_SUCCESS
;

3498 i‡(
Êag
 !
TDB_INSERT
)

3499 
	`tdb_dñëe_hash
(
tdb
, 
key
, 
hash
);

3504 i‡(!(
p
 = (*)
	`mÆloc
(
key
.
dsize
 + 
dbuf
.dsize))) {

3505 
tdb
->
ecode
 = 
TDB_ERR_OOM
;

3506 
Áû
;

3509 
	`mem˝y
(
p
, 
key
.
d±r
, key.
dsize
);

3510 i‡(
dbuf
.
dsize
)

3511 
	`mem˝y
(
p
+
key
.
dsize
, 
dbuf
.
d±r
, dbuf.dsize);

3513 i‡(
tdb
->
max_dód_ªc‹ds
 != 0) {

3520 
ªc_±r
 = 
	`tdb_föd_dód
(

3521 
tdb
, 
hash
, &
ªc
,

3522 
key
.
dsize
 + 
dbuf
.dsizê+ (
tdb_off_t
));

3524 i‡(
ªc_±r
 != 0) {

3525 
ªc
.
key_Àn
 = 
key
.
dsize
;

3526 
ªc
.
d©a_Àn
 = 
dbuf
.
dsize
;

3527 
ªc
.
fuŒ_hash
 = 
hash
;

3528 
ªc
.
magic
 = 
TDB_MAGIC
;

3529 i‡(
	`tdb_ªc_wrôe
(
tdb
, 
ªc_±r
, &
ªc
) == -1

3530 || 
tdb
->
mëhods
->
	`tdb_wrôe
(

3531 
tdb
, 
ªc_±r
 + (
ªc
),

3532 
p
, 
key
.
dsize
 + 
dbuf
.dsize) == -1) {

3533 
Áû
;

3535 
d⁄e
;

3545 i‡(
	`tdb_lock
(
tdb
, -1, 
F_WRLCK
) == -1) {

3546 
Áû
;

3549 i‡((
tdb
->
max_dód_ªc‹ds
 != 0)

3550 && (
	`tdb_purge_dód
(
tdb
, 
hash
) == -1)) {

3551 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

3552 
Áû
;

3556 
ªc_±r
 = 
	`tdb_Æloˇã
(
tdb
, 
key
.
dsize
 + 
dbuf
.dsize, &
ªc
);

3558 
	`tdb_u∆ock
(
tdb
, -1, 
F_WRLCK
);

3560 i‡(
ªc_±r
 == 0) {

3561 
Áû
;

3565 i‡(
	`tdb_ofs_ªad
(
tdb
, 
	`TDB_HASH_TOP
(
hash
), &
ªc
.
√xt
) == -1)

3566 
Áû
;

3568 
ªc
.
key_Àn
 = 
key
.
dsize
;

3569 
ªc
.
d©a_Àn
 = 
dbuf
.
dsize
;

3570 
ªc
.
fuŒ_hash
 = 
hash
;

3571 
ªc
.
magic
 = 
TDB_MAGIC
;

3574 i‡(
	`tdb_ªc_wrôe
(
tdb
, 
ªc_±r
, &
ªc
) == -1

3575 || 
tdb
->
mëhods
->
	`tdb_wrôe
—db, 
ªc_±r
+(
ªc
), 
p
, 
key
.
dsize
+
dbuf
.dsize)==-1

3576 || 
	`tdb_ofs_wrôe
(
tdb
, 
	`TDB_HASH_TOP
(
hash
), &
ªc_±r
) == -1) {

3578 
Áû
;

3581 
d⁄e
:

3582 
ªt
 = 0;

3583 
Áû
:

3584 i‡(
ªt
 == 0) {

3585 
	`tdb_ö¸emít_£qnum
(
tdb
);

3588 
	`SAFE_FREE
(
p
);

3589 
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
hash
), 
F_WRLCK
);

3590  
ªt
;

3591 
	}
}

3595 
	$tdb_≠≥nd
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, TDB_DATA 
√w_dbuf
)

3597 
u32
 
hash
;

3598 
TDB_DATA
 
dbuf
;

3599 
ªt
 = -1;

3602 
hash
 = 
tdb
->
	`hash_‚
(&
key
);

3603 i‡(
	`tdb_lock
(
tdb
, 
	`BUCKET
(
hash
), 
F_WRLCK
) == -1)

3606 
dbuf
 = 
	`tdb_„tch
(
tdb
, 
key
);

3608 i‡(
dbuf
.
d±r
 =
NULL
) {

3609 
dbuf
.
d±r
 = (*)
	`mÆloc
(
√w_dbuf
.
dsize
);

3611 *
√w_d±r
 = (*)
	`ªÆloc
(
dbuf
.
d±r
,

3612 
dbuf
.
dsize
 + 
√w_dbuf
.dsize);

3613 i‡(
√w_d±r
 =
NULL
) {

3614 
	`‰ì
(
dbuf
.
d±r
);

3616 
dbuf
.
d±r
 = 
√w_d±r
;

3619 i‡(
dbuf
.
d±r
 =
NULL
) {

3620 
tdb
->
ecode
 = 
TDB_ERR_OOM
;

3621 
Áûed
;

3624 
	`mem˝y
(
dbuf
.
d±r
 + dbuf.
dsize
, 
√w_dbuf
.dptr,Çew_dbuf.dsize);

3625 
dbuf
.
dsize
 +
√w_dbuf
.dsize;

3627 
ªt
 = 
	`tdb_°‹e
(
tdb
, 
key
, 
dbuf
, 0);

3629 
Áûed
:

3630 
	`tdb_u∆ock
(
tdb
, 
	`BUCKET
(
hash
), 
F_WRLCK
);

3631 
	`SAFE_FREE
(
dbuf
.
d±r
);

3632  
ªt
;

3633 
	}
}

3640 c⁄° *
	$tdb_«me
(
tdb_c⁄ãxt
 *
tdb
)

3642  
tdb
->
«me
;

3643 
	}
}

3650 
	$tdb_fd
(
tdb_c⁄ãxt
 *
tdb
)

3652  
tdb
->
fd
;

3653 
	}
}

3659 
tdb_log_func
 
	$tdb_log_‚
(
tdb_c⁄ãxt
 *
tdb
)

3661  
tdb
->
log
.
log_‚
;

3662 
	}
}

3675 
	$tdb_gë_£qnum
(
tdb_c⁄ãxt
 *
tdb
)

3677 
tdb_off_t
 
£qnum
=0;

3679 
	`tdb_ofs_ªad
(
tdb
, 
TDB_SEQNUM_OFS
, &
£qnum
);

3680  
£qnum
;

3681 
	}
}

3683 
	$tdb_hash_size
(
tdb_c⁄ãxt
 *
tdb
)

3685  
tdb
->
hódî
.
hash_size
;

3686 
	}
}

3688 
size_t
 
	$tdb_m≠_size
(
tdb_c⁄ãxt
 *
tdb
)

3690  
tdb
->
m≠_size
;

3691 
	}
}

3693 
	$tdb_gë_Êags
(
tdb_c⁄ãxt
 *
tdb
)

3695  
tdb
->
Êags
;

3696 
	}
}

3702 
	$tdb_íabÀ_£qnum
(
tdb_c⁄ãxt
 *
tdb
)

3704 
tdb
->
Êags
 |
TDB_SEQNUM
;

3705 
	}
}

3710 
tdb_c⁄ãxt
 *
	gtdbs
 = 
NULL
;

3714 
	$deÁu…_tdb_hash
(
TDB_DATA
 *
key
)

3716 
u32
 
vÆue
;

3717 
u32
 
i
;

3720 
vÆue
 = 0x238F13AF * 
key
->
dsize
, 
i
=0; i < key->dsize; i++)

3721 
vÆue
 = (vÆuê+ (
key
->
d±r
[
i
] << (i*5 % 24)));

3723  (1103515243 * 
vÆue
 + 12345);

3724 
	}
}

3728 
	$tdb_√w_d©aba£
(
tdb_c⁄ãxt
 *
tdb
, 
hash_size
)

3730 
tdb_hódî
 *
√wdb
;

3731 
size
, 
ªt
 = -1;

3734 
size
 = (
tdb_hódî
Ë+ (
hash_size
+1)*(
tdb_off_t
);

3735 i‡(!(
√wdb
 = (
tdb_hódî
 *)
	`ˇŒoc
(
size
, 1)))

3736  
	`TDB_ERRCODE
(
TDB_ERR_OOM
, -1);

3739 
√wdb
->
vîsi⁄
 = 
TDB_VERSION
;

3740 
√wdb
->
hash_size
 = hash_size;

3741 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
) {

3742 
tdb
->
m≠_size
 = 
size
;

3743 
tdb
->
m≠_±r
 = (*)
√wdb
;

3744 
	`mem˝y
(&
tdb
->
hódî
, 
√wdb
, (tdb->header));

3746 
	`CONVERT
(*
√wdb
);

3749 i‡(
	`l£ek
(
tdb
->
fd
, 0, 
SEEK_SET
) == -1)

3750 
Áû
;

3752 i‡(
	`·runˇã
(
tdb
->
fd
, 0) == -1)

3753 
Áû
;

3756 
	`CONVERT
(*
√wdb
);

3757 
	`mem˝y
(&
tdb
->
hódî
, 
√wdb
, (tdb->header));

3759 
	`mem˝y
(
√wdb
->
magic_food
, 
TDB_MAGIC_FOOD
, 
	`°æí
(TDB_MAGIC_FOOD)+1);

3760 i‡(
	`wrôe
(
tdb
->
fd
, 
√wdb
, 
size
) != size) {

3761 
ªt
 = -1;

3763 
ªt
 = 0;

3766 
Áû
:

3767 
	`SAFE_FREE
(
√wdb
);

3768  
ªt
;

3769 
	}
}

3773 
	$tdb_Æªady_›í
(
dev_t
 
devi˚
,

3774 
öo_t
 
öo
)

3776 
tdb_c⁄ãxt
 *
i
;

3778 
i
 = 
tdbs
; i; i = i->
√xt
) {

3779 i‡(
i
->
devi˚
 =devi˚ && i->
öode
 =
öo
) {

3785 
	}
}

3797 
tdb_c⁄ãxt
 *
	$tdb_›í
(c⁄° *
«me
, 
hash_size
, 
tdb_Êags
,

3798 
›í_Êags
, 
mode_t
 
mode
)

3800  
	`tdb_›í_ex
(
«me
, 
hash_size
, 
tdb_Êags
, 
›í_Êags
, 
mode
, 
NULL
, NULL);

3801 
	}
}

3804 
	$nuŒ_log_‚
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_debug_Àvñ
 
Àvñ
, c⁄° *
fmt
, ...Ë
	`PRINTF_ATTRIBUTE
(3, 4);

3805 
	$nuŒ_log_‚
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_debug_Àvñ
 
Àvñ
, c⁄° *
fmt
, ...)

3807 
	}
}

3810 
tdb_c⁄ãxt
 *
	$tdb_›í_ex
(c⁄° *
«me
, 
hash_size
, 
tdb_Êags
,

3811 
›í_Êags
, 
mode_t
 
mode
,

3812 c⁄° 
tdb_loggög_c⁄ãxt
 *
log_˘x
,

3813 
tdb_hash_func
 
hash_‚
)

3815 
tdb_c⁄ãxt
 *
tdb
;

3816 
°©
 
°
;

3817 
ªv
 = 0, 
locked
 = 0;

3818 *
vp
;

3819 
u32
 
vîã°
;

3821 i‡(!(
tdb
 = (
tdb_c⁄ãxt
 *)
	`ˇŒoc
(1,  *tdb))) {

3823 
î∫o
 = 
ENOMEM
;

3824 
Áû
;

3826 
	`tdb_io_öô
(
tdb
);

3827 
tdb
->
fd
 = -1;

3828 
tdb
->
«me
 = 
NULL
;

3829 
tdb
->
m≠_±r
 = 
NULL
;

3830 
tdb
->
Êags
 = 
tdb_Êags
;

3831 
tdb
->
›í_Êags
 = open_flags;

3832 i‡(
log_˘x
) {

3833 
tdb
->
log
 = *
log_˘x
;

3835 
tdb
->
log
.
log_‚
 = 
nuŒ_log_‚
;

3836 
tdb
->
log
.
log_¥iv©e
 = 
NULL
;

3838 
tdb
->
hash_‚
 = hash_‚ ? hash_‚ : 
deÁu…_tdb_hash
;

3841 
tdb
->
∑ge_size
 = 
	`gë∑gesize
();

3842 i‡(
tdb
->
∑ge_size
 <= 0) {

3843 
tdb
->
∑ge_size
 = 0x2000;

3846 i‡((
›í_Êags
 & 
O_ACCMODE
Ë=
O_WRONLY
) {

3847 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_open_ex: can't openÅdb %s write-only\n",

3848 
«me
));

3849 
î∫o
 = 
EINVAL
;

3850 
Áû
;

3853 i‡(
hash_size
 == 0)

3854 
hash_size
 = 
DEFAULT_HASH_SIZE
;

3855 i‡((
›í_Êags
 & 
O_ACCMODE
Ë=
O_RDONLY
) {

3856 
tdb
->
ªad_⁄ly
 = 1;

3858 
tdb
->
Êags
 |
TDB_NOLOCK
;

3859 
tdb
->
Êags
 &~
TDB_CLEAR_IF_FIRST
;

3863 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
) {

3864 
tdb
->
Êags
 |(
TDB_NOLOCK
 | 
TDB_NOMMAP
);

3865 
tdb
->
Êags
 &~
TDB_CLEAR_IF_FIRST
;

3866 i‡(
	`tdb_√w_d©aba£
(
tdb
, 
hash_size
) != 0) {

3867 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_open_ex:Ådb_new_database failed!"));

3868 
Áû
;

3870 
öã∫Æ
;

3873 i‡((
tdb
->
fd
 = 
	`›í
(
«me
, 
›í_Êags
, 
mode
)) == -1) {

3874 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_WARNING
, "tdb_open_ex: couldÇot open file %s: %s\n",

3875 
«me
, 
	`°ªº‹
(
î∫o
)));

3876 
Áû
;

3880 i‡(
tdb
->
mëhods
->
	`tdb_bæock
—db, 
GLOBAL_LOCK
, 
F_WRLCK
, 
F_SETLKW
, 0, 1) == -1) {

3881 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_open_ex: failedÅo get globalÜock on %s: %s\n",

3882 
«me
, 
	`°ªº‹
(
î∫o
)));

3883 
Áû
;

3887 i‡((
tdb_Êags
 & 
TDB_CLEAR_IF_FIRST
) &&

3888 (
locked
 = (
tdb
->
mëhods
->
	`tdb_bæock
—db, 
ACTIVE_LOCK
, 
F_WRLCK
, 
F_SETLK
, 0, 1) == 0))) {

3889 
›í_Êags
 |
O_CREAT
;

3890 i‡(
	`·runˇã
(
tdb
->
fd
, 0) == -1) {

3891 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_open_ex: "

3893 
«me
, 
	`°ªº‹
(
î∫o
)));

3894 
Áû
;

3898 i‡(
	`ªad
(
tdb
->
fd
, &tdb->
hódî
, (tdb->header)) != (tdb->header)

3899 || 
	`°rcmp
(
tdb
->
hódî
.
magic_food
, 
TDB_MAGIC_FOOD
) != 0

3900 || (
tdb
->
hódî
.
vîsi⁄
 !
TDB_VERSION


3901 && !(
ªv
 = (
tdb
->
hódî
.
vîsi⁄
==
	`TDB_BYTEREV
(
TDB_VERSION
))))) {

3903 i‡(!(
›í_Êags
 & 
O_CREAT
Ë|| 
	`tdb_√w_d©aba£
(
tdb
, 
hash_size
) == -1) {

3904 
î∫o
 = 
EIO
;

3905 
Áû
;

3907 
ªv
 = (
tdb
->
Êags
 & 
TDB_CONVERT
);

3909 
vp
 = (*)&
tdb
->
hódî
.
vîsi⁄
;

3910 
vîã°
 = (((
u32
)
vp
[0]) << 24) | (((u32)vp[1]) << 16) |

3911 (((
u32
)
vp
[2]) << 8) | (u32)vp[3];

3912 
tdb
->
Êags
 |(
vîã°
==
TDB_VERSION
Ë? 
TDB_BIGENDIAN
 : 0;

3913 i‡(!
ªv
)

3914 
tdb
->
Êags
 &~
TDB_CONVERT
;

3916 
tdb
->
Êags
 |
TDB_CONVERT
;

3917 
	`tdb_c⁄vît
(&
tdb
->
hódî
, (tdb->header));

3919 i‡(
	`f°©
(
tdb
->
fd
, &
°
) == -1)

3920 
Áû
;

3922 i‡(
tdb
->
hódî
.
rwlocks
 != 0) {

3923 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_open_ex: spinlocksÇoÜonger supported\n"));

3924 
Áû
;

3928 i‡(
	`tdb_Æªady_›í
(
°
.
°_dev
, st.
°_öo
)) {

3929 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_open_ex: "

3931 
«me
, ()
°
.
°_dev
, ()°.
°_öo
));

3932 
î∫o
 = 
EBUSY
;

3933 
Áû
;

3936 i‡(!(
tdb
->
«me
 = (*)
	`°rdup
(name))) {

3937 
î∫o
 = 
ENOMEM
;

3938 
Áû
;

3941 
tdb
->
m≠_size
 = 
°
.
°_size
;

3942 
tdb
->
devi˚
 = 
°
.
°_dev
;

3943 
tdb
->
öode
 = 
°
.
°_öo
;

3944 
tdb
->
max_dód_ªc‹ds
 = 0;

3945 
	`tdb_mm≠
(
tdb
);

3946 i‡(
locked
) {

3947 i‡(
tdb
->
mëhods
->
	`tdb_bæock
—db, 
ACTIVE_LOCK
, 
F_UNLCK
, 
F_SETLK
, 0, 1) == -1) {

3948 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_open_ex: "

3950 
«me
, 
	`°ªº‹
(
î∫o
)));

3951 
Áû
;

3960 i‡(
tdb_Êags
 & 
TDB_CLEAR_IF_FIRST
) {

3962 i‡(
tdb
->
mëhods
->
	`tdb_bæock
—db, 
ACTIVE_LOCK
, 
F_RDLCK
, 
F_SETLKW
, 0, 1) == -1)

3963 
Áû
;

3967 i‡(
	`tdb_å™ß˘i⁄_ªcovî
(
tdb
) == -1) {

3968 
Áû
;

3971 
öã∫Æ
:

3975 i‡(
tdb
->
mëhods
->
	`tdb_bæock
—db, 
GLOBAL_LOCK
, 
F_UNLCK
, 
F_SETLKW
, 0, 1) == -1)

3976 
Áû
;

3977 
tdb
->
√xt
 = 
tdbs
;

3978 
tdbs
 = 
tdb
;

3979  
tdb
;

3981 
Áû
:

3982 { 
ßve_î∫o
 = 
î∫o
;

3984 i‡(!
tdb
)

3985  
NULL
;

3987 i‡(
tdb
->
m≠_±r
) {

3988 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
)

3989 
	`SAFE_FREE
(
tdb
->
m≠_±r
);

3991 
	`tdb_munm≠
(
tdb
);

3993 
	`SAFE_FREE
(
tdb
->
«me
);

3994 i‡(
tdb
->
fd
 != -1)

3995 i‡(
	`˛o£
(
tdb
->
fd
) != 0)

3996 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_open_ex: failedÅo closeÅdb->fd onÉrror!\n"));

3997 
	`SAFE_FREE
(
tdb
);

3998 
î∫o
 = 
ßve_î∫o
;

3999  
NULL
;

4001 
	}
}

4007 
	$tdb_£t_max_dód
(
tdb_c⁄ãxt
 *
tdb
, 
max_dód
)

4009 
tdb
->
max_dód_ªc‹ds
 = 
max_dód
;

4010 
	}
}

4017 
	$tdb_˛o£
(
tdb_c⁄ãxt
 *
tdb
)

4019 
tdb_c⁄ãxt
 **
i
;

4020 
ªt
 = 0;

4022 i‡(
tdb
->
å™ß˘i⁄
) {

4023 
	`tdb_å™ß˘i⁄_ˇn˚l
(
tdb
);

4026 i‡(
tdb
->
m≠_±r
) {

4027 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
)

4028 
	`SAFE_FREE
(
tdb
->
m≠_±r
);

4030 
	`tdb_munm≠
(
tdb
);

4032 
	`SAFE_FREE
(
tdb
->
«me
);

4033 i‡(
tdb
->
fd
 != -1)

4034 
ªt
 = 
	`˛o£
(
tdb
->
fd
);

4035 
	`SAFE_FREE
(
tdb
->
lockªcs
);

4038 
i
 = &
tdbs
; *i; i = &(*i)->
√xt
) {

4039 i‡(*
i
 =
tdb
) {

4040 *
i
 = 
tdb
->
√xt
;

4045 
	`mem£t
(
tdb
, 0, (*tdb));

4046 
	`SAFE_FREE
(
tdb
);

4048  
ªt
;

4049 
	}
}

4052 
	$tdb_£t_loggög_fun˘i⁄
(
tdb_c⁄ãxt
 *
tdb
,

4053 c⁄° 
tdb_loggög_c⁄ãxt
 *
log_˘x
)

4055 
tdb
->
log
 = *
log_˘x
;

4056 
	}
}

4058 *
	$tdb_gë_loggög_¥iv©e
(
tdb_c⁄ãxt
 *
tdb
)

4060  
tdb
->
log
.
log_¥iv©e
;

4061 
	}
}

4065 
	$tdb_ª›í
(
tdb_c⁄ãxt
 *
tdb
)

4067 
°©
 
°
;

4069 i‡(
tdb
->
Êags
 & 
TDB_INTERNAL
) {

4073 i‡(
tdb
->
num_locks
 !0 ||Ådb->
globÆ_lock
.
cou¡
) {

4074 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_reopen:ÑeopenÇotállowed withÜocks held\n"));

4075 
Áû
;

4078 i‡(
tdb
->
å™ß˘i⁄
 != 0) {

4079 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_ERROR
, "tdb_reopen:ÑeopenÇotállowed insideáÅransaction\n"));

4080 
Áû
;

4083 i‡(
	`tdb_munm≠
(
tdb
) != 0) {

4084 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_ª›í: munm≠ faûed (%s)\n", 
	`°ªº‹
(
î∫o
)));

4085 
Áû
;

4087 i‡(
	`˛o£
(
tdb
->
fd
) != 0)

4088 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_reopen: WARNING closingÅdb->fd failed!\n"));

4089 
tdb
->
fd
 = 
	`›í
—db->
«me
,Ådb->
›í_Êags
 & ~(
O_CREAT
|
O_TRUNC
), 0);

4090 i‡(
tdb
->
fd
 == -1) {

4091 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_ª›í: o≥¿Áûed (%s)\n", 
	`°ªº‹
(
î∫o
)));

4092 
Áû
;

4094 i‡((
tdb
->
Êags
 & 
TDB_CLEAR_IF_FIRST
) &&

4095 (
tdb
->
mëhods
->
	`tdb_bæock
—db, 
ACTIVE_LOCK
, 
F_RDLCK
, 
F_SETLKW
, 0, 1) == -1)) {

4096 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_reopen: failedÅo obtaináctiveÜock\n"));

4097 
Áû
;

4099 i‡(
	`f°©
(
tdb
->
fd
, &
°
) != 0) {

4100 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_ª›í: f°© faûed (%s)\n", 
	`°ªº‹
(
î∫o
)));

4101 
Áû
;

4103 i‡(
°
.
°_öo
 !
tdb
->
öode
 || st.
°_dev
 !tdb->
devi˚
) {

4104 
	`TDB_LOG
((
tdb
, 
TDB_DEBUG_FATAL
, "tdb_reopen: file dev/inode has changed!\n"));

4105 
Áû
;

4107 
	`tdb_mm≠
(
tdb
);

4111 
Áû
:

4112 
	`tdb_˛o£
(
tdb
);

4114 
	}
}

4117 
	$tdb_ª›í_Æl
(
∑ª¡_l⁄glived
)

4119 
tdb_c⁄ãxt
 *
tdb
;

4121 
tdb
=
tdbs
;Ådb;Ådb =Ådb->
√xt
) {

4133 i‡(
∑ª¡_l⁄glived
) {

4135 
tdb
->
Êags
 &~
TDB_CLEAR_IF_FIRST
;

4138 i‡(
	`tdb_ª›í
(
tdb
) != 0)

4143 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/tdb.h

1 #i‚de‡
__TDB_H__


2 
	#__TDB_H__


	)

30 #ifde‡ 
__˝lu•lus


36 
	#TDB_REPLACE
 1

	)

37 
	#TDB_INSERT
 2

	)

38 
	#TDB_MODIFY
 3

	)

41 
	#TDB_DEFAULT
 0

	)

42 
	#TDB_CLEAR_IF_FIRST
 1

	)

43 
	#TDB_INTERNAL
 2

	)

44 
	#TDB_NOLOCK
 4

	)

45 
	#TDB_NOMMAP
 8

	)

46 
	#TDB_CONVERT
 16

	)

47 
	#TDB_BIGENDIAN
 32

	)

48 
	#TDB_NOSYNC
 64

	)

49 
	#TDB_SEQNUM
 128

	)

51 
	#TDB_ERRCODE
(
code
, 
ªt
Ë((
tdb
->
ecode
 = (code)),Ñë)

	)

54 
	eTDB_ERROR
 {
TDB_SUCCESS
=0, 
TDB_ERR_CORRUPT
, 
TDB_ERR_IO
, 
TDB_ERR_LOCK
,

55 
TDB_ERR_OOM
, 
TDB_ERR_EXISTS
, 
TDB_ERR_NOLOCK
, 
TDB_ERR_LOCK_TIMEOUT
,

56 
TDB_ERR_NOEXIST
, 
TDB_ERR_EINVAL
, 
TDB_ERR_RDONLY
};

59 
	etdb_debug_Àvñ
 {
TDB_DEBUG_FATAL
 = 0, 
TDB_DEBUG_ERROR
,

60 
TDB_DEBUG_WARNING
, 
TDB_DEBUG_TRACE
};

62 
	sTDB_DATA
 {

63 *
d±r
;

64 
size_t
 
dsize
;

65 } 
	tTDB_DATA
;

67 #i‚de‡
PRINTF_ATTRIBUTE


68 #i‡(
__GNUC__
 >= 3)

73 
	#PRINTF_ATTRIBUTE
(
a1
, 
a2
Ë
	`__©åibuã__
 ((
	`f‹m©
 (
__¥ötf__
,á1,á2)))

	)

75 
	#PRINTF_ATTRIBUTE
(
a1
, 
a2
)

	)

80 
	#tdb_›í
 
ext2fs_tdb_›í


	)

81 
	#tdb_›í_ex
 
ext2fs_tdb_›í_ex


	)

82 
	#tdb_£t_max_dód
 
ext2fs_tdb_£t_max_dód


	)

83 
	#tdb_ª›í
 
ext2fs_tdb_ª›í


	)

84 
	#tdb_ª›í_Æl
 
ext2fs_tdb_ª›í_Æl


	)

85 
	#tdb_£t_loggög_fun˘i⁄
 
ext2fs_tdb_£t_loggög_fun˘i⁄


	)

86 
	#tdb_îr‹
 
ext2fs_tdb_îr‹


	)

87 
	#tdb_îr‹°r
 
ext2fs_tdb_îr‹°r


	)

88 
	#tdb_„tch
 
ext2fs_tdb_„tch


	)

89 
	#tdb_∑r£_ªc‹d
 
ext2fs_tdb_∑r£_ªc‹d


	)

90 
	#tdb_dñëe
 
ext2fs_tdb_dñëe


	)

91 
	#tdb_°‹e
 
ext2fs_tdb_°‹e


	)

92 
	#tdb_≠≥nd
 
ext2fs_tdb_≠≥nd


	)

93 
	#tdb_˛o£
 
ext2fs_tdb_˛o£


	)

94 
	#tdb_fú°key
 
ext2fs_tdb_fú°key


	)

95 
	#tdb_√xtkey
 
ext2fs_tdb_√xtkey


	)

96 
	#tdb_åavî£
 
ext2fs_tdb_åavî£


	)

97 
	#tdb_åavî£_ªad
 
ext2fs_tdb_åavî£_ªad


	)

98 
	#tdb_exi°s
 
ext2fs_tdb_exi°s


	)

99 
	#tdb_lockÆl
 
ext2fs_tdb_lockÆl


	)

100 
	#tdb_u∆ockÆl
 
ext2fs_tdb_u∆ockÆl


	)

101 
	#tdb_lockÆl_ªad
 
ext2fs_tdb_lockÆl_ªad


	)

102 
	#tdb_u∆ockÆl_ªad
 
ext2fs_tdb_u∆ockÆl_ªad


	)

103 
	#tdb_«me
 
ext2fs_tdb_«me


	)

104 
	#tdb_fd
 
ext2fs_tdb_fd


	)

105 
	#tdb_log_‚
 
ext2fs_tdb_log_‚


	)

106 
	#tdb_gë_loggög_¥iv©e
 
ext2fs_tdb_gë_loggög_¥iv©e


	)

107 
	#tdb_å™ß˘i⁄_°¨t
 
ext2fs_tdb_å™ß˘i⁄_°¨t


	)

108 
	#tdb_å™ß˘i⁄_commô
 
ext2fs_tdb_å™ß˘i⁄_commô


	)

109 
	#tdb_å™ß˘i⁄_ˇn˚l
 
ext2fs_tdb_å™ß˘i⁄_ˇn˚l


	)

110 
	#tdb_å™ß˘i⁄_ªcovî
 
ext2fs_tdb_å™ß˘i⁄_ªcovî


	)

111 
	#tdb_gë_£qnum
 
ext2fs_tdb_gë_£qnum


	)

112 
	#tdb_hash_size
 
ext2fs_tdb_hash_size


	)

113 
	#tdb_m≠_size
 
ext2fs_tdb_m≠_size


	)

114 
	#tdb_gë_Êags
 
ext2fs_tdb_gë_Êags


	)

115 
	#tdb_chaölock
 
ext2fs_tdb_chaölock


	)

116 
	#tdb_chaöu∆ock
 
ext2fs_tdb_chaöu∆ock


	)

117 
	#tdb_chaölock_ªad
 
ext2fs_tdb_chaölock_ªad


	)

118 
	#tdb_chaöu∆ock_ªad
 
ext2fs_tdb_chaöu∆ock_ªad


	)

119 
	#tdb_dump_Æl
 
ext2fs_tdb_dump_Æl


	)

120 
	#tdb_¥öt‰ìli°
 
ext2fs_tdb_¥öt‰ìli°


	)

121 
	#tdb_vÆid©e_‰ìli°
 
ext2fs_tdb_vÆid©e_‰ìli°


	)

122 
	#tdb_chaölock_m¨k
 
ext2fs_tdb_chaölock_m¨k


	)

123 
	#tdb_chaölock_n⁄block
 
ext2fs_tdb_chaölock_n⁄block


	)

124 
	#tdb_chaölock_unm¨k
 
ext2fs_tdb_chaölock_unm¨k


	)

125 
	#tdb_íabÀ_£qnum
 
ext2fs_tdb_íabÀ_£qnum


	)

126 
	#tdb_ö¸emít_£qnum_n⁄block
 
ext2fs_tdb_ö¸emít_£qnum_n⁄block


	)

127 
	#tdb_lock_n⁄block
 
ext2fs_tdb_lock_n⁄block


	)

128 
	#tdb_lockÆl_m¨k
 
ext2fs_tdb_lockÆl_m¨k


	)

129 
	#tdb_lockÆl_n⁄block
 
ext2fs_tdb_lockÆl_n⁄block


	)

130 
	#tdb_lockÆl_ªad_n⁄block
 
ext2fs_tdb_lockÆl_ªad_n⁄block


	)

131 
	#tdb_lockÆl_unm¨k
 
ext2fs_tdb_lockÆl_unm¨k


	)

134 
tdb_c⁄ãxt
 
	tTDB_CONTEXT
;

136 (*
tdb_åavî£_func
)(
	ttdb_c⁄ãxt
 *, 
	tTDB_DATA
, TDB_DATA, *);

137 (*
tdb_log_func
)(
	ttdb_c⁄ãxt
 *, 
	ttdb_debug_Àvñ
, c⁄° *, ...Ë
	tPRINTF_ATTRIBUTE
(3, 4);

138 (*
	ttdb_hash_func
)(
	tTDB_DATA
 *
	tkey
);

140 
	stdb_loggög_c⁄ãxt
 {

141 
tdb_log_func
 
log_‚
;

142 *
log_¥iv©e
;

145 
tdb_c⁄ãxt
 *
tdb_›í
(c⁄° *
«me
, 
hash_size
, 
tdb_Êags
,

146 
›í_Êags
, 
mode_t
 
mode
);

147 
tdb_c⁄ãxt
 *
tdb_›í_ex
(c⁄° *
«me
, 
hash_size
, 
tdb_Êags
,

148 
›í_Êags
, 
mode_t
 
mode
,

149 c⁄° 
tdb_loggög_c⁄ãxt
 *
log_˘x
,

150 
tdb_hash_func
 
hash_‚
);

151 
tdb_£t_max_dód
(
tdb_c⁄ãxt
 *
tdb
, 
max_dód
);

153 
tdb_ª›í
(
tdb_c⁄ãxt
 *
tdb
);

154 
tdb_ª›í_Æl
(
∑ª¡_l⁄glived
);

155 
tdb_£t_loggög_fun˘i⁄
(
tdb_c⁄ãxt
 *
tdb
, c⁄° 
tdb_loggög_c⁄ãxt
 *
log_˘x
);

156 
TDB_ERROR
 
tdb_îr‹
(
tdb_c⁄ãxt
 *
tdb
);

157 c⁄° *
tdb_îr‹°r
(
tdb_c⁄ãxt
 *
tdb
);

158 
TDB_DATA
 
tdb_„tch
(
tdb_c⁄ãxt
 *
tdb
, TDB_DATA 
key
);

159 
tdb_∑r£_ªc‹d
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
,

160 (*
∑r£r
)(
TDB_DATA
 
key
, TDB_DATA 
d©a
,

161 *
¥iv©e_d©a
),

162 *
¥iv©e_d©a
);

163 
tdb_dñëe
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

164 
tdb_°‹e
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, TDB_DATA 
dbuf
, 
Êag
);

165 
tdb_≠≥nd
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, TDB_DATA 
√w_dbuf
);

166 
tdb_˛o£
(
tdb_c⁄ãxt
 *
tdb
);

167 
TDB_DATA
 
tdb_fú°key
(
tdb_c⁄ãxt
 *
tdb
);

168 
TDB_DATA
 
tdb_√xtkey
(
tdb_c⁄ãxt
 *
tdb
, TDB_DATA 
key
);

169 
tdb_åavî£
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_åavî£_func
 
‚
, *);

170 
tdb_åavî£_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_åavî£_func
 
‚
, *);

171 
tdb_exi°s
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

172 
tdb_lockÆl
(
tdb_c⁄ãxt
 *
tdb
);

173 
tdb_lockÆl_n⁄block
(
tdb_c⁄ãxt
 *
tdb
);

174 
tdb_u∆ockÆl
(
tdb_c⁄ãxt
 *
tdb
);

175 
tdb_lockÆl_ªad
(
tdb_c⁄ãxt
 *
tdb
);

176 
tdb_lockÆl_ªad_n⁄block
(
tdb_c⁄ãxt
 *
tdb
);

177 
tdb_u∆ockÆl_ªad
(
tdb_c⁄ãxt
 *
tdb
);

178 
tdb_lockÆl_m¨k
(
tdb_c⁄ãxt
 *
tdb
);

179 
tdb_lockÆl_unm¨k
(
tdb_c⁄ãxt
 *
tdb
);

180 c⁄° *
tdb_«me
(
tdb_c⁄ãxt
 *
tdb
);

181 
tdb_fd
(
tdb_c⁄ãxt
 *
tdb
);

182 
tdb_log_func
 
tdb_log_‚
(
tdb_c⁄ãxt
 *
tdb
);

183 *
tdb_gë_loggög_¥iv©e
(
tdb_c⁄ãxt
 *
tdb
);

184 
tdb_å™ß˘i⁄_°¨t
(
tdb_c⁄ãxt
 *
tdb
);

185 
tdb_å™ß˘i⁄_commô
(
tdb_c⁄ãxt
 *
tdb
);

186 
tdb_å™ß˘i⁄_ˇn˚l
(
tdb_c⁄ãxt
 *
tdb
);

187 
tdb_å™ß˘i⁄_ªcovî
(
tdb_c⁄ãxt
 *
tdb
);

188 
tdb_gë_£qnum
(
tdb_c⁄ãxt
 *
tdb
);

189 
tdb_hash_size
(
tdb_c⁄ãxt
 *
tdb
);

190 
size_t
 
tdb_m≠_size
(
tdb_c⁄ãxt
 *
tdb
);

191 
tdb_gë_Êags
(
tdb_c⁄ãxt
 *
tdb
);

192 
tdb_íabÀ_£qnum
(
tdb_c⁄ãxt
 *
tdb
);

193 
tdb_ö¸emít_£qnum_n⁄block
(
tdb_c⁄ãxt
 *
tdb
);

196 
tdb_chaölock
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

197 
tdb_chaölock_n⁄block
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

198 
tdb_chaöu∆ock
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

199 
tdb_chaölock_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

200 
tdb_chaöu∆ock_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

201 
tdb_chaölock_m¨k
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

202 
tdb_chaölock_unm¨k
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

205 
tdb_dump_Æl
(
tdb_c⁄ãxt
 *
tdb
);

206 
tdb_¥öt‰ìli°
(
tdb_c⁄ãxt
 *
tdb
);

207 
tdb_vÆid©e_‰ìli°
(
tdb_c⁄ãxt
 *
tdb
, *
≤um_íåõs
);

209 
TDB_DATA
 
tdb_nuŒ
;

211 #ifde‡ 
__˝lu•lus


	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/test_io.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<f˙é.h
>

18 
	~<time.h
>

19 #i‡
HAVE_SYS_STAT_H


20 
	~<sys/°©.h
>

22 #i‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_SYS_PRCTL_H


26 
	~<sys/¥˘l.h
>

28 
	#PR_GET_DUMPABLE
 3

	)

30 #i‡(!
deföed
(
HAVE_PRCTL
Ë&& deföed(
löux
))

31 
	~<sys/sysˇŒ.h
>

34 
	~"ext2_fs.h
"

35 
	~"ext2fs.h
"

41 
	#EXT2_CHECK_MAGIC
(, 
code
) \

42 i‡(()->
magic
 !(
code
)Ë (code)

	)

44 
	sã°_¥iv©e_d©a
 {

45 
	mmagic
;

46 
io_ch™√l
 
	mªÆ
;

47 
	mÊags
;

48 
FILE
 *
	moutfûe
;

49 
	mblock
;

50 
	mªad_ab‹t_cou¡
, 
	mwrôe_ab‹t_cou¡
;

51 (*
	mªad_blk
)(
	mblock
, 
	mcou¡
, 
îrcode_t
 
	mîr
);

52 (*
	mwrôe_blk
)(
	mblock
, 
	mcou¡
, 
îrcode_t
 
	mîr
);

53 (*
	m£t_blksize
)(
	mblksize
, 
îrcode_t
 
	mîr
);

54 (*
	mwrôe_byã
)(
	mblock
, 
	mcou¡
, 
îrcode_t
 
	mîr
);

55 (*
	mªad_blk64
)(
	mblock
, 
	mcou¡
, 
îrcode_t
 
	mîr
);

56 (*
	mwrôe_blk64
)(
	mblock
, 
	mcou¡
, 
îrcode_t
 
	mîr
);

59 
îrcode_t
 
ã°_›í
(c⁄° *
«me
, 
Êags
, 
io_ch™√l
 *
ch™√l
);

60 
îrcode_t
 
ã°_˛o£
(
io_ch™√l
 
ch™√l
);

61 
îrcode_t
 
ã°_£t_blksize
(
io_ch™√l
 
ch™√l
, 
blksize
);

62 
îrcode_t
 
ã°_ªad_blk
(
io_ch™√l
 
ch™√l
, 
block
,

63 
cou¡
, *
d©a
);

64 
îrcode_t
 
ã°_wrôe_blk
(
io_ch™√l
 
ch™√l
, 
block
,

65 
cou¡
, c⁄° *
d©a
);

66 
îrcode_t
 
ã°_ªad_blk64
(
io_ch™√l
 
ch™√l
, 
block
,

67 
cou¡
, *
d©a
);

68 
îrcode_t
 
ã°_wrôe_blk64
(
io_ch™√l
 
ch™√l
, 
block
,

69 
cou¡
, c⁄° *
d©a
);

70 
îrcode_t
 
ã°_Êush
(
io_ch™√l
 
ch™√l
);

71 
îrcode_t
 
ã°_wrôe_byã
(
io_ch™√l
 
ch™√l
, 
off£t
,

72 
cou¡
, c⁄° *
buf
);

73 
îrcode_t
 
ã°_£t_›ti⁄
(
io_ch™√l
 
ch™√l
, c⁄° *
›ti⁄
,

74 c⁄° *
¨g
);

75 
îrcode_t
 
ã°_gë_°©s
(
io_ch™√l
 
ch™√l
, 
io_°©s
 *
°©s
);

78 
°ru˘_io_m™agî
 
	g°ru˘_ã°_m™agî
 = {

79 
EXT2_ET_MAGIC_IO_MANAGER
,

81 
ã°_›í
,

82 
ã°_˛o£
,

83 
ã°_£t_blksize
,

84 
ã°_ªad_blk
,

85 
ã°_wrôe_blk
,

86 
ã°_Êush
,

87 
ã°_wrôe_byã
,

88 
ã°_£t_›ti⁄
,

89 
ã°_gë_°©s
,

90 
ã°_ªad_blk64
,

91 
ã°_wrôe_blk64
,

94 
io_m™agî
 
	gã°_io_m™agî
 = &
°ru˘_ã°_m™agî
;

100 
io_m™agî
 
	gã°_io_backög_m™agî
 = 0;

101 (*
ã°_io_cb_ªad_blk
)

102 (
block
, 
cou¡
, 
îrcode_t
 
îr
) = 0;

103 (*
ã°_io_cb_wrôe_blk
)

104 (
block
, 
cou¡
, 
îrcode_t
 
îr
) = 0;

105 (*
ã°_io_cb_ªad_blk64
)

106 (
block
, 
cou¡
, 
îrcode_t
 
îr
) = 0;

107 (*
ã°_io_cb_wrôe_blk64
)

108 (
block
, 
cou¡
, 
îrcode_t
 
îr
) = 0;

109 (*
ã°_io_cb_£t_blksize
)

110 (
blksize
, 
îrcode_t
 
îr
) = 0;

111 (*
ã°_io_cb_wrôe_byã
)

112 (
block
, 
cou¡
, 
îrcode_t
 
îr
) = 0;

117 
	#TEST_FLAG_READ
 0x01

	)

118 
	#TEST_FLAG_WRITE
 0x02

	)

119 
	#TEST_FLAG_SET_BLKSIZE
 0x04

	)

120 
	#TEST_FLAG_FLUSH
 0x08

	)

121 
	#TEST_FLAG_DUMP
 0x10

	)

122 
	#TEST_FLAG_SET_OPTION
 0x20

	)

124 
	$ã°_dump_block
(
io_ch™√l
 
ch™√l
,

125 
ã°_¥iv©e_d©a
 *
d©a
,

126 
block
, c⁄° *
buf
)

128 c⁄° *
˝
;

129 
FILE
 *
f
 = 
d©a
->
outfûe
;

130 
i
;

131 
cksum
 = 0;

133 
i
=0, 
˝
 = 
buf
; i < 
ch™√l
->
block_size
; i++, cp++) {

134 
cksum
 +*
˝
;

136 
	`Ârötf
(
f
, "C⁄ã¡†o‡block %lu, checksum %08lu: \n", 
block
, 
cksum
);

137 
i
=0, 
˝
 = 
buf
; i < 
ch™√l
->
block_size
; i++, cp++) {

138 i‡((
i
 % 16) == 0)

139 
	`Ârötf
(
f
, "%04x: ", 
i
);

140 
	`Ârötf
(
f
, "%02x%c", *
˝
, ((
i
 % 16) == 15) ? '\n' : ' ');

142 
	}
}

144 
	$ã°_ab‹t
(
io_ch™√l
 
ch™√l
, 
block
)

146 
ã°_¥iv©e_d©a
 *
d©a
;

147 
FILE
 *
f
;

149 
d©a
 = (
ã°_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

150 
f
 = 
d©a
->
outfûe
;

151 
	`ã°_Êush
(
ch™√l
);

153 
	`Ârötf
(
f
, "Ab‹tög duêtÿI/OÅÿblock %lu\n", 
block
);

154 
	`fÊush
(
f
);

155 
	`ab‹t
();

156 
	}
}

158 *
	$ß„_gëív
(c⁄° *
¨g
)

160 i‡((
	`gëuid
(Ë!
	`gëeuid
()Ë|| (
	`gëgid
(Ë!
	`gëegid
()))

161  
NULL
;

162 #i‡
HAVE_PRCTL


163 i‡(
	`¥˘l
(
PR_GET_DUMPABLE
, 0, 0, 0, 0) == 0)

164  
NULL
;

166 #i‡(
	`deföed
(
löux
Ë&& deföed(
SYS_¥˘l
))

167 i‡(
	`sysˇŒ
(
SYS_¥˘l
, 
PR_GET_DUMPABLE
, 0, 0, 0, 0) == 0)

168  
NULL
;

172 #ifde‡
HAVE___SECURE_GETENV


173  
	`__£cuª_gëív
(
¨g
);

175  
	`gëív
(
¨g
);

177 
	}
}

179 
îrcode_t
 
	$ã°_›í
(c⁄° *
«me
, 
Êags
, 
io_ch™√l
 *
ch™√l
)

181 
io_ch™√l
 
io
 = 
NULL
;

182 
ã°_¥iv©e_d©a
 *
d©a
 = 
NULL
;

183 
îrcode_t
 
ªtvÆ
;

184 *
vÆue
;

186 i‡(
«me
 == 0)

187  
EXT2_ET_BAD_DEVICE_NAME
;

188 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
°ru˘_io_ch™√l
), &
io
);

189 i‡(
ªtvÆ
)

190  
ªtvÆ
;

191 
	`mem£t
(
io
, 0, (
°ru˘_io_ch™√l
));

192 
io
->
magic
 = 
EXT2_ET_MAGIC_IO_CHANNEL
;

193 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
ã°_¥iv©e_d©a
), &
d©a
);

194 i‡(
ªtvÆ
) {

195 
ªtvÆ
 = 
EXT2_ET_NO_MEMORY
;

196 
˛ónup
;

198 
io
->
m™agî
 = 
ã°_io_m™agî
;

199 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
	`°æí
(
«me
)+1, &
io
->name);

200 i‡(
ªtvÆ
)

201 
˛ónup
;

203 
	`°r˝y
(
io
->
«me
,Çame);

204 
io
->
¥iv©e_d©a
 = 
d©a
;

205 
io
->
block_size
 = 1024;

206 
io
->
ªad_îr‹
 = 0;

207 
io
->
wrôe_îr‹
 = 0;

208 
io
->
ªfcou¡
 = 1;

210 
	`mem£t
(
d©a
, 0, (
ã°_¥iv©e_d©a
));

211 
d©a
->
magic
 = 
EXT2_ET_MAGIC_TEST_IO_CHANNEL
;

212 i‡(
ã°_io_backög_m™agî
) {

213 
ªtvÆ
 = 
ã°_io_backög_m™agî
->
	`›í
(
«me
, 
Êags
,

214 &
d©a
->
ªÆ
);

215 i‡(
ªtvÆ
)

216 
˛ónup
;

218 
d©a
->
ªÆ
 = 0;

219 
d©a
->
ªad_blk
 = 
ã°_io_cb_ªad_blk
;

220 
d©a
->
wrôe_blk
 = 
ã°_io_cb_wrôe_blk
;

221 
d©a
->
£t_blksize
 = 
ã°_io_cb_£t_blksize
;

222 
d©a
->
wrôe_byã
 = 
ã°_io_cb_wrôe_byã
;

223 
d©a
->
ªad_blk64
 = 
ã°_io_cb_ªad_blk64
;

224 
d©a
->
wrôe_blk64
 = 
ã°_io_cb_wrôe_blk64
;

226 
d©a
->
outfûe
 = 
NULL
;

227 i‡((
vÆue
 = 
	`ß„_gëív
("TEST_IO_LOGFILE")Ë!
NULL
)

228 
d©a
->
outfûe
 = 
	`f›í
(
vÆue
, "w");

229 i‡(!
d©a
->
outfûe
)

230 
d©a
->
outfûe
 = 
°dîr
;

232 
d©a
->
Êags
 = 0;

233 i‡((
vÆue
 = 
	`ß„_gëív
("TEST_IO_FLAGS")Ë!
NULL
)

234 
d©a
->
Êags
 = 
	`°πoul
(
vÆue
, 
NULL
, 0);

236 
d©a
->
block
 = 0;

237 i‡((
vÆue
 = 
	`ß„_gëív
("TEST_IO_BLOCK")Ë!
NULL
)

238 
d©a
->
block
 = 
	`°πoul
(
vÆue
, 
NULL
, 0);

240 
d©a
->
ªad_ab‹t_cou¡
 = 0;

241 i‡((
vÆue
 = 
	`ß„_gëív
("TEST_IO_READ_ABORT")Ë!
NULL
)

242 
d©a
->
ªad_ab‹t_cou¡
 = 
	`°πoul
(
vÆue
, 
NULL
, 0);

244 
d©a
->
wrôe_ab‹t_cou¡
 = 0;

245 i‡((
vÆue
 = 
	`ß„_gëív
("TEST_IO_WRITE_ABORT")Ë!
NULL
)

246 
d©a
->
wrôe_ab‹t_cou¡
 = 
	`°πoul
(
vÆue
, 
NULL
, 0);

248 *
ch™√l
 = 
io
;

251 
˛ónup
:

252 i‡(
io
)

253 
	`ext2fs_‰ì_mem
(&
io
);

254 i‡(
d©a
)

255 
	`ext2fs_‰ì_mem
(&
d©a
);

256  
ªtvÆ
;

257 
	}
}

259 
îrcode_t
 
	$ã°_˛o£
(
io_ch™√l
 
ch™√l
)

261 
ã°_¥iv©e_d©a
 *
d©a
;

262 
îrcode_t
 
ªtvÆ
 = 0;

264 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

265 
d©a
 = (
ã°_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

266 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_TEST_IO_CHANNEL
);

268 i‡(--
ch™√l
->
ªfcou¡
 > 0)

271 i‡(
d©a
->
ªÆ
)

272 
ªtvÆ
 = 
	`io_ch™√l_˛o£
(
d©a
->
ªÆ
);

274 i‡(
d©a
->
outfûe
 && d©a->outfûê!
°dîr
)

275 
	`f˛o£
(
d©a
->
outfûe
);

277 
	`ext2fs_‰ì_mem
(&
ch™√l
->
¥iv©e_d©a
);

278 i‡(
ch™√l
->
«me
)

279 
	`ext2fs_‰ì_mem
(&
ch™√l
->
«me
);

280 
	`ext2fs_‰ì_mem
(&
ch™√l
);

281  
ªtvÆ
;

282 
	}
}

284 
îrcode_t
 
	$ã°_£t_blksize
(
io_ch™√l
 
ch™√l
, 
blksize
)

286 
ã°_¥iv©e_d©a
 *
d©a
;

287 
îrcode_t
 
ªtvÆ
 = 0;

289 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

290 
d©a
 = (
ã°_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

291 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_TEST_IO_CHANNEL
);

293 i‡(
d©a
->
ªÆ
)

294 
ªtvÆ
 = 
	`io_ch™√l_£t_blksize
(
d©a
->
ªÆ
, 
blksize
);

295 i‡(
d©a
->
£t_blksize
)

296 
d©a
->
	`£t_blksize
(
blksize
, 
ªtvÆ
);

297 i‡(
d©a
->
Êags
 & 
TEST_FLAG_SET_BLKSIZE
)

298 
	`Ârötf
(
d©a
->
outfûe
,

300 
blksize
, 
ªtvÆ
 ? 
	`îr‹_mesßge
(retval) : "OK");

301 
ch™√l
->
block_size
 = 
blksize
;

302  
ªtvÆ
;

303 
	}
}

306 
îrcode_t
 
	$ã°_ªad_blk
(
io_ch™√l
 
ch™√l
, 
block
,

307 
cou¡
, *
buf
)

309 
ã°_¥iv©e_d©a
 *
d©a
;

310 
îrcode_t
 
ªtvÆ
 = 0;

312 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

313 
d©a
 = (
ã°_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

314 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_TEST_IO_CHANNEL
);

316 i‡(
d©a
->
ªÆ
)

317 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
d©a
->
ªÆ
, 
block
, 
cou¡
, 
buf
);

318 i‡(
d©a
->
ªad_blk
)

319 
d©a
->
	`ªad_blk
(
block
, 
cou¡
, 
ªtvÆ
);

320 i‡(
d©a
->
Êags
 & 
TEST_FLAG_READ
)

321 
	`Ârötf
(
d©a
->
outfûe
,

323 
block
, 
cou¡
, 
ªtvÆ
 ? 
	`îr‹_mesßge
(retval) : "OK");

324 i‡(
d©a
->
block
 && data->block == block) {

325 i‡(
d©a
->
Êags
 & 
TEST_FLAG_DUMP
)

326 
	`ã°_dump_block
(
ch™√l
, 
d©a
, 
block
, 
buf
);

327 i‡(--
d©a
->
ªad_ab‹t_cou¡
 == 0)

328 
	`ã°_ab‹t
(
ch™√l
, 
block
);

330  
ªtvÆ
;

331 
	}
}

333 
îrcode_t
 
	$ã°_wrôe_blk
(
io_ch™√l
 
ch™√l
, 
block
,

334 
cou¡
, c⁄° *
buf
)

336 
ã°_¥iv©e_d©a
 *
d©a
;

337 
îrcode_t
 
ªtvÆ
 = 0;

339 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

340 
d©a
 = (
ã°_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

341 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_TEST_IO_CHANNEL
);

343 i‡(
d©a
->
ªÆ
)

344 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
d©a
->
ªÆ
, 
block
, 
cou¡
, 
buf
);

345 i‡(
d©a
->
wrôe_blk
)

346 
d©a
->
	`wrôe_blk
(
block
, 
cou¡
, 
ªtvÆ
);

347 i‡(
d©a
->
Êags
 & 
TEST_FLAG_WRITE
)

348 
	`Ârötf
(
d©a
->
outfûe
,

350 
block
, 
cou¡
, 
ªtvÆ
 ? 
	`îr‹_mesßge
(retval) : "OK");

351 i‡(
d©a
->
block
 && data->block == block) {

352 i‡(
d©a
->
Êags
 & 
TEST_FLAG_DUMP
)

353 
	`ã°_dump_block
(
ch™√l
, 
d©a
, 
block
, 
buf
);

354 i‡(--
d©a
->
wrôe_ab‹t_cou¡
 == 0)

355 
	`ã°_ab‹t
(
ch™√l
, 
block
);

357  
ªtvÆ
;

358 
	}
}

360 
îrcode_t
 
	$ã°_ªad_blk64
(
io_ch™√l
 
ch™√l
, 
block
,

361 
cou¡
, *
buf
)

363 
ã°_¥iv©e_d©a
 *
d©a
;

364 
îrcode_t
 
ªtvÆ
 = 0;

366 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

367 
d©a
 = (
ã°_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

368 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_TEST_IO_CHANNEL
);

370 i‡(
d©a
->
ªÆ
)

371 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk64
(
d©a
->
ªÆ
, 
block
, 
cou¡
, 
buf
);

372 i‡(
d©a
->
ªad_blk64
)

373 
d©a
->
	`ªad_blk64
(
block
, 
cou¡
, 
ªtvÆ
);

374 i‡(
d©a
->
Êags
 & 
TEST_FLAG_READ
)

375 
	`Ârötf
(
d©a
->
outfûe
,

377 
block
, 
cou¡
, 
ªtvÆ
 ? 
	`îr‹_mesßge
(retval) : "OK");

378 i‡(
d©a
->
block
 && data->block == block) {

379 i‡(
d©a
->
Êags
 & 
TEST_FLAG_DUMP
)

380 
	`ã°_dump_block
(
ch™√l
, 
d©a
, 
block
, 
buf
);

381 i‡(--
d©a
->
ªad_ab‹t_cou¡
 == 0)

382 
	`ã°_ab‹t
(
ch™√l
, 
block
);

384  
ªtvÆ
;

385 
	}
}

387 
îrcode_t
 
	$ã°_wrôe_blk64
(
io_ch™√l
 
ch™√l
, 
block
,

388 
cou¡
, c⁄° *
buf
)

390 
ã°_¥iv©e_d©a
 *
d©a
;

391 
îrcode_t
 
ªtvÆ
 = 0;

393 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

394 
d©a
 = (
ã°_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

395 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_TEST_IO_CHANNEL
);

397 i‡(
d©a
->
ªÆ
)

398 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk64
(
d©a
->
ªÆ
, 
block
, 
cou¡
, 
buf
);

399 i‡(
d©a
->
wrôe_blk64
)

400 
d©a
->
	`wrôe_blk64
(
block
, 
cou¡
, 
ªtvÆ
);

401 i‡(
d©a
->
Êags
 & 
TEST_FLAG_WRITE
)

402 
	`Ârötf
(
d©a
->
outfûe
,

404 
block
, 
cou¡
, 
ªtvÆ
 ? 
	`îr‹_mesßge
(retval) : "OK");

405 i‡(
d©a
->
block
 && data->block == block) {

406 i‡(
d©a
->
Êags
 & 
TEST_FLAG_DUMP
)

407 
	`ã°_dump_block
(
ch™√l
, 
d©a
, 
block
, 
buf
);

408 i‡(--
d©a
->
wrôe_ab‹t_cou¡
 == 0)

409 
	`ã°_ab‹t
(
ch™√l
, 
block
);

411  
ªtvÆ
;

412 
	}
}

414 
îrcode_t
 
	$ã°_wrôe_byã
(
io_ch™√l
 
ch™√l
, 
off£t
,

415 
cou¡
, c⁄° *
buf
)

417 
ã°_¥iv©e_d©a
 *
d©a
;

418 
îrcode_t
 
ªtvÆ
 = 0;

420 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

421 
d©a
 = (
ã°_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

422 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_TEST_IO_CHANNEL
);

424 i‡(
d©a
->
ªÆ
 && d©a->ªÆ->
m™agî
->
wrôe_byã
)

425 
ªtvÆ
 = 
	`io_ch™√l_wrôe_byã
(
d©a
->
ªÆ
, 
off£t
, 
cou¡
, 
buf
);

426 i‡(
d©a
->
wrôe_byã
)

427 
d©a
->
	`wrôe_byã
(
off£t
, 
cou¡
, 
ªtvÆ
);

428 i‡(
d©a
->
Êags
 & 
TEST_FLAG_WRITE
)

429 
	`Ârötf
(
d©a
->
outfûe
,

431 
off£t
, 
cou¡
, 
ªtvÆ
 ? 
	`îr‹_mesßge
(retval) : "OK");

432  
ªtvÆ
;

433 
	}
}

438 
îrcode_t
 
	$ã°_Êush
(
io_ch™√l
 
ch™√l
)

440 
ã°_¥iv©e_d©a
 *
d©a
;

441 
îrcode_t
 
ªtvÆ
 = 0;

443 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

444 
d©a
 = (
ã°_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

445 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_TEST_IO_CHANNEL
);

447 i‡(
d©a
->
ªÆ
)

448 
ªtvÆ
 = 
	`io_ch™√l_Êush
(
d©a
->
ªÆ
);

450 i‡(
d©a
->
Êags
 & 
TEST_FLAG_FLUSH
)

451 
	`Ârötf
(
d©a
->
outfûe
, "Test_io: flush()Ñeturned %s\n",

452 
ªtvÆ
 ? 
	`îr‹_mesßge
(retval) : "OK");

454  
ªtvÆ
;

455 
	}
}

457 
îrcode_t
 
	$ã°_£t_›ti⁄
(
io_ch™√l
 
ch™√l
, c⁄° *
›ti⁄
,

458 c⁄° *
¨g
)

460 
ã°_¥iv©e_d©a
 *
d©a
;

461 
îrcode_t
 
ªtvÆ
 = 0;

463 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

464 
d©a
 = (
ã°_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

465 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_TEST_IO_CHANNEL
);

468 i‡(
d©a
->
Êags
 & 
TEST_FLAG_SET_OPTION
)

469 
	`Ârötf
(
d©a
->
outfûe
, "Test_io: set_option(%s, %s) ",

470 
›ti⁄
, 
¨g
);

471 i‡(
d©a
->
ªÆ
 && d©a->ªÆ->
m™agî
->
£t_›ti⁄
) {

472 
ªtvÆ
 = (
d©a
->
ªÆ
->
m™agî
->
£t_›ti⁄
)(data->real,

473 
›ti⁄
, 
¨g
);

474 i‡(
d©a
->
Êags
 & 
TEST_FLAG_SET_OPTION
)

475 
	`Ârötf
(
d©a
->
outfûe
, "returned %s\n",

476 
ªtvÆ
 ? 
	`îr‹_mesßge
(retval) : "OK");

478 i‡(
d©a
->
Êags
 & 
TEST_FLAG_SET_OPTION
)

479 
	`Ârötf
(
d©a
->
outfûe
, "not implemented\n");

481  
ªtvÆ
;

482 
	}
}

484 
îrcode_t
 
	$ã°_gë_°©s
(
io_ch™√l
 
ch™√l
, 
io_°©s
 *
°©s
)

486 
ã°_¥iv©e_d©a
 *
d©a
;

487 
îrcode_t
 
ªtvÆ
 = 0;

489 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

490 
d©a
 = (
ã°_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

491 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_TEST_IO_CHANNEL
);

493 i‡(
d©a
->
ªÆ
 && d©a->ªÆ->
m™agî
->
gë_°©s
) {

494 
ªtvÆ
 = (
d©a
->
ªÆ
->
m™agî
->
gë_°©s
)(d©a->ªÆ, 
°©s
);

496  
ªtvÆ
;

497 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/undo_io.c

14 
	#_LARGEFILE_SOURCE


	)

15 
	#_LARGEFILE64_SOURCE


	)

17 
	~<c⁄fig.h
>

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 #i‡
HAVE_UNISTD_H


22 
	~<uni°d.h
>

24 #i‡
HAVE_ERRNO_H


25 
	~<î∫o.h
>

27 
	~<f˙é.h
>

28 
	~<time.h
>

29 #ifde‡
__löux__


30 
	~<sys/ut¢ame.h
>

32 #i‡
HAVE_SYS_STAT_H


33 
	~<sys/°©.h
>

35 #i‡
HAVE_SYS_TYPES_H


36 
	~<sys/ty≥s.h
>

38 #i‡
HAVE_SYS_RESOURCE_H


39 
	~<sys/ªsour˚.h
>

42 
	~"tdb.h
"

44 
	~"ext2_fs.h
"

45 
	~"ext2fs.h
"

47 #ifde‡
__GNUC__


48 
	#ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

50 
	#ATTR
(
x
)

	)

57 
	#EXT2_CHECK_MAGIC
(, 
code
) \

58 i‡(()->
magic
 !(
code
)Ë (code)

	)

60 
	sundo_¥iv©e_d©a
 {

61 
	mmagic
;

62 
TDB_CONTEXT
 *
	mtdb
;

63 *
	mtdb_fûe
;

66 
io_ch™√l
 
	mªÆ
;

68 
	mtdb_d©a_size
;

69 
	mtdb_wrôãn
;

72 
ext2_loff_t
 
	moff£t
;

75 
îrcode_t
 
undo_›í
(c⁄° *
«me
, 
Êags
, 
io_ch™√l
 *
ch™√l
);

76 
îrcode_t
 
undo_˛o£
(
io_ch™√l
 
ch™√l
);

77 
îrcode_t
 
undo_£t_blksize
(
io_ch™√l
 
ch™√l
, 
blksize
);

78 
îrcode_t
 
undo_ªad_blk
(
io_ch™√l
 
ch™√l
, 
block
,

79 
cou¡
, *
d©a
);

80 
îrcode_t
 
undo_wrôe_blk
(
io_ch™√l
 
ch™√l
, 
block
,

81 
cou¡
, c⁄° *
d©a
);

82 
îrcode_t
 
undo_Êush
(
io_ch™√l
 
ch™√l
);

83 
îrcode_t
 
undo_wrôe_byã
(
io_ch™√l
 
ch™√l
, 
off£t
,

84 
size
, c⁄° *
d©a
);

85 
îrcode_t
 
undo_£t_›ti⁄
(
io_ch™√l
 
ch™√l
, c⁄° *
›ti⁄
,

86 c⁄° *
¨g
);

88 
°ru˘_io_m™agî
 
	g°ru˘_undo_m™agî
 = {

89 
EXT2_ET_MAGIC_IO_MANAGER
,

91 
undo_›í
,

92 
undo_˛o£
,

93 
undo_£t_blksize
,

94 
undo_ªad_blk
,

95 
undo_wrôe_blk
,

96 
undo_Êush
,

97 
undo_wrôe_byã
,

98 
undo_£t_›ti⁄


101 
io_m™agî
 
	gundo_io_m™agî
 = &
°ru˘_undo_m™agî
;

102 
io_m™agî
 
	gundo_io_backög_m™agî
 ;

103 *
	gtdb_fûe
;

104 
	ga˘uÆ_size
;

106 
	gmtime_key
[] = "filesystem MTIME";

107 
	gblksize_key
[] = "filesystem BLKSIZE";

108 
	guuid_key
[] = "filesystem UUID";

110 
îrcode_t
 
	$£t_undo_io_backög_m™agî
(
io_m™agî
 
m™agî
)

115 
undo_io_backög_m™agî
 = 
m™agî
;

117 
	}
}

119 
îrcode_t
 
	$£t_undo_io_backup_fûe
(*
fûe_«me
)

121 
tdb_fûe
 = 
	`°rdup
(
fûe_«me
);

123 i‡(
tdb_fûe
 =
NULL
) {

124  
EXT2_ET_NO_MEMORY
;

128 
	}
}

130 
îrcode_t
 
	$wrôe_fûe_sy°em_idítôy
(
io_ch™√l
 
undo_ch™√l
,

131 
TDB_CONTEXT
 *
tdb
)

133 
îrcode_t
 
ªtvÆ
;

134 
ext2_su≥r_block
 
su≥r
;

135 
TDB_DATA
 
tdb_key
, 
tdb_d©a
;

136 
undo_¥iv©e_d©a
 *
d©a
;

137 
io_ch™√l
 
ch™√l
;

138 
block_size
 ;

140 
d©a
 = (
undo_¥iv©e_d©a
 *Ë
undo_ch™√l
->
¥iv©e_d©a
;

141 
ch™√l
 = 
d©a
->
ªÆ
;

142 
block_size
 = 
ch™√l
->block_size;

144 
	`io_ch™√l_£t_blksize
(
ch™√l
, 
SUPERBLOCK_OFFSET
);

145 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
ch™√l
, 1, -
SUPERBLOCK_SIZE
, &
su≥r
);

146 i‡(
ªtvÆ
)

147 
îr_out
;

150 
tdb_key
.
d±r
 = 
mtime_key
;

151 
tdb_key
.
dsize
 = (
mtime_key
);

152 
tdb_d©a
.
d±r
 = (*Ë&(
su≥r
.
s_mtime
);

153 
tdb_d©a
.
dsize
 = (
su≥r
.
s_mtime
);

155 
ªtvÆ
 = 
	`tdb_°‹e
(
tdb
, 
tdb_key
, 
tdb_d©a
, 
TDB_INSERT
);

156 i‡(
ªtvÆ
 == -1) {

157 
ªtvÆ
 = 
EXT2_ET_TDB_SUCCESS
 + 
	`tdb_îr‹
(
tdb
);

158 
îr_out
;

161 
tdb_key
.
d±r
 = 
uuid_key
;

162 
tdb_key
.
dsize
 = (
uuid_key
);

163 
tdb_d©a
.
d±r
 = (*)&(
su≥r
.
s_uuid
);

164 
tdb_d©a
.
dsize
 = (
su≥r
.
s_uuid
);

166 
ªtvÆ
 = 
	`tdb_°‹e
(
tdb
, 
tdb_key
, 
tdb_d©a
, 
TDB_INSERT
);

167 i‡(
ªtvÆ
 == -1) {

168 
ªtvÆ
 = 
EXT2_ET_TDB_SUCCESS
 + 
	`tdb_îr‹
(
tdb
);

171 
îr_out
:

172 
	`io_ch™√l_£t_blksize
(
ch™√l
, 
block_size
);

173  
ªtvÆ
;

174 
	}
}

176 
îrcode_t
 
	$wrôe_block_size
(
TDB_CONTEXT
 *
tdb
, 
block_size
)

178 
îrcode_t
 
ªtvÆ
;

179 
TDB_DATA
 
tdb_key
, 
tdb_d©a
;

181 
tdb_key
.
d±r
 = 
blksize_key
;

182 
tdb_key
.
dsize
 = (
blksize_key
);

183 
tdb_d©a
.
d±r
 = (*)&(
block_size
);

184 
tdb_d©a
.
dsize
 = (
block_size
);

186 
ªtvÆ
 = 
	`tdb_°‹e
(
tdb
, 
tdb_key
, 
tdb_d©a
, 
TDB_INSERT
);

187 i‡(
ªtvÆ
 == -1) {

188 
ªtvÆ
 = 
EXT2_ET_TDB_SUCCESS
 + 
	`tdb_îr‹
(
tdb
);

191  
ªtvÆ
;

192 
	}
}

194 
îrcode_t
 
	$undo_wrôe_tdb
(
io_ch™√l
 
ch™√l
,

195 
block
, 
cou¡
)

198 
size
, 
sz
;

199 
block_num
, 
backög_blk_num
;

200 
îrcode_t
 
ªtvÆ
 = 0;

201 
ext2_loff_t
 
off£t
;

202 
undo_¥iv©e_d©a
 *
d©a
;

203 
TDB_DATA
 
tdb_key
, 
tdb_d©a
;

204 *
ªad_±r
;

205 
íd_block
;

207 
d©a
 = (
undo_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

209 i‡(
d©a
->
tdb
 =
NULL
) {

216 i‡(
cou¡
 == 1)

217 
size
 = 
ch™√l
->
block_size
;

219 i‡(
cou¡
 < 0)

220 
size
 = -
cou¡
;

222 
size
 = 
cou¡
 * 
ch™√l
->
block_size
;

230 
off£t
 = (
block
 * 
ch™√l
->
block_size
Ë+ 
d©a
->offset ;

231 
block_num
 = 
off£t
 / 
d©a
->
tdb_d©a_size
;

232 
íd_block
 = (
off£t
 + 
size
Ë/ 
d©a
->
tdb_d©a_size
;

234 
	`tdb_å™ß˘i⁄_°¨t
(
d©a
->
tdb
);

235 
block_num
 <
íd_block
 ) {

237 
tdb_key
.
d±r
 = (*)&
block_num
;

238 
tdb_key
.
dsize
 = (
block_num
);

242 i‡(
	`tdb_exi°s
(
d©a
->
tdb
, 
tdb_key
)) {

244 
block_num
++;

254 
off£t
 = 
block_num
 * 
d©a
->
tdb_d©a_size
;

255 
backög_blk_num
 = (
off£t
 - 
d©a
->off£tË/ 
ch™√l
->
block_size
;

257 
cou¡
 = 
d©a
->
tdb_d©a_size
 +

258 ((
off£t
 - 
d©a
->off£tË% 
ch™√l
->
block_size
);

259 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
cou¡
, &
ªad_±r
);

260 i‡(
ªtvÆ
) {

261 
	`tdb_å™ß˘i⁄_ˇn˚l
(
d©a
->
tdb
);

262  
ªtvÆ
;

265 
	`mem£t
(
ªad_±r
, 0, 
cou¡
);

266 
a˘uÆ_size
 = 0;

267 i‡((
cou¡
 % 
ch™√l
->
block_size
) == 0)

268 
sz
 = 
cou¡
 / 
ch™√l
->
block_size
;

270 
sz
 = -
cou¡
;

271 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
d©a
->
ªÆ
, 
backög_blk_num
,

272 
sz
, 
ªad_±r
);

273 i‡(
ªtvÆ
) {

274 i‡(
ªtvÆ
 !
EXT2_ET_SHORT_READ
) {

275 
	`‰ì
(
ªad_±r
);

276 
	`tdb_å™ß˘i⁄_ˇn˚l
(
d©a
->
tdb
);

277  
ªtvÆ
;

283 
tdb_d©a
.
dsize
 = 
a˘uÆ_size
;

285 
tdb_d©a
.
dsize
 = 
d©a
->
tdb_d©a_size
;

287 
tdb_d©a
.
d±r
 = 
ªad_±r
 +

288 ((
off£t
 - 
d©a
->off£tË% 
ch™√l
->
block_size
);

289 #ifde‡
DEBUG


290 
	`¥ötf
("Printing with key %ld data %xánd size %d\n",

291 
block_num
,

292 
tdb_d©a
.
d±r
,

293 
tdb_d©a
.
dsize
);

295 i‡(!
d©a
->
tdb_wrôãn
) {

296 
d©a
->
tdb_wrôãn
 = 1;

298 
ªtvÆ
 = 
	`wrôe_block_size
(
d©a
->
tdb
,

299 
d©a
->
tdb_d©a_size
);

300 i‡(
ªtvÆ
) {

301 
	`tdb_å™ß˘i⁄_ˇn˚l
(
d©a
->
tdb
);

302 
ªtvÆ
 = 
EXT2_ET_TDB_ERR_IO
;

303 
	`‰ì
(
ªad_±r
);

304  
ªtvÆ
;

307 
ªtvÆ
 = 
	`tdb_°‹e
(
d©a
->
tdb
, 
tdb_key
, 
tdb_d©a
, 
TDB_INSERT
);

308 i‡(
ªtvÆ
 == -1) {

313 
	`tdb_å™ß˘i⁄_ˇn˚l
(
d©a
->
tdb
);

314 
ªtvÆ
 = 
EXT2_ET_TDB_ERR_IO
;

315 
	`‰ì
(
ªad_±r
);

316  
ªtvÆ
;

318 
	`‰ì
(
ªad_±r
);

320 
block_num
++;

322 
	`tdb_å™ß˘i⁄_commô
(
d©a
->
tdb
);

324  
ªtvÆ
;

325 
	}
}

327 
îrcode_t
 
undo_io_ªad_îr‹
(
io_ch™√l
 
ch™√l
 
ATTR
((
unu£d
)),

328 
block
 
ATTR
((
unu£d
)),

329 
cou¡
 
ATTR
((
unu£d
)),

330 *
d©a
 
ATTR
((
unu£d
)),

331 
size_t
 
size
 
ATTR
((
unu£d
)),

332 
a˘uÆ
,

333 
îrcode_t
 
îr‹
 
ATTR
((
unu£d
)))

335 
	ga˘uÆ_size
 = 
a˘uÆ
;

336  
	gîr‹
;

339 
	$undo_îr_h™dÀr_öô
(
io_ch™√l
 
ch™√l
)

341 
ch™√l
->
ªad_îr‹
 = 
undo_io_ªad_îr‹
;

342 
	}
}

344 
îrcode_t
 
	$undo_›í
(c⁄° *
«me
, 
Êags
, 
io_ch™√l
 *
ch™√l
)

346 
io_ch™√l
 
io
 = 
NULL
;

347 
undo_¥iv©e_d©a
 *
d©a
 = 
NULL
;

348 
îrcode_t
 
ªtvÆ
;

350 i‡(
«me
 == 0)

351  
EXT2_ET_BAD_DEVICE_NAME
;

352 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
°ru˘_io_ch™√l
), &
io
);

353 i‡(
ªtvÆ
)

354  
ªtvÆ
;

355 
	`mem£t
(
io
, 0, (
°ru˘_io_ch™√l
));

356 
io
->
magic
 = 
EXT2_ET_MAGIC_IO_CHANNEL
;

357 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
undo_¥iv©e_d©a
), &
d©a
);

358 i‡(
ªtvÆ
)

359 
˛ónup
;

361 
io
->
m™agî
 = 
undo_io_m™agî
;

362 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
	`°æí
(
«me
)+1, &
io
->name);

363 i‡(
ªtvÆ
)

364 
˛ónup
;

366 
	`°r˝y
(
io
->
«me
,Çame);

367 
io
->
¥iv©e_d©a
 = 
d©a
;

368 
io
->
block_size
 = 1024;

369 
io
->
ªad_îr‹
 = 0;

370 
io
->
wrôe_îr‹
 = 0;

371 
io
->
ªfcou¡
 = 1;

373 
	`mem£t
(
d©a
, 0, (
undo_¥iv©e_d©a
));

374 
d©a
->
magic
 = 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
;

376 i‡(
undo_io_backög_m™agî
) {

377 
ªtvÆ
 = 
undo_io_backög_m™agî
->
	`›í
(
«me
, 
Êags
,

378 &
d©a
->
ªÆ
);

379 i‡(
ªtvÆ
)

380 
˛ónup
;

382 
d©a
->
ªÆ
 = 0;

386 
d©a
->
tdb
 = 
	`tdb_›í
(
tdb_fûe
, 0, 
TDB_CLEAR_IF_FIRST
,

387 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
 | 
O_EXCL
, 0600);

388 i‡(!
d©a
->
tdb
) {

389 
ªtvÆ
 = 
î∫o
;

390 
˛ónup
;

397 
	`undo_îr_h™dÀr_öô
(
d©a
->
ªÆ
);

399 *
ch™√l
 = 
io
;

402 
˛ónup
:

403 i‡(
d©a
->
ªÆ
)

404 
	`io_ch™√l_˛o£
(
d©a
->
ªÆ
);

405 i‡(
d©a
)

406 
	`ext2fs_‰ì_mem
(&
d©a
);

407 i‡(
io
)

408 
	`ext2fs_‰ì_mem
(&
io
);

409  
ªtvÆ
;

410 
	}
}

412 
îrcode_t
 
	$undo_˛o£
(
io_ch™√l
 
ch™√l
)

414 
undo_¥iv©e_d©a
 *
d©a
;

415 
îrcode_t
 
ªtvÆ
 = 0;

417 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

418 
d©a
 = (
undo_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

419 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

421 i‡(--
ch™√l
->
ªfcou¡
 > 0)

424 
ªtvÆ
 = 
	`wrôe_fûe_sy°em_idítôy
(
ch™√l
, 
d©a
->
tdb
);

425 i‡(
ªtvÆ
)

426  
ªtvÆ
;

427 i‡(
d©a
->
ªÆ
)

428 
ªtvÆ
 = 
	`io_ch™√l_˛o£
(
d©a
->
ªÆ
);

429 i‡(
d©a
->
tdb
)

430 
	`tdb_˛o£
(
d©a
->
tdb
);

431 
	`ext2fs_‰ì_mem
(&
ch™√l
->
¥iv©e_d©a
);

432 i‡(
ch™√l
->
«me
)

433 
	`ext2fs_‰ì_mem
(&
ch™√l
->
«me
);

434 
	`ext2fs_‰ì_mem
(&
ch™√l
);

436  
ªtvÆ
;

437 
	}
}

439 
îrcode_t
 
	$undo_£t_blksize
(
io_ch™√l
 
ch™√l
, 
blksize
)

441 
undo_¥iv©e_d©a
 *
d©a
;

442 
îrcode_t
 
ªtvÆ
 = 0;

444 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

445 
d©a
 = (
undo_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

446 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

448 i‡(
d©a
->
ªÆ
)

449 
ªtvÆ
 = 
	`io_ch™√l_£t_blksize
(
d©a
->
ªÆ
, 
blksize
);

453 i‡(!
d©a
->
tdb_d©a_size
) {

454 
d©a
->
tdb_d©a_size
 = 
blksize
;

456 
ch™√l
->
block_size
 = 
blksize
;

457  
ªtvÆ
;

458 
	}
}

460 
îrcode_t
 
	$undo_ªad_blk
(
io_ch™√l
 
ch™√l
, 
block
,

461 
cou¡
, *
buf
)

463 
îrcode_t
 
ªtvÆ
 = 0;

464 
undo_¥iv©e_d©a
 *
d©a
;

466 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

467 
d©a
 = (
undo_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

468 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

470 i‡(
d©a
->
ªÆ
)

471 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
d©a
->
ªÆ
, 
block
, 
cou¡
, 
buf
);

473  
ªtvÆ
;

474 
	}
}

476 
îrcode_t
 
	$undo_wrôe_blk
(
io_ch™√l
 
ch™√l
, 
block
,

477 
cou¡
, c⁄° *
buf
)

479 
undo_¥iv©e_d©a
 *
d©a
;

480 
îrcode_t
 
ªtvÆ
 = 0;

482 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

483 
d©a
 = (
undo_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

484 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

488 
ªtvÆ
 = 
	`undo_wrôe_tdb
(
ch™√l
, 
block
, 
cou¡
);

489 i‡(
ªtvÆ
)

490  
ªtvÆ
;

491 i‡(
d©a
->
ªÆ
)

492 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
d©a
->
ªÆ
, 
block
, 
cou¡
, 
buf
);

494  
ªtvÆ
;

495 
	}
}

497 
îrcode_t
 
	$undo_wrôe_byã
(
io_ch™√l
 
ch™√l
, 
off£t
,

498 
size
, c⁄° *
buf
)

500 
undo_¥iv©e_d©a
 *
d©a
;

501 
îrcode_t
 
ªtvÆ
 = 0;

502 
ext2_loff_t
 
loˇti⁄
;

503 
blk_num
, 
cou¡
;;

505 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

506 
d©a
 = (
undo_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

507 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

509 
loˇti⁄
 = 
off£t
 + 
d©a
->offset;

510 
blk_num
 = 
loˇti⁄
/
ch™√l
->
block_size
;

517 
cou¡
 = (
size
 + (
loˇti⁄
 % 
ch™√l
->
block_size
) +

518 
ch™√l
->
block_size
 -1)/channel->block_size;

519 
ªtvÆ
 = 
	`undo_wrôe_tdb
(
ch™√l
, 
blk_num
, 
cou¡
);

520 i‡(
ªtvÆ
)

521  
ªtvÆ
;

522 i‡(
d©a
->
ªÆ
 && d©a->ªÆ->
m™agî
->
wrôe_byã
)

523 
ªtvÆ
 = 
	`io_ch™√l_wrôe_byã
(
d©a
->
ªÆ
, 
off£t
, 
size
, 
buf
);

525  
ªtvÆ
;

526 
	}
}

531 
îrcode_t
 
	$undo_Êush
(
io_ch™√l
 
ch™√l
)

533 
îrcode_t
 
ªtvÆ
 = 0;

534 
undo_¥iv©e_d©a
 *
d©a
;

536 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

537 
d©a
 = (
undo_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

538 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

540 i‡(
d©a
->
ªÆ
)

541 
ªtvÆ
 = 
	`io_ch™√l_Êush
(
d©a
->
ªÆ
);

543  
ªtvÆ
;

544 
	}
}

546 
îrcode_t
 
	$undo_£t_›ti⁄
(
io_ch™√l
 
ch™√l
, c⁄° *
›ti⁄
,

547 c⁄° *
¨g
)

549 
îrcode_t
 
ªtvÆ
 = 0;

550 
undo_¥iv©e_d©a
 *
d©a
;

551 
tmp
;

552 *
íd
;

554 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

555 
d©a
 = (
undo_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

556 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

558 i‡(!
	`°rcmp
(
›ti⁄
, "tdb_data_size")) {

559 i‡(!
¨g
)

560  
EXT2_ET_INVALID_ARGUMENT
;

562 
tmp
 = 
	`°πoul
(
¨g
, &
íd
, 0);

563 i‡(*
íd
)

564  
EXT2_ET_INVALID_ARGUMENT
;

565 i‡(!
d©a
->
tdb_d©a_size
 || !d©a->
tdb_wrôãn
) {

566 
d©a
->
tdb_d©a_size
 = 
tmp
;

574 i‡(
d©a
->
ªÆ
 && d©a->ªÆ->
m™agî
->
£t_›ti⁄
) {

575 
ªtvÆ
 = 
d©a
->
ªÆ
->
m™agî
->
	`£t_›ti⁄
(data->real,

576 
›ti⁄
, 
¨g
);

578 i‡(!
ªtvÆ
 && !
	`°rcmp
(
›ti⁄
, "offset")) {

579 i‡(!
¨g
)

580  
EXT2_ET_INVALID_ARGUMENT
;

582 
tmp
 = 
	`°πoul
(
¨g
, &
íd
, 0);

583 i‡(*
íd
)

584  
EXT2_ET_INVALID_ARGUMENT
;

585 
d©a
->
off£t
 = 
tmp
;

587  
ªtvÆ
;

588 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/unix_io.c

18 
	#_LARGEFILE_SOURCE


	)

19 
	#_LARGEFILE64_SOURCE


	)

21 
	~<c⁄fig.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 #i‡
HAVE_UNISTD_H


26 
	~<uni°d.h
>

28 #i‡
HAVE_ERRNO_H


29 
	~<î∫o.h
>

31 
	~<f˙é.h
>

32 
	~<time.h
>

33 #ifde‡
__löux__


34 
	~<sys/ut¢ame.h
>

36 #ifde‡
HAVE_SYS_IOCTL_H


37 
	~<sys/io˘l.h
>

39 #ifde‡
HAVE_SYS_MOUNT_H


40 
	~<sys/mou¡.h
>

42 #i‡
HAVE_SYS_STAT_H


43 
	~<sys/°©.h
>

45 #i‡
HAVE_SYS_TYPES_H


46 
	~<sys/ty≥s.h
>

48 #i‡
HAVE_SYS_RESOURCE_H


49 
	~<sys/ªsour˚.h
>

52 #i‡
deföed
(
__löux__
Ë&& deföed(
_IO
Ë&& !deföed(
BLKGETSIZE
)

53 
	#BLKROGET
 
	`_IO
(0x12, 94Ë

	)

56 
	~"ext2_fs.h
"

57 
	~"ext2fs.h
"

63 
	#EXT2_CHECK_MAGIC
(, 
code
) \

64 i‡(()->
magic
 !(
code
)Ë (code)

	)

66 
	sunix_ˇche
 {

67 *
	mbuf
;

68 
	mblock
;

69 
	mac˚ss_time
;

70 
	mdúty
:1;

71 
	mö_u£
:1;

74 
	#CACHE_SIZE
 8

	)

75 
	#WRITE_DIRECT_SIZE
 4

	)

76 
	#READ_DIRECT_SIZE
 4

	)

78 
	sunix_¥iv©e_d©a
 {

79 
	mmagic
;

80 
	mdev
;

81 
	mÊags
;

82 
	mac˚ss_time
;

83 
ext2_loff_t
 
	moff£t
;

84 
unix_ˇche
 
	mˇche
[
CACHE_SIZE
];

85 
°ru˘_io_°©s
 
	mio_°©s
;

88 
îrcode_t
 
unix_›í
(c⁄° *
«me
, 
Êags
, 
io_ch™√l
 *
ch™√l
);

89 
îrcode_t
 
unix_˛o£
(
io_ch™√l
 
ch™√l
);

90 
îrcode_t
 
unix_£t_blksize
(
io_ch™√l
 
ch™√l
, 
blksize
);

91 
îrcode_t
 
unix_ªad_blk
(
io_ch™√l
 
ch™√l
, 
block
,

92 
cou¡
, *
d©a
);

93 
îrcode_t
 
unix_wrôe_blk
(
io_ch™√l
 
ch™√l
, 
block
,

94 
cou¡
, c⁄° *
d©a
);

95 
îrcode_t
 
unix_Êush
(
io_ch™√l
 
ch™√l
);

96 
îrcode_t
 
unix_wrôe_byã
(
io_ch™√l
 
ch™√l
, 
off£t
,

97 
size
, c⁄° *
d©a
);

98 
îrcode_t
 
unix_£t_›ti⁄
(
io_ch™√l
 
ch™√l
, c⁄° *
›ti⁄
,

99 c⁄° *
¨g
);

100 
îrcode_t
 
unix_gë_°©s
(
io_ch™√l
 
ch™√l
, 
io_°©s
 *
°©s
)

102 
ªu£_ˇche
(
io_ch™√l
 
ch™√l
, 
unix_¥iv©e_d©a
 *
d©a
,

103 
unix_ˇche
 *
ˇche
, 
block
);

104 
îrcode_t
 
unix_ªad_blk64
(
io_ch™√l
 
ch™√l
, 
block
,

105 
cou¡
, *
d©a
);

106 
îrcode_t
 
unix_wrôe_blk64
(
io_ch™√l
 
ch™√l
, 
block
,

107 
cou¡
, c⁄° *
d©a
);

111 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
__FªeBSD__
Ë|| deföed(
__FªeBSD_kî√l__
)

112 
	#NEED_BOUNCE_BUFFER


	)

114 #unde‡
NEED_BOUNCE_BUFFER


117 
°ru˘_io_m™agî
 
	g°ru˘_unix_m™agî
 = {

118 
EXT2_ET_MAGIC_IO_MANAGER
,

120 
unix_›í
,

121 
unix_˛o£
,

122 
unix_£t_blksize
,

123 
unix_ªad_blk
,

124 
unix_wrôe_blk
,

125 
unix_Êush
,

126 #ifde‡
NEED_BOUNCE_BUFFER


129 
unix_wrôe_byã
,

131 
unix_£t_›ti⁄
,

132 
unix_gë_°©s
,

133 
unix_ªad_blk64
,

134 
unix_wrôe_blk64
,

137 
io_m™agî
 
	gunix_io_m™agî
 = &
°ru˘_unix_m™agî
;

139 
îrcode_t
 
	$unix_gë_°©s
(
io_ch™√l
 
ch™√l
, 
io_°©s
 *
°©s
)

141 
îrcode_t
 
ªtvÆ
 = 0;

143 
unix_¥iv©e_d©a
 *
d©a
;

145 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

146 
d©a
 = (
unix_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

147 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

149 i‡(
°©s
)

150 *
°©s
 = &
d©a
->
io_°©s
;

152  
ªtvÆ
;

153 
	}
}

158 #i‚de‡
NEED_BOUNCE_BUFFER


159 
îrcode_t
 
	$øw_ªad_blk
(
io_ch™√l
 
ch™√l
,

160 
unix_¥iv©e_d©a
 *
d©a
,

161 
block
,

162 
cou¡
, *
buf
)

164 
îrcode_t
 
ªtvÆ
;

165 
ssize_t
 
size
;

166 
ext2_loff_t
 
loˇti⁄
;

167 
a˘uÆ
 = 0;

169 
size
 = (
cou¡
 < 0Ë? -cou¡ : cou¡ * 
ch™√l
->
block_size
;

170 
d©a
->
io_°©s
.
byãs_ªad
 +
size
;

171 
loˇti⁄
 = ((
ext2_loff_t
Ë
block
 * 
ch™√l
->
block_size
Ë+ 
d©a
->
off£t
;

172 i‡(
	`ext2fs_Œ£ek
(
d©a
->
dev
, 
loˇti⁄
, 
SEEK_SET
) !=Üocation) {

173 
ªtvÆ
 = 
î∫o
 ?Éºnÿ: 
EXT2_ET_LLSEEK_FAILED
;

174 
îr‹_out
;

176 
a˘uÆ
 = 
	`ªad
(
d©a
->
dev
, 
buf
, 
size
);

177 i‡(
a˘uÆ
 !
size
) {

178 i‡(
a˘uÆ
 < 0)

179 
a˘uÆ
 = 0;

180 
ªtvÆ
 = 
EXT2_ET_SHORT_READ
;

181 
îr‹_out
;

185 
îr‹_out
:

186 
	`mem£t
((*Ë
buf
+
a˘uÆ
, 0, 
size
-actual);

187 i‡(
ch™√l
->
ªad_îr‹
)

188 
ªtvÆ
 = (
ch™√l
->
ªad_îr‹
)(ch™√l, 
block
, 
cou¡
, 
buf
,

189 
size
, 
a˘uÆ
, 
ªtvÆ
);

190  
ªtvÆ
;

191 
	}
}

196 
îrcode_t
 
	$øw_ªad_blk
(
io_ch™√l
 
ch™√l
,

197 
unix_¥iv©e_d©a
 *
d©a
,

198 
block
,

199 
cou¡
, *
buf
)

201 
îrcode_t
 
ªtvÆ
;

202 
size_t
 
size
, 
Æignsize
, 
‰agmít
;

203 
ext2_loff_t
 
loˇti⁄
;

204 
tŸÆ
 = 0, 
a˘uÆ
;

205 
	#BLOCKALIGN
 512

	)

206 
£˘‹
[
BLOCKALIGN
];

208 
size
 = (
cou¡
 < 0Ë? -cou¡ : cou¡ * 
ch™√l
->
block_size
;

209 
d©a
->
io_°©s
.
byãs_ªad
 +
size
;

210 
loˇti⁄
 = ((
ext2_loff_t
Ë
block
 * 
ch™√l
->
block_size
Ë+ 
d©a
->
off£t
;

211 #ifde‡
DEBUG


212 
	`¥ötf
("count=%d, size=%d, block=%lu, blk_size=%d,Üocation=%llx\n",

213 
cou¡
, 
size
, 
block
, 
ch™√l
->
block_size
, ()
loˇti⁄
);

215 i‡(
	`ext2fs_Œ£ek
(
d©a
->
dev
, 
loˇti⁄
, 
SEEK_SET
) !=Üocation) {

216 
ªtvÆ
 = 
î∫o
 ?Éºnÿ: 
EXT2_ET_LLSEEK_FAILED
;

217 
îr‹_out
;

219 
‰agmít
 = 
size
 % 
BLOCKALIGN
;

220 
Æignsize
 = 
size
 - 
‰agmít
;

221 i‡(
Æignsize
) {

222 
a˘uÆ
 = 
	`ªad
(
d©a
->
dev
, 
buf
, 
Æignsize
);

223 i‡(
a˘uÆ
 !
Æignsize
)

224 
sh‹t_ªad
;

226 i‡(
‰agmít
) {

227 
a˘uÆ
 = 
	`ªad
(
d©a
->
dev
, 
£˘‹
, 
BLOCKALIGN
);

228 i‡(
a˘uÆ
 !
BLOCKALIGN
)

229 
sh‹t_ªad
;

230 
	`mem˝y
(
buf
+
Æignsize
, 
£˘‹
, 
‰agmít
);

234 
sh‹t_ªad
:

235 i‡(
a˘uÆ
>0)

236 
tŸÆ
 +
a˘uÆ
;

237 
ªtvÆ
 = 
EXT2_ET_SHORT_READ
;

239 
îr‹_out
:

240 
	`mem£t
((*Ë
buf
+
tŸÆ
, 0, 
size
-
a˘uÆ
);

241 i‡(
ch™√l
->
ªad_îr‹
)

242 
ªtvÆ
 = (
ch™√l
->
ªad_îr‹
)(ch™√l, 
block
, 
cou¡
, 
buf
,

243 
size
, 
a˘uÆ
, 
ªtvÆ
);

244  
ªtvÆ
;

245 
	}
}

248 
îrcode_t
 
	$øw_wrôe_blk
(
io_ch™√l
 
ch™√l
,

249 
unix_¥iv©e_d©a
 *
d©a
,

250 
block
,

251 
cou¡
, c⁄° *
buf
)

253 
ssize_t
 
size
;

254 
ext2_loff_t
 
loˇti⁄
;

255 
a˘uÆ
 = 0;

256 
îrcode_t
 
ªtvÆ
;

258 i‡(
cou¡
 == 1)

259 
size
 = 
ch™√l
->
block_size
;

261 i‡(
cou¡
 < 0)

262 
size
 = -
cou¡
;

264 
size
 = 
cou¡
 * 
ch™√l
->
block_size
;

266 
d©a
->
io_°©s
.
byãs_wrôãn
 +
size
;

268 
loˇti⁄
 = ((
ext2_loff_t
Ë
block
 * 
ch™√l
->
block_size
Ë+ 
d©a
->
off£t
;

269 i‡(
	`ext2fs_Œ£ek
(
d©a
->
dev
, 
loˇti⁄
, 
SEEK_SET
) !=Üocation) {

270 
ªtvÆ
 = 
î∫o
 ?Éºnÿ: 
EXT2_ET_LLSEEK_FAILED
;

271 
îr‹_out
;

274 
a˘uÆ
 = 
	`wrôe
(
d©a
->
dev
, 
buf
, 
size
);

275 i‡(
a˘uÆ
 !
size
) {

276 
ªtvÆ
 = 
EXT2_ET_SHORT_WRITE
;

277 
îr‹_out
;

281 
îr‹_out
:

282 i‡(
ch™√l
->
wrôe_îr‹
)

283 
ªtvÆ
 = (
ch™√l
->
wrôe_îr‹
)(ch™√l, 
block
, 
cou¡
, 
buf
,

284 
size
, 
a˘uÆ
, 
ªtvÆ
);

285  
ªtvÆ
;

286 
	}
}

294 
îrcode_t
 
	$Æloc_ˇche
(
io_ch™√l
 
ch™√l
,

295 
unix_¥iv©e_d©a
 *
d©a
)

297 
îrcode_t
 
ªtvÆ
;

298 
unix_ˇche
 *
ˇche
;

299 
i
;

301 
d©a
->
ac˚ss_time
 = 0;

302 
i
=0, 
ˇche
 = 
d©a
->ˇche; i < 
CACHE_SIZE
; i++, cache++) {

303 
ˇche
->
block
 = 0;

304 
ˇche
->
ac˚ss_time
 = 0;

305 
ˇche
->
dúty
 = 0;

306 
ˇche
->
ö_u£
 = 0;

307 i‡((
ªtvÆ
 = 
	`ext2fs_gë_mem
(
ch™√l
->
block_size
,

308 &
ˇche
->
buf
)))

309  
ªtvÆ
;

312 
	}
}

315 
	$‰ì_ˇche
(
unix_¥iv©e_d©a
 *
d©a
)

317 
unix_ˇche
 *
ˇche
;

318 
i
;

320 
d©a
->
ac˚ss_time
 = 0;

321 
i
=0, 
ˇche
 = 
d©a
->ˇche; i < 
CACHE_SIZE
; i++, cache++) {

322 
ˇche
->
block
 = 0;

323 
ˇche
->
ac˚ss_time
 = 0;

324 
ˇche
->
dúty
 = 0;

325 
ˇche
->
ö_u£
 = 0;

326 i‡(
ˇche
->
buf
)

327 
	`ext2fs_‰ì_mem
(&
ˇche
->
buf
);

328 
ˇche
->
buf
 = 0;

330 
	}
}

332 #i‚de‡
NO_IO_CACHE


338 
unix_ˇche
 *
	$föd_ˇched_block
(
unix_¥iv©e_d©a
 *
d©a
,

339 
block
,

340 
unix_ˇche
 **
ñde°
)

342 
unix_ˇche
 *
ˇche
, *
unu£d_ˇche
, *
ﬁde°_ˇche
;

343 
i
;

345 
unu£d_ˇche
 = 
ﬁde°_ˇche
 = 0;

346 
i
=0, 
ˇche
 = 
d©a
->ˇche; i < 
CACHE_SIZE
; i++, cache++) {

347 i‡(!
ˇche
->
ö_u£
) {

348 i‡(!
unu£d_ˇche
)

349 
unu£d_ˇche
 = 
ˇche
;

352 i‡(
ˇche
->
block
 == block) {

353 
ˇche
->
ac˚ss_time
 = ++
d©a
->access_time;

354  
ˇche
;

356 i‡(!
ﬁde°_ˇche
 ||

357 (
ˇche
->
ac˚ss_time
 < 
ﬁde°_ˇche
->access_time))

358 
ﬁde°_ˇche
 = 
ˇche
;

360 i‡(
ñde°
)

361 *
ñde°
 = (
unu£d_ˇche
Ë? unu£d_ˇchê: 
ﬁde°_ˇche
;

363 
	}
}

368 
	$ªu£_ˇche
(
io_ch™√l
 
ch™√l
, 
unix_¥iv©e_d©a
 *
d©a
,

369 
unix_ˇche
 *
ˇche
, 
block
)

371 i‡(
ˇche
->
dúty
 && cache->
ö_u£
)

372 
	`øw_wrôe_blk
(
ch™√l
, 
d©a
, 
ˇche
->
block
, 1, cache->
buf
);

374 
ˇche
->
ö_u£
 = 1;

375 
ˇche
->
dúty
 = 0;

376 
ˇche
->
block
 = block;

377 
ˇche
->
ac˚ss_time
 = ++
d©a
->access_time;

378 
	}
}

383 
îrcode_t
 
	$Êush_ˇched_blocks
(
io_ch™√l
 
ch™√l
,

384 
unix_¥iv©e_d©a
 *
d©a
,

385 
övÆid©e
)

388 
unix_ˇche
 *
ˇche
;

389 
îrcode_t
 
ªtvÆ
, 
ªtvÆ2
;

390 
i
;

392 
ªtvÆ2
 = 0;

393 
i
=0, 
ˇche
 = 
d©a
->ˇche; i < 
CACHE_SIZE
; i++, cache++) {

394 i‡(!
ˇche
->
ö_u£
)

397 i‡(
övÆid©e
)

398 
ˇche
->
ö_u£
 = 0;

400 i‡(!
ˇche
->
dúty
)

403 
ªtvÆ
 = 
	`øw_wrôe_blk
(
ch™√l
, 
d©a
,

404 
ˇche
->
block
, 1, cache->
buf
);

405 i‡(
ªtvÆ
)

406 
ªtvÆ2
 = 
ªtvÆ
;

408 
ˇche
->
dúty
 = 0;

410  
ªtvÆ2
;

411 
	}
}

414 
îrcode_t
 
	$unix_›í
(c⁄° *
«me
, 
Êags
, 
io_ch™√l
 *
ch™√l
)

416 
io_ch™√l
 
io
 = 
NULL
;

417 
unix_¥iv©e_d©a
 *
d©a
 = 
NULL
;

418 
îrcode_t
 
ªtvÆ
;

419 
›í_Êags
;

420 
°©
 
°
;

421 #ifde‡
__löux__


422 
ut¢ame
 
ut
;

425 i‡(
«me
 == 0)

426  
EXT2_ET_BAD_DEVICE_NAME
;

427 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
°ru˘_io_ch™√l
), &
io
);

428 i‡(
ªtvÆ
)

429  
ªtvÆ
;

430 
	`mem£t
(
io
, 0, (
°ru˘_io_ch™√l
));

431 
io
->
magic
 = 
EXT2_ET_MAGIC_IO_CHANNEL
;

432 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
unix_¥iv©e_d©a
), &
d©a
);

433 i‡(
ªtvÆ
)

434 
˛ónup
;

436 
io
->
m™agî
 = 
unix_io_m™agî
;

437 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
	`°æí
(
«me
)+1, &
io
->name);

438 i‡(
ªtvÆ
)

439 
˛ónup
;

441 
	`°r˝y
(
io
->
«me
,Çame);

442 
io
->
¥iv©e_d©a
 = 
d©a
;

443 
io
->
block_size
 = 1024;

444 
io
->
ªad_îr‹
 = 0;

445 
io
->
wrôe_îr‹
 = 0;

446 
io
->
ªfcou¡
 = 1;

448 
	`mem£t
(
d©a
, 0, (
unix_¥iv©e_d©a
));

449 
d©a
->
magic
 = 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
;

450 
d©a
->
io_°©s
.
num_fõlds
 = 2;

452 i‡((
ªtvÆ
 = 
	`Æloc_ˇche
(
io
, 
d©a
)))

453 
˛ónup
;

455 
›í_Êags
 = (
Êags
 & 
IO_FLAG_RW
Ë? 
O_RDWR
 : 
O_RDONLY
;

456 i‡(
Êags
 & 
IO_FLAG_EXCLUSIVE
)

457 
›í_Êags
 |
O_EXCL
;

458 #ifde‡
HAVE_OPEN64


459 
d©a
->
dev
 = 
	`›í64
(
io
->
«me
, 
›í_Êags
);

461 
d©a
->
dev
 = 
	`›í
(
io
->
«me
, 
›í_Êags
);

463 i‡(
d©a
->
dev
 < 0) {

464 
ªtvÆ
 = 
î∫o
;

465 
˛ónup
;

468 #ifde‡
BLKROGET


469 i‡(
Êags
 & 
IO_FLAG_RW
) {

470 
îr‹
;

471 
ªad⁄ly
 = 0;

474 
îr‹
 = 
	`io˘l
(
d©a
->
dev
, 
BLKROGET
, &
ªad⁄ly
);

475 i‡(!
îr‹
 && 
ªad⁄ly
) {

476 
	`˛o£
(
d©a
->
dev
);

477 
ªtvÆ
 = 
EPERM
;

478 
˛ónup
;

483 #ifde‡
__löux__


484 #unde‡
RLIM_INFINITY


485 #i‡(
	`deföed
(
__Æpha__
Ë|| ((deföed(
__•¨c__
Ë|| deföed(
__mùs__
)Ë&& (
SIZEOF_LONG
 == 4)))

486 
	#RLIM_INFINITY
 (()(~0UL>>1))

	)

488 
	#RLIM_INFINITY
 (~0UL)

	)

497 i‡((
Êags
 & 
IO_FLAG_RW
) &&

498 (
	`u«me
(&
ut
) == 0) &&

499 ((
ut
.
ªÀa£
[0] == '2') && (ut.release[1] == '.') &&

500 (
ut
.
ªÀa£
[2] == '4') && (ut.release[3] == '.') &&

501 (
ut
.
ªÀa£
[4] == '1') && (ut.release[5] >= '0') &&

502 (
ut
.
ªÀa£
[5] < '8')) &&

503 (
	`f°©
(
d©a
->
dev
, &
°
) == 0) &&

504 (
	`S_ISBLK
(
°
.
°_mode
))) {

505 
æimô
 
æim
;

507 
æim
.
æim_cur
 =Ñlim.
æim_max
 = (Ë
RLIM_INFINITY
;

508 
	`£ålimô
(
RLIMIT_FSIZE
, &
æim
);

509 
	`gëæimô
(
RLIMIT_FSIZE
, &
æim
);

510 i‡(((Ë
æim
.
æim_cur
) <

511 ((Ë
æim
.
æim_max
)) {

512 
æim
.
æim_cur
 =Ñlim.
æim_max
;

513 
	`£ålimô
(
RLIMIT_FSIZE
, &
æim
);

517 *
ch™√l
 = 
io
;

520 
˛ónup
:

521 i‡(
d©a
) {

522 
	`‰ì_ˇche
(
d©a
);

523 
	`ext2fs_‰ì_mem
(&
d©a
);

525 i‡(
io
)

526 
	`ext2fs_‰ì_mem
(&
io
);

527  
ªtvÆ
;

528 
	}
}

530 
îrcode_t
 
	$unix_˛o£
(
io_ch™√l
 
ch™√l
)

532 
unix_¥iv©e_d©a
 *
d©a
;

533 
îrcode_t
 
ªtvÆ
 = 0;

535 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

536 
d©a
 = (
unix_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

537 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

539 i‡(--
ch™√l
->
ªfcou¡
 > 0)

542 #i‚de‡
NO_IO_CACHE


543 
ªtvÆ
 = 
	`Êush_ˇched_blocks
(
ch™√l
, 
d©a
, 0);

546 i‡(
	`˛o£
(
d©a
->
dev
) < 0)

547 
ªtvÆ
 = 
î∫o
;

548 
	`‰ì_ˇche
(
d©a
);

550 
	`ext2fs_‰ì_mem
(&
ch™√l
->
¥iv©e_d©a
);

551 i‡(
ch™√l
->
«me
)

552 
	`ext2fs_‰ì_mem
(&
ch™√l
->
«me
);

553 
	`ext2fs_‰ì_mem
(&
ch™√l
);

554  
ªtvÆ
;

555 
	}
}

557 
îrcode_t
 
	$unix_£t_blksize
(
io_ch™√l
 
ch™√l
, 
blksize
)

559 
unix_¥iv©e_d©a
 *
d©a
;

560 
îrcode_t
 
ªtvÆ
;

562 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

563 
d©a
 = (
unix_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

564 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

566 i‡(
ch™√l
->
block_size
 !
blksize
) {

567 #i‚de‡
NO_IO_CACHE


568 i‡((
ªtvÆ
 = 
	`Êush_ˇched_blocks
(
ch™√l
, 
d©a
, 0)))

569  
ªtvÆ
;

572 
ch™√l
->
block_size
 = 
blksize
;

573 
	`‰ì_ˇche
(
d©a
);

574 i‡((
ªtvÆ
 = 
	`Æloc_ˇche
(
ch™√l
, 
d©a
)))

575  
ªtvÆ
;

578 
	}
}

581 
îrcode_t
 
	$unix_ªad_blk64
(
io_ch™√l
 
ch™√l
, 
block
,

582 
cou¡
, *
buf
)

584 
unix_¥iv©e_d©a
 *
d©a
;

585 
unix_ˇche
 *
ˇche
, *
ªu£
[
READ_DIRECT_SIZE
];

586 
îrcode_t
 
ªtvÆ
;

587 *
˝
;

588 
i
, 
j
;

590 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

591 
d©a
 = (
unix_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

592 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

594 #ifde‡
NO_IO_CACHE


595  
	`øw_ªad_blk
(
ch™√l
, 
d©a
, 
block
, 
cou¡
, 
buf
);

601 i‡(
cou¡
 < 0 || cou¡ > 
WRITE_DIRECT_SIZE
) {

602 i‡((
ªtvÆ
 = 
	`Êush_ˇched_blocks
(
ch™√l
, 
d©a
, 0)))

603  
ªtvÆ
;

604  
	`øw_ªad_blk
(
ch™√l
, 
d©a
, 
block
, 
cou¡
, 
buf
);

607 
˝
 = 
buf
;

608 
cou¡
 > 0) {

610 i‡((
ˇche
 = 
	`föd_ˇched_block
(
d©a
, 
block
, &
ªu£
[0]))) {

611 #ifde‡
DEBUG


612 
	`¥ötf
("Usög cached block %lu\n", 
block
);

614 
	`mem˝y
(
˝
, 
ˇche
->
buf
, 
ch™√l
->
block_size
);

615 
cou¡
--;

616 
block
++;

617 
˝
 +
ch™√l
->
block_size
;

624 
i
=1; i < 
cou¡
; i++)

625 i‡(
	`föd_ˇched_block
(
d©a
, 
block
+
i
, &
ªu£
[i]))

627 #ifde‡
DEBUG


628 
	`¥ötf
("Ródög %d block†°¨tögáà%lu\n", 
i
, 
block
);

630 i‡((
ªtvÆ
 = 
	`øw_ªad_blk
(
ch™√l
, 
d©a
, 
block
, 
i
, 
˝
)))

631  
ªtvÆ
;

634 
j
=0; j < 
i
; j++) {

635 
cou¡
--;

636 
ˇche
 = 
ªu£
[
j
];

637 
	`ªu£_ˇche
(
ch™√l
, 
d©a
, 
ˇche
, 
block
++);

638 
	`mem˝y
(
ˇche
->
buf
, 
˝
, 
ch™√l
->
block_size
);

639 
˝
 +
ch™√l
->
block_size
;

644 
	}
}

646 
îrcode_t
 
	$unix_ªad_blk
(
io_ch™√l
 
ch™√l
, 
block
,

647 
cou¡
, *
buf
)

649  
	`unix_ªad_blk64
(
ch™√l
, 
block
, 
cou¡
, 
buf
);

650 
	}
}

652 
îrcode_t
 
	$unix_wrôe_blk64
(
io_ch™√l
 
ch™√l
, 
block
,

653 
cou¡
, c⁄° *
buf
)

655 
unix_¥iv©e_d©a
 *
d©a
;

656 
unix_ˇche
 *
ˇche
, *
ªu£
;

657 
îrcode_t
 
ªtvÆ
 = 0;

658 c⁄° *
˝
;

659 
wrôëhrough
;

661 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

662 
d©a
 = (
unix_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

663 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

665 #ifde‡
NO_IO_CACHE


666  
	`øw_wrôe_blk
(
ch™√l
, 
d©a
, 
block
, 
cou¡
, 
buf
);

672 i‡(
cou¡
 < 0 || cou¡ > 
WRITE_DIRECT_SIZE
) {

673 i‡((
ªtvÆ
 = 
	`Êush_ˇched_blocks
(
ch™√l
, 
d©a
, 1)))

674  
ªtvÆ
;

675  
	`øw_wrôe_blk
(
ch™√l
, 
d©a
, 
block
, 
cou¡
, 
buf
);

683 
wrôëhrough
 = 
ch™√l
->
Êags
 & 
CHANNEL_FLAGS_WRITETHROUGH
;

684 i‡(
wrôëhrough
)

685 
ªtvÆ
 = 
	`øw_wrôe_blk
(
ch™√l
, 
d©a
, 
block
, 
cou¡
, 
buf
);

687 
˝
 = 
buf
;

688 
cou¡
 > 0) {

689 
ˇche
 = 
	`föd_ˇched_block
(
d©a
, 
block
, &
ªu£
);

690 i‡(!
ˇche
) {

691 
ˇche
 = 
ªu£
;

692 
	`ªu£_ˇche
(
ch™√l
, 
d©a
, 
ˇche
, 
block
);

694 
	`mem˝y
(
ˇche
->
buf
, 
˝
, 
ch™√l
->
block_size
);

695 
ˇche
->
dúty
 = !
wrôëhrough
;

696 
cou¡
--;

697 
block
++;

698 
˝
 +
ch™√l
->
block_size
;

700  
ªtvÆ
;

702 
	}
}

704 
îrcode_t
 
	$unix_wrôe_blk
(
io_ch™√l
 
ch™√l
, 
block
,

705 
cou¡
, c⁄° *
buf
)

707  
	`unix_wrôe_blk64
(
ch™√l
, 
block
, 
cou¡
, 
buf
);

708 
	}
}

710 
îrcode_t
 
	$unix_wrôe_byã
(
io_ch™√l
 
ch™√l
, 
off£t
,

711 
size
, c⁄° *
buf
)

713 
unix_¥iv©e_d©a
 *
d©a
;

714 
îrcode_t
 
ªtvÆ
 = 0;

715 
ssize_t
 
a˘uÆ
;

717 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

718 
d©a
 = (
unix_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

719 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

721 #i‚de‡
NO_IO_CACHE


725 i‡((
ªtvÆ
 = 
	`Êush_ˇched_blocks
(
ch™√l
, 
d©a
, 1)))

726  
ªtvÆ
;

729 i‡(
	`l£ek
(
d©a
->
dev
, 
off£t
 + d©a->off£t, 
SEEK_SET
) < 0)

730  
î∫o
;

732 
a˘uÆ
 = 
	`wrôe
(
d©a
->
dev
, 
buf
, 
size
);

733 i‡(
a˘uÆ
 !
size
)

734  
EXT2_ET_SHORT_WRITE
;

737 
	}
}

742 
îrcode_t
 
	$unix_Êush
(
io_ch™√l
 
ch™√l
)

744 
unix_¥iv©e_d©a
 *
d©a
;

745 
îrcode_t
 
ªtvÆ
 = 0;

747 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

748 
d©a
 = (
unix_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

749 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

751 #i‚de‡
NO_IO_CACHE


752 
ªtvÆ
 = 
	`Êush_ˇched_blocks
(
ch™√l
, 
d©a
, 0);

754 
	`fsync
(
d©a
->
dev
);

755  
ªtvÆ
;

756 
	}
}

758 
îrcode_t
 
	$unix_£t_›ti⁄
(
io_ch™√l
 
ch™√l
, c⁄° *
›ti⁄
,

759 c⁄° *
¨g
)

761 
unix_¥iv©e_d©a
 *
d©a
;

762 
tmp
;

763 *
íd
;

765 
	`EXT2_CHECK_MAGIC
(
ch™√l
, 
EXT2_ET_MAGIC_IO_CHANNEL
);

766 
d©a
 = (
unix_¥iv©e_d©a
 *Ë
ch™√l
->
¥iv©e_d©a
;

767 
	`EXT2_CHECK_MAGIC
(
d©a
, 
EXT2_ET_MAGIC_UNIX_IO_CHANNEL
);

769 i‡(!
	`°rcmp
(
›ti⁄
, "offset")) {

770 i‡(!
¨g
)

771  
EXT2_ET_INVALID_ARGUMENT
;

773 
tmp
 = 
	`°πouŒ
(
¨g
, &
íd
, 0);

774 i‡(*
íd
)

775  
EXT2_ET_INVALID_ARGUMENT
;

776 
d©a
->
off£t
 = 
tmp
;

777 i‡(
d©a
->
off£t
 < 0)

778  
EXT2_ET_INVALID_ARGUMENT
;

781  
EXT2_ET_INVALID_ARGUMENT
;

782 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/unlink.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

18 
	~"ext2_fs.h
"

19 
	~"ext2fs.h
"

21 
	slök_°ru˘
 {

22 c⁄° *
	m«me
;

23 
	m«mñí
;

24 
ext2_öo_t
 
	möode
;

25 
	mÊags
;

26 
ext2_dú_íåy
 *
	m¥ev
;

27 
	md⁄e
;

30 #ifde‡
__TURBOC__


31 #¥agm®
¨gsu£d


33 
u∆ök_¥oc
(
ext2_dú_íåy
 *
dúít
,

34 
off£t
,

35 
blocksize
 
EXT2FS_ATTR
((
unu£d
)),

36 *
buf
 
EXT2FS_ATTR
((
unu£d
)),

37 *
¥iv_d©a
)

39 
lök_°ru˘
 *
	gls
 = (lök_°ru˘ *Ë
¥iv_d©a
;

40 
ext2_dú_íåy
 *
	g¥ev
;

42 
	g¥ev
 = 
ls
->
¥ev
;

43 
	gls
->
	g¥ev
 = 
dúít
;

45 i‡(
	gls
->
	g«me
) {

46 i‡((
	gdúít
->
	g«me_Àn
 & 0xFFË!
ls
->
«mñí
)

48 i‡(
°∫cmp
(
ls
->
«me
, 
dúít
->«me, dúít->
«me_Àn
 & 0xFF))

51 i‡(
	gls
->
	göode
) {

52 i‡(
	gdúít
->
	göode
 !
ls
->
öode
)

55 i‡(!
	gdúít
->
	göode
)

59 i‡(
	goff£t
)

60 
	g¥ev
->
	gªc_Àn
 +
dúít
->
ªc_Àn
;

62 
	gdúít
->
	göode
 = 0;

63 
	gls
->
	gd⁄e
++;

64  
	gDIRENT_ABORT
|
	gDIRENT_CHANGED
;

67 #ifde‡
__TURBOC__


68 #¥agm®
¨gsu£d


70 
îrcode_t
 
ext2fs_u∆ök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
,

71 c⁄° *
«me
, 
ext2_öo_t
 
öo
,

72 
Êags
 
EXT2FS_ATTR
((
unu£d
)))

74 
îrcode_t
 
	gªtvÆ
;

75 
lök_°ru˘
 
	gls
;

77 
EXT2_CHECK_MAGIC
(
fs
, 
EXT2_ET_MAGIC_EXT2FS_FILSYS
);

79 i‡(!
	g«me
 && !
	göo
)

80  
	gEXT2_ET_INVALID_ARGUMENT
;

82 i‡(!(
	gfs
->
	gÊags
 & 
	gEXT2_FLAG_RW
))

83  
	gEXT2_ET_RO_FILSYS
;

85 
	gls
.
	g«me
 = 
«me
;

86 
	gls
.
	g«mñí
 = 
«me
 ? 
°æí
(name) : 0;

87 
	gls
.
	göode
 = 
öo
;

88 
	gls
.
	gÊags
 = 0;

89 
	gls
.
	gd⁄e
 = 0;

90 
	gls
.
	g¥ev
 = 0;

92 
	gªtvÆ
 = 
ext2fs_dú_ôî©e
(
fs
, 
dú
, 
DIRENT_FLAG_INCLUDE_EMPTY
,

93 0, 
u∆ök_¥oc
, &
ls
);

94 i‡(
	gªtvÆ
)

95  
	gªtvÆ
;

97  (
	gls
.
	gd⁄e
Ë? 0 : 
EXT2_ET_DIR_NO_SPACE
;

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/valid_blk.c

13 
	~<°dio.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<°rög.h
>

18 
	~<time.h
>

20 
	~"ext2_fs.h
"

21 
	~"ext2fs.h
"

27 
	$ext2fs_öode_has_vÆid_blocks
(
ext2_öode
 *
öode
)

33 i‡(!
	`LINUX_S_ISDIR
(
öode
->
i_mode
Ë&& !
	`LINUX_S_ISREG
(inode->i_mode) &&

34 !
	`LINUX_S_ISLNK
(
öode
->
i_mode
))

41 i‡(
	`LINUX_S_ISLNK
 (
öode
->
i_mode
)) {

42 i‡(
öode
->
i_fûe_a˛
 == 0) {

44 i‡(
öode
->
i_blocks
 == 0)

48 i‡(
öode
->
i_size
 >
EXT2_N_BLOCKS
*4)

50 i‡(
öode
->
i_size
 > 4 && inode->
i_block
[1] == 0)

56 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/version.c

12 
	~<c⁄fig.h
>

14 #i‡
HAVE_UNISTD_H


15 
	~<uni°d.h
>

17 
	~<°rög.h
>

18 
	~<°dio.h
>

19 
	~<˘y≥.h
>

21 
	~"ext2_fs.h
"

22 
	~"ext2fs.h
"

24 
	~"vîsi⁄.h
"

26 c⁄° *
	glib_vîsi⁄
 = 
E2FSPROGS_VERSION
;

27 c⁄° *
	glib_d©e
 = 
E2FSPROGS_DATE
;

29 
	$ext2fs_∑r£_vîsi⁄_°rög
(c⁄° *
vî_°rög
)

31 c⁄° *
˝
;

32 
vîsi⁄
 = 0, 
dŸ_cou¡
 = 0;

34 
˝
 = 
vî_°rög
; *cp; cp++) {

35 i‡(*
˝
 == '.') {

36 i‡(
dŸ_cou¡
++)

41 i‡(!
	`isdigô
(*
˝
))

43 
vîsi⁄
 = (vîsi⁄ * 10Ë+ (*
˝
 - '0');

45  
vîsi⁄
;

46 
	}
}

49 
	$ext2fs_gë_libøry_vîsi⁄
(c⁄° **
vî_°rög
,

50 c⁄° **
d©e_°rög
)

52 i‡(
vî_°rög
)

53 *
vî_°rög
 = 
lib_vîsi⁄
;

54 i‡(
d©e_°rög
)

55 *
d©e_°rög
 = 
lib_d©e
;

57  
	`ext2fs_∑r£_vîsi⁄_°rög
(
lib_vîsi⁄
);

58 
	}
}

	@/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/version.h

10 
	#E2FSPROGS_VERSION
 "1.41.9"

	)

11 
	#E2FSPROGS_DATE
 "30-May-2009"

	)

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/com_err.h

11 #i‡!
deföed
(
__COM_ERR_H
Ë&& !deföed(
__COM_ERR_H__
)

13 #ifde‡
__GNUC__


14 
	#COM_ERR_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

16 
	#COM_ERR_ATTR
(
x
)

	)

19 
	~<°ddef.h
>

20 
	~<°d¨g.h
>

22 
	tîrcode_t
;

24 
	sîr‹_èbÀ
 {

25 c⁄° * c⁄° * 
	mmsgs
;

26 
	mba£
;

27 
	mn_msgs
;

29 
	gë_li°
;

31 
	$com_îr
 (const *, , const *, ...)

32 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 4)));

34 
	$com_îr_va
 (c⁄° *
whﬂmi
, 
îrcode_t
 
code
, c⁄° *
fmt
,

35 
va_li°
 
¨gs
)

36 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 0)));

38 c⁄° *
	`îr‹_mesßge
 ();

39 (*
com_îr_hook
Ë(c⁄° *, , c⁄° *, 
va_li°
);

40 (*
	`£t_com_îr_hook
 ((*) (const *, ,

41 c⁄° *, 
va_li°
)))

42 (c⁄° *, , c⁄° *, 
va_li°
);

43 (*
	$ª£t_com_îr_hook
 ()) (const *, ,

44 c⁄° *, 
va_li°
);

45 
	`öô_îr‹_èbÀ
(c⁄° * c⁄° *
msgs
, 
ba£
, 
cou¡
);

46 *(*
	`£t_com_îr_gëãxt
 (*(*) (const *)))

49 
îrcode_t
 
	`add_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

50 
îrcode_t
 
	`ªmove_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

51 
	`add_to_îr‹_èbÀ
(
ë_li°
 *
√w_èbÀ
);

54 c⁄° *
	`com_right
(
ë_li°
 *
li°
, 
code
);

55 c⁄° *
	`com_right_r
(
ë_li°
 *
li°
, 
code
, *
°r
, 
size_t
 
Àn
);

56 
	`öôülize_îr‹_èbÀ_r
(
ë_li°
 **
li°
,

57 c⁄° **
mesßges
,

58 
num_îr‹s
,

59 
ba£
);

60 
	`‰ì_îr‹_èbÀ
(
ë_li°
 *
ë
);

63 
	`ë_li°_lock
();

64 
	`ë_li°_u∆ock
();

66 
	#__COM_ERR_H


	)

67 
	#__COM_ERR_H__


	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/dirent.h

24 #i‚def 
_DIRENT_H


25 
	#_DIRENT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifde‡
__USE_XOPEN


34 #i‚de‡
__öo_t_deföed


35 #i‚de‡
__USE_FILE_OFFSET64


36 
__öo_t
 
	töo_t
;

38 
__öo64_t
 
	töo_t
;

40 
	#__öo_t_deföed


	)

42 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


43 
__öo64_t
 
	töo64_t
;

44 
	#__öo64_t_deföed


	)

63 
	~<bôs/dúít.h
>

65 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


66 
	#d_öo
 
d_fûío


	)

83 #ifde‡
_DIRENT_HAVE_D_NAMLEN


84 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

85 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

87 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

88 #ifde‡
_DIRENT_HAVE_D_RECLEN


89 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

91 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

92 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

97 #ifde‡
__USE_BSD


101 
	mDT_UNKNOWN
 = 0,

102 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

103 
	mDT_FIFO
 = 1,

104 
	#DT_FIFO
 
DT_FIFO


	)

105 
	mDT_CHR
 = 2,

106 
	#DT_CHR
 
DT_CHR


	)

107 
	mDT_DIR
 = 4,

108 
	#DT_DIR
 
DT_DIR


	)

109 
	mDT_BLK
 = 6,

110 
	#DT_BLK
 
DT_BLK


	)

111 
	mDT_REG
 = 8,

112 
	#DT_REG
 
DT_REG


	)

113 
	mDT_LNK
 = 10,

114 
	#DT_LNK
 
DT_LNK


	)

115 
	mDT_SOCK
 = 12,

116 
	#DT_SOCK
 
DT_SOCK


	)

117 
	mDT_WHT
 = 14

118 
	#DT_WHT
 
DT_WHT


	)

122 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

123 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

129 
__dú°ªam
 
	tDIR
;

136 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

138 #ifde‡
__USE_XOPEN2K8


143 
DIR
 *
	`fd›ídú
 (
__fd
);

151 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

163 #i‚de‡
__USE_FILE_OFFSET64


164 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__REDIRECT


167 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

168 
	`__n⁄nuŒ
 ((1));

170 
	#ªaddú
 
ªaddú64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


184 #i‚de‡
__USE_FILE_OFFSET64


185 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

186 
dúít
 *
__ª°ri˘
 
__íåy
,

187 
dúít
 **
__ª°ri˘
 
__ªsu…
)

188 
	`__n⁄nuŒ
 ((1, 2, 3));

190 #ifde‡
__REDIRECT


191 
	`__REDIRECT
 (
ªaddú_r
,

192 (
DIR
 *
__ª°ri˘
 
__dúp
,

193 
dúít
 *
__ª°ri˘
 
__íåy
,

194 
dúít
 **
__ª°ri˘
 
__ªsu…
),

195 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

197 
	#ªaddú_r
 
ªaddú64_r


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

203 
dúít64
 *
__ª°ri˘
 
__íåy
,

204 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

205 
	`__n⁄nuŒ
 ((1, 2, 3));

210 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


213 
	~<bôs/ty≥s.h
>

216 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


225 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


228 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

231 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


232 #i‚de‡
MAXNAMLEN


234 
	~<bôs/posix1_lim.h
>

237 #ifde‡
NAME_MAX


238 
	#MAXNAMLEN
 
NAME_MAX


	)

240 
	#MAXNAMLEN
 255

	)

245 
	#__√ed_size_t


	)

246 
	~<°ddef.h
>

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

257 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

258 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

259 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

260 
__c⁄°
 
dúít
 **))

261 
	`__n⁄nuŒ
 ((1, 2));

263 #ifde‡
__REDIRECT


264 
	`__REDIRECT
 (
sˇndú
,

265 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

266 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

267 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

268 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

269 
__c⁄°
 
dúít
 **)),

270 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

272 
	#sˇndú
 
sˇndú64


	)

276 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


279 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

280 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

281 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

282 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

283 
__c⁄°
 
dúít64
 **))

284 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__USE_GNU


293 #i‚de‡
__USE_FILE_OFFSET64


294 
	`sˇndú©
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

295 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

296 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

297 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

298 
__c⁄°
 
dúít
 **))

299 
	`__n⁄nuŒ
 ((2, 3));

301 #ifde‡
__REDIRECT


302 
	`__REDIRECT
 (
sˇndú©
,

303 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

304 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

305 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

306 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

307 
__c⁄°
 
dúít
 **)),

308 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

310 
	#sˇndú©
 
sˇndú©64


	)

316 
	`sˇndú©64
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

317 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

318 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

319 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

320 
__c⁄°
 
dúít64
 **))

321 
	`__n⁄nuŒ
 ((2, 3));

325 #i‚de‡
__USE_FILE_OFFSET64


326 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

327 
__c⁄°
 
dúít
 **
__e2
)

328 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

330 #ifde‡
__REDIRECT


331 
	`__REDIRECT_NTH
 (
Æphas‹t
,

332 (
__c⁄°
 
dúít
 **
__e1
,

333 
__c⁄°
 
dúít
 **
__e2
),

334 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 
	#Æphas‹t
 
Æphas‹t64


	)

340 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


341 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

342 
__c⁄°
 
dúít64
 **
__e2
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


353 #i‚de‡
__USE_FILE_OFFSET64


354 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

355 
size_t
 
__nbyãs
,

356 
__off_t
 *
__ª°ri˘
 
__ba£p
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

359 #ifde‡
__REDIRECT


360 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

361 (
__fd
, *
__ª°ri˘
 
__buf
,

362 
size_t
 
__nbyãs
,

363 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

364 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

366 
	#gëdúíåõs
 
gëdúíåõs64


	)

370 #ifde‡
__USE_LARGEFILE64


371 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

372 
size_t
 
__nbyãs
,

373 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

374 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

378 #ifde‡
__USE_GNU


380 #i‚de‡
__USE_FILE_OFFSET64


381 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

382 
__c⁄°
 
dúít
 **
__e2
)

383 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__REDIRECT


386 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

387 (
__c⁄°
 
dúít
 **
__e1
,

388 
__c⁄°
 
dúít
 **
__e2
),

389 
vîsi⁄s‹t64
)

390 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

392 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

396 #ifde‡
__USE_LARGEFILE64


397 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

398 
__c⁄°
 
dúít64
 **
__e2
)

399 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

403 
__END_DECLS


	@/usr/include/e2p/e2p.h

10 
	~<sys/ty≥s.h
>

11 
	~<°dio.h
>

12 
	~<dúít.h
>

14 
	~<ext2fs/ext2_fs.h
>

16 
	#E2P_FEATURE_COMPAT
 0

	)

17 
	#E2P_FEATURE_INCOMPAT
 1

	)

18 
	#E2P_FEATURE_RO_INCOMPAT
 2

	)

19 
	#E2P_FEATURE_TYPE_MASK
 0x03

	)

21 
	#E2P_FEATURE_NEGATE_FLAG
 0x80

	)

23 
	#E2P_FS_FEATURE
 0

	)

24 
	#E2P_JOURNAL_FEATURE
 1

	)

28 
	#PFOPT_LONG
 1

	)

31 
fgëÊags
 (c⁄° * 
«me
, * 
Êags
);

32 
fgëvîsi⁄
 (c⁄° * 
«me
, * 
vîsi⁄
);

33 
f£tÊags
 (c⁄° * 
«me
, 
Êags
);

34 
f£tvîsi⁄
 (c⁄° * 
«me
, 
vîsi⁄
);

35 
gëÊags
 (
fd
, * 
Êags
);

36 
gëvîsi⁄
 (
fd
, * 
vîsi⁄
);

37 
ôî©e_⁄_dú
 (c⁄° * 
dú_«me
,

38 (*
func
Ë(c⁄° *, 
dúít
 *, *),

39 * 
¥iv©e
);

40 
	`li°_su≥r
(
ext2_su≥r_block
 * 
s
);

41 
	`li°_su≥r2
(
ext2_su≥r_block
 * 
s
, 
FILE
 *
f
);

42 
	`¥öt_fs_îr‹s
 (
FILE
 * 
f
, 
îr‹s
);

43 
	`¥öt_Êags
 (
FILE
 * 
f
, 
Êags
, 
›ti⁄s
);

44 
	`¥öt_fs_°©e
 (
FILE
 * 
f
, 
°©e
);

45 
	`£tÊags
 (
fd
, 
Êags
);

46 
	`£tvîsi⁄
 (
fd
, 
vîsi⁄
);

48 c⁄° *
	`e2p_„©uª2°rög
(
com∑t
, 
mask
);

49 c⁄° *
	`e2p_j∫l_„©uª2°rög
(
com∑t
, 
mask
);

50 
	`e2p_°rög2„©uª
(*
°rög
, *
com∑t
, *
mask
);

51 
	`e2p_j∫l_°rög2„©uª
(*
°rög
, *
com∑t_ty≥
, *
mask
);

52 
	`e2p_edô_„©uª
(c⁄° *
°r
, 
__u32
 *
com∑t_¨øy
, __u32 *
ok_¨øy
);

53 
	`e2p_edô_„©uª2
(c⁄° *
°r
, 
__u32
 *
com∑t_¨øy
, __u32 *
ok_¨øy
,

54 
__u32
 *
˛ór_ok_¨øy
, *
ty≥_îr
,

55 *
mask_îr
);

57 
	`e2p_is_nuŒ_uuid
(*
uu
);

58 
	`e2p_uuid_to_°r
(*
uu
, *
out
);

59 c⁄° *
	`e2p_uuid2°r
(*
uu
);

61 c⁄° *
	`e2p_hash2°rög
(
num
);

62 
	`e2p_°rög2hash
(*
°rög
);

64 c⁄° *
	`e2p_m¡›t2°rög
(
mask
);

65 
	`e2p_°rög2m¡›t
(*
°rög
, *
mask
);

66 
	`e2p_edô_m¡›ts
(c⁄° *
°r
, 
__u32
 *
m¡›ts
, __u32 
ok
);

68 
	`∑r£_num_blocks
(c⁄° *
¨g
, 
log_block_size
);

69 
	`∑r£_num_blocks2
(c⁄° *
¨g
, 
log_block_size
);

71 *
	`e2p_os2°rög
(
os_ty≥
);

72 
	`e2p_°rög2os
(*
°r
);

74 
	`e2p_≥r˚¡
(
≥r˚¡
, 
ba£
);

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/et/com_err.h

11 #i‡!
deföed
(
__COM_ERR_H
Ë&& !deföed(
__COM_ERR_H__
)

13 #ifde‡
__GNUC__


14 
	#COM_ERR_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

16 
	#COM_ERR_ATTR
(
x
)

	)

19 
	~<°ddef.h
>

20 
	~<°d¨g.h
>

22 
	tîrcode_t
;

24 
	sîr‹_èbÀ
 {

25 c⁄° * c⁄° * 
	mmsgs
;

26 
	mba£
;

27 
	mn_msgs
;

29 
	gë_li°
;

31 
	$com_îr
 (const *, , const *, ...)

32 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 4)));

34 
	$com_îr_va
 (c⁄° *
whﬂmi
, 
îrcode_t
 
code
, c⁄° *
fmt
,

35 
va_li°
 
¨gs
)

36 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 0)));

38 c⁄° *
	`îr‹_mesßge
 ();

39 (*
com_îr_hook
Ë(c⁄° *, , c⁄° *, 
va_li°
);

40 (*
	`£t_com_îr_hook
 ((*) (const *, ,

41 c⁄° *, 
va_li°
)))

42 (c⁄° *, , c⁄° *, 
va_li°
);

43 (*
	$ª£t_com_îr_hook
 ()) (const *, ,

44 c⁄° *, 
va_li°
);

45 
	`öô_îr‹_èbÀ
(c⁄° * c⁄° *
msgs
, 
ba£
, 
cou¡
);

46 *(*
	`£t_com_îr_gëãxt
 (*(*) (const *)))

49 
îrcode_t
 
	`add_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

50 
îrcode_t
 
	`ªmove_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

51 
	`add_to_îr‹_èbÀ
(
ë_li°
 *
√w_èbÀ
);

54 c⁄° *
	`com_right
(
ë_li°
 *
li°
, 
code
);

55 c⁄° *
	`com_right_r
(
ë_li°
 *
li°
, 
code
, *
°r
, 
size_t
 
Àn
);

56 
	`öôülize_îr‹_èbÀ_r
(
ë_li°
 **
li°
,

57 c⁄° **
mesßges
,

58 
num_îr‹s
,

59 
ba£
);

60 
	`‰ì_îr‹_èbÀ
(
ë_li°
 *
ë
);

63 
	`ë_li°_lock
();

64 
	`ë_li°_u∆ock
();

66 
	#__COM_ERR_H


	)

67 
	#__COM_ERR_H__


	)

	@/usr/include/ext2fs/bitops.h

13 
ext2fs_£t_bô
(
ƒ
,* 
addr
);

14 
ext2fs_˛ór_bô
(
ƒ
, * 
addr
);

15 
ext2fs_ã°_bô
(
ƒ
, c⁄° * 
addr
);

16 
ext2fs_Á°_£t_bô
(
ƒ
,* 
addr
);

17 
ext2fs_Á°_˛ór_bô
(
ƒ
, * 
addr
);

18 
ext2fs_£t_bô64
(
__u64
 
ƒ
,* 
addr
);

19 
ext2fs_˛ór_bô64
(
__u64
 
ƒ
, * 
addr
);

20 
ext2fs_ã°_bô64
(
__u64
 
ƒ
, c⁄° * 
addr
);

21 
ext2fs_Á°_£t_bô64
(
__u64
 
ƒ
,* 
addr
);

22 
ext2fs_Á°_˛ór_bô64
(
__u64
 
ƒ
, * 
addr
);

23 
__u16
 
ext2fs_swab16
(__u16 
vÆ
);

24 
__u32
 
ext2fs_swab32
(__u32 
vÆ
);

25 
__u64
 
ext2fs_swab64
(__u64 
vÆ
);

27 #ifde‡
WORDS_BIGENDIAN


28 
	#ext2fs_˝u_to_À64
(
x
Ë
	`ext2fs_swab64
((x))

	)

29 
	#ext2fs_À64_to_˝u
(
x
Ë
	`ext2fs_swab64
((x))

	)

30 
	#ext2fs_˝u_to_À32
(
x
Ë
	`ext2fs_swab32
((x))

	)

31 
	#ext2fs_À32_to_˝u
(
x
Ë
	`ext2fs_swab32
((x))

	)

32 
	#ext2fs_˝u_to_À16
(
x
Ë
	`ext2fs_swab16
((x))

	)

33 
	#ext2fs_À16_to_˝u
(
x
Ë
	`ext2fs_swab16
((x))

	)

34 
	#ext2fs_˝u_to_be64
(
x
Ë((
__u64
)(x))

	)

35 
	#ext2fs_be64_to_˝u
(
x
Ë((
__u64
)(x))

	)

36 
	#ext2fs_˝u_to_be32
(
x
Ë((
__u32
)(x))

	)

37 
	#ext2fs_be32_to_˝u
(
x
Ë((
__u32
)(x))

	)

38 
	#ext2fs_˝u_to_be16
(
x
Ë((
__u16
)(x))

	)

39 
	#ext2fs_be16_to_˝u
(
x
Ë((
__u16
)(x))

	)

41 
	#ext2fs_˝u_to_À64
(
x
Ë((
__u64
)(x))

	)

42 
	#ext2fs_À64_to_˝u
(
x
Ë((
__u64
)(x))

	)

43 
	#ext2fs_˝u_to_À32
(
x
Ë((
__u32
)(x))

	)

44 
	#ext2fs_À32_to_˝u
(
x
Ë((
__u32
)(x))

	)

45 
	#ext2fs_˝u_to_À16
(
x
Ë((
__u16
)(x))

	)

46 
	#ext2fs_À16_to_˝u
(
x
Ë((
__u16
)(x))

	)

47 
	#ext2fs_˝u_to_be64
(
x
Ë
	`ext2fs_swab64
((x))

	)

48 
	#ext2fs_be64_to_˝u
(
x
Ë
	`ext2fs_swab64
((x))

	)

49 
	#ext2fs_˝u_to_be32
(
x
Ë
	`ext2fs_swab32
((x))

	)

50 
	#ext2fs_be32_to_˝u
(
x
Ë
	`ext2fs_swab32
((x))

	)

51 
	#ext2fs_˝u_to_be16
(
x
Ë
	`ext2fs_swab16
((x))

	)

52 
	#ext2fs_be16_to_˝u
(
x
Ë
	`ext2fs_swab16
((x))

	)

60 c⁄° *
ext2fs_block_°rög
;

61 c⁄° *
ext2fs_öode_°rög
;

62 c⁄° *
ext2fs_m¨k_°rög
;

63 c⁄° *
ext2fs_unm¨k_°rög
;

64 c⁄° *
ext2fs_ã°_°rög
;

65 
ext2fs_w¨n_bôm≠
(
îrcode_t
 
îrcode
, 
¨g
,

66 c⁄° *
des¸ùti⁄
);

67 
ext2fs_w¨n_bôm≠2
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

68 
code
, 
¨g
);

70 
ext2fs_m¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
, 
blk_t
 
block
);

71 
ext2fs_unm¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

72 
blk_t
 
block
);

73 
ext2fs_ã°_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
, 
blk_t
 
block
);

75 
ext2fs_m¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
, 
ext2_öo_t
 
öode
);

76 
ext2fs_unm¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

77 
ext2_öo_t
 
öode
);

78 
ext2fs_ã°_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
, 
ext2_öo_t
 
öode
);

80 
ext2fs_Á°_m¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

81 
blk_t
 
block
);

82 
ext2fs_Á°_unm¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

83 
blk_t
 
block
);

84 
ext2fs_Á°_ã°_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

85 
blk_t
 
block
);

87 
ext2fs_Á°_m¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

88 
ext2_öo_t
 
öode
);

89 
ext2fs_Á°_unm¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

90 
ext2_öo_t
 
öode
);

91 
ext2fs_Á°_ã°_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

92 
ext2_öo_t
 
öode
);

93 
blk_t
 
ext2fs_gë_block_bôm≠_°¨t
(
ext2fs_block_bôm≠
 
bôm≠
);

94 
ext2_öo_t
 
ext2fs_gë_öode_bôm≠_°¨t
(
ext2fs_öode_bôm≠
 
bôm≠
);

95 
blk_t
 
ext2fs_gë_block_bôm≠_íd
(
ext2fs_block_bôm≠
 
bôm≠
);

96 
ext2_öo_t
 
ext2fs_gë_öode_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
);

98 
ext2fs_m¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

99 
blk_t
 
block
, 
num
);

100 
ext2fs_unm¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

101 
blk_t
 
block
, 
num
);

102 
ext2fs_ã°_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

103 
blk_t
 
block
, 
num
);

104 
ext2fs_ã°_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bôm≠
,

105 
öo_t
 
öode
, 
num
);

106 
ext2fs_Á°_m¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

107 
blk_t
 
block
, 
num
);

108 
ext2fs_Á°_unm¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

109 
blk_t
 
block
, 
num
);

110 
ext2fs_Á°_ã°_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

111 
blk_t
 
block
, 
num
);

112 
ext2fs_£t_bôm≠_∑ddög
(
ext2fs_gíîic_bôm≠
 
m≠
);

115 
ext2fs_m¨k_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

116 
__u32
 
bôno
);

117 
ext2fs_unm¨k_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

118 
blk_t
 
bôno
);

119 
ext2fs_ã°_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

120 
blk_t
 
bôno
);

121 
ext2fs_ã°_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

122 
blk_t
 
block
, 
num
);

123 
__u32
 
ext2fs_gë_gíîic_bôm≠_°¨t
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

124 
__u32
 
ext2fs_gë_gíîic_bôm≠_íd
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

128 
ext2fs_m¨k_block_bôm≠2
(
ext2fs_block_bôm≠
 
bôm≠
,

129 
blk64_t
 
block
);

130 
ext2fs_unm¨k_block_bôm≠2
(
ext2fs_block_bôm≠
 
bôm≠
,

131 
blk64_t
 
block
);

132 
ext2fs_ã°_block_bôm≠2
(
ext2fs_block_bôm≠
 
bôm≠
,

133 
blk64_t
 
block
);

135 
ext2fs_m¨k_öode_bôm≠2
(
ext2fs_öode_bôm≠
 
bôm≠
,

136 
ext2_öo_t
 
öode
);

137 
ext2fs_unm¨k_öode_bôm≠2
(
ext2fs_öode_bôm≠
 
bôm≠
,

138 
ext2_öo_t
 
öode
);

139 
ext2fs_ã°_öode_bôm≠2
(
ext2fs_öode_bôm≠
 
bôm≠
,

140 
ext2_öo_t
 
öode
);

142 
ext2fs_Á°_m¨k_block_bôm≠2
(
ext2fs_block_bôm≠
 
bôm≠
,

143 
blk64_t
 
block
);

144 
ext2fs_Á°_unm¨k_block_bôm≠2
(
ext2fs_block_bôm≠
 
bôm≠
,

145 
blk64_t
 
block
);

146 
ext2fs_Á°_ã°_block_bôm≠2
(
ext2fs_block_bôm≠
 
bôm≠
,

147 
blk64_t
 
block
);

149 
ext2fs_Á°_m¨k_öode_bôm≠2
(
ext2fs_öode_bôm≠
 
bôm≠
,

150 
ext2_öo_t
 
öode
);

151 
ext2fs_Á°_unm¨k_öode_bôm≠2
(
ext2fs_öode_bôm≠
 
bôm≠
,

152 
ext2_öo_t
 
öode
);

153 
ext2fs_Á°_ã°_öode_bôm≠2
(
ext2fs_öode_bôm≠
 
bôm≠
,

154 
ext2_öo_t
 
öode
);

155 
blk64_t
 
ext2fs_gë_block_bôm≠_°¨t2
(
ext2fs_block_bôm≠
 
bôm≠
);

156 
ext2_öo_t
 
ext2fs_gë_öode_bôm≠_°¨t2
(
ext2fs_öode_bôm≠
 
bôm≠
);

157 
blk64_t
 
ext2fs_gë_block_bôm≠_íd2
(
ext2fs_block_bôm≠
 
bôm≠
);

158 
ext2_öo_t
 
ext2fs_gë_öode_bôm≠_íd2
(
ext2fs_öode_bôm≠
 
bôm≠
);

160 
ext2fs_Á°_ã°_block_bôm≠_ønge2
(
ext2fs_block_bôm≠
 
bôm≠
,

161 
blk64_t
 
block
,

162 
num
);

163 
ext2fs_Á°_m¨k_block_bôm≠_ønge2
(
ext2fs_block_bôm≠
 
bôm≠
,

164 
blk64_t
 
block
,

165 
num
);

166 
ext2fs_Á°_unm¨k_block_bôm≠_ønge2
(
ext2fs_block_bôm≠
 
bôm≠
,

167 
blk64_t
 
block
,

168 
num
);

170 
ext2fs_˛ór_gíîic_bm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

171 
îrcode_t
 
ext2fs_com∑ª_gíîic_bm≠
”ºcode_à
√q
,

172 
ext2fs_gíîic_bôm≠
 
bm1
,

173 
ext2fs_gíîic_bôm≠
 
bm2
);

174 
ext2fs_£t_gíîic_bm≠_∑ddög
(
ext2fs_gíîic_bôm≠
 
bm≠
);

175 
ext2fs_m¨k_gíîic_bm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

176 
blk64_t
 
bôno
);

177 
ext2fs_unm¨k_gíîic_bm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

178 
blk64_t
 
bôno
);

179 
ext2fs_ã°_gíîic_bm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

180 
blk64_t
 
bôno
);

181 
ext2fs_ã°_block_bôm≠_ønge2
(
ext2fs_block_bôm≠
 
bôm≠
,

182 
blk64_t
 
block
, 
num
);

183 
__u64
 
ext2fs_gë_gíîic_bm≠_°¨t
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

184 
__u64
 
ext2fs_gë_gíîic_bm≠_íd
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

185 
ext2fs_ã°_block_bôm≠_ønge2
(
ext2fs_block_bôm≠
 
bôm≠
,

186 
blk64_t
 
block
, 
num
);

187 
ext2fs_m¨k_block_bôm≠_ønge2
(
ext2fs_block_bôm≠
 
bôm≠
,

188 
blk64_t
 
block
, 
num
);

189 
ext2fs_unm¨k_block_bôm≠_ønge2
(
ext2fs_block_bôm≠
 
bôm≠
,

190 
blk64_t
 
block
, 
num
);

199 #ifde‡
NO_INLINE_FUNCS


200 #i‡(
deföed
(
__GNUC__
Ë&& (deföed(
__i386__
Ë|| deföed(
__i486__
) || \

201 
deföed
(
__i586__
Ë|| 
	$deföed
(
__mc68000__
)))

204 
	#_EXT2_HAVE_ASM_BITOPS_


	)

208 #i‡(
	`deföed
(
INCLUDE_INLINE_FUNCS
Ë|| !deföed(
NO_INLINE_FUNCS
))

209 #ifde‡
INCLUDE_INLINE_FUNCS


210 
	#_INLINE_
 

	)

212 #ifde‡
__GNUC__


213 
	#_INLINE_
 
__ölöe__


	)

215 
	#_INLINE_
 
ölöe


	)

224 
_INLINE_
 
	$ext2fs_Á°_£t_bô
(
ƒ
,* 
addr
)

226 *
ADDR
 = (*Ë
addr
;

228 
ADDR
 +
ƒ
 >> 3;

229 *
ADDR
 |(1 << (
ƒ
 & 0x07));

230 
	}
}

232 
_INLINE_
 
	$ext2fs_Á°_˛ór_bô
(
ƒ
, * 
addr
)

234 *
ADDR
 = (*Ë
addr
;

236 
ADDR
 +
ƒ
 >> 3;

237 *
ADDR
 &~(1 << (
ƒ
 & 0x07));

238 
	}
}

241 
_INLINE_
 
	$ext2fs_Á°_£t_bô64
(
__u64
 
ƒ
, * 
addr
)

243 *
ADDR
 = (*Ë
addr
;

245 
ADDR
 +
ƒ
 >> 3;

246 *
ADDR
 |(1 << (
ƒ
 & 0x07));

247 
	}
}

249 
_INLINE_
 
	$ext2fs_Á°_˛ór_bô64
(
__u64
 
ƒ
, * 
addr
)

251 *
ADDR
 = (*Ë
addr
;

253 
ADDR
 +
ƒ
 >> 3;

254 *
ADDR
 &~(1 << (
ƒ
 & 0x07));

255 
	}
}

258 #i‡((
deföed
 
__GNUC__
Ë&& !deföed(
_EXT2_USE_C_VERSIONS_
) && \

259 (
deföed
(
__i386__
Ë|| deföed(
__i486__
Ë|| 
	$deföed
(
__i586__
)))

261 
	#_EXT2_HAVE_ASM_BITOPS_


	)

262 
	#_EXT2_HAVE_ASM_SWAB_


	)

275 
	s__dummy_h
 { 
a
[100]; };

276 
	#EXT2FS_ADDR
 (*(
__dummy_h
 *Ë
addr
)

	)

277 
	#EXT2FS_CONST_ADDR
 (*(c⁄° 
__dummy_h
 *Ë
addr
)

	)

279 
_INLINE_
 
	$ext2fs_£t_bô
(
ƒ
, * 
addr
)

281 
ﬁdbô
;

283 
addr
 = (*Ë(((*ËaddrË+ (
ƒ
 >> 3));

284 
__asm__
 
	`__vﬁ©ûe__
("btsl %2,%1\n\tsbbl %0,%0"

285 :"Ù" (
ﬁdbô
),"+m" (
EXT2FS_ADDR
)

286 :"r" (
ƒ
 & 7));

287  
ﬁdbô
;

288 
	}
}

290 
_INLINE_
 
	$ext2fs_˛ór_bô
(
ƒ
, * 
addr
)

292 
ﬁdbô
;

294 
addr
 = (*Ë(((*ËaddrË+ (
ƒ
 >> 3));

295 
__asm__
 
	`__vﬁ©ûe__
("btrl %2,%1\n\tsbbl %0,%0"

296 :"Ù" (
ﬁdbô
),"+m" (
EXT2FS_ADDR
)

297 :"r" (
ƒ
 & 7));

298  
ﬁdbô
;

299 
	}
}

301 
_INLINE_
 
	$ext2fs_ã°_bô
(
ƒ
, c⁄° * 
addr
)

303 
ﬁdbô
;

305 
addr
 = (c⁄° *Ë(((c⁄° *ËaddrË+ (
ƒ
 >> 3));

306 
__asm__
 
	`__vﬁ©ûe__
("btl %2,%1\n\tsbbl %0,%0"

307 :"Ù" (
ﬁdbô
)

308 :"m" (
EXT2FS_CONST_ADDR
),"r" (
ƒ
 & 7));

309  
ﬁdbô
;

310 
	}
}

312 
_INLINE_
 
__u32
 
	$ext2fs_swab32
(
__u32
 
vÆ
)

314 #ifde‡
EXT2FS_REQUIRE_486


315 
	`__asm__
("bsw≠ %0" : "Ù" (
vÆ
) : "0" (val));

317 
	`__asm__
("xchgb %b0,%h0\n\t"

320 :"=q" (
vÆ
)

321 : "0" (
vÆ
));

323  
vÆ
;

324 
	}
}

326 
_INLINE_
 
__u16
 
	$ext2fs_swab16
(
__u16
 
vÆ
)

328 
	`__asm__
("xchgb %b0,%h0" \

329 : "=q" (
vÆ
) \

330 : "0" (
vÆ
)); \

331  
vÆ
;

332 
	}
}

334 #unde‡
EXT2FS_ADDR


338 #i‡((
deföed
 
__GNUC__
Ë&& !deföed(
_EXT2_USE_C_VERSIONS_
) && \

339 (
	$deföed
(
__mc68000__
)))

341 
	#_EXT2_HAVE_ASM_BITOPS_


	)

343 
_INLINE_
 
	$ext2fs_£t_bô
(
ƒ
,* 
addr
)

345 
ªtvÆ
;

347 
__asm__
 
	`__vﬁ©ûe__
 ("bfset %2@{%1:#1}; sne %0"

348 : "=d" (
ªtvÆ
Ë: "d" (
ƒ
^7), "a" (
addr
));

350  
ªtvÆ
;

351 
	}
}

353 
_INLINE_
 
	$ext2fs_˛ór_bô
(
ƒ
, * 
addr
)

355 
ªtvÆ
;

357 
__asm__
 
	`__vﬁ©ûe__
 ("bfclr %2@{%1:#1}; sne %0"

358 : "=d" (
ªtvÆ
Ë: "d" (
ƒ
^7), "a" (
addr
));

360  
ªtvÆ
;

361 
	}
}

363 
_INLINE_
 
	$ext2fs_ã°_bô
(
ƒ
, c⁄° * 
addr
)

365 
ªtvÆ
;

367 
__asm__
 
	`__vﬁ©ûe__
 ("bftst %2@{%1:#1}; sne %0"

368 : "=d" (
ªtvÆ
Ë: "d" (
ƒ
^7), "a" (
addr
));

370  
ªtvÆ
;

371 
	}
}

376 #i‡!
deföed
(
_EXT2_HAVE_ASM_SWAB_
)

378 
_INLINE_
 
__u16
 
	$ext2fs_swab16
(
__u16
 
vÆ
)

380  (
vÆ
 >> 8) | (val << 8);

381 
	}
}

383 
_INLINE_
 
__u32
 
	$ext2fs_swab32
(
__u32
 
vÆ
)

385  ((
vÆ
>>24) | ((val>>8)&0xFF00) |

386 ((
vÆ
<<8)&0xFF0000) | (val<<24));

387 
	}
}

391 
_INLINE_
 
__u64
 
	$ext2fs_swab64
(
__u64
 
vÆ
)

393  (
	`ext2fs_swab32
(
vÆ
 >> 32) |

394 (((
__u64
)
	`ext2fs_swab32
(
vÆ
 & 0xFFFFFFFFUL)) << 32));

395 
	}
}

397 
_INLINE_
 
	$ext2fs_m¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

398 
blk_t
 
block
)

400  
	`ext2fs_m¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

401 
block
);

402 
	}
}

404 
_INLINE_
 
	$ext2fs_unm¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

405 
blk_t
 
block
)

407  
	`ext2fs_unm¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

408 
block
);

409 
	}
}

411 
_INLINE_
 
	$ext2fs_ã°_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

412 
blk_t
 
block
)

414  
	`ext2fs_ã°_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

415 
block
);

416 
	}
}

418 
_INLINE_
 
	$ext2fs_m¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

419 
ext2_öo_t
 
öode
)

421  
	`ext2fs_m¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

422 
öode
);

423 
	}
}

425 
_INLINE_
 
	$ext2fs_unm¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

426 
ext2_öo_t
 
öode
)

428  
	`ext2fs_unm¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

429 
öode
);

430 
	}
}

432 
_INLINE_
 
	$ext2fs_ã°_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

433 
ext2_öo_t
 
öode
)

435  
	`ext2fs_ã°_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

436 
öode
);

437 
	}
}

439 
_INLINE_
 
	$ext2fs_Á°_m¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

440 
blk_t
 
block
)

442 
	`ext2fs_m¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
block
);

443 
	}
}

445 
_INLINE_
 
	$ext2fs_Á°_unm¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

446 
blk_t
 
block
)

448 
	`ext2fs_unm¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
block
);

449 
	}
}

451 
_INLINE_
 
	$ext2fs_Á°_ã°_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

452 
blk_t
 
block
)

454  
	`ext2fs_ã°_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

455 
block
);

456 
	}
}

458 
_INLINE_
 
	$ext2fs_Á°_m¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

459 
ext2_öo_t
 
öode
)

461 
	`ext2fs_m¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
öode
);

462 
	}
}

464 
_INLINE_
 
	$ext2fs_Á°_unm¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

465 
ext2_öo_t
 
öode
)

467 
	`ext2fs_unm¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
öode
);

468 
	}
}

470 
_INLINE_
 
	$ext2fs_Á°_ã°_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

471 
ext2_öo_t
 
öode
)

473  
	`ext2fs_ã°_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

474 
öode
);

475 
	}
}

477 
_INLINE_
 
blk_t
 
	$ext2fs_gë_block_bôm≠_°¨t
(
ext2fs_block_bôm≠
 
bôm≠
)

479  
	`ext2fs_gë_gíîic_bôm≠_°¨t
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

480 
	}
}

482 
_INLINE_
 
ext2_öo_t
 
	$ext2fs_gë_öode_bôm≠_°¨t
(
ext2fs_öode_bôm≠
 
bôm≠
)

484  
	`ext2fs_gë_gíîic_bôm≠_°¨t
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

485 
	}
}

487 
_INLINE_
 
blk_t
 
	$ext2fs_gë_block_bôm≠_íd
(
ext2fs_block_bôm≠
 
bôm≠
)

489  
	`ext2fs_gë_gíîic_bôm≠_íd
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

490 
	}
}

492 
_INLINE_
 
ext2_öo_t
 
	$ext2fs_gë_öode_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
)

494  
	`ext2fs_gë_gíîic_bôm≠_íd
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

495 
	}
}

497 
_INLINE_
 
	$ext2fs_Á°_ã°_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

498 
blk_t
 
block
, 
num
)

500  
	`ext2fs_ã°_block_bôm≠_ønge
(
bôm≠
, 
block
, 
num
);

501 
	}
}

503 
_INLINE_
 
	$ext2fs_Á°_m¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

504 
blk_t
 
block
, 
num
)

506 
	`ext2fs_m¨k_block_bôm≠_ønge
(
bôm≠
, 
block
, 
num
);

507 
	}
}

509 
_INLINE_
 
	$ext2fs_Á°_unm¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

510 
blk_t
 
block
, 
num
)

512 
	`ext2fs_unm¨k_block_bôm≠_ønge
(
bôm≠
, 
block
, 
num
);

513 
	}
}

517 
_INLINE_
 
	$ext2fs_m¨k_block_bôm≠2
(
ext2fs_block_bôm≠
 
bôm≠
,

518 
blk64_t
 
block
)

520  
	`ext2fs_m¨k_gíîic_bm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

521 
block
);

522 
	}
}

524 
_INLINE_
 
	$ext2fs_unm¨k_block_bôm≠2
(
ext2fs_block_bôm≠
 
bôm≠
,

525 
blk64_t
 
block
)

527  
	`ext2fs_unm¨k_gíîic_bm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
block
);

528 
	}
}

530 
_INLINE_
 
	$ext2fs_ã°_block_bôm≠2
(
ext2fs_block_bôm≠
 
bôm≠
,

531 
blk64_t
 
block
)

533  
	`ext2fs_ã°_gíîic_bm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

534 
block
);

535 
	}
}

537 
_INLINE_
 
	$ext2fs_m¨k_öode_bôm≠2
(
ext2fs_öode_bôm≠
 
bôm≠
,

538 
ext2_öo_t
 
öode
)

540  
	`ext2fs_m¨k_gíîic_bm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

541 
öode
);

542 
	}
}

544 
_INLINE_
 
	$ext2fs_unm¨k_öode_bôm≠2
(
ext2fs_öode_bôm≠
 
bôm≠
,

545 
ext2_öo_t
 
öode
)

547  
	`ext2fs_unm¨k_gíîic_bm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

548 
öode
);

549 
	}
}

551 
_INLINE_
 
	$ext2fs_ã°_öode_bôm≠2
(
ext2fs_öode_bôm≠
 
bôm≠
,

552 
ext2_öo_t
 
öode
)

554  
	`ext2fs_ã°_gíîic_bm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

555 
öode
);

556 
	}
}

558 
_INLINE_
 
	$ext2fs_Á°_m¨k_block_bôm≠2
(
ext2fs_block_bôm≠
 
bôm≠
,

559 
blk64_t
 
block
)

561 
	`ext2fs_m¨k_gíîic_bm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
block
);

562 
	}
}

564 
_INLINE_
 
	$ext2fs_Á°_unm¨k_block_bôm≠2
(
ext2fs_block_bôm≠
 
bôm≠
,

565 
blk64_t
 
block
)

567 
	`ext2fs_unm¨k_gíîic_bm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
block
);

568 
	}
}

570 
_INLINE_
 
	$ext2fs_Á°_ã°_block_bôm≠2
(
ext2fs_block_bôm≠
 
bôm≠
,

571 
blk64_t
 
block
)

573  
	`ext2fs_ã°_gíîic_bm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

574 
block
);

575 
	}
}

577 
_INLINE_
 
	$ext2fs_Á°_m¨k_öode_bôm≠2
(
ext2fs_öode_bôm≠
 
bôm≠
,

578 
ext2_öo_t
 
öode
)

580 
	`ext2fs_m¨k_gíîic_bm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
öode
);

581 
	}
}

583 
_INLINE_
 
	$ext2fs_Á°_unm¨k_öode_bôm≠2
(
ext2fs_öode_bôm≠
 
bôm≠
,

584 
ext2_öo_t
 
öode
)

586 
	`ext2fs_unm¨k_gíîic_bm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
öode
);

587 
	}
}

589 
_INLINE_
 
	$ext2fs_Á°_ã°_öode_bôm≠2
(
ext2fs_öode_bôm≠
 
bôm≠
,

590 
ext2_öo_t
 
öode
)

592  
	`ext2fs_ã°_gíîic_bm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

593 
öode
);

594 
	}
}

596 
_INLINE_
 
blk64_t
 
	$ext2fs_gë_block_bôm≠_°¨t2
(
ext2fs_block_bôm≠
 
bôm≠
)

598  
	`ext2fs_gë_gíîic_bm≠_°¨t
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

599 
	}
}

601 
_INLINE_
 
ext2_öo_t
 
	$ext2fs_gë_öode_bôm≠_°¨t2
(
ext2fs_öode_bôm≠
 
bôm≠
)

603  
	`ext2fs_gë_gíîic_bm≠_°¨t
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

604 
	}
}

606 
_INLINE_
 
blk64_t
 
	$ext2fs_gë_block_bôm≠_íd2
(
ext2fs_block_bôm≠
 
bôm≠
)

608  
	`ext2fs_gë_gíîic_bm≠_íd
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

609 
	}
}

611 
_INLINE_
 
ext2_öo_t
 
	$ext2fs_gë_öode_bôm≠_íd2
(
ext2fs_öode_bôm≠
 
bôm≠
)

613  
	`ext2fs_gë_gíîic_bm≠_íd
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

614 
	}
}

616 
_INLINE_
 
	$ext2fs_Á°_ã°_block_bôm≠_ønge2
(
ext2fs_block_bôm≠
 
bôm≠
,

617 
blk64_t
 
block
,

618 
num
)

620  
	`ext2fs_ã°_block_bôm≠_ønge2
(
bôm≠
, 
block
, 
num
);

621 
	}
}

623 
_INLINE_
 
	$ext2fs_Á°_m¨k_block_bôm≠_ønge2
(
ext2fs_block_bôm≠
 
bôm≠
,

624 
blk64_t
 
block
,

625 
num
)

627 
	`ext2fs_m¨k_block_bôm≠_ønge2
(
bôm≠
, 
block
, 
num
);

628 
	}
}

630 
_INLINE_
 
	$ext2fs_Á°_unm¨k_block_bôm≠_ønge2
(
ext2fs_block_bôm≠
 
bôm≠
,

631 
blk64_t
 
block
,

632 
num
)

634 
	`ext2fs_unm¨k_block_bôm≠_ønge2
(
bôm≠
, 
block
, 
num
);

635 
	}
}

637 #unde‡
_INLINE_


	@/usr/include/ext2fs/ext2_err.h

6 
	~<ë/com_îr.h
>

8 
	#EXT2_ET_BASE
 (2133571328L)

	)

9 
	#EXT2_ET_MAGIC_EXT2FS_FILSYS
 (2133571329L)

	)

10 
	#EXT2_ET_MAGIC_BADBLOCKS_LIST
 (2133571330L)

	)

11 
	#EXT2_ET_MAGIC_BADBLOCKS_ITERATE
 (2133571331L)

	)

12 
	#EXT2_ET_MAGIC_INODE_SCAN
 (2133571332L)

	)

13 
	#EXT2_ET_MAGIC_IO_CHANNEL
 (2133571333L)

	)

14 
	#EXT2_ET_MAGIC_UNIX_IO_CHANNEL
 (2133571334L)

	)

15 
	#EXT2_ET_MAGIC_IO_MANAGER
 (2133571335L)

	)

16 
	#EXT2_ET_MAGIC_BLOCK_BITMAP
 (2133571336L)

	)

17 
	#EXT2_ET_MAGIC_INODE_BITMAP
 (2133571337L)

	)

18 
	#EXT2_ET_MAGIC_GENERIC_BITMAP
 (2133571338L)

	)

19 
	#EXT2_ET_MAGIC_TEST_IO_CHANNEL
 (2133571339L)

	)

20 
	#EXT2_ET_MAGIC_DBLIST
 (2133571340L)

	)

21 
	#EXT2_ET_MAGIC_ICOUNT
 (2133571341L)

	)

22 
	#EXT2_ET_MAGIC_PQ_IO_CHANNEL
 (2133571342L)

	)

23 
	#EXT2_ET_MAGIC_EXT2_FILE
 (2133571343L)

	)

24 
	#EXT2_ET_MAGIC_E2IMAGE
 (2133571344L)

	)

25 
	#EXT2_ET_MAGIC_INODE_IO_CHANNEL
 (2133571345L)

	)

26 
	#EXT2_ET_MAGIC_EXTENT_HANDLE
 (2133571346L)

	)

27 
	#EXT2_ET_BAD_MAGIC
 (2133571347L)

	)

28 
	#EXT2_ET_REV_TOO_HIGH
 (2133571348L)

	)

29 
	#EXT2_ET_RO_FILSYS
 (2133571349L)

	)

30 
	#EXT2_ET_GDESC_READ
 (2133571350L)

	)

31 
	#EXT2_ET_GDESC_WRITE
 (2133571351L)

	)

32 
	#EXT2_ET_GDESC_BAD_BLOCK_MAP
 (2133571352L)

	)

33 
	#EXT2_ET_GDESC_BAD_INODE_MAP
 (2133571353L)

	)

34 
	#EXT2_ET_GDESC_BAD_INODE_TABLE
 (2133571354L)

	)

35 
	#EXT2_ET_INODE_BITMAP_WRITE
 (2133571355L)

	)

36 
	#EXT2_ET_INODE_BITMAP_READ
 (2133571356L)

	)

37 
	#EXT2_ET_BLOCK_BITMAP_WRITE
 (2133571357L)

	)

38 
	#EXT2_ET_BLOCK_BITMAP_READ
 (2133571358L)

	)

39 
	#EXT2_ET_INODE_TABLE_WRITE
 (2133571359L)

	)

40 
	#EXT2_ET_INODE_TABLE_READ
 (2133571360L)

	)

41 
	#EXT2_ET_NEXT_INODE_READ
 (2133571361L)

	)

42 
	#EXT2_ET_UNEXPECTED_BLOCK_SIZE
 (2133571362L)

	)

43 
	#EXT2_ET_DIR_CORRUPTED
 (2133571363L)

	)

44 
	#EXT2_ET_SHORT_READ
 (2133571364L)

	)

45 
	#EXT2_ET_SHORT_WRITE
 (2133571365L)

	)

46 
	#EXT2_ET_DIR_NO_SPACE
 (2133571366L)

	)

47 
	#EXT2_ET_NO_INODE_BITMAP
 (2133571367L)

	)

48 
	#EXT2_ET_NO_BLOCK_BITMAP
 (2133571368L)

	)

49 
	#EXT2_ET_BAD_INODE_NUM
 (2133571369L)

	)

50 
	#EXT2_ET_BAD_BLOCK_NUM
 (2133571370L)

	)

51 
	#EXT2_ET_EXPAND_DIR_ERR
 (2133571371L)

	)

52 
	#EXT2_ET_TOOSMALL
 (2133571372L)

	)

53 
	#EXT2_ET_BAD_BLOCK_MARK
 (2133571373L)

	)

54 
	#EXT2_ET_BAD_BLOCK_UNMARK
 (2133571374L)

	)

55 
	#EXT2_ET_BAD_BLOCK_TEST
 (2133571375L)

	)

56 
	#EXT2_ET_BAD_INODE_MARK
 (2133571376L)

	)

57 
	#EXT2_ET_BAD_INODE_UNMARK
 (2133571377L)

	)

58 
	#EXT2_ET_BAD_INODE_TEST
 (2133571378L)

	)

59 
	#EXT2_ET_FUDGE_BLOCK_BITMAP_END
 (2133571379L)

	)

60 
	#EXT2_ET_FUDGE_INODE_BITMAP_END
 (2133571380L)

	)

61 
	#EXT2_ET_BAD_IND_BLOCK
 (2133571381L)

	)

62 
	#EXT2_ET_BAD_DIND_BLOCK
 (2133571382L)

	)

63 
	#EXT2_ET_BAD_TIND_BLOCK
 (2133571383L)

	)

64 
	#EXT2_ET_NEQ_BLOCK_BITMAP
 (2133571384L)

	)

65 
	#EXT2_ET_NEQ_INODE_BITMAP
 (2133571385L)

	)

66 
	#EXT2_ET_BAD_DEVICE_NAME
 (2133571386L)

	)

67 
	#EXT2_ET_MISSING_INODE_TABLE
 (2133571387L)

	)

68 
	#EXT2_ET_CORRUPT_SUPERBLOCK
 (2133571388L)

	)

69 
	#EXT2_ET_BAD_GENERIC_MARK
 (2133571389L)

	)

70 
	#EXT2_ET_BAD_GENERIC_UNMARK
 (2133571390L)

	)

71 
	#EXT2_ET_BAD_GENERIC_TEST
 (2133571391L)

	)

72 
	#EXT2_ET_SYMLINK_LOOP
 (2133571392L)

	)

73 
	#EXT2_ET_CALLBACK_NOTHANDLED
 (2133571393L)

	)

74 
	#EXT2_ET_BAD_BLOCK_IN_INODE_TABLE
 (2133571394L)

	)

75 
	#EXT2_ET_UNSUPP_FEATURE
 (2133571395L)

	)

76 
	#EXT2_ET_RO_UNSUPP_FEATURE
 (2133571396L)

	)

77 
	#EXT2_ET_LLSEEK_FAILED
 (2133571397L)

	)

78 
	#EXT2_ET_NO_MEMORY
 (2133571398L)

	)

79 
	#EXT2_ET_INVALID_ARGUMENT
 (2133571399L)

	)

80 
	#EXT2_ET_BLOCK_ALLOC_FAIL
 (2133571400L)

	)

81 
	#EXT2_ET_INODE_ALLOC_FAIL
 (2133571401L)

	)

82 
	#EXT2_ET_NO_DIRECTORY
 (2133571402L)

	)

83 
	#EXT2_ET_TOO_MANY_REFS
 (2133571403L)

	)

84 
	#EXT2_ET_FILE_NOT_FOUND
 (2133571404L)

	)

85 
	#EXT2_ET_FILE_RO
 (2133571405L)

	)

86 
	#EXT2_ET_DB_NOT_FOUND
 (2133571406L)

	)

87 
	#EXT2_ET_DIR_EXISTS
 (2133571407L)

	)

88 
	#EXT2_ET_UNIMPLEMENTED
 (2133571408L)

	)

89 
	#EXT2_ET_CANCEL_REQUESTED
 (2133571409L)

	)

90 
	#EXT2_ET_FILE_TOO_BIG
 (2133571410L)

	)

91 
	#EXT2_ET_JOURNAL_NOT_BLOCK
 (2133571411L)

	)

92 
	#EXT2_ET_NO_JOURNAL_SB
 (2133571412L)

	)

93 
	#EXT2_ET_JOURNAL_TOO_SMALL
 (2133571413L)

	)

94 
	#EXT2_ET_JOURNAL_UNSUPP_VERSION
 (2133571414L)

	)

95 
	#EXT2_ET_LOAD_EXT_JOURNAL
 (2133571415L)

	)

96 
	#EXT2_ET_NO_JOURNAL
 (2133571416L)

	)

97 
	#EXT2_ET_DIRHASH_UNSUPP
 (2133571417L)

	)

98 
	#EXT2_ET_BAD_EA_BLOCK_NUM
 (2133571418L)

	)

99 
	#EXT2_ET_TOO_MANY_INODES
 (2133571419L)

	)

100 
	#EXT2_ET_NOT_IMAGE_FILE
 (2133571420L)

	)

101 
	#EXT2_ET_RES_GDT_BLOCKS
 (2133571421L)

	)

102 
	#EXT2_ET_RESIZE_INODE_CORRUPT
 (2133571422L)

	)

103 
	#EXT2_ET_SET_BMAP_NO_IND
 (2133571423L)

	)

104 
	#EXT2_ET_TDB_SUCCESS
 (2133571424L)

	)

105 
	#EXT2_ET_TDB_ERR_CORRUPT
 (2133571425L)

	)

106 
	#EXT2_ET_TDB_ERR_IO
 (2133571426L)

	)

107 
	#EXT2_ET_TDB_ERR_LOCK
 (2133571427L)

	)

108 
	#EXT2_ET_TDB_ERR_OOM
 (2133571428L)

	)

109 
	#EXT2_ET_TDB_ERR_EXISTS
 (2133571429L)

	)

110 
	#EXT2_ET_TDB_ERR_NOLOCK
 (2133571430L)

	)

111 
	#EXT2_ET_TDB_ERR_EINVAL
 (2133571431L)

	)

112 
	#EXT2_ET_TDB_ERR_NOEXIST
 (2133571432L)

	)

113 
	#EXT2_ET_TDB_ERR_RDONLY
 (2133571433L)

	)

114 
	#EXT2_ET_DBLIST_EMPTY
 (2133571434L)

	)

115 
	#EXT2_ET_RO_BLOCK_ITERATE
 (2133571435L)

	)

116 
	#EXT2_ET_MAGIC_EXTENT_PATH
 (2133571436L)

	)

117 
	#EXT2_ET_MAGIC_GENERIC_BITMAP64
 (2133571437L)

	)

118 
	#EXT2_ET_MAGIC_BLOCK_BITMAP64
 (2133571438L)

	)

119 
	#EXT2_ET_MAGIC_INODE_BITMAP64
 (2133571439L)

	)

120 
	#EXT2_ET_MAGIC_RESERVED_13
 (2133571440L)

	)

121 
	#EXT2_ET_MAGIC_RESERVED_14
 (2133571441L)

	)

122 
	#EXT2_ET_MAGIC_RESERVED_15
 (2133571442L)

	)

123 
	#EXT2_ET_MAGIC_RESERVED_16
 (2133571443L)

	)

124 
	#EXT2_ET_MAGIC_RESERVED_17
 (2133571444L)

	)

125 
	#EXT2_ET_MAGIC_RESERVED_18
 (2133571445L)

	)

126 
	#EXT2_ET_MAGIC_RESERVED_19
 (2133571446L)

	)

127 
	#EXT2_ET_EXTENT_HEADER_BAD
 (2133571447L)

	)

128 
	#EXT2_ET_EXTENT_INDEX_BAD
 (2133571448L)

	)

129 
	#EXT2_ET_EXTENT_LEAF_BAD
 (2133571449L)

	)

130 
	#EXT2_ET_EXTENT_NO_SPACE
 (2133571450L)

	)

131 
	#EXT2_ET_INODE_NOT_EXTENT
 (2133571451L)

	)

132 
	#EXT2_ET_EXTENT_NO_NEXT
 (2133571452L)

	)

133 
	#EXT2_ET_EXTENT_NO_PREV
 (2133571453L)

	)

134 
	#EXT2_ET_EXTENT_NO_UP
 (2133571454L)

	)

135 
	#EXT2_ET_EXTENT_NO_DOWN
 (2133571455L)

	)

136 
	#EXT2_ET_NO_CURRENT_NODE
 (2133571456L)

	)

137 
	#EXT2_ET_OP_NOT_SUPPORTED
 (2133571457L)

	)

138 
	#EXT2_ET_CANT_INSERT_EXTENT
 (2133571458L)

	)

139 
	#EXT2_ET_CANT_SPLIT_EXTENT
 (2133571459L)

	)

140 
	#EXT2_ET_EXTENT_NOT_FOUND
 (2133571460L)

	)

141 
	#EXT2_ET_EXTENT_NOT_SUPPORTED
 (2133571461L)

	)

142 
	#EXT2_ET_EXTENT_INVALID_LENGTH
 (2133571462L)

	)

143 
	#EXT2_ET_IO_CHANNEL_NO_SUPPORT_64
 (2133571463L)

	)

144 
	#EXT2_NO_MTAB_FILE
 (2133571464L)

	)

145 
	#EXT2_ET_CANT_USE_LEGACY_BITMAPS
 (2133571465L)

	)

146 
	#EXT2_ET_MMP_MAGIC_INVALID
 (2133571466L)

	)

147 
	#EXT2_ET_MMP_FAILED
 (2133571467L)

	)

148 
	#EXT2_ET_MMP_FSCK_ON
 (2133571468L)

	)

149 
	#EXT2_ET_MMP_BAD_BLOCK
 (2133571469L)

	)

150 
	#EXT2_ET_MMP_UNKNOWN_SEQ
 (2133571470L)

	)

151 
	#EXT2_ET_MMP_CHANGE_ABORT
 (2133571471L)

	)

152 
	#EXT2_ET_MMP_OPEN_DIRECT
 (2133571472L)

	)

153 c⁄° 
îr‹_èbÀ
 
ë_ext2_îr‹_èbÀ
;

154 
öôülize_ext2_îr‹_èbÀ
();

157 
öôülize_ext2_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

159 
	#ERROR_TABLE_BASE_ext2
 (2133571328L)

	)

162 
	#öô_ext2_îr_tbl
 
öôülize_ext2_îr‹_èbÀ


	)

163 
	#ext2_îr_ba£
 
ERROR_TABLE_BASE_ext2


	)

	@/usr/include/ext2fs/ext2_ext_attr.h

9 #i‚de‡
_EXT2_EXT_ATTR_H


10 
	#_EXT2_EXT_ATTR_H


	)

12 
	#EXT2_EXT_ATTR_MAGIC_v1
 0xEA010000

	)

13 
	#EXT2_EXT_ATTR_MAGIC
 0xEA020000

	)

16 
	#EXT2_EXT_ATTR_REFCOUNT_MAX
 1024

	)

18 
	sext2_ext_©å_hódî
 {

19 
__u32
 
	mh_magic
;

20 
__u32
 
	mh_ªfcou¡
;

21 
__u32
 
	mh_blocks
;

22 
__u32
 
	mh_hash
;

23 
__u32
 
	mh_ª£rved
[4];

26 
	sext2_ext_©å_íåy
 {

27 
__u8
 
	me_«me_Àn
;

28 
__u8
 
	me_«me_ödex
;

29 
__u16
 
	me_vÆue_offs
;

30 
__u32
 
	me_vÆue_block
;

31 
__u32
 
	me_vÆue_size
;

32 
__u32
 
	me_hash
;

34 
	me_«me
[0];

38 
	#EXT2_EXT_ATTR_PAD_BITS
 2

	)

39 
	#EXT2_EXT_ATTR_PAD
 ((Ë1<<
EXT2_EXT_ATTR_PAD_BITS
)

	)

40 
	#EXT2_EXT_ATTR_ROUND
 (
EXT2_EXT_ATTR_PAD
-1)

	)

41 
	#EXT2_EXT_ATTR_LEN
(
«me_Àn
) \

42 (((
«me_Àn
Ë+ 
EXT2_EXT_ATTR_ROUND
 + \

43 (
ext2_ext_©å_íåy
)Ë& ~
EXT2_EXT_ATTR_ROUND
)

	)

44 
	#EXT2_EXT_ATTR_NEXT
(
íåy
) \

45 –(
ext2_ext_©å_íåy
 *)( \

46 (*)(
íåy
Ë+ 
	`EXT2_EXT_ATTR_LEN
(”¡ry)->
e_«me_Àn
)Ë)

	)

47 
	#EXT2_EXT_ATTR_SIZE
(
size
) \

48 (((
size
Ë+ 
EXT2_EXT_ATTR_ROUND
Ë& ~EXT2_EXT_ATTR_ROUND)

	)

49 
	#EXT2_EXT_IS_LAST_ENTRY
(
íåy
Ë(*((
__u32
 *)”¡ry)Ë=0UL)

	)

50 
	#EXT2_EXT_ATTR_NAME
(
íåy
) \

51 (((*Ë(
íåy
)Ë+ (
ext2_ext_©å_íåy
))

	)

52 
	#EXT2_XATTR_LEN
(
«me_Àn
) \

53 (((
«me_Àn
Ë+ 
EXT2_EXT_ATTR_ROUND
 + \

54 (
ext2_x©å_íåy
)Ë& ~
EXT2_EXT_ATTR_ROUND
)

	)

55 
	#EXT2_XATTR_SIZE
(
size
) \

56 (((
size
Ë+ 
EXT2_EXT_ATTR_ROUND
Ë& ~EXT2_EXT_ATTR_ROUND)

	)

58 #ifde‡
__KERNEL__


59 #ifde‡
CONFIG_EXT2_FS_EXT_ATTR


60 
ext2_gë_ext_©å
(
öode
 *, c⁄° *, *, 
size_t
, );

61 
ext2_£t_ext_©å
(
öode
 *, c⁄° *, *, 
size_t
, );

62 
ext2_ext_©å_‰ì_öode
(
öode
 *inode);

63 
ext2_ext_©å_put_su≥r
(
su≥r_block
 *
sb
);

64 
ext2_ext_©å_öô
();

65 
ext2_ext_©å_d⁄e
();

67 
	#ext2_gë_ext_©å
 
NULL


	)

68 
	#ext2_£t_ext_©å
 
NULL


	)

	@/usr/include/ext2fs/ext2_fs.h

16 #i‚de‡
_LINUX_EXT2_FS_H


17 
	#_LINUX_EXT2_FS_H


	)

19 
	~<ext2fs/ext2_ty≥s.h
>

28 #unde‡
EXT2FS_DEBUG


33 
	#EXT2_PREALLOCATE


	)

34 
	#EXT2_DEFAULT_PREALLOC_BLOCKS
 8

	)

39 
	#EXT2FS_DATE
 "95/08/09"

	)

40 
	#EXT2FS_VERSION
 "0.5b"

	)

45 
	#EXT2_BAD_INO
 1

	)

46 
	#EXT2_ROOT_INO
 2

	)

47 
	#EXT4_USR_QUOTA_INO
 3

	)

48 
	#EXT4_GRP_QUOTA_INO
 4

	)

49 
	#EXT2_BOOT_LOADER_INO
 5

	)

50 
	#EXT2_UNDEL_DIR_INO
 6

	)

51 
	#EXT2_RESIZE_INO
 7

	)

52 
	#EXT2_JOURNAL_INO
 8

	)

53 
	#EXT2_EXCLUDE_INO
 9

	)

56 
	#EXT2_GOOD_OLD_FIRST_INO
 11

	)

61 
	#EXT2_SUPER_MAGIC
 0xEF53

	)

63 #ifde‡
__KERNEL__


64 
	#EXT2_SB
(
sb
Ë(&((sb)->
u
.
ext2_sb
))

	)

69 
	#EXT2_SB
(
sb
Ë(sb)

	)

75 
	#EXT2_LINK_MAX
 65000

	)

80 
	#EXT2_MIN_BLOCK_LOG_SIZE
 10

	)

81 
	#EXT2_MAX_BLOCK_LOG_SIZE
 16

	)

82 
	#EXT2_MIN_BLOCK_SIZE
 (1 << 
EXT2_MIN_BLOCK_LOG_SIZE
)

	)

83 
	#EXT2_MAX_BLOCK_SIZE
 (1 << 
EXT2_MAX_BLOCK_LOG_SIZE
)

	)

84 #ifde‡
__KERNEL__


85 
	#EXT2_BLOCK_SIZE
(
s
Ë((s)->
s_blocksize
)

	)

86 
	#EXT2_BLOCK_SIZE_BITS
(
s
Ë((s)->
s_blocksize_bôs
)

	)

87 
	#EXT2_ADDR_PER_BLOCK_BITS
(
s
Ë(
	`EXT2_SB
(s)->
addr_≥r_block_bôs
)

	)

88 
	#EXT2_INODE_SIZE
(
s
Ë(
	`EXT2_SB
(s)->
s_öode_size
)

	)

89 
	#EXT2_FIRST_INO
(
s
Ë(
	`EXT2_SB
(s)->
s_fú°_öo
)

	)

91 
	#EXT2_BLOCK_SIZE
(
s
Ë(
EXT2_MIN_BLOCK_SIZE
 << (s)->
s_log_block_size
)

	)

92 
	#EXT2_BLOCK_SIZE_BITS
(
s
Ë((s)->
s_log_block_size
 + 10)

	)

93 
	#EXT2_INODE_SIZE
(
s
Ë(((s)->
s_ªv_Àvñ
 =
EXT2_GOOD_OLD_REV
) ? \

94 
EXT2_GOOD_OLD_INODE_SIZE
 : (
s
)->
s_öode_size
)

	)

95 
	#EXT2_FIRST_INO
(
s
Ë(((s)->
s_ªv_Àvñ
 =
EXT2_GOOD_OLD_REV
) ? \

96 
EXT2_GOOD_OLD_FIRST_INO
 : (
s
)->
s_fú°_öo
)

	)

98 
	#EXT2_ADDR_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/ (
__u32
))

	)

103 
	#EXT2_MIN_CLUSTER_LOG_SIZE
 
EXT2_MIN_BLOCK_LOG_SIZE


	)

104 
	#EXT2_MAX_CLUSTER_LOG_SIZE
 29

	)

105 
	#EXT2_MIN_CLUSTER_SIZE
 
EXT2_MIN_BLOCK_SIZE


	)

106 
	#EXT2_MAX_CLUSTER_SIZE
 (1 << 
EXT2_MAX_CLUSTER_LOG_SIZE
)

	)

107 
	#EXT2_CLUSTER_SIZE
(
s
Ë(
EXT2_MIN_BLOCK_SIZE
 << \

108 (
s
)->
s_log_˛u°î_size
)

	)

109 
	#EXT2_CLUSTER_SIZE_BITS
(
s
Ë((s)->
s_log_˛u°î_size
 + 10)

	)

117 
	#EXT2_MIN_FRAG_SIZE
 
EXT2_MIN_BLOCK_SIZE


	)

118 
	#EXT2_MAX_FRAG_SIZE
 
EXT2_MAX_BLOCK_SIZE


	)

119 
	#EXT2_MIN_FRAG_LOG_SIZE
 
EXT2_MIN_BLOCK_LOG_SIZE


	)

120 
	#EXT2_FRAG_SIZE
(
s
Ë
	`EXT2_BLOCK_SIZE
(s)

	)

121 
	#EXT2_FRAGS_PER_BLOCK
(
s
Ë1

	)

126 
	sext2_a˛_hódî


128 
__u32
 
	ma˛h_size
;

129 
__u32
 
	ma˛h_fûe_cou¡
;

130 
__u32
 
	ma˛h_a˛e_cou¡
;

131 
__u32
 
	ma˛h_fú°_a˛e
;

134 
	sext2_a˛_íåy


136 
__u32
 
	ma˛e_size
;

137 
__u16
 
	ma˛e_≥rms
;

138 
__u16
 
	ma˛e_ty≥
;

139 
__u16
 
	ma˛e_èg
;

140 
__u16
 
	ma˛e_∑d1
;

141 
__u32
 
	ma˛e_√xt
;

148 
	sext2_group_desc


150 
__u32
 
	mbg_block_bôm≠
;

151 
__u32
 
	mbg_öode_bôm≠
;

152 
__u32
 
	mbg_öode_èbÀ
;

153 
__u16
 
	mbg_‰ì_blocks_cou¡
;

154 
__u16
 
	mbg_‰ì_öodes_cou¡
;

155 
__u16
 
	mbg_u£d_dús_cou¡
;

156 
__u16
 
	mbg_Êags
;

157 
__u32
 
	mbg_ex˛ude_bôm≠_lo
;

158 
__u16
 
	mbg_block_bôm≠_csum_lo
;

159 
__u16
 
	mbg_öode_bôm≠_csum_lo
;

160 
__u16
 
	mbg_ôabÀ_unu£d
;

161 
__u16
 
	mbg_checksum
;

167 
	sext4_group_desc


169 
__u32
 
	mbg_block_bôm≠
;

170 
__u32
 
	mbg_öode_bôm≠
;

171 
__u32
 
	mbg_öode_èbÀ
;

172 
__u16
 
	mbg_‰ì_blocks_cou¡
;

173 
__u16
 
	mbg_‰ì_öodes_cou¡
;

174 
__u16
 
	mbg_u£d_dús_cou¡
;

175 
__u16
 
	mbg_Êags
;

176 
__u32
 
	mbg_ex˛ude_bôm≠_lo
;

177 
__u16
 
	mbg_block_bôm≠_csum_lo
;

178 
__u16
 
	mbg_öode_bôm≠_csum_lo
;

179 
__u16
 
	mbg_ôabÀ_unu£d
;

180 
__u16
 
	mbg_checksum
;

181 
__u32
 
	mbg_block_bôm≠_hi
;

182 
__u32
 
	mbg_öode_bôm≠_hi
;

183 
__u32
 
	mbg_öode_èbÀ_hi
;

184 
__u16
 
	mbg_‰ì_blocks_cou¡_hi
;

185 
__u16
 
	mbg_‰ì_öodes_cou¡_hi
;

186 
__u16
 
	mbg_u£d_dús_cou¡_hi
;

187 
__u16
 
	mbg_ôabÀ_unu£d_hi
;

188 
__u32
 
	mbg_ex˛ude_bôm≠_hi
;

189 
__u16
 
	mbg_block_bôm≠_csum_hi
;

190 
__u16
 
	mbg_öode_bôm≠_csum_hi
;

191 
__u32
 
	mbg_ª£rved
;

194 
	#EXT2_BG_INODE_UNINIT
 0x0001

	)

195 
	#EXT2_BG_BLOCK_UNINIT
 0x0002

	)

196 
	#EXT2_BG_INODE_ZEROED
 0x0004

	)

210 
	sext2_dx_roŸ_öfo
 {

211 
__u32
 
	mª£rved_zîo
;

212 
__u8
 
	mhash_vîsi⁄
;

213 
__u8
 
	möfo_Àngth
;

214 
__u8
 
	mödúe˘_Àvñs
;

215 
__u8
 
	munu£d_Êags
;

218 
	#EXT2_HASH_LEGACY
 0

	)

219 
	#EXT2_HASH_HALF_MD4
 1

	)

220 
	#EXT2_HASH_TEA
 2

	)

221 
	#EXT2_HASH_LEGACY_UNSIGNED
 3

	)

222 
	#EXT2_HASH_HALF_MD4_UNSIGNED
 4

	)

223 
	#EXT2_HASH_TEA_UNSIGNED
 5

	)

225 
	#EXT2_HASH_FLAG_INCOMPAT
 0x1

	)

227 
	sext2_dx_íåy
 {

228 
__u32
 
	mhash
;

229 
__u32
 
	mblock
;

232 
	sext2_dx_cou¡limô
 {

233 
__u16
 
	mlimô
;

234 
__u16
 
	mcou¡
;

241 
	#EXT2_MIN_DESC_SIZE
 32

	)

242 
	#EXT2_MIN_DESC_SIZE_64BIT
 64

	)

243 
	#EXT2_MAX_DESC_SIZE
 
EXT2_MIN_BLOCK_SIZE


	)

244 
	#EXT2_DESC_SIZE
(
s
) \

245 ((
	`EXT2_SB
(
s
)->
s_„©uª_öcom∑t
 & 
EXT4_FEATURE_INCOMPAT_64BIT
) ? \

246 (
s
)->
s_desc_size
 : 
EXT2_MIN_DESC_SIZE
)

	)

248 
	#EXT2_BLOCKS_PER_GROUP
(
s
Ë(
	`EXT2_SB
(s)->
s_blocks_≥r_group
)

	)

249 
	#EXT2_INODES_PER_GROUP
(
s
Ë(
	`EXT2_SB
(s)->
s_öodes_≥r_group
)

	)

250 
	#EXT2_CLUSTERS_PER_GROUP
(
s
Ë(
	`EXT2_SB
(s)->
s_˛u°îs_≥r_group
)

	)

251 
	#EXT2_INODES_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(s)/
	`EXT2_INODE_SIZE
(s))

	)

253 
	#EXT2_MAX_BLOCKS_PER_GROUP
(
s
) (((() 1 << 16) - 8) * \

254 (
	`EXT2_CLUSTER_SIZE
(
s
) / \

255 
	`EXT2_BLOCK_SIZE
(
s
)))

	)

256 
	#EXT2_MAX_CLUSTERS_PER_GROUP
(
s
Ë(((Ë1 << 16Ë- 8)

	)

257 
	#EXT2_MAX_INODES_PER_GROUP
(
s
) ((() 1 << 16) - \

258 
	`EXT2_INODES_PER_BLOCK
(
s
))

	)

259 #ifde‡
__KERNEL__


260 
	#EXT2_DESC_PER_BLOCK
(
s
Ë(
	`EXT2_SB
(s)->
s_desc_≥r_block
)

	)

261 
	#EXT2_DESC_PER_BLOCK_BITS
(
s
Ë(
	`EXT2_SB
(s)->
s_desc_≥r_block_bôs
)

	)

263 
	#EXT2_DESC_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/ 
	`EXT2_DESC_SIZE
(s))

	)

269 
	#EXT2_NDIR_BLOCKS
 12

	)

270 
	#EXT2_IND_BLOCK
 
EXT2_NDIR_BLOCKS


	)

271 
	#EXT2_DIND_BLOCK
 (
EXT2_IND_BLOCK
 + 1)

	)

272 
	#EXT2_TIND_BLOCK
 (
EXT2_DIND_BLOCK
 + 1)

	)

273 
	#EXT2_N_BLOCKS
 (
EXT2_TIND_BLOCK
 + 1)

	)

278 
	#EXT2_SECRM_FL
 0x00000001

	)

279 
	#EXT2_UNRM_FL
 0x00000002

	)

280 
	#EXT2_COMPR_FL
 0x00000004

	)

281 
	#EXT2_SYNC_FL
 0x00000008

	)

282 
	#EXT2_IMMUTABLE_FL
 0x00000010

	)

283 
	#EXT2_APPEND_FL
 0x00000020

	)

284 
	#EXT2_NODUMP_FL
 0x00000040

	)

285 
	#EXT2_NOATIME_FL
 0x00000080

	)

287 
	#EXT2_DIRTY_FL
 0x00000100

	)

288 
	#EXT2_COMPRBLK_FL
 0x00000200

	)

289 
	#EXT2_NOCOMPR_FL
 0x00000400

	)

290 
	#EXT2_ECOMPR_FL
 0x00000800

	)

292 
	#EXT2_BTREE_FL
 0x00001000

	)

293 
	#EXT2_INDEX_FL
 0x00001000

	)

294 
	#EXT2_IMAGIC_FL
 0x00002000

	)

295 
	#EXT3_JOURNAL_DATA_FL
 0x00004000

	)

296 
	#EXT2_NOTAIL_FL
 0x00008000

	)

297 
	#EXT2_DIRSYNC_FL
 0x00010000

	)

298 
	#EXT2_TOPDIR_FL
 0x00020000

	)

299 
	#EXT4_HUGE_FILE_FL
 0x00040000

	)

300 
	#EXT4_EXTENTS_FL
 0x00080000

	)

301 
	#EXT4_EA_INODE_FL
 0x00200000

	)

302 
	#EXT4_EOFBLOCKS_FL
 0x00400000

	)

303 
	#EXT4_SNAPFILE_FL
 0x01000000

	)

304 
	#EXT4_SNAPFILE_DELETED_FL
 0x04000000

	)

305 
	#EXT4_SNAPFILE_SHRUNK_FL
 0x08000000

	)

306 
	#EXT2_RESERVED_FL
 0x80000000

	)

308 
	#EXT2_FL_USER_VISIBLE
 0x004BDFFF

	)

309 
	#EXT2_FL_USER_MODIFIABLE
 0x004B80FF

	)

316 
	sext2_√w_group_öput
 {

317 
__u32
 
	mgroup
;

318 
__u32
 
	mblock_bôm≠
;

319 
__u32
 
	möode_bôm≠
;

320 
__u32
 
	möode_èbÀ
;

321 
__u32
 
	mblocks_cou¡
;

322 
__u16
 
	mª£rved_blocks
;

323 
__u16
 
	munu£d
;

326 
	sext4_√w_group_öput
 {

327 
__u32
 
	mgroup
;

328 
__u64
 
	mblock_bôm≠
;

329 
__u64
 
	möode_bôm≠
;

330 
__u64
 
	möode_èbÀ
;

331 
__u32
 
	mblocks_cou¡
;

332 
__u16
 
	mª£rved_blocks
;

333 
__u16
 
	munu£d
;

336 #ifde‡
__GNU__


337 
	#_IOT_ext2_√w_group_öput
 
	`_IOT
 (
	`_IOTS
(
__u32
), 5, _IOTS(
__u16
), 2, 0, 0)

	)

340 
	#EXT2_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

341 
	#EXT2_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

342 
	#EXT2_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

343 
	#EXT2_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

344 
	#EXT2_IOC_GETVERSION_NEW
 
	`_IOR
('f', 3, )

	)

345 
	#EXT2_IOC_SETVERSION_NEW
 
	`_IOW
('f', 4, )

	)

346 
	#EXT2_IOC_GROUP_EXTEND
 
	`_IOW
('f', 7, )

	)

347 
	#EXT2_IOC_GROUP_ADD
 
	`_IOW
('f', 8,
ext2_√w_group_öput
)

	)

348 
	#EXT4_IOC_GROUP_ADD
 
	`_IOW
('f', 8,
ext4_√w_group_öput
)

	)

349 
	#EXT4_IOC_RESIZE_FS
 
	`_IOW
('f', 16, 
__u64
)

	)

354 
	sext2_öode
 {

355 
__u16
 
	mi_mode
;

356 
__u16
 
	mi_uid
;

357 
__u32
 
	mi_size
;

358 
__u32
 
	mi_©ime
;

359 
__u32
 
	mi_˘ime
;

360 
__u32
 
	mi_mtime
;

361 
__u32
 
	mi_dtime
;

362 
__u16
 
	mi_gid
;

363 
__u16
 
	mi_löks_cou¡
;

364 
__u32
 
	mi_blocks
;

365 
__u32
 
	mi_Êags
;

368 
__u32
 
	ml_i_vîsi⁄
;

369 } 
	mlöux1
;

371 
__u32
 
	mh_i_å™¶©‹
;

372 } 
	mhurd1
;

373 } 
	mosd1
;

374 
__u32
 
	mi_block
[
EXT2_N_BLOCKS
];

375 
__u32
 
	mi_gíî©i⁄
;

376 
__u32
 
	mi_fûe_a˛
;

377 
__u32
 
	mi_size_high
;

378 
__u32
 
	mi_Áddr
;

381 
__u16
 
	ml_i_blocks_hi
;

382 
__u16
 
	ml_i_fûe_a˛_high
;

383 
__u16
 
	ml_i_uid_high
;

384 
__u16
 
	ml_i_gid_high
;

385 
__u16
 
	ml_i_checksum_lo
;

386 
__u16
 
	ml_i_ª£rved
;

387 } 
	mlöux2
;

389 
__u8
 
	mh_i_‰ag
;

390 
__u8
 
	mh_i_fsize
;

391 
__u16
 
	mh_i_mode_high
;

392 
__u16
 
	mh_i_uid_high
;

393 
__u16
 
	mh_i_gid_high
;

394 
__u32
 
	mh_i_auth‹
;

395 } 
	mhurd2
;

396 } 
	mosd2
;

402 
	sext2_öode_œrge
 {

403 
__u16
 
	mi_mode
;

404 
__u16
 
	mi_uid
;

405 
__u32
 
	mi_size
;

406 
__u32
 
	mi_©ime
;

407 
__u32
 
	mi_˘ime
;

408 
__u32
 
	mi_mtime
;

409 
__u32
 
	mi_dtime
;

410 
__u16
 
	mi_gid
;

411 
__u16
 
	mi_löks_cou¡
;

412 
__u32
 
	mi_blocks
;

413 
__u32
 
	mi_Êags
;

416 
__u32
 
	ml_i_vîsi⁄
;

417 } 
	mlöux1
;

419 
__u32
 
	mh_i_å™¶©‹
;

420 } 
	mhurd1
;

421 } 
	mosd1
;

422 
__u32
 
	mi_block
[
EXT2_N_BLOCKS
];

423 
__u32
 
	mi_gíî©i⁄
;

424 
__u32
 
	mi_fûe_a˛
;

425 
__u32
 
	mi_size_high
;

426 
__u32
 
	mi_Áddr
;

429 
__u16
 
	ml_i_blocks_hi
;

430 
__u16
 
	ml_i_fûe_a˛_high
;

431 
__u16
 
	ml_i_uid_high
;

432 
__u16
 
	ml_i_gid_high
;

433 
__u16
 
	ml_i_checksum_lo
;

434 
__u16
 
	ml_i_ª£rved
;

435 } 
	mlöux2
;

437 
__u8
 
	mh_i_‰ag
;

438 
__u8
 
	mh_i_fsize
;

439 
__u16
 
	mh_i_mode_high
;

440 
__u16
 
	mh_i_uid_high
;

441 
__u16
 
	mh_i_gid_high
;

442 
__u32
 
	mh_i_auth‹
;

443 } 
	mhurd2
;

444 } 
	mosd2
;

445 
__u16
 
	mi_exåa_isize
;

446 
__u16
 
	mi_checksum_hi
;

447 
__u32
 
	mi_˘ime_exåa
;

448 
__u32
 
	mi_mtime_exåa
;

449 
__u32
 
	mi_©ime_exåa
;

450 
__u32
 
	mi_¸time
;

451 
__u32
 
	mi_¸time_exåa
;

452 
__u32
 
	mi_vîsi⁄_hi
;

455 
	#i_dú_a˛
 
i_size_high


	)

457 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
__löux__
)

458 
	#i_ª£rved1
 
osd1
.
löux1
.
l_i_ª£rved1


	)

459 
	#i_‰ag
 
osd2
.
löux2
.
l_i_‰ag


	)

460 
	#i_fsize
 
osd2
.
löux2
.
l_i_fsize


	)

461 
	#i_uid_low
 
i_uid


	)

462 
	#i_gid_low
 
i_gid


	)

463 
	#i_uid_high
 
osd2
.
löux2
.
l_i_uid_high


	)

464 
	#i_gid_high
 
osd2
.
löux2
.
l_i_gid_high


	)

466 #i‡
deföed
(
__GNU__
)

468 
	#i_å™¶©‹
 
osd1
.
hurd1
.
h_i_å™¶©‹


	)

469 
	#i_‰ag
 
osd2
.
hurd2
.
h_i_‰ag
;

	)

470 
	#i_fsize
 
osd2
.
hurd2
.
h_i_fsize
;

	)

471 
	#i_uid_high
 
osd2
.
hurd2
.
h_i_uid_high


	)

472 
	#i_gid_high
 
osd2
.
hurd2
.
h_i_gid_high


	)

473 
	#i_auth‹
 
osd2
.
hurd2
.
h_i_auth‹


	)

478 
	#öode_uid
(
öode
Ë((öode).
i_uid
 | (öode).
osd2
.
löux2
.
l_i_uid_high
 << 16)

	)

479 
	#öode_gid
(
öode
Ë((öode).
i_gid
 | (öode).
osd2
.
löux2
.
l_i_gid_high
 << 16)

	)

480 
	#ext2fs_£t_i_uid_high
(
öode
,
x
Ë((öode).
osd2
.
löux2
.
l_i_uid_high
 = (x))

	)

481 
	#ext2fs_£t_i_gid_high
(
öode
,
x
Ë((öode).
osd2
.
löux2
.
l_i_gid_high
 = (x))

	)

486 
	#EXT2_VALID_FS
 0x0001

	)

487 
	#EXT2_ERROR_FS
 0x0002

	)

488 
	#EXT3_ORPHAN_FS
 0x0004

	)

493 
	#EXT2_FLAGS_SIGNED_HASH
 0x0001

	)

494 
	#EXT2_FLAGS_UNSIGNED_HASH
 0x0002

	)

495 
	#EXT2_FLAGS_TEST_FILESYS
 0x0004

	)

496 
	#EXT2_FLAGS_IS_SNAPSHOT
 0x0010

	)

497 
	#EXT2_FLAGS_FIX_SNAPSHOT
 0x0020

	)

498 
	#EXT2_FLAGS_FIX_EXCLUDE
 0x0040

	)

503 
	#EXT2_MOUNT_CHECK
 0x0001

	)

504 
	#EXT2_MOUNT_GRPID
 0x0004

	)

505 
	#EXT2_MOUNT_DEBUG
 0x0008

	)

506 
	#EXT2_MOUNT_ERRORS_CONT
 0x0010

	)

507 
	#EXT2_MOUNT_ERRORS_RO
 0x0020

	)

508 
	#EXT2_MOUNT_ERRORS_PANIC
 0x0040

	)

509 
	#EXT2_MOUNT_MINIX_DF
 0x0080

	)

510 
	#EXT2_MOUNT_NO_UID32
 0x0200

	)

512 
	#˛ór_›t
(
o
, 
›t
Ëÿ&~
EXT2_MOUNT_
##
	)
opt

513 
	#£t_›t
(
o
, 
›t
Ëÿ|
EXT2_MOUNT_
##
	)
opt

514 
	#ã°_›t
(
sb
, 
›t
Ë(
	`EXT2_SB
(sb)->
s_mou¡_›t
 & \

515 
EXT2_MOUNT_
##
›t
)

	)

519 
	#EXT2_DFL_MAX_MNT_COUNT
 20

	)

520 
	#EXT2_DFL_CHECKINTERVAL
 0

	)

525 
	#EXT2_ERRORS_CONTINUE
 1

	)

526 
	#EXT2_ERRORS_RO
 2

	)

527 
	#EXT2_ERRORS_PANIC
 3

	)

528 
	#EXT2_ERRORS_DEFAULT
 
EXT2_ERRORS_CONTINUE


	)

530 #i‡(
__GNUC__
 >= 4)

531 
	#ext4_off£tof
(
TYPE
,
MEMBER
Ë
	`__buûtö_off£tof
(TYPE,MEMBER)

	)

533 
	#ext4_off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

539 
	sext2_su≥r_block
 {

540 
__u32
 
	ms_öodes_cou¡
;

541 
__u32
 
	ms_blocks_cou¡
;

542 
__u32
 
	ms_r_blocks_cou¡
;

543 
__u32
 
	ms_‰ì_blocks_cou¡
;

544 
__u32
 
	ms_‰ì_öodes_cou¡
;

545 
__u32
 
	ms_fú°_d©a_block
;

546 
__u32
 
	ms_log_block_size
;

547 
__u32
 
	ms_log_˛u°î_size
;

548 
__u32
 
	ms_blocks_≥r_group
;

549 
__u32
 
	ms_˛u°îs_≥r_group
;

550 
__u32
 
	ms_öodes_≥r_group
;

551 
__u32
 
	ms_mtime
;

552 
__u32
 
	ms_wtime
;

553 
__u16
 
	ms_m¡_cou¡
;

554 
__s16
 
	ms_max_m¡_cou¡
;

555 
__u16
 
	ms_magic
;

556 
__u16
 
	ms_°©e
;

557 
__u16
 
	ms_îr‹s
;

558 
__u16
 
	ms_mö‹_ªv_Àvñ
;

559 
__u32
 
	ms_œ°check
;

560 
__u32
 
	ms_checköãrvÆ
;

561 
__u32
 
	ms_¸ót‹_os
;

562 
__u32
 
	ms_ªv_Àvñ
;

563 
__u16
 
	ms_def_ªsuid
;

564 
__u16
 
	ms_def_ªsgid
;

578 
__u32
 
	ms_fú°_öo
;

579 
__u16
 
	ms_öode_size
;

580 
__u16
 
	ms_block_group_ƒ
;

581 
__u32
 
	ms_„©uª_com∑t
;

582 
__u32
 
	ms_„©uª_öcom∑t
;

583 
__u32
 
	ms_„©uª_ro_com∑t
;

584 
__u8
 
	ms_uuid
[16];

585 
	ms_vﬁume_«me
[16];

586 
	ms_œ°_mou¡ed
[64];

587 
__u32
 
	ms_Æg‹ôhm_ußge_bôm≠
;

592 
__u8
 
	ms_¥óŒoc_blocks
;

593 
__u8
 
	ms_¥óŒoc_dú_blocks
;

594 
__u16
 
	ms_ª£rved_gdt_blocks
;

598 
__u8
 
	ms_jou∫Æ_uuid
[16];

599 
__u32
 
	ms_jou∫Æ_öum
;

600 
__u32
 
	ms_jou∫Æ_dev
;

601 
__u32
 
	ms_œ°_‹ph™
;

602 
__u32
 
	ms_hash_£ed
[4];

603 
__u8
 
	ms_def_hash_vîsi⁄
;

604 
__u8
 
	ms_j∆_backup_ty≥
;

605 
__u16
 
	ms_desc_size
;

606 
__u32
 
	ms_deÁu…_mou¡_›ts
;

607 
__u32
 
	ms_fú°_mëa_bg
;

608 
__u32
 
	ms_mkfs_time
;

609 
__u32
 
	ms_j∆_blocks
[17];

610 
__u32
 
	ms_blocks_cou¡_hi
;

611 
__u32
 
	ms_r_blocks_cou¡_hi
;

612 
__u32
 
	ms_‰ì_blocks_hi
;

613 
__u16
 
	ms_mö_exåa_isize
;

614 
__u16
 
	ms_w™t_exåa_isize
;

615 
__u32
 
	ms_Êags
;

616 
__u16
 
	ms_øid_°ride
;

617 
__u16
 
	ms_mmp_upd©e_öãrvÆ
;

618 
__u64
 
	ms_mmp_block
;

619 
__u32
 
	ms_øid_°rùe_width
;

620 
__u8
 
	ms_log_groups_≥r_Êex
;

621 
__u8
 
	ms_ª£rved_ch¨_∑d
;

622 
__u16
 
	ms_ª£rved_∑d
;

623 
__u64
 
	ms_kbyãs_wrôãn
;

624 
__u32
 
	ms_¢≠shŸ_öum
;

625 
__u32
 
	ms_¢≠shŸ_id
;

626 
__u64
 
	ms_¢≠shŸ_r_blocks_cou¡
;

628 
__u32
 
	ms_¢≠shŸ_li°
;

629 
	#EXT4_S_ERR_START
 
	`ext4_off£tof
(
ext2_su≥r_block
, 
s_îr‹_cou¡
)

	)

630 
__u32
 
	ms_îr‹_cou¡
;

631 
__u32
 
	ms_fú°_îr‹_time
;

632 
__u32
 
	ms_fú°_îr‹_öo
;

633 
__u64
 
	ms_fú°_îr‹_block
;

634 
__u8
 
	ms_fú°_îr‹_func
[32];

635 
__u32
 
	ms_fú°_îr‹_löe
;

636 
__u32
 
	ms_œ°_îr‹_time
;

637 
__u32
 
	ms_œ°_îr‹_öo
;

638 
__u32
 
	ms_œ°_îr‹_löe
;

639 
__u64
 
	ms_œ°_îr‹_block
;

640 
__u8
 
	ms_œ°_îr‹_func
[32];

641 
	#EXT4_S_ERR_END
 
	`ext4_off£tof
(
ext2_su≥r_block
, 
s_mou¡_›ts
)

	)

642 
__u8
 
	ms_mou¡_›ts
[64];

643 
__u32
 
	ms_u§_quŸa_öum
;

644 
__u32
 
	ms_gΩ_quŸa_öum
;

645 
__u32
 
	ms_ovîhód_blocks
;

646 
__u32
 
	ms_ª£rved
[108];

647 
__u32
 
	ms_checksum
;

650 
	#EXT4_S_ERR_LEN
 (
EXT4_S_ERR_END
 - 
EXT4_S_ERR_START
)

	)

655 
	#EXT2_OS_LINUX
 0

	)

656 
	#EXT2_OS_HURD
 1

	)

657 
	#EXT2_OBSO_OS_MASIX
 2

	)

658 
	#EXT2_OS_FREEBSD
 3

	)

659 
	#EXT2_OS_LITES
 4

	)

664 
	#EXT2_GOOD_OLD_REV
 0

	)

665 
	#EXT2_DYNAMIC_REV
 1

	)

667 
	#EXT2_CURRENT_REV
 
EXT2_GOOD_OLD_REV


	)

668 
	#EXT2_MAX_SUPP_REV
 
EXT2_DYNAMIC_REV


	)

670 
	#EXT2_GOOD_OLD_INODE_SIZE
 128

	)

675 
	#EXT3_JNL_BACKUP_BLOCKS
 1

	)

681 
	#EXT2_HAS_COMPAT_FEATURE
(
sb
,
mask
) \

682 –
	`EXT2_SB
(
sb
)->
s_„©uª_com∑t
 & (
mask
Ë)

	)

683 
	#EXT2_HAS_RO_COMPAT_FEATURE
(
sb
,
mask
) \

684 –
	`EXT2_SB
(
sb
)->
s_„©uª_ro_com∑t
 & (
mask
Ë)

	)

685 
	#EXT2_HAS_INCOMPAT_FEATURE
(
sb
,
mask
) \

686 –
	`EXT2_SB
(
sb
)->
s_„©uª_öcom∑t
 & (
mask
Ë)

	)

688 
	#EXT2_FEATURE_COMPAT_DIR_PREALLOC
 0x0001

	)

689 
	#EXT2_FEATURE_COMPAT_IMAGIC_INODES
 0x0002

	)

690 
	#EXT3_FEATURE_COMPAT_HAS_JOURNAL
 0x0004

	)

691 
	#EXT2_FEATURE_COMPAT_EXT_ATTR
 0x0008

	)

692 
	#EXT2_FEATURE_COMPAT_RESIZE_INODE
 0x0010

	)

693 
	#EXT2_FEATURE_COMPAT_DIR_INDEX
 0x0020

	)

694 
	#EXT2_FEATURE_COMPAT_LAZY_BG
 0x0040

	)

696 
	#EXT2_FEATURE_COMPAT_EXCLUDE_BITMAP
 0x0100

	)

699 
	#EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
 0x0001

	)

700 
	#EXT2_FEATURE_RO_COMPAT_LARGE_FILE
 0x0002

	)

702 
	#EXT4_FEATURE_RO_COMPAT_HUGE_FILE
 0x0008

	)

703 
	#EXT4_FEATURE_RO_COMPAT_GDT_CSUM
 0x0010

	)

704 
	#EXT4_FEATURE_RO_COMPAT_DIR_NLINK
 0x0020

	)

705 
	#EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE
 0x0040

	)

706 
	#EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT
 0x0080

	)

707 
	#EXT4_FEATURE_RO_COMPAT_QUOTA
 0x0100

	)

708 
	#EXT4_FEATURE_RO_COMPAT_BIGALLOC
 0x0200

	)

709 
	#EXT4_FEATURE_RO_COMPAT_METADATA_CSUM
 0x0400

	)

711 
	#EXT2_FEATURE_INCOMPAT_COMPRESSION
 0x0001

	)

712 
	#EXT2_FEATURE_INCOMPAT_FILETYPE
 0x0002

	)

713 
	#EXT3_FEATURE_INCOMPAT_RECOVER
 0x0004

	)

714 
	#EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
 0x0008

	)

715 
	#EXT2_FEATURE_INCOMPAT_META_BG
 0x0010

	)

716 
	#EXT3_FEATURE_INCOMPAT_EXTENTS
 0x0040

	)

717 
	#EXT4_FEATURE_INCOMPAT_64BIT
 0x0080

	)

718 
	#EXT4_FEATURE_INCOMPAT_MMP
 0x0100

	)

719 
	#EXT4_FEATURE_INCOMPAT_FLEX_BG
 0x0200

	)

720 
	#EXT4_FEATURE_INCOMPAT_EA_INODE
 0x0400

	)

721 
	#EXT4_FEATURE_INCOMPAT_DIRDATA
 0x1000

	)

723 
	#EXT2_FEATURE_COMPAT_SUPP
 0

	)

724 
	#EXT2_FEATURE_INCOMPAT_SUPP
 (
EXT2_FEATURE_INCOMPAT_FILETYPE
| \

725 
EXT4_FEATURE_INCOMPAT_MMP
)

	)

726 
	#EXT2_FEATURE_RO_COMPAT_SUPP
 (
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
| \

727 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
| \

728 
EXT4_FEATURE_RO_COMPAT_DIR_NLINK
| \

729 
EXT2_FEATURE_RO_COMPAT_BTREE_DIR
)

	)

734 
	#EXT2_DEF_RESUID
 0

	)

735 
	#EXT2_DEF_RESGID
 0

	)

740 
	#EXT2_DEFM_DEBUG
 0x0001

	)

741 
	#EXT2_DEFM_BSDGROUPS
 0x0002

	)

742 
	#EXT2_DEFM_XATTR_USER
 0x0004

	)

743 
	#EXT2_DEFM_ACL
 0x0008

	)

744 
	#EXT2_DEFM_UID16
 0x0010

	)

745 
	#EXT3_DEFM_JMODE
 0x0060

	)

746 
	#EXT3_DEFM_JMODE_DATA
 0x0020

	)

747 
	#EXT3_DEFM_JMODE_ORDERED
 0x0040

	)

748 
	#EXT3_DEFM_JMODE_WBACK
 0x0060

	)

749 
	#EXT4_DEFM_NOBARRIER
 0x0100

	)

750 
	#EXT4_DEFM_BLOCK_VALIDITY
 0x0200

	)

751 
	#EXT4_DEFM_DISCARD
 0x0400

	)

752 
	#EXT4_DEFM_NODELALLOC
 0x0800

	)

757 
	#EXT2_NAME_LEN
 255

	)

759 
	sext2_dú_íåy
 {

760 
__u32
 
	möode
;

761 
__u16
 
	mªc_Àn
;

762 
__u16
 
	m«me_Àn
;

763 
	m«me
[
EXT2_NAME_LEN
];

772 
	sext2_dú_íåy_2
 {

773 
__u32
 
	möode
;

774 
__u16
 
	mªc_Àn
;

775 
__u8
 
	m«me_Àn
;

776 
__u8
 
	mfûe_ty≥
;

777 
	m«me
[
EXT2_NAME_LEN
];

784 
	#EXT2_FT_UNKNOWN
 0

	)

785 
	#EXT2_FT_REG_FILE
 1

	)

786 
	#EXT2_FT_DIR
 2

	)

787 
	#EXT2_FT_CHRDEV
 3

	)

788 
	#EXT2_FT_BLKDEV
 4

	)

789 
	#EXT2_FT_FIFO
 5

	)

790 
	#EXT2_FT_SOCK
 6

	)

791 
	#EXT2_FT_SYMLINK
 7

	)

793 
	#EXT2_FT_MAX
 8

	)

800 
	#EXT2_DIR_PAD
 4

	)

801 
	#EXT2_DIR_ROUND
 (
EXT2_DIR_PAD
 - 1)

	)

802 
	#EXT2_DIR_REC_LEN
(
«me_Àn
Ë((“ame_ÀnË+ 8 + 
EXT2_DIR_ROUND
) & \

803 ~
EXT2_DIR_ROUND
)

	)

823 
	#EXT4_MMP_MAGIC
 0x004D4D50U

	)

824 
	#EXT4_MMP_SEQ_CLEAN
 0xFF4D4D50U

	)

825 
	#EXT4_MMP_SEQ_FSCK
 0xE24D4D50U

	)

826 
	#EXT4_MMP_SEQ_MAX
 0xE24D4D4FU

	)

828 
	smmp_°ru˘
 {

829 
__u32
 
	mmmp_magic
;

830 
__u32
 
	mmmp_£q
;

831 
__u64
 
	mmmp_time
;

832 
	mmmp_nodíame
[64];

833 
	mmmp_bdev«me
[32];

834 
__u16
 
	mmmp_check_öãrvÆ
;

835 
__u16
 
	mmmp_∑d1
;

836 
__u32
 
	mmmp_∑d2
[227];

842 
	#EXT4_MMP_UPDATE_INTERVAL
 5

	)

847 
	#EXT4_MMP_MAX_UPDATE_INTERVAL
 300

	)

852 
	#EXT4_MMP_MIN_CHECK_INTERVAL
 5

	)

	@/usr/include/ext2fs/ext2_io.h

12 #i‚de‡
_EXT2FS_EXT2_IO_H


13 
	#_EXT2FS_EXT2_IO_H


	)

18 #i‡
deföed
(
__GNUC__
Ë|| deföed(
HAS_LONG_LONG
)

19 
	text2_loff_t
;

21 
	text2_loff_t
;

25 
ext2_loff_t
 
ext2fs_Œ£ek
 (,Éxt2_loff_t, );

27 
°ru˘_io_m™agî
 *
	tio_m™agî
;

28 
°ru˘_io_ch™√l
 *
	tio_ch™√l
;

29 
°ru˘_io_°©s
 *
	tio_°©s
;

31 
	#CHANNEL_FLAGS_WRITETHROUGH
 0x01

	)

32 
	#CHANNEL_FLAGS_DISCARD_ZEROES
 0x02

	)

33 
	#CHANNEL_FLAGS_BLOCK_DEVICE
 0x04

	)

35 
	#io_ch™√l_disˇrd_zî€s_d©a
(
i
Ë(i->
Êags
 & 
CHANNEL_FLAGS_DISCARD_ZEROES
)

	)

37 
	s°ru˘_io_ch™√l
 {

38 
îrcode_t
 
	mmagic
;

39 
io_m™agî
 
	mm™agî
;

40 *
	m«me
;

41 
	mblock_size
;

42 
îrcode_t
 (*
ªad_îr‹
)(
io_ch™√l
 
	mch™√l
,

43 
	mblock
,

44 
	mcou¡
,

45 *
	md©a
,

46 
size_t
 
	msize
,

47 
	ma˘uÆ_byãs_ªad
,

48 
îrcode_t
 
	mîr‹
);

49 
îrcode_t
 (*
wrôe_îr‹
)(
io_ch™√l
 
	mch™√l
,

50 
	mblock
,

51 
	mcou¡
,

52 c⁄° *
	md©a
,

53 
size_t
 
	msize
,

54 
	ma˘uÆ_byãs_wrôãn
,

55 
îrcode_t
 
	mîr‹
);

56 
	mªfcou¡
;

57 
	mÊags
;

58 
	mª£rved
[14];

59 *
	m¥iv©e_d©a
;

60 *
	m≠p_d©a
;

63 
	s°ru˘_io_°©s
 {

64 
	mnum_fõlds
;

65 
	mª£rved
;

66 
	mbyãs_ªad
;

67 
	mbyãs_wrôãn
;

70 
	s°ru˘_io_m™agî
 {

71 
îrcode_t
 
	mmagic
;

72 c⁄° *
	m«me
;

73 
îrcode_t
 (*
›í
)(c⁄° *
	m«me
, 
	mÊags
, 
io_ch™√l
 *
	mch™√l
);

74 
îrcode_t
 (*
˛o£
)(
io_ch™√l
 
	mch™√l
);

75 
îrcode_t
 (*
£t_blksize
)(
io_ch™√l
 
	mch™√l
, 
	mblksize
);

76 
îrcode_t
 (*
ªad_blk
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

77 
	mcou¡
, *
	md©a
);

78 
îrcode_t
 (*
wrôe_blk
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

79 
	mcou¡
, c⁄° *
	md©a
);

80 
îrcode_t
 (*
Êush
)(
io_ch™√l
 
	mch™√l
);

81 
îrcode_t
 (*
wrôe_byã
)(
io_ch™√l
 
	mch™√l
, 
	moff£t
,

82 
	mcou¡
, c⁄° *
	md©a
);

83 
îrcode_t
 (*
£t_›ti⁄
)(
io_ch™√l
 
	mch™√l
, c⁄° *
	m›ti⁄
,

84 c⁄° *
	m¨g
);

85 
îrcode_t
 (*
gë_°©s
)(
io_ch™√l
 
	mch™√l
, 
io_°©s
 *
	mio_°©s
);

86 
îrcode_t
 (*
ªad_blk64
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

87 
	mcou¡
, *
	md©a
);

88 
îrcode_t
 (*
wrôe_blk64
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

89 
	mcou¡
, c⁄° *
	md©a
);

90 
îrcode_t
 (*
disˇrd
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

91 
	mcou¡
);

92 
	mª£rved
[16];

95 
	#IO_FLAG_RW
 0x0001

	)

96 
	#IO_FLAG_EXCLUSIVE
 0x0002

	)

97 
	#IO_FLAG_DIRECT_IO
 0x0004

	)

102 
	#io_ch™√l_˛o£
(
c
Ë((c)->
m™agî
->
	`˛o£
((c)))

	)

103 
	#io_ch™√l_£t_blksize
(
c
,
s
Ë((c)->
m™agî
->
	`£t_blksize
((c),s))

	)

104 
	#io_ch™√l_ªad_blk
(
c
,
b
,
n
,
d
Ë((c)->
m™agî
->
	`ªad_blk
((c),b,n,d))

	)

105 
	#io_ch™√l_wrôe_blk
(
c
,
b
,
n
,
d
Ë((c)->
m™agî
->
	`wrôe_blk
((c),b,n,d))

	)

106 
	#io_ch™√l_Êush
(
c
Ë((c)->
m™agî
->
	`Êush
((c)))

	)

107 
	#io_ch™√l_bumpcou¡
(
c
Ë((c)->
ªfcou¡
++)

	)

110 
îrcode_t
 
io_ch™√l_£t_›ti⁄s
(
io_ch™√l
 
ch™√l
,

111 c⁄° *
›ti⁄s
);

112 
îrcode_t
 
io_ch™√l_wrôe_byã
(
io_ch™√l
 
ch™√l
,

113 
off£t
,

114 
cou¡
, c⁄° *
d©a
);

115 
îrcode_t
 
io_ch™√l_ªad_blk64
(
io_ch™√l
 
ch™√l
,

116 
block
,

117 
cou¡
, *
d©a
);

118 
îrcode_t
 
io_ch™√l_wrôe_blk64
(
io_ch™√l
 
ch™√l
,

119 
block
,

120 
cou¡
, c⁄° *
d©a
);

121 
îrcode_t
 
io_ch™√l_disˇrd
(
io_ch™√l
 
ch™√l
,

122 
block
,

123 
cou¡
);

126 
io_m™agî
 
unix_io_m™agî
;

129 
io_m™agî
 
undo_io_m™agî
;

130 
îrcode_t
 
£t_undo_io_backög_m™agî
(
io_m™agî
 
m™agî
);

131 
îrcode_t
 
£t_undo_io_backup_fûe
(*
fûe_«me
);

134 
io_m™agî
 
ã°_io_m™agî
, 
ã°_io_backög_m™agî
;

135 (*
ã°_io_cb_ªad_blk
)

136 (
block
, 
cou¡
, 
îrcode_t
 
îr
);

137 (*
ã°_io_cb_wrôe_blk
)

138 (
block
, 
cou¡
, 
îrcode_t
 
îr
);

139 (*
ã°_io_cb_ªad_blk64
)

140 (
block
, 
cou¡
, 
îrcode_t
 
îr
);

141 (*
ã°_io_cb_wrôe_blk64
)

142 (
block
, 
cou¡
, 
îrcode_t
 
îr
);

143 (*
ã°_io_cb_£t_blksize
)

144 (
blksize
, 
îrcode_t
 
îr
);

	@/usr/include/ext2fs/ext2_types.h

6 #i‡(!
deföed
(
_LINUX_TYPES_H
Ë&& !deföed(
_BLKID_TYPES_H
) && \

7 !
	$deföed
(
_EXT2_TYPES_H
))

8 
	#_EXT2_TYPES_H


	)

10 
	#__S8_TYPEDEF
 
__sig√d__
 

	)

11 
	#__U8_TYPEDEF
 

	)

12 
	#__S16_TYPEDEF
 
__sig√d__
 

	)

13 
	#__U16_TYPEDEF
 

	)

14 
	#__S32_TYPEDEF
 
__sig√d__
 

	)

15 
	#__U32_TYPEDEF
 

	)

16 
	#__S64_TYPEDEF
 
__sig√d__
 

	)

17 
	#__U64_TYPEDEF
 

	)

19 #ifde‡
__U8_TYPEDEF


20 
__U8_TYPEDEF
 
	t__u8
;

22 
	t__u8
;

25 #ifde‡
__S8_TYPEDEF


26 
__S8_TYPEDEF
 
	t__s8
;

28 sig√d 
	t__s8
;

31 #ifde‡
__U16_TYPEDEF


32 
__U16_TYPEDEF
 
	t__u16
;

35 
	t__u16
;

38 
	t__u16
;

40 ?==
îr‹
: 
undeföed
 16 
bô
 
ty≥


45 #ifde‡
__S16_TYPEDEF


46 
__S16_TYPEDEF
 
	t__s16
;

49 
	t__s16
;

52 
	t__s16
;

54 ?==
îr‹
: 
undeföed
 16 
bô
 
ty≥


60 #ifde‡
__U32_TYPEDEF


61 
__U32_TYPEDEF
 
	t__u32
;

64 
	t__u32
;

67 
	t__u32
;

70 
	t__u32
;

72 ?=
îr‹
: 
undeföed
 32 
bô
 
ty≥


78 #ifde‡
__S32_TYPEDEF


79 
__S32_TYPEDEF
 
	t__s32
;

82 
	t__s32
;

85 
	t__s32
;

88 
	t__s32
;

90 ?=
îr‹
: 
undeföed
 32 
bô
 
ty≥


96 #ifde‡
__U64_TYPEDEF


97 
__U64_TYPEDEF
 
	t__u64
;

100 
	t__u64
;

103 
	t__u64
;

106 
	t__u64
;

112 #ifde‡
__S64_TYPEDEF


113 
__S64_TYPEDEF
 
	t__s64
;

116 
	t__s64
;

119 
	t__s64
;

122 #i‡
	`deföed
(
__GNUC__
)

123 
__sig√d__
 
	t__s64
;

125 sig√d 
	t__s64
;

132 #unde‡
__S8_TYPEDEF


133 #unde‡
__U8_TYPEDEF


134 #unde‡
__S16_TYPEDEF


135 #unde‡
__U16_TYPEDEF


136 #unde‡
__S32_TYPEDEF


137 #unde‡
__U32_TYPEDEF


138 #unde‡
__S64_TYPEDEF


139 #unde‡
__U64_TYPEDEF


144 
	#HAVE_SYS_TYPES_H
 1

	)

145 #unde‡
WORDS_BIGENDIAN


	@/usr/include/ext2fs/ext2fs.h

12 #i‚de‡
_EXT2FS_EXT2FS_H


13 
	#_EXT2FS_EXT2FS_H


	)

15 #ifde‡
__GNUC__


16 
	#EXT2FS_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

18 
	#EXT2FS_ATTR
(
x
)

	)

21 #ifde‡
__˝lu•lus


28 #i‡(!
deföed
(
__GNUC__
Ë&& !deföed(
__WATCOMC__
))

29 
	#NO_INLINE_FUNCS


	)

32 #i‚de‡
_XOPEN_SOURCE


33 
	#_XOPEN_SOURCE
 600

	)

43 
	#SUPERBLOCK_OFFSET
 1024

	)

44 
	#SUPERBLOCK_SIZE
 1024

	)

50 
	#EXT2_LIB_CURRENT_REV
 
EXT2_DYNAMIC_REV


	)

52 #ifde‡
HAVE_SYS_TYPES_H


53 
	~<sys/ty≥s.h
>

56 
	~<°dio.h
>

57 
	~<°dlib.h
>

58 
	~<°rög.h
>

59 
	~<î∫o.h
>

60 
	~<sys/ty≥s.h
>

61 
	~<sys/°©.h
>

62 
	~<f˙é.h
>

64 #i‚de‡
__USE_XOPEN2K


68 
posix_memÆign
(**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
);

71 #i‡
EXT2_FLAT_INCLUDES


72 
	~"e2_ty≥s.h
"

73 
	~"ext2_fs.h
"

74 
	~"ext3_exã¡s.h
"

76 
	~<ext2fs/ext2_ty≥s.h
>

77 
	~<ext2fs/ext2_fs.h
>

78 
	~<ext2fs/ext3_exã¡s.h
>

81 
__u32
 
	text2_öo_t
;

82 
__u32
 
	tblk_t
;

83 
__u64
 
	tblk64_t
;

84 
__u32
 
	tdgΩ_t
;

85 
__u32
 
	text2_off_t
;

86 
__u64
 
	text2_off64_t
;

87 
__s64
 
	te2_blk˙t_t
;

88 
__u32
 
	text2_dúhash_t
;

90 #i‡
EXT2_FLAT_INCLUDES


91 
	~"com_îr.h
"

92 
	~"ext2_io.h
"

93 
	~"ext2_îr.h
"

94 
	~"ext2_ext_©å.h
"

96 
	~<ë/com_îr.h
>

97 
	~<ext2fs/ext2_io.h
>

98 
	~<ext2fs/ext2_îr.h
>

99 
	~<ext2fs/ext2_ext_©å.h
>

105 #ifde‡
_MSC_VER


106 
	#EXT2_QSORT_TYPE
 
__cde˛


	)

108 
	#EXT2_QSORT_TYPE
 

	)

111 
°ru˘_ext2_fûsys
 *
	text2_fûsys
;

113 
	#EXT2FS_MARK_ERROR
 0

	)

114 
	#EXT2FS_UNMARK_ERROR
 1

	)

115 
	#EXT2FS_TEST_ERROR
 2

	)

117 
ext2fs_°ru˘_gíîic_bôm≠
 *
	text2fs_gíîic_bôm≠
;

118 
ext2fs_°ru˘_gíîic_bôm≠
 *
	text2fs_öode_bôm≠
;

119 
ext2fs_°ru˘_gíîic_bôm≠
 *
	text2fs_block_bôm≠
;

121 
	#EXT2_FIRST_INODE
(
s
Ë
	`EXT2_FIRST_INO
(s)

	)

128 
ext2_°ru˘_u32_li°
 *
	text2_badblocks_li°
;

129 
ext2_°ru˘_u32_ôî©e
 *
	text2_badblocks_ôî©e
;

131 
ext2_°ru˘_u32_li°
 *
	text2_u32_li°
;

132 
ext2_°ru˘_u32_ôî©e
 *
	text2_u32_ôî©e
;

135 
ext2_°ru˘_u32_li°
 *
	tbadblocks_li°
;

136 
ext2_°ru˘_u32_ôî©e
 *
	tbadblocks_ôî©e
;

138 
	#BADBLOCKS_FLAG_DIRTY
 1

	)

143 
	sext2_db_íåy2
 {

144 
ext2_öo_t
 
	göo
;

145 
blk64_t
 
	gblk
;

146 
e2_blk˙t_t
 
	gblock˙t
;

150 
	sext2_db_íåy
 {

151 
ext2_öo_t
 
	göo
;

152 
blk_t
 
	gblk
;

153 
	gblock˙t
;

156 
ext2_°ru˘_dbli°
 *
	text2_dbli°
;

158 
	#DBLIST_ABORT
 1

	)

164 
	#EXT2_FILE_WRITE
 0x0001

	)

165 
	#EXT2_FILE_CREATE
 0x0002

	)

167 
	#EXT2_FILE_MASK
 0x00FF

	)

169 
	#EXT2_FILE_BUF_DIRTY
 0x4000

	)

170 
	#EXT2_FILE_BUF_VALID
 0x2000

	)

172 
ext2_fûe
 *
	text2_fûe_t
;

174 
	#EXT2_SEEK_SET
 0

	)

175 
	#EXT2_SEEK_CUR
 1

	)

176 
	#EXT2_SEEK_END
 2

	)

181 
	#EXT2_FLAG_RW
 0x01

	)

182 
	#EXT2_FLAG_CHANGED
 0x02

	)

183 
	#EXT2_FLAG_DIRTY
 0x04

	)

184 
	#EXT2_FLAG_VALID
 0x08

	)

185 
	#EXT2_FLAG_IB_DIRTY
 0x10

	)

186 
	#EXT2_FLAG_BB_DIRTY
 0x20

	)

187 
	#EXT2_FLAG_SWAP_BYTES
 0x40

	)

188 
	#EXT2_FLAG_SWAP_BYTES_READ
 0x80

	)

189 
	#EXT2_FLAG_SWAP_BYTES_WRITE
 0x100

	)

190 
	#EXT2_FLAG_MASTER_SB_ONLY
 0x200

	)

191 
	#EXT2_FLAG_FORCE
 0x400

	)

192 
	#EXT2_FLAG_SUPER_ONLY
 0x800

	)

193 
	#EXT2_FLAG_JOURNAL_DEV_OK
 0x1000

	)

194 
	#EXT2_FLAG_IMAGE_FILE
 0x2000

	)

195 
	#EXT2_FLAG_EXCLUSIVE
 0x4000

	)

196 
	#EXT2_FLAG_SOFTSUPP_FEATURES
 0x8000

	)

197 
	#EXT2_FLAG_NOFREE_ON_ERROR
 0x10000

	)

198 
	#EXT2_FLAG_64BITS
 0x20000

	)

199 
	#EXT2_FLAG_PRINT_PROGRESS
 0x40000

	)

200 
	#EXT2_FLAG_DIRECT_IO
 0x80000

	)

201 
	#EXT2_FLAG_SKIP_MMP
 0x100000

	)

207 
	#EXT2_NEW_INODE_FL
 0x80000000

	)

212 
	#EXT2_MKJOURNAL_V1_SUPER
 0x0000001

	)

213 
	#EXT2_MKJOURNAL_LAZYINIT
 0x0000002

	)

215 
	g›aque_ext2_group_desc
;

217 
	s°ru˘_ext2_fûsys
 {

218 
îrcode_t
 
	gmagic
;

219 
io_ch™√l
 
	gio
;

220 
	gÊags
;

221 * 
	gdevi˚_«me
;

222 
ext2_su≥r_block
 * 
	gsu≥r
;

223 
	gblocksize
;

224 
	g‰agsize
;

225 
dgΩ_t
 
	ggroup_desc_cou¡
;

226 
	gdesc_blocks
;

227 
›aque_ext2_group_desc
 * 
	ggroup_desc
;

228 
	göode_blocks_≥r_group
;

229 
ext2fs_öode_bôm≠
 
	göode_m≠
;

230 
ext2fs_block_bôm≠
 
	gblock_m≠
;

232 
îrcode_t
 (*
gë_blocks
)(
ext2_fûsys
 
	gfs
, 
ext2_öo_t
 
	göo
, 
blk_t
 *
	gblocks
);

233 
îrcode_t
 (*
check_dúe˘‹y
)(
ext2_fûsys
 
	gfs
, 
ext2_öo_t
 
	göo
);

234 
îrcode_t
 (*
wrôe_bôm≠s
)(
ext2_fûsys
 
	gfs
);

235 
îrcode_t
 (*
ªad_öode
)(
ext2_fûsys
 
	gfs
, 
ext2_öo_t
 
	göo
,

236 
ext2_öode
 *
	göode
);

237 
îrcode_t
 (*
wrôe_öode
)(
ext2_fûsys
 
	gfs
, 
ext2_öo_t
 
	göo
,

238 
ext2_öode
 *
	göode
);

239 
ext2_badblocks_li°
 
	gbadblocks
;

240 
ext2_dbli°
 
	gdbli°
;

241 
__u32
 
	g°ride
;

242 
ext2_su≥r_block
 * 
	g‹ig_su≥r
;

243 
ext2_image_hdr
 * 
	gimage_hódî
;

244 
__u32
 
	gumask
;

245 
time_t
 
	gnow
;

246 
	g˛u°î_øtio_bôs
;

250 
__u32
 
	gª£rved
[6];

255 * 
	g¥iv_d©a
;

260 
ext2_öode_ˇche
 *
	giˇche
;

261 
io_ch™√l
 
	gimage_io
;

266 
îrcode_t
 (*
gë_Æloc_block
)(
ext2_fûsys
 
	gfs
, 
blk64_t
 
	ggﬂl
,

267 
blk64_t
 *
	gªt
);

268 (*
	gblock_Æloc_°©s
)(
ext2_fûsys
 
	gfs
, 
blk64_t
 
	gblk
, 
	göu£
);

273 *
	gmmp_buf
;

274 *
	gmmp_cmp
;

275 
	gmmp_fd
;

280 
	gmmp_œ°_wrôãn
;

283 #i‡
EXT2_FLAT_INCLUDES


284 
	~"e2_bô›s.h
"

286 
	~<ext2fs/bô›s.h
>

292 
	#BLOCK_CHANGED
 1

	)

293 
	#BLOCK_ABORT
 2

	)

294 
	#BLOCK_ERROR
 4

	)

320 
	#BLOCK_FLAG_APPEND
 1

	)

321 
	#BLOCK_FLAG_HOLE
 1

	)

322 
	#BLOCK_FLAG_DEPTH_TRAVERSE
 2

	)

323 
	#BLOCK_FLAG_DATA_ONLY
 4

	)

324 
	#BLOCK_FLAG_READ_ONLY
 8

	)

326 
	#BLOCK_FLAG_NO_LARGE
 0x1000

	)

331 
	#BLOCK_COUNT_IND
 (-1)

	)

332 
	#BLOCK_COUNT_DIND
 (-2)

	)

333 
	#BLOCK_COUNT_TIND
 (-3)

	)

334 
	#BLOCK_COUNT_TRANSLATOR
 (-4)

	)

340 
	#EXT2_BMOVE_GET_DBLIST
 0x0001

	)

341 
	#EXT2_BMOVE_DEBUG
 0x0002

	)

348 
	#EXT2_EXTENT_FLAGS_LEAF
 0x0001

	)

349 
	#EXT2_EXTENT_FLAGS_UNINIT
 0x0002

	)

350 
	#EXT2_EXTENT_FLAGS_SECOND_VISIT
 0x0004

	)

352 
	sext2fs_exã¡
 {

353 
blk64_t
 
	ge_pblk
;

354 
blk64_t
 
	ge_lblk
;

355 
__u32
 
	ge_Àn
;

356 
__u32
 
	ge_Êags
;

359 
ext2_exã¡_h™dÀ
 *
	text2_exã¡_h™dÀ_t
;

360 
ext2_exã¡_∑th
 *
	text2_exã¡_∑th_t
;

365 
	#EXT2_EXTENT_CURRENT
 0x0000

	)

366 
	#EXT2_EXTENT_MOVE_MASK
 0x000F

	)

367 
	#EXT2_EXTENT_ROOT
 0x0001

	)

368 
	#EXT2_EXTENT_LAST_LEAF
 0x0002

	)

369 
	#EXT2_EXTENT_FIRST_SIB
 0x0003

	)

370 
	#EXT2_EXTENT_LAST_SIB
 0x0004

	)

371 
	#EXT2_EXTENT_NEXT_SIB
 0x0005

	)

372 
	#EXT2_EXTENT_PREV_SIB
 0x0006

	)

373 
	#EXT2_EXTENT_NEXT_LEAF
 0x0007

	)

374 
	#EXT2_EXTENT_PREV_LEAF
 0x0008

	)

375 
	#EXT2_EXTENT_NEXT
 0x0009

	)

376 
	#EXT2_EXTENT_PREV
 0x000A

	)

377 
	#EXT2_EXTENT_UP
 0x000B

	)

378 
	#EXT2_EXTENT_DOWN
 0x000C

	)

379 
	#EXT2_EXTENT_DOWN_AND_LAST
 0x000D

	)

384 
	#EXT2_EXTENT_INSERT_AFTER
 0x0001

	)

385 
	#EXT2_EXTENT_INSERT_NOSPLIT
 0x0002

	)

390 
	#EXT2_EXTENT_DELETE_KEEP_EMPTY
 0x001

	)

395 
	#EXT2_EXTENT_SET_BMAP_UNINIT
 0x0001

	)

400 
	sext2_exã¡_öfo
 {

401 
	gcuº_íåy
;

402 
	gcuº_Àvñ
;

403 
	gnum_íåõs
;

404 
	gmax_íåõs
;

405 
	gmax_dïth
;

406 
	gbyãs_avaû
;

407 
blk64_t
 
	gmax_lblk
;

408 
blk64_t
 
	gmax_pblk
;

409 
__u32
 
	gmax_Àn
;

410 
__u32
 
	gmax_unöô_Àn
;

416 
	#EXT2_DIRBLOCK_V2_STRUCT
 0x0001

	)

421 
	#DIRENT_CHANGED
 1

	)

422 
	#DIRENT_ABORT
 2

	)

423 
	#DIRENT_ERROR
 3

	)

429 
	#DIRENT_FLAG_INCLUDE_EMPTY
 1

	)

430 
	#DIRENT_FLAG_INCLUDE_REMOVED
 2

	)

432 
	#DIRENT_DOT_FILE
 1

	)

433 
	#DIRENT_DOT_DOT_FILE
 2

	)

434 
	#DIRENT_OTHER_FILE
 3

	)

435 
	#DIRENT_DELETED_FILE
 4

	)

440 
ext2_°ru˘_öode_sˇn
 *
	text2_öode_sˇn
;

445 
	#EXT2_SF_CHK_BADBLOCKS
 0x0001

	)

446 
	#EXT2_SF_BAD_INODE_BLK
 0x0002

	)

447 
	#EXT2_SF_BAD_EXTRA_BYTES
 0x0004

	)

448 
	#EXT2_SF_SKIP_MISSING_ITABLE
 0x0008

	)

449 
	#EXT2_SF_DO_LAZY
 0x0010

	)

454 
	#EXT2_MF_MOUNTED
 1

	)

455 
	#EXT2_MF_ISROOT
 2

	)

456 
	#EXT2_MF_READONLY
 4

	)

457 
	#EXT2_MF_SWAP
 8

	)

458 
	#EXT2_MF_BUSY
 16

	)

465 
	#LINUX_S_IFMT
 00170000

	)

466 
	#LINUX_S_IFSOCK
 0140000

	)

467 
	#LINUX_S_IFLNK
 0120000

	)

468 
	#LINUX_S_IFREG
 0100000

	)

469 
	#LINUX_S_IFBLK
 0060000

	)

470 
	#LINUX_S_IFDIR
 0040000

	)

471 
	#LINUX_S_IFCHR
 0020000

	)

472 
	#LINUX_S_IFIFO
 0010000

	)

473 
	#LINUX_S_ISUID
 0004000

	)

474 
	#LINUX_S_ISGID
 0002000

	)

475 
	#LINUX_S_ISVTX
 0001000

	)

477 
	#LINUX_S_IRWXU
 00700

	)

478 
	#LINUX_S_IRUSR
 00400

	)

479 
	#LINUX_S_IWUSR
 00200

	)

480 
	#LINUX_S_IXUSR
 00100

	)

482 
	#LINUX_S_IRWXG
 00070

	)

483 
	#LINUX_S_IRGRP
 00040

	)

484 
	#LINUX_S_IWGRP
 00020

	)

485 
	#LINUX_S_IXGRP
 00010

	)

487 
	#LINUX_S_IRWXO
 00007

	)

488 
	#LINUX_S_IROTH
 00004

	)

489 
	#LINUX_S_IWOTH
 00002

	)

490 
	#LINUX_S_IXOTH
 00001

	)

492 
	#LINUX_S_ISLNK
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFLNK
)

	)

493 
	#LINUX_S_ISREG
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFREG
)

	)

494 
	#LINUX_S_ISDIR
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFDIR
)

	)

495 
	#LINUX_S_ISCHR
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFCHR
)

	)

496 
	#LINUX_S_ISBLK
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFBLK
)

	)

497 
	#LINUX_S_ISFIFO
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFIFO
)

	)

498 
	#LINUX_S_ISSOCK
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFSOCK
)

	)

503 
	#EXT2_I_SIZE
(
i
Ë((i)->
i_size
 | ((
__u64
Ë(i)->
i_size_high
 << 32))

	)

508 
	#EXT2_ICOUNT_OPT_INCREMENT
 0x01

	)

510 
ext2_icou¡
 *
	text2_icou¡_t
;

515 
	#BMAP_ALLOC
 0x0001

	)

516 
	#BMAP_SET
 0x0002

	)

521 
	#BMAP_RET_UNINIT
 0x0001

	)

526 
	#IMAGER_FLAG_INODEMAP
 1

	)

527 
	#IMAGER_FLAG_SPARSEWRITE
 2

	)

533 
	#EXT2_CHECK_MAGIC
(, 
code
) \

534 i‡(()->
magic
 !(
code
)Ë (code)

	)

540 
	#EXT2FS_COMPRESSED_BLKADDR
 ((
blk_t
Ë-1)

	)

541 
	#HOLE_BLKADDR
(
_b
Ë((_bË=0 || (_bË=
EXT2FS_COMPRESSED_BLKADDR
)

	)

546 
	#EXT2_LIB_FEATURE_COMPAT_SUPP
 (
EXT2_FEATURE_COMPAT_DIR_PREALLOC
|\

547 
EXT2_FEATURE_COMPAT_IMAGIC_INODES
|\

548 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
|\

549 
EXT2_FEATURE_COMPAT_RESIZE_INODE
|\

550 
EXT2_FEATURE_COMPAT_DIR_INDEX
|\

551 
EXT2_FEATURE_COMPAT_EXT_ATTR
)

	)

554 #ifde‡
ENABLE_COMPRESSION


555 #i‚de‡
I_KNOW_THAT_COMPRESSION_IS_EXPERIMENTAL


561 
	#EXT2_LIB_FEATURE_INCOMPAT_SUPP
 (
EXT2_FEATURE_INCOMPAT_FILETYPE
|\

562 
EXT2_FEATURE_INCOMPAT_COMPRESSION
|\

563 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
|\

564 
EXT2_FEATURE_INCOMPAT_META_BG
|\

565 
EXT3_FEATURE_INCOMPAT_RECOVER
|\

566 
EXT3_FEATURE_INCOMPAT_EXTENTS
|\

567 
EXT4_FEATURE_INCOMPAT_FLEX_BG
|\

568 
EXT4_FEATURE_INCOMPAT_MMP
|\

569 
EXT4_FEATURE_INCOMPAT_64BIT
)

	)

571 
	#EXT2_LIB_FEATURE_INCOMPAT_SUPP
 (
EXT2_FEATURE_INCOMPAT_FILETYPE
|\

572 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
|\

573 
EXT2_FEATURE_INCOMPAT_META_BG
|\

574 
EXT3_FEATURE_INCOMPAT_RECOVER
|\

575 
EXT3_FEATURE_INCOMPAT_EXTENTS
|\

576 
EXT4_FEATURE_INCOMPAT_FLEX_BG
|\

577 
EXT4_FEATURE_INCOMPAT_MMP
|\

578 
EXT4_FEATURE_INCOMPAT_64BIT
)

	)

580 #ifde‡
CONFIG_QUOTA


581 
	#EXT2_LIB_FEATURE_RO_COMPAT_SUPP
 (
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
|\

582 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
|\

583 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
|\

584 
EXT4_FEATURE_RO_COMPAT_DIR_NLINK
|\

585 
EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE
|\

586 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
|\

587 
EXT4_FEATURE_RO_COMPAT_BIGALLOC
|\

588 
EXT4_FEATURE_RO_COMPAT_QUOTA
)

	)

590 
	#EXT2_LIB_FEATURE_RO_COMPAT_SUPP
 (
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
|\

591 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
|\

592 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
|\

593 
EXT4_FEATURE_RO_COMPAT_DIR_NLINK
|\

594 
EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE
|\

595 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
|\

596 
EXT4_FEATURE_RO_COMPAT_BIGALLOC
)

	)

603 
	#EXT2_LIB_SOFTSUPP_INCOMPAT
 (0)

	)

604 
	#EXT2_LIB_SOFTSUPP_RO_COMPAT
 (
EXT4_FEATURE_RO_COMPAT_BIGALLOC
)

	)

608 
	#EXT2FS_CLUSTER_RATIO
(
fs
Ë(1 << (fs)->
˛u°î_øtio_bôs
)

	)

609 
	#EXT2FS_CLUSTER_MASK
(
fs
Ë(
	`EXT2FS_CLUSTER_RATIO
(fsË- 1)

	)

610 
	#EXT2FS_B2C
(
fs
, 
blk
Ë((blkË>> (fs)->
˛u°î_øtio_bôs
)

	)

612 
	#EXT2FS_C2B
(
fs
, 
˛u°î
Ë((˛u°îË<< (fs)->
˛u°î_øtio_bôs
)

	)

614 
	#EXT2FS_NUM_B2C
(
fs
, 
blks
Ë(((blksË+ 
	`EXT2FS_CLUSTER_MASK
(fs)) >> \

615 (
fs
)->
˛u°î_øtio_bôs
)

	)

617 #i‡
deföed
(
HAVE_FSTAT64
Ë&& !deföed(
__OSX_AVAILABLE_BUT_DEPRECATED
)

618 
°©64
 
	text2fs_°ru˘_°©
;

620 
°©
 
	text2fs_°ru˘_°©
;

627 
	#EXT2_FLAG_FLUSH_NO_SYNC
 1

	)

634 
îrcode_t
 
ext2fs_√w_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, 
mode
,

635 
ext2fs_öode_bôm≠
 
m≠
, 
ext2_öo_t
 *
ªt
);

636 
îrcode_t
 
ext2fs_√w_block
(
ext2_fûsys
 
fs
, 
blk_t
 
gﬂl
,

637 
ext2fs_block_bôm≠
 
m≠
, 
blk_t
 *
ªt
);

638 
îrcode_t
 
ext2fs_√w_block2
(
ext2_fûsys
 
fs
, 
blk64_t
 
gﬂl
,

639 
ext2fs_block_bôm≠
 
m≠
, 
blk64_t
 *
ªt
);

640 
îrcode_t
 
ext2fs_gë_‰ì_blocks
(
ext2_fûsys
 
fs
, 
blk_t
 
°¨t
,

641 
blk_t
 
föish
, 
num
,

642 
ext2fs_block_bôm≠
 
m≠
,

643 
blk_t
 *
ªt
);

644 
îrcode_t
 
ext2fs_gë_‰ì_blocks2
(
ext2_fûsys
 
fs
, 
blk64_t
 
°¨t
,

645 
blk64_t
 
föish
, 
num
,

646 
ext2fs_block_bôm≠
 
m≠
,

647 
blk64_t
 *
ªt
);

648 
îrcode_t
 
ext2fs_Æloc_block
(
ext2_fûsys
 
fs
, 
blk_t
 
gﬂl
,

649 *
block_buf
, 
blk_t
 *
ªt
);

650 
îrcode_t
 
ext2fs_Æloc_block2
(
ext2_fûsys
 
fs
, 
blk64_t
 
gﬂl
,

651 *
block_buf
, 
blk64_t
 *
ªt
);

652 
ext2fs_£t_Æloc_block_ˇŒback
(
ext2_fûsys
 
fs
,

653 
îrcode_t
 (*
func
)(
ext2_fûsys
 
fs
,

654 
blk64_t
 
gﬂl
,

655 
blk64_t
 *
ªt
),

656 
îrcode_t
 (**
ﬁd
)(
ext2_fûsys
 
fs
,

657 
blk64_t
 
gﬂl
,

658 
blk64_t
 *
ªt
));

661 
ext2fs_ª£rve_su≥r_™d_bgd
(
ext2_fûsys
 
fs
,

662 
dgΩ_t
 
group
,

663 
ext2fs_block_bôm≠
 
bm≠
);

664 
ext2fs_£t_block_Æloc_°©s_ˇŒback
(
ext2_fûsys
 
fs
,

665 (*
func
)(
ext2_fûsys
 
fs
,

666 
blk64_t
 
blk
,

667 
öu£
),

668 (**
ﬁd
)(
ext2_fûsys
 
fs
,

669 
blk64_t
 
blk
,

670 
öu£
));

673 
ext2fs_öode_Æloc_°©s
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
öu£
);

674 
ext2fs_öode_Æloc_°©s2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

675 
öu£
, 
isdú
);

676 
ext2fs_block_Æloc_°©s
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, 
öu£
);

677 
ext2fs_block_Æloc_°©s2
(
ext2_fûsys
 
fs
, 
blk64_t
 
blk
, 
öu£
);

680 
îrcode_t
 
ext2fs_Æloˇã_èbÀs
(
ext2_fûsys
 
fs
);

681 
îrcode_t
 
ext2fs_Æloˇã_group_èbÀ
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
,

682 
ext2fs_block_bôm≠
 
bm≠
);

685 
îrcode_t
 
ext2fs_u32_li°_¸óã
(
ext2_u32_li°
 *
ªt
, 
size
);

686 
îrcode_t
 
ext2fs_u32_li°_add
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

687 
ext2fs_u32_li°_föd
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

688 
ext2fs_u32_li°_ã°
(
ext2_u32_li°
 
bb
, 
blk_t
 
blk
);

689 
îrcode_t
 
ext2fs_u32_li°_ôî©e_begö
(
ext2_u32_li°
 
bb
,

690 
ext2_u32_ôî©e
 *
ªt
);

691 
ext2fs_u32_li°_ôî©e
(
ext2_u32_ôî©e
 
ôî
, 
blk_t
 *
blk
);

692 
ext2fs_u32_li°_ôî©e_íd
(
ext2_u32_ôî©e
 
ôî
);

693 
îrcode_t
 
ext2fs_u32_c›y
(
ext2_u32_li°
 
§c
,Éxt2_u32_li° *
de°
);

694 
ext2fs_u32_li°_equÆ
(
ext2_u32_li°
 
bb1
,Éxt2_u32_li° 
bb2
);

696 
îrcode_t
 
ext2fs_badblocks_li°_¸óã
(
ext2_badblocks_li°
 *
ªt
,

697 
size
);

698 
îrcode_t
 
ext2fs_badblocks_li°_add
(
ext2_badblocks_li°
 
bb
,

699 
blk_t
 
blk
);

700 
ext2fs_badblocks_li°_ã°
(
ext2_badblocks_li°
 
bb
,

701 
blk_t
 
blk
);

702 
ext2fs_u32_li°_dñ
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

703 
ext2fs_badblocks_li°_dñ
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

704 
îrcode_t


705 
ext2fs_badblocks_li°_ôî©e_begö
(
ext2_badblocks_li°
 
bb
,

706 
ext2_badblocks_ôî©e
 *
ªt
);

707 
ext2fs_badblocks_li°_ôî©e
(
ext2_badblocks_ôî©e
 
ôî
,

708 
blk_t
 *
blk
);

709 
ext2fs_badblocks_li°_ôî©e_íd
(
ext2_badblocks_ôî©e
 
ôî
);

710 
îrcode_t
 
ext2fs_badblocks_c›y
(
ext2_badblocks_li°
 
§c
,

711 
ext2_badblocks_li°
 *
de°
);

712 
ext2fs_badblocks_equÆ
(
ext2_badblocks_li°
 
bb1
,

713 
ext2_badblocks_li°
 
bb2
);

714 
ext2fs_u32_li°_cou¡
(
ext2_u32_li°
 
bb
);

717 
îrcode_t
 
badblocks_li°_¸óã
(
badblocks_li°
 *
ªt
, 
size
);

718 
îrcode_t
 
badblocks_li°_add
(
badblocks_li°
 
bb
, 
blk_t
 
blk
);

719 
badblocks_li°_ã°
(
badblocks_li°
 
bb
, 
blk_t
 
blk
);

720 
îrcode_t
 
badblocks_li°_ôî©e_begö
(
badblocks_li°
 
bb
,

721 
badblocks_ôî©e
 *
ªt
);

722 
badblocks_li°_ôî©e
(
badblocks_ôî©e
 
ôî
, 
blk_t
 *
blk
);

723 
badblocks_li°_ôî©e_íd
(
badblocks_ôî©e
 
ôî
);

724 
badblocks_li°_‰ì
(
badblocks_li°
 
bb
);

727 
îrcode_t
 
ext2fs_upd©e_bb_öode
(
ext2_fûsys
 
fs
,

728 
ext2_badblocks_li°
 
bb_li°
);

731 
ext2fs_‰ì_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
);

732 
ext2fs_‰ì_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
);

733 
îrcode_t
 
ext2fs_c›y_bôm≠
(
ext2fs_gíîic_bôm≠
 
§c
,

734 
ext2fs_gíîic_bôm≠
 *
de°
);

735 
îrcode_t
 
ext2fs_wrôe_öode_bôm≠
(
ext2_fûsys
 
fs
);

736 
îrcode_t
 
ext2fs_wrôe_block_bôm≠
 (
ext2_fûsys
 
fs
);

737 
îrcode_t
 
ext2fs_ªad_öode_bôm≠
 (
ext2_fûsys
 
fs
);

738 
îrcode_t
 
ext2fs_ªad_block_bôm≠
(
ext2_fûsys
 
fs
);

739 
îrcode_t
 
ext2fs_Æloˇã_block_bôm≠
(
ext2_fûsys
 
fs
,

740 c⁄° *
des¸
,

741 
ext2fs_block_bôm≠
 *
ªt
);

742 
îrcode_t
 
ext2fs_Æloˇã_sub˛u°î_bôm≠
(
ext2_fûsys
 
fs
,

743 c⁄° *
des¸
,

744 
ext2fs_block_bôm≠
 *
ªt
);

745 
ext2fs_gë_bôm≠_gønuœrôy
(
ext2fs_block_bôm≠
 
bôm≠
);

746 
îrcode_t
 
ext2fs_Æloˇã_öode_bôm≠
(
ext2_fûsys
 
fs
,

747 c⁄° *
des¸
,

748 
ext2fs_öode_bôm≠
 *
ªt
);

749 
îrcode_t
 
ext2fs_fudge_öode_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
,

750 
ext2_öo_t
 
íd
,Éxt2_öo_à*
€nd
);

751 
îrcode_t
 
ext2fs_fudge_block_bôm≠_íd
(
ext2fs_block_bôm≠
 
bôm≠
,

752 
blk_t
 
íd
, blk_à*
€nd
);

753 
îrcode_t
 
ext2fs_fudge_block_bôm≠_íd2
(
ext2fs_block_bôm≠
 
bôm≠
,

754 
blk64_t
 
íd
, blk64_à*
€nd
);

755 
ext2fs_˛ór_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
);

756 
ext2fs_˛ór_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
);

757 
îrcode_t
 
ext2fs_ªad_bôm≠s
(
ext2_fûsys
 
fs
);

758 
îrcode_t
 
ext2fs_wrôe_bôm≠s
(
ext2_fûsys
 
fs
);

759 
îrcode_t
 
ext2fs_ªsize_öode_bôm≠
(
__u32
 
√w_íd
, __u32 
√w_ªÆ_íd
,

760 
ext2fs_öode_bôm≠
 
bm≠
);

761 
îrcode_t
 
ext2fs_ªsize_öode_bôm≠2
(
__u64
 
√w_íd
,

762 
__u64
 
√w_ªÆ_íd
,

763 
ext2fs_öode_bôm≠
 
bm≠
);

764 
îrcode_t
 
ext2fs_ªsize_block_bôm≠
(
__u32
 
√w_íd
, __u32 
√w_ªÆ_íd
,

765 
ext2fs_block_bôm≠
 
bm≠
);

766 
îrcode_t
 
ext2fs_ªsize_block_bôm≠2
(
__u64
 
√w_íd
,

767 
__u64
 
√w_ªÆ_íd
,

768 
ext2fs_block_bôm≠
 
bm≠
);

769 
îrcode_t
 
ext2fs_com∑ª_block_bôm≠
(
ext2fs_block_bôm≠
 
bm1
,

770 
ext2fs_block_bôm≠
 
bm2
);

771 
îrcode_t
 
ext2fs_com∑ª_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bm1
,

772 
ext2fs_öode_bôm≠
 
bm2
);

773 
îrcode_t
 
ext2fs_£t_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bm≠
,

774 
ext2_öo_t
 
°¨t
, 
num
,

775 *
ö
);

776 
îrcode_t
 
ext2fs_£t_öode_bôm≠_ønge2
(
ext2fs_öode_bôm≠
 
bm≠
,

777 
__u64
 
°¨t
, 
size_t
 
num
,

778 *
ö
);

779 
îrcode_t
 
ext2fs_gë_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bm≠
,

780 
ext2_öo_t
 
°¨t
, 
num
,

781 *
out
);

782 
îrcode_t
 
ext2fs_gë_öode_bôm≠_ønge2
(
ext2fs_öode_bôm≠
 
bm≠
,

783 
__u64
 
°¨t
, 
size_t
 
num
,

784 *
out
);

785 
îrcode_t
 
ext2fs_£t_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bm≠
,

786 
blk_t
 
°¨t
, 
num
,

787 *
ö
);

788 
îrcode_t
 
ext2fs_£t_block_bôm≠_ønge2
(
ext2fs_block_bôm≠
 
bm≠
,

789 
blk64_t
 
°¨t
, 
size_t
 
num
,

790 *
ö
);

791 
îrcode_t
 
ext2fs_gë_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bm≠
,

792 
blk_t
 
°¨t
, 
num
,

793 *
out
);

794 
îrcode_t
 
ext2fs_gë_block_bôm≠_ønge2
(
ext2fs_block_bôm≠
 
bm≠
,

795 
blk64_t
 
°¨t
, 
size_t
 
num
,

796 *
out
);

799 
dgΩ_t
 
ext2fs_group_of_blk2
(
ext2_fûsys
 
fs
, 
blk64_t
);

800 
blk64_t
 
ext2fs_group_fú°_block2
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

801 
blk64_t
 
ext2fs_group_œ°_block2
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

802 
ext2fs_group_blocks_cou¡
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

803 
blk64_t
 
ext2fs_öode_d©a_blocks2
(
ext2_fûsys
 
fs
,

804 
ext2_öode
 *
öode
);

805 
blk64_t
 
ext2fs_öode_i_blocks
(
ext2_fûsys
 
fs
,

806 
ext2_öode
 *
öode
);

807 
blk64_t
 
ext2fs_blocks_cou¡
(
ext2_su≥r_block
 *
su≥r
);

808 
ext2fs_blocks_cou¡_£t
(
ext2_su≥r_block
 *
su≥r
,

809 
blk64_t
 
blk
);

810 
ext2fs_blocks_cou¡_add
(
ext2_su≥r_block
 *
su≥r
,

811 
blk64_t
 
blk
);

812 
blk64_t
 
ext2fs_r_blocks_cou¡
(
ext2_su≥r_block
 *
su≥r
);

813 
ext2fs_r_blocks_cou¡_£t
(
ext2_su≥r_block
 *
su≥r
,

814 
blk64_t
 
blk
);

815 
ext2fs_r_blocks_cou¡_add
(
ext2_su≥r_block
 *
su≥r
,

816 
blk64_t
 
blk
);

817 
blk64_t
 
ext2fs_‰ì_blocks_cou¡
(
ext2_su≥r_block
 *
su≥r
);

818 
ext2fs_‰ì_blocks_cou¡_£t
(
ext2_su≥r_block
 *
su≥r
,

819 
blk64_t
 
blk
);

820 
ext2fs_‰ì_blocks_cou¡_add
(
ext2_su≥r_block
 *
su≥r
,

821 
blk64_t
 
blk
);

823 
ext2_group_desc
 *
ext2fs_group_desc
(
ext2_fûsys
 
fs
,

824 
›aque_ext2_group_desc
 *
gdp
,

825 
dgΩ_t
 
group
);

826 
blk64_t
 
ext2fs_block_bôm≠_loc
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

827 
ext2fs_block_bôm≠_loc_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
,

828 
blk64_t
 
blk
);

829 
blk64_t
 
ext2fs_öode_bôm≠_loc
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

830 
ext2fs_öode_bôm≠_loc_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
,

831 
blk64_t
 
blk
);

832 
blk64_t
 
ext2fs_öode_èbÀ_loc
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

833 
ext2fs_öode_èbÀ_loc_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
,

834 
blk64_t
 
blk
);

835 
__u32
 
ext2fs_bg_‰ì_blocks_cou¡
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

836 
ext2fs_bg_‰ì_blocks_cou¡_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
,

837 
__u32
 
n
);

838 
__u32
 
ext2fs_bg_‰ì_öodes_cou¡
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

839 
ext2fs_bg_‰ì_öodes_cou¡_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
,

840 
__u32
 
n
);

841 
__u32
 
ext2fs_bg_u£d_dús_cou¡
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

842 
ext2fs_bg_u£d_dús_cou¡_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
,

843 
__u32
 
n
);

844 
__u32
 
ext2fs_bg_ôabÀ_unu£d
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

845 
ext2fs_bg_ôabÀ_unu£d_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
,

846 
__u32
 
n
);

847 
__u16
 
ext2fs_bg_Êags
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

848 
ext2fs_bg_Êags_z≠
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

849 
ext2fs_bg_Êags_ã°
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
, 
__u16
 
bg_Êag
);

850 
ext2fs_bg_Êags_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
, 
__u16
 
bg_Êags
);

851 
ext2fs_bg_Êags_˛ór
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
, 
__u16
 
bg_Êags
);

852 
__u16
 
ext2fs_bg_checksum
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

853 
ext2fs_bg_checksum_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
, 
__u16
 
checksum
);

854 
blk64_t
 
ext2fs_fûe_a˛_block
(
ext2_fûsys
 
fs
,

855 c⁄° 
ext2_öode
 *
öode
);

856 
ext2fs_fûe_a˛_block_£t
(
ext2_fûsys
 
fs
,

857 
ext2_öode
 *
öode
, 
blk64_t
 
blk
);

860 
îrcode_t
 
ext2fs_block_ôî©e
(
ext2_fûsys
 
fs
,

861 
ext2_öo_t
 
öo
,

862 
Êags
,

863 *
block_buf
,

864 (*
func
)(
ext2_fûsys
 
fs
,

865 
blk_t
 *
blockƒ
,

866 
block˙t
,

867 *
¥iv_d©a
),

868 *
¥iv_d©a
);

869 
îrcode_t
 
ext2fs_block_ôî©e2
(
ext2_fûsys
 
fs
,

870 
ext2_öo_t
 
öo
,

871 
Êags
,

872 *
block_buf
,

873 (*
func
)(
ext2_fûsys
 
fs
,

874 
blk_t
 *
blockƒ
,

875 
e2_blk˙t_t
 
block˙t
,

876 
blk_t
 
ªf_blk
,

877 
ªf_off£t
,

878 *
¥iv_d©a
),

879 *
¥iv_d©a
);

880 
îrcode_t
 
ext2fs_block_ôî©e3
(
ext2_fûsys
 
fs
,

881 
ext2_öo_t
 
öo
,

882 
Êags
,

883 *
block_buf
,

884 (*
func
)(
ext2_fûsys
 
fs
,

885 
blk64_t
 *
blockƒ
,

886 
e2_blk˙t_t
 
block˙t
,

887 
blk64_t
 
ªf_blk
,

888 
ªf_off£t
,

889 *
¥iv_d©a
),

890 *
¥iv_d©a
);

893 
îrcode_t
 
ext2fs_bm≠
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

894 
ext2_öode
 *
öode
,

895 *
block_buf
, 
bm≠_Êags
,

896 
blk_t
 
block
, blk_à*
phys_blk
);

897 
îrcode_t
 
ext2fs_bm≠2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

898 
ext2_öode
 *
öode
,

899 *
block_buf
, 
bm≠_Êags
, 
blk64_t
 
block
,

900 *
ªt_Êags
, 
blk64_t
 *
phys_blk
);

904 
îrcode_t
 
ext2fs_move_blocks
(
ext2_fûsys
 
fs
,

905 
ext2fs_block_bôm≠
 
ª£rve
,

906 
ext2fs_block_bôm≠
 
Æloc_m≠
,

907 
Êags
);

911 
îrcode_t
 
ext2fs_check_desc
(
ext2_fûsys
 
fs
);

914 
îrcode_t
 
ext2fs_˛o£
(
ext2_fûsys
 
fs
);

915 
îrcode_t
 
ext2fs_˛o£2
(
ext2_fûsys
 
fs
, 
Êags
);

916 
îrcode_t
 
ext2fs_Êush
(
ext2_fûsys
 
fs
);

917 
îrcode_t
 
ext2fs_Êush2
(
ext2_fûsys
 
fs
, 
Êags
);

918 
ext2fs_bg_has_su≥r
(
ext2_fûsys
 
fs
, 
group_block
);

919 
îrcode_t
 
ext2fs_su≥r_™d_bgd_loc2
(
ext2_fûsys
 
fs
,

920 
dgΩ_t
 
group
,

921 
blk64_t
 *
ªt_su≥r_blk
,

922 
blk64_t
 *
ªt_ﬁd_desc_blk
,

923 
blk64_t
 *
ªt_√w_desc_blk
,

924 
blk_t
 *
ªt_u£d_blks
);

925 
ext2fs_su≥r_™d_bgd_loc
(
ext2_fûsys
 
fs
,

926 
dgΩ_t
 
group
,

927 
blk_t
 *
ªt_su≥r_blk
,

928 
blk_t
 *
ªt_ﬁd_desc_blk
,

929 
blk_t
 *
ªt_√w_desc_blk
,

930 *
ªt_mëa_bg
);

931 
ext2fs_upd©e_dy«mic_ªv
(
ext2_fûsys
 
fs
);

934 
__u32
 
ext2fs_¸c32c_be
(__u32 
¸c
, c⁄° *
p
, 
size_t
 
Àn
);

935 
__u32
 
ext2fs_¸c32c_À
(__u32 
¸c
, c⁄° *
p
, 
size_t
 
Àn
);

938 
ext2fs_group_desc_csum_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

939 
ext2fs_group_desc_csum_vîify
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

940 
îrcode_t
 
ext2fs_£t_gdt_csum
(
ext2_fûsys
 
fs
);

944 
îrcode_t
 
ext2fs_gë_num_dús
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 *
ªt_num_dús
);

945 
îrcode_t
 
ext2fs_öô_dbli°
(
ext2_fûsys
 
fs
, 
ext2_dbli°
 *
ªt_dbli°
);

946 
îrcode_t
 
ext2fs_add_dú_block
(
ext2_dbli°
 
dbli°
, 
ext2_öo_t
 
öo
,

947 
blk_t
 
blk
, 
block˙t
);

948 
îrcode_t
 
ext2fs_add_dú_block2
(
ext2_dbli°
 
dbli°
, 
ext2_öo_t
 
öo
,

949 
blk64_t
 
blk
, 
e2_blk˙t_t
 
block˙t
);

950 
ext2fs_dbli°_s‹t
(
ext2_dbli°
 
dbli°
,

951 
EXT2_QSORT_TYPE
 (*
s‹tfunc
)(const *,

953 
ext2fs_dbli°_s‹t2
(
ext2_dbli°
 
dbli°
,

954 
EXT2_QSORT_TYPE
 (*
s‹tfunc
)(const *,

956 
îrcode_t
 
ext2fs_dbli°_ôî©e
(
ext2_dbli°
 
dbli°
,

957 (*
func
)(
ext2_fûsys
 
fs
, 
ext2_db_íåy
 *
db_öfo
,

958 *
¥iv_d©a
),

959 *
¥iv_d©a
);

960 
îrcode_t
 
ext2fs_dbli°_ôî©e2
(
ext2_dbli°
 
dbli°
,

961 (*
func
)(
ext2_fûsys
 
fs
, 
ext2_db_íåy2
 *
db_öfo
,

962 *
¥iv_d©a
),

963 *
¥iv_d©a
);

964 
îrcode_t
 
ext2fs_£t_dú_block
(
ext2_dbli°
 
dbli°
, 
ext2_öo_t
 
öo
,

965 
blk_t
 
blk
, 
block˙t
);

966 
îrcode_t
 
ext2fs_£t_dú_block2
(
ext2_dbli°
 
dbli°
, 
ext2_öo_t
 
öo
,

967 
blk64_t
 
blk
, 
e2_blk˙t_t
 
block˙t
);

968 
îrcode_t
 
ext2fs_c›y_dbli°
(
ext2_dbli°
 
§c
,

969 
ext2_dbli°
 *
de°
);

970 
ext2fs_dbli°_cou¡
(
ext2_dbli°
 
dbli°
);

971 
blk64_t
 
ext2fs_dbli°_cou¡2
(
ext2_dbli°
 
dbli°
);

972 
îrcode_t
 
ext2fs_dbli°_gë_œ°
(
ext2_dbli°
 
dbli°
,

973 
ext2_db_íåy
 **
íåy
);

974 
îrcode_t
 
ext2fs_dbli°_gë_œ°2
(
ext2_dbli°
 
dbli°
,

975 
ext2_db_íåy2
 **
íåy
);

976 
îrcode_t
 
ext2fs_dbli°_dr›_œ°
(
ext2_dbli°
 
dbli°
);

979 
îrcode_t


980 
ext2fs_dbli°_dú_ôî©e
(
ext2_dbli°
 
dbli°
,

981 
Êags
,

982 *
block_buf
,

983 (*
func
)(
ext2_öo_t
 
dú
,

984 
íåy
,

985 
ext2_dú_íåy
 *
dúít
,

986 
off£t
,

987 
blocksize
,

988 *
buf
,

989 *
¥iv_d©a
),

990 *
¥iv_d©a
);

993 
îrcode_t
 
ext2fs_ªad_dú_block
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

994 *
buf
);

995 
îrcode_t
 
ext2fs_ªad_dú_block2
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

996 *
buf
, 
Êags
);

997 
îrcode_t
 
ext2fs_ªad_dú_block3
(
ext2_fûsys
 
fs
, 
blk64_t
 
block
,

998 *
buf
, 
Êags
);

999 
îrcode_t
 
ext2fs_wrôe_dú_block
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

1000 *
buf
);

1001 
îrcode_t
 
ext2fs_wrôe_dú_block2
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

1002 *
buf
, 
Êags
);

1003 
îrcode_t
 
ext2fs_wrôe_dú_block3
(
ext2_fûsys
 
fs
, 
blk64_t
 
block
,

1004 *
buf
, 
Êags
);

1007 
îrcode_t
 
ext2fs_dúhash
(
vîsi⁄
, c⁄° *
«me
, 
Àn
,

1008 c⁄° 
__u32
 *
£ed
,

1009 
ext2_dúhash_t
 *
ªt_hash
,

1010 
ext2_dúhash_t
 *
ªt_mö‹_hash
);

1014 
îrcode_t
 
ext2fs_gë_ªc_Àn
(
ext2_fûsys
 
fs
,

1015 
ext2_dú_íåy
 *
dúít
,

1016 *
ªc_Àn
);

1017 
îrcode_t
 
ext2fs_£t_ªc_Àn
(
ext2_fûsys
 
fs
,

1018 
Àn
,

1019 
ext2_dú_íåy
 *
dúít
);

1020 
îrcode_t
 
ext2fs_dú_ôî©e
(
ext2_fûsys
 
fs
,

1021 
ext2_öo_t
 
dú
,

1022 
Êags
,

1023 *
block_buf
,

1024 (*
func
)(
ext2_dú_íåy
 *
dúít
,

1025 
off£t
,

1026 
blocksize
,

1027 *
buf
,

1028 *
¥iv_d©a
),

1029 *
¥iv_d©a
);

1030 
îrcode_t
 
ext2fs_dú_ôî©e2
(
ext2_fûsys
 
fs
,

1031 
ext2_öo_t
 
dú
,

1032 
Êags
,

1033 *
block_buf
,

1034 (*
func
)(
ext2_öo_t
 
dú
,

1035 
íåy
,

1036 
ext2_dú_íåy
 *
dúít
,

1037 
off£t
,

1038 
blocksize
,

1039 *
buf
,

1040 *
¥iv_d©a
),

1041 *
¥iv_d©a
);

1044 
îrcode_t
 
ext2fs_dup_h™dÀ
(
ext2_fûsys
 
§c
,Éxt2_fûsy†*
de°
);

1047 
îrcode_t
 
ext2fs_ex∑nd_dú
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
);

1050 
__u32
 
ext2fs_ext_©å_hash_íåy
(
ext2_ext_©å_íåy
 *
íåy
,

1051 *
d©a
);

1052 
îrcode_t
 
ext2fs_ªad_ext_©å
(
ext2_fûsys
 
fs
, 
blk_t
 
block
, *
buf
);

1053 
îrcode_t
 
ext2fs_ªad_ext_©å2
(
ext2_fûsys
 
fs
, 
blk64_t
 
block
,

1054 *
buf
);

1055 
îrcode_t
 
ext2fs_wrôe_ext_©å
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

1056 *
buf
);

1057 
îrcode_t
 
ext2fs_wrôe_ext_©å2
(
ext2_fûsys
 
fs
, 
blk64_t
 
block
,

1058 *
buf
);

1059 
îrcode_t
 
ext2fs_adju°_ó_ªfcou¡
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
,

1060 *
block_buf
,

1061 
adju°
, 
__u32
 *
√wcou¡
);

1062 
îrcode_t
 
ext2fs_adju°_ó_ªfcou¡2
(
ext2_fûsys
 
fs
, 
blk64_t
 
blk
,

1063 *
block_buf
,

1064 
adju°
, 
__u32
 *
√wcou¡
);

1067 
îrcode_t
 
ext2fs_exã¡_hódî_vîify
(*
±r
, 
size
);

1068 
îrcode_t
 
ext2fs_exã¡_›í
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1069 
ext2_exã¡_h™dÀ_t
 *
h™dÀ
);

1070 
îrcode_t
 
ext2fs_exã¡_›í2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1071 
ext2_öode
 *
öode
,

1072 
ext2_exã¡_h™dÀ_t
 *
ªt_h™dÀ
);

1073 
ext2fs_exã¡_‰ì
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
);

1074 
îrcode_t
 
ext2fs_exã¡_gë
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

1075 
Êags
, 
ext2fs_exã¡
 *
exã¡
);

1076 
îrcode_t
 
ext2fs_exã¡_ª∂a˚
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
,

1077 
ext2fs_exã¡
 *
exã¡
);

1078 
îrcode_t
 
ext2fs_exã¡_ö£π
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
,

1079 
ext2fs_exã¡
 *
exã¡
);

1080 
îrcode_t
 
ext2fs_exã¡_£t_bm≠
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

1081 
blk64_t
 
logiˇl
, blk64_à
physiˇl
,

1082 
Êags
);

1083 
îrcode_t
 
ext2fs_exã¡_dñëe
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
);

1084 
îrcode_t
 
ext2fs_exã¡_gë_öfo
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

1085 
ext2_exã¡_öfo
 *
öfo
);

1086 
îrcode_t
 
ext2fs_exã¡_gŸo
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

1087 
blk64_t
 
blk
);

1090 
îrcode_t
 
ext2fs_fûe_›í2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1091 
ext2_öode
 *
öode
,

1092 
Êags
, 
ext2_fûe_t
 *
ªt
);

1093 
îrcode_t
 
ext2fs_fûe_›í
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1094 
Êags
, 
ext2_fûe_t
 *
ªt
);

1095 
ext2_fûsys
 
ext2fs_fûe_gë_fs
(
ext2_fûe_t
 
fûe
);

1096 
ext2_öode
 *
ext2fs_fûe_gë_öode
(
ext2_fûe_t
 
fûe
);

1097 
îrcode_t
 
ext2fs_fûe_˛o£
(
ext2_fûe_t
 
fûe
);

1098 
îrcode_t
 
ext2fs_fûe_Êush
(
ext2_fûe_t
 
fûe
);

1099 
îrcode_t
 
ext2fs_fûe_ªad
(
ext2_fûe_t
 
fûe
, *
buf
,

1100 
w™ãd
, *
gŸ
);

1101 
îrcode_t
 
ext2fs_fûe_wrôe
(
ext2_fûe_t
 
fûe
, c⁄° *
buf
,

1102 
nbyãs
, *
wrôãn
);

1103 
îrcode_t
 
ext2fs_fûe_Œ£ek
(
ext2_fûe_t
 
fûe
, 
__u64
 
off£t
,

1104 
whí˚
, 
__u64
 *
ªt_pos
);

1105 
îrcode_t
 
ext2fs_fûe_l£ek
(
ext2_fûe_t
 
fûe
, 
ext2_off_t
 
off£t
,

1106 
whí˚
, 
ext2_off_t
 *
ªt_pos
);

1107 
îrcode_t
 
ext2fs_fûe_gë_lsize
(
ext2_fûe_t
 
fûe
, 
__u64
 *
ªt_size
);

1108 
ext2_off_t
 
ext2fs_fûe_gë_size
(
ext2_fûe_t
 
fûe
);

1109 
îrcode_t
 
ext2fs_fûe_£t_size
(
ext2_fûe_t
 
fûe
, 
ext2_off_t
 
size
);

1110 
îrcode_t
 
ext2fs_fûe_£t_size2
(
ext2_fûe_t
 
fûe
, 
ext2_off64_t
 
size
);

1113 *
ext2fs_föd_block_devi˚
(
dev_t
 
devi˚
);

1116 
îrcode_t
 
ext2fs_sync_devi˚
(
fd
, 
Êushb
);

1119 
ext2fs_‰ì
(
ext2_fûsys
 
fs
);

1120 
ext2fs_‰ì_dbli°
(
ext2_dbli°
 
dbli°
);

1121 
ext2fs_badblocks_li°_‰ì
(
ext2_badblocks_li°
 
bb
);

1122 
ext2fs_u32_li°_‰ì
(
ext2_u32_li°
 
bb
);

1125 
ext2fs_‰ì_gíîic_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
);

1126 
îrcode_t
 
ext2fs_make_gíîic_bôm≠
”ºcode_à
magic
, 
ext2_fûsys
 
fs
,

1127 
__u32
 
°¨t
, __u32 
íd
,

1128 
__u32
 
ªÆ_íd
,

1129 c⁄° *
des¸
, *
öô_m≠
,

1130 
ext2fs_gíîic_bôm≠
 *
ªt
);

1131 
îrcode_t
 
ext2fs_Æloˇã_gíîic_bôm≠
(
__u32
 
°¨t
,

1132 
__u32
 
íd
,

1133 
__u32
 
ªÆ_íd
,

1134 c⁄° *
des¸
,

1135 
ext2fs_gíîic_bôm≠
 *
ªt
);

1136 
îrcode_t
 
ext2fs_c›y_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
§c
,

1137 
ext2fs_gíîic_bôm≠
 *
de°
);

1138 
ext2fs_˛ór_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

1139 
îrcode_t
 
ext2fs_fudge_gíîic_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
,

1140 
îrcode_t
 
magic
,

1141 
îrcode_t
 
√q
,

1142 
ext2_öo_t
 
íd
,

1143 
ext2_öo_t
 *
€nd
);

1144 
ext2fs_£t_gíîic_bôm≠_∑ddög
(
ext2fs_gíîic_bôm≠
 
m≠
);

1145 
îrcode_t
 
ext2fs_ªsize_gíîic_bôm≠
”ºcode_à
magic
,

1146 
__u32
 
√w_íd
,

1147 
__u32
 
√w_ªÆ_íd
,

1148 
ext2fs_gíîic_bôm≠
 
bm≠
);

1149 
îrcode_t
 
ext2fs_com∑ª_gíîic_bôm≠
”ºcode_à
magic
,Éºcode_à
√q
,

1150 
ext2fs_gíîic_bôm≠
 
bm1
,

1151 
ext2fs_gíîic_bôm≠
 
bm2
);

1152 
îrcode_t
 
ext2fs_gë_gíîic_bôm≠_ønge
(
ext2fs_gíîic_bôm≠
 
bm≠
,

1153 
îrcode_t
 
magic
,

1154 
__u32
 
°¨t
, __u32 
num
,

1155 *
out
);

1156 
îrcode_t
 
ext2fs_£t_gíîic_bôm≠_ønge
(
ext2fs_gíîic_bôm≠
 
bm≠
,

1157 
îrcode_t
 
magic
,

1158 
__u32
 
°¨t
, __u32 
num
,

1159 *
ö
);

1162 
ext2fs_‰ì_gíîic_bm≠
(
ext2fs_gíîic_bôm≠
 
bm≠
);

1163 
îrcode_t
 
ext2fs_Æloc_gíîic_bm≠
(
ext2_fûsys
 
fs
,Éºcode_à
magic
,

1164 
ty≥
, 
__u64
 
°¨t
, __u64 
íd
,

1165 
__u64
 
ªÆ_íd
,

1166 c⁄° *
des¸
,

1167 
ext2fs_gíîic_bôm≠
 *
ªt
);

1168 
îrcode_t
 
ext2fs_c›y_gíîic_bm≠
(
ext2fs_gíîic_bôm≠
 
§c
,

1169 
ext2fs_gíîic_bôm≠
 *
de°
);

1170 
ext2fs_˛ór_gíîic_bm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

1171 
îrcode_t
 
ext2fs_fudge_gíîic_bm≠_íd
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

1172 
îrcode_t
 
√q
,

1173 
__u64
 
íd
, __u64 *
€nd
);

1174 
ext2fs_£t_gíîic_bm≠_∑ddög
(
ext2fs_gíîic_bôm≠
 
bm≠
);

1175 
îrcode_t
 
ext2fs_ªsize_gíîic_bm≠
(
ext2fs_gíîic_bôm≠
 
bm≠
,

1176 
__u64
 
√w_íd
,

1177 
__u64
 
√w_ªÆ_íd
);

1178 
îrcode_t
 
ext2fs_com∑ª_gíîic_bm≠
”ºcode_à
√q
,

1179 
ext2fs_gíîic_bôm≠
 
bm1
,

1180 
ext2fs_gíîic_bôm≠
 
bm2
);

1181 
îrcode_t
 
ext2fs_gë_gíîic_bm≠_ønge
(
ext2fs_gíîic_bôm≠
 
bm≠
,

1182 
__u64
 
°¨t
, 
num
,

1183 *
out
);

1184 
îrcode_t
 
ext2fs_£t_gíîic_bm≠_ønge
(
ext2fs_gíîic_bôm≠
 
bm≠
,

1185 
__u64
 
°¨t
, 
num
,

1186 *
ö
);

1187 
îrcode_t
 
ext2fs_c⁄vît_sub˛u°î_bôm≠
(
ext2_fûsys
 
fs
,

1188 
ext2fs_block_bôm≠
 *
bôm≠
);

1191 
îrcode_t
 
ext2fs_gë_devi˚_size
(c⁄° *
fûe
, 
blocksize
,

1192 
blk_t
 *
ªtblocks
);

1193 
îrcode_t
 
ext2fs_gë_devi˚_size2
(c⁄° *
fûe
, 
blocksize
,

1194 
blk64_t
 *
ªtblocks
);

1197 
îrcode_t
 
ext2fs_gë_devi˚_£˘size
(c⁄° *
fûe
, *
£˘size
);

1198 
îrcode_t
 
ext2fs_gë_devi˚_phys_£˘size
(c⁄° *
fûe
, *
£˘size
);

1201 
îrcode_t
 
ext2fs_iblk_add_blocks
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
,

1202 
blk64_t
 
num_blocks
);

1203 
îrcode_t
 
ext2fs_iblk_sub_blocks
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
,

1204 
blk64_t
 
num_blocks
);

1205 
îrcode_t
 
ext2fs_iblk_£t
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
, 
blk64_t
 
b
);

1208 
îrcode_t
 
ext2fs_image_öode_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

1209 
îrcode_t
 
ext2fs_image_öode_ªad
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

1210 
îrcode_t
 
ext2fs_image_su≥r_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

1211 
îrcode_t
 
ext2fs_image_su≥r_ªad
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

1212 
îrcode_t
 
ext2fs_image_bôm≠_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

1213 
îrcode_t
 
ext2fs_image_bôm≠_ªad
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

1216 
îrcode_t
 
ext2fs_ªad_öd_block
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, *
buf
);

1217 
îrcode_t
 
ext2fs_wrôe_öd_block
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, *
buf
);

1220 
îrcode_t
 
ext2fs_öôülize
(c⁄° *
«me
, 
Êags
,

1221 
ext2_su≥r_block
 *
∑øm
,

1222 
io_m™agî
 
m™agî
, 
ext2_fûsys
 *
ªt_fs
);

1225 
ext2fs_‰ì_icou¡
(
ext2_icou¡_t
 
icou¡
);

1226 
îrcode_t
 
ext2fs_¸óã_icou¡_tdb
(
ext2_fûsys
 
fs
, *
tdb_dú
,

1227 
Êags
, 
ext2_icou¡_t
 *
ªt
);

1228 
îrcode_t
 
ext2fs_¸óã_icou¡2
(
ext2_fûsys
 
fs
, 
Êags
,

1229 
size
,

1230 
ext2_icou¡_t
 
höt
,Éxt2_icou¡_à*
ªt
);

1231 
îrcode_t
 
ext2fs_¸óã_icou¡
(
ext2_fûsys
 
fs
, 
Êags
,

1232 
size
,

1233 
ext2_icou¡_t
 *
ªt
);

1234 
îrcode_t
 
ext2fs_icou¡_„tch
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

1235 
__u16
 *
ªt
);

1236 
îrcode_t
 
ext2fs_icou¡_ö¸emít
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

1237 
__u16
 *
ªt
);

1238 
îrcode_t
 
ext2fs_icou¡_de¸emít
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

1239 
__u16
 *
ªt
);

1240 
îrcode_t
 
ext2fs_icou¡_°‹e
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

1241 
__u16
 
cou¡
);

1242 
ext2_öo_t
 
ext2fs_gë_icou¡_size
(
ext2_icou¡_t
 
icou¡
);

1243 
îrcode_t
 
ext2fs_icou¡_vÆid©e
(
ext2_icou¡_t
 
icou¡
, 
FILE
 *);

1246 
îrcode_t
 
ext2fs_Êush_iˇche
(
ext2_fûsys
 
fs
);

1247 
îrcode_t
 
ext2fs_gë_√xt_öode_fuŒ
(
ext2_öode_sˇn
 
sˇn
,

1248 
ext2_öo_t
 *
öo
,

1249 
ext2_öode
 *
öode
,

1250 
bufsize
);

1251 
îrcode_t
 
ext2fs_›í_öode_sˇn
(
ext2_fûsys
 
fs
, 
buf„r_blocks
,

1252 
ext2_öode_sˇn
 *
ªt_sˇn
);

1253 
ext2fs_˛o£_öode_sˇn
(
ext2_öode_sˇn
 
sˇn
);

1254 
îrcode_t
 
ext2fs_gë_√xt_öode
(
ext2_öode_sˇn
 
sˇn
, 
ext2_öo_t
 *
öo
,

1255 
ext2_öode
 *
öode
);

1256 
îrcode_t
 
ext2fs_öode_sˇn_gŸo_blockgroup
(
ext2_öode_sˇn
 
sˇn
,

1257 
group
);

1258 
ext2fs_£t_öode_ˇŒback


1259 (
ext2_öode_sˇn
 
sˇn
,

1260 
îrcode_t
 (*
d⁄e_group
)(
ext2_fûsys
 
fs
,

1261 
ext2_öode_sˇn
 
sˇn
,

1262 
dgΩ_t
 
group
,

1263 * 
¥iv_d©a
),

1264 *
d⁄e_group_d©a
);

1265 
ext2fs_öode_sˇn_Êags
(
ext2_öode_sˇn
 
sˇn
, 
£t_Êags
,

1266 
˛ór_Êags
);

1267 
îrcode_t
 
ext2fs_ªad_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1268 
ext2_öode
 * 
öode
,

1269 
bufsize
);

1270 
îrcode_t
 
ext2fs_ªad_öode
 (
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1271 
ext2_öode
 * 
öode
);

1272 
îrcode_t
 
ext2fs_wrôe_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1273 
ext2_öode
 * 
öode
,

1274 
bufsize
);

1275 
îrcode_t
 
ext2fs_wrôe_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1276 
ext2_öode
 * 
öode
);

1277 
îrcode_t
 
ext2fs_wrôe_√w_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1278 
ext2_öode
 * 
öode
);

1279 
îrcode_t
 
ext2fs_gë_blocks
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
blk_t
 *
blocks
);

1280 
îrcode_t
 
ext2fs_check_dúe˘‹y
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
);

1283 
io_m™agî
 
öode_io_m™agî
;

1284 
îrcode_t
 
ext2fs_öode_io_öã∫
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1285 **
«me
);

1286 
îrcode_t
 
ext2fs_öode_io_öã∫2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1287 
ext2_öode
 *
öode
,

1288 **
«me
);

1291 
îrcode_t
 
ext2fs_check_if_mou¡ed
(c⁄° *
fûe
, *
mou¡_Êags
);

1292 
îrcode_t
 
ext2fs_check_mou¡_poöt
(c⁄° *
devi˚
, *
mou¡_Êags
,

1293 *
mçt
, 
méí
);

1296 
îrcode_t
 
ext2fs_punch
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1297 
ext2_öode
 *
öode
,

1298 *
block_buf
, 
blk64_t
 
°¨t
,

1299 
blk64_t
 
íd
);

1302 
îrcode_t
 
ext2fs_lookup
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

1303 
«mñí
, *
buf
, 
ext2_öo_t
 *
öode
);

1304 
îrcode_t
 
ext2fs_«mei
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

1305 c⁄° *
«me
, 
ext2_öo_t
 *
öode
);

1306 
îrcode_t
 
ext2fs_«mei_fﬁlow
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

1307 c⁄° *
«me
, 
ext2_öo_t
 *
öode
);

1308 
îrcode_t
 
ext2fs_fﬁlow_lök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

1309 
ext2_öo_t
 
öode
,Éxt2_öo_à*
ªs_öode
);

1312 
ext2fs_«tive_Êag
();

1315 
îrcode_t
 
ext2fs_√w_dú_block
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú_öo
,

1316 
ext2_öo_t
 
∑ª¡_öo
, **
block
);

1319 
îrcode_t
 
ext2fs_mkdú
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
∑ª¡
,Éxt2_öo_à
öum
,

1320 c⁄° *
«me
);

1323 
îrcode_t
 
ext2fs_zîo_blocks
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, 
num
,

1324 
blk_t
 *
ªt_blk
, *
ªt_cou¡
);

1325 
îrcode_t
 
ext2fs_zîo_blocks2
(
ext2_fûsys
 
fs
, 
blk64_t
 
blk
, 
num
,

1326 
blk64_t
 *
ªt_blk
, *
ªt_cou¡
);

1327 
îrcode_t
 
ext2fs_¸óã_jou∫Æ_su≥rblock
(
ext2_fûsys
 
fs
,

1328 
__u32
 
num_blocks
, 
Êags
,

1329 **
ªt_jsb
);

1330 
îrcode_t
 
ext2fs_add_jou∫Æ_devi˚
(
ext2_fûsys
 
fs
,

1331 
ext2_fûsys
 
jou∫Æ_dev
);

1332 
îrcode_t
 
ext2fs_add_jou∫Æ_öode
(
ext2_fûsys
 
fs
, 
blk_t
 
num_blocks
,

1333 
Êags
);

1334 
ext2fs_deÁu…_jou∫Æ_size
(
__u64
 
num_blocks
);

1337 
îrcode_t
 
ext2fs_›í
(c⁄° *
«me
, 
Êags
, 
su≥rblock
,

1338 
block_size
, 
io_m™agî
 
m™agî
,

1339 
ext2_fûsys
 *
ªt_fs
);

1340 
îrcode_t
 
ext2fs_›í2
(c⁄° *
«me
, c⁄° *
io_›ti⁄s
,

1341 
Êags
, 
su≥rblock
,

1342 
block_size
, 
io_m™agî
 
m™agî
,

1343 
ext2_fûsys
 *
ªt_fs
);

1344 
blk64_t
 
ext2fs_des¸ùt‹_block_loc2
(
ext2_fûsys
 
fs
,

1345 
blk64_t
 
group_block
, 
dgΩ_t
 
i
);

1346 
blk_t
 
ext2fs_des¸ùt‹_block_loc
(
ext2_fûsys
 
fs
, blk_à
group_block
,

1347 
dgΩ_t
 
i
);

1348 
îrcode_t
 
ext2fs_gë_d©a_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 *
ﬁd_io
);

1349 
îrcode_t
 
ext2fs_£t_d©a_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 
√w_io
);

1350 
îrcode_t
 
ext2fs_ªwrôe_to_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 
√w_io
);

1353 
îrcode_t
 
ext2fs_gë_∑th«me
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
,Éxt2_öo_à
öo
,

1354 **
«me
);

1357 
îrcode_t
 
ext2fs_lök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

1358 
ext2_öo_t
 
öo
, 
Êags
);

1359 
îrcode_t
 
ext2fs_u∆ök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

1360 
ext2_öo_t
 
öo
, 
Êags
);

1363 
îrcode_t
 
ext2fs_mmp_ªad
(
ext2_fûsys
 
fs
, 
blk64_t
 
mmp_blk
, *
buf
);

1364 
îrcode_t
 
ext2fs_mmp_wrôe
(
ext2_fûsys
 
fs
, 
blk64_t
 
mmp_blk
, *
buf
);

1365 
îrcode_t
 
ext2fs_mmp_˛ór
(
ext2_fûsys
 
fs
);

1366 
îrcode_t
 
ext2fs_mmp_öô
(
ext2_fûsys
 
fs
);

1367 
îrcode_t
 
ext2fs_mmp_°¨t
(
ext2_fûsys
 
fs
);

1368 
îrcode_t
 
ext2fs_mmp_upd©e
(
ext2_fûsys
 
fs
);

1369 
îrcode_t
 
ext2fs_mmp_°›
(
ext2_fûsys
 
fs
);

1370 
ext2fs_mmp_√w_£q
();

1373 
îrcode_t
 
ext2fs_ªad_bb_öode
(
ext2_fûsys
 
fs
,

1374 
ext2_badblocks_li°
 *
bb_li°
);

1377 
îrcode_t
 
ext2fs_ªad_bb_FILE2
(
ext2_fûsys
 
fs
, 
FILE
 *
f
,

1378 
ext2_badblocks_li°
 *
bb_li°
,

1379 *
¥iv_d©a
,

1380 (*
övÆid
)(
ext2_fûsys
 
fs
,

1381 
blk_t
 
blk
,

1382 *
bad°r
,

1383 *
¥iv_d©a
));

1384 
îrcode_t
 
ext2fs_ªad_bb_FILE
(
ext2_fûsys
 
fs
, 
FILE
 *
f
,

1385 
ext2_badblocks_li°
 *
bb_li°
,

1386 (*
övÆid
)(
ext2_fûsys
 
fs
,

1387 
blk_t
 
blk
));

1390 
îrcode_t
 
ext2fs_¸óã_ªsize_öode
(
ext2_fûsys
 
fs
);

1393 
ext2fs_sw≠_ext_©å
(*
to
, *
‰om
, 
bufsize
,

1394 
has_hódî
);

1395 
ext2fs_sw≠_ext_©å_hódî
(
ext2_ext_©å_hódî
 *
to_hódî
,

1396 
ext2_ext_©å_hódî
 *
‰om_hdr
);

1397 
ext2fs_sw≠_ext_©å_íåy
(
ext2_ext_©å_íåy
 *
to_íåy
,

1398 
ext2_ext_©å_íåy
 *
‰om_íåy
);

1399 
ext2fs_sw≠_su≥r
(
ext2_su≥r_block
 * 
su≥r
);

1400 
ext2fs_sw≠_group_desc
(
ext2_group_desc
 *
gdp
);

1401 
ext2fs_sw≠_group_desc2
(
ext2_fûsys
, 
ext2_group_desc
 *
gdp
);

1402 
ext2fs_sw≠_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öode_œrge
 *
t
,

1403 
ext2_öode_œrge
 *
f
, 
ho°‹dî
,

1404 
bufsize
);

1405 
ext2fs_sw≠_öode
(
ext2_fûsys
 
fs
,
ext2_öode
 *
t
,

1406 
ext2_öode
 *
f
, 
ho°‹dî
);

1407 
ext2fs_sw≠_mmp
(
mmp_°ru˘
 *
mmp
);

1410 
ext2fs_öode_has_vÆid_blocks
(
ext2_öode
 *
öode
);

1411 
ext2fs_öode_has_vÆid_blocks2
(
ext2_fûsys
 
fs
,

1412 
ext2_öode
 *
öode
);

1415 
ext2fs_∑r£_vîsi⁄_°rög
(c⁄° *
vî_°rög
);

1416 
ext2fs_gë_libøry_vîsi⁄
(c⁄° **
vî_°rög
,

1417 c⁄° **
d©e_°rög
);

1420 
îrcode_t
 
ext2fs_wrôe_bb_FILE
(
ext2_badblocks_li°
 
bb_li°
,

1421 
Êags
,

1422 
FILE
 *
f
);

1426 
îrcode_t
 
ext2fs_gë_mem
(
size
, *
±r
);

1427 
îrcode_t
 
ext2fs_gë_memÆign
(
size
,

1428 
Æign
, *
±r
);

1429 
îrcode_t
 
ext2fs_gë_memzîo
(
size
, *
±r
);

1430 
îrcode_t
 
ext2fs_gë_¨øy
(
cou¡
,

1431 
size
, *
±r
);

1432 
îrcode_t
 
ext2fs_gë_¨øyzîo
(
cou¡
,

1433 
size
, *
±r
);

1434 
îrcode_t
 
ext2fs_‰ì_mem
(*
±r
);

1435 
îrcode_t
 
ext2fs_ªsize_mem
(
ﬁd_size
,

1436 
size
, *
±r
);

1437 
ext2fs_m¨k_su≥r_dúty
(
ext2_fûsys
 
fs
);

1438 
ext2fs_m¨k_ch™ged
(
ext2_fûsys
 
fs
);

1439 
ext2fs_ã°_ch™ged
(
ext2_fûsys
 
fs
);

1440 
ext2fs_m¨k_vÆid
(
ext2_fûsys
 
fs
);

1441 
ext2fs_unm¨k_vÆid
(
ext2_fûsys
 
fs
);

1442 
ext2fs_ã°_vÆid
(
ext2_fûsys
 
fs
);

1443 
ext2fs_m¨k_ib_dúty
(
ext2_fûsys
 
fs
);

1444 
ext2fs_m¨k_bb_dúty
(
ext2_fûsys
 
fs
);

1445 
ext2fs_ã°_ib_dúty
(
ext2_fûsys
 
fs
);

1446 
ext2fs_ã°_bb_dúty
(
ext2_fûsys
 
fs
);

1447 
ext2fs_group_of_blk
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
);

1448 
ext2fs_group_of_öo
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
);

1449 
blk_t
 
ext2fs_group_fú°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

1450 
blk_t
 
ext2fs_group_œ°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

1451 
blk_t
 
ext2fs_öode_d©a_blocks
(
ext2_fûsys
 
fs
,

1452 
ext2_öode
 *
öode
);

1453 
ext2fs_div_˚û
(
a
, 
b
);

1454 
__u64
 
ext2fs_div64_˚û
(__u64 
a
, __u64 
b
);

1455 
ext2fs_›í_fûe
(c⁄° *
∑th«me
, 
Êags
, 
mode_t
 
mode
);

1456 
ext2fs_°©
(c⁄° *
∑th
, 
ext2fs_°ru˘_°©
 *
buf
);

1457 
ext2fs_f°©
(
fd
, 
ext2fs_°ru˘_°©
 *
buf
);

1465 #i‡(
deföed
(
INCLUDE_INLINE_FUNCS
Ë|| !deföed(
NO_INLINE_FUNCS
))

1466 #ifde‡
INCLUDE_INLINE_FUNCS


1467 
	#_INLINE_
 

	)

1469 #ifde‡
__GNUC__


1470 
	#_INLINE_
 
__ölöe__


	)

1472 
	#_INLINE_
 
ölöe


	)

1476 #i‚de‡
EXT2_CUSTOM_MEMORY_ROUTINES


1477 
	~<°rög.h
>

1481 
_INLINE_
 
îrcode_t
 
ext2fs_gë_mem
(
size
, *
±r
)

1483 *
µ
;

1485 
µ
 = 
mÆloc
(
size
);

1486 i‡(!
µ
)

1487  
EXT2_ET_NO_MEMORY
;

1488 
mem˝y
(
±r
, &
µ
,  (pp));

1492 
_INLINE_
 
îrcode_t
 
ext2fs_gë_memzîo
(
size
, *
±r
)

1494 *
µ
;

1496 
µ
 = 
mÆloc
(
size
);

1497 i‡(!
µ
)

1498  
EXT2_ET_NO_MEMORY
;

1499 
mem£t
(
µ
, 0, 
size
);

1500 
mem˝y
(
±r
, &
µ
, (pp));

1504 
_INLINE_
 
îrcode_t
 
ext2fs_gë_¨øy
(
cou¡
, 
size
, *
±r
)

1506 i‡(
cou¡
 && (-1UL)/cou¡<
size
)

1507  
EXT2_ET_NO_MEMORY
;

1508  
ext2fs_gë_mem
(
cou¡
*
size
, 
±r
);

1511 
_INLINE_
 
îrcode_t
 
ext2fs_gë_¨øyzîo
(
cou¡
,

1512 
size
, *
±r
)

1514 *
µ
;

1516 i‡(
cou¡
 && (-1UL)/cou¡<
size
)

1517  
EXT2_ET_NO_MEMORY
;

1518 
µ
 = 
ˇŒoc
(
cou¡
, 
size
);

1519 i‡(!
µ
)

1520  
EXT2_ET_NO_MEMORY
;

1521 
mem˝y
(
±r
, &
µ
, (pp));

1528 
_INLINE_
 
îrcode_t
 
ext2fs_‰ì_mem
(*
±r
)

1530 *
p
;

1532 
mem˝y
(&
p
, 
±r
, (p));

1533 
‰ì
(
p
);

1534 
p
 = 0;

1535 
mem˝y
(
±r
, &
p
, (p));

1542 
_INLINE_
 
îrcode_t
 
ext2fs_ªsize_mem
(
EXT2FS_ATTR
((
unu£d
)Ë
ﬁd_size
,

1543 
size
, *
±r
)

1545 *
p
;

1549 
mem˝y
(&
p
, 
±r
, (p));

1550 
p
 = 
ªÆloc
’, 
size
);

1551 i‡(!
p
)

1552  
EXT2_ET_NO_MEMORY
;

1553 
mem˝y
(
±r
, &
p
, (p));

1561 
_INLINE_
 
ext2fs_m¨k_su≥r_dúty
(
ext2_fûsys
 
fs
)

1563 
fs
->
Êags
 |
EXT2_FLAG_DIRTY
 | 
EXT2_FLAG_CHANGED
;

1569 
_INLINE_
 
ext2fs_m¨k_ch™ged
(
ext2_fûsys
 
fs
)

1571 
fs
->
Êags
 |
EXT2_FLAG_CHANGED
;

1577 
_INLINE_
 
ext2fs_ã°_ch™ged
(
ext2_fûsys
 
fs
)

1579  (
fs
->
Êags
 & 
EXT2_FLAG_CHANGED
);

1585 
_INLINE_
 
ext2fs_m¨k_vÆid
(
ext2_fûsys
 
fs
)

1587 
fs
->
Êags
 |
EXT2_FLAG_VALID
;

1593 
_INLINE_
 
ext2fs_unm¨k_vÆid
(
ext2_fûsys
 
fs
)

1595 
fs
->
Êags
 &~
EXT2_FLAG_VALID
;

1601 
_INLINE_
 
ext2fs_ã°_vÆid
(
ext2_fûsys
 
fs
)

1603  (
fs
->
Êags
 & 
EXT2_FLAG_VALID
);

1609 
_INLINE_
 
ext2fs_m¨k_ib_dúty
(
ext2_fûsys
 
fs
)

1611 
fs
->
Êags
 |
EXT2_FLAG_IB_DIRTY
 | 
EXT2_FLAG_CHANGED
;

1617 
_INLINE_
 
ext2fs_m¨k_bb_dúty
(
ext2_fûsys
 
fs
)

1619 
fs
->
Êags
 |
EXT2_FLAG_BB_DIRTY
 | 
EXT2_FLAG_CHANGED
;

1625 
_INLINE_
 
ext2fs_ã°_ib_dúty
(
ext2_fûsys
 
fs
)

1627  (
fs
->
Êags
 & 
EXT2_FLAG_IB_DIRTY
);

1633 
_INLINE_
 
ext2fs_ã°_bb_dúty
(
ext2_fûsys
 
fs
)

1635  (
fs
->
Êags
 & 
EXT2_FLAG_BB_DIRTY
);

1641 
_INLINE_
 
ext2fs_group_of_blk
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
)

1643  
ext2fs_group_of_blk2
(
fs
, 
blk
);

1648 
_INLINE_
 
ext2fs_group_of_öo
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
)

1650  (
öo
 - 1Ë/ 
fs
->
su≥r
->
s_öodes_≥r_group
;

1656 
_INLINE_
 
blk_t
 
ext2fs_group_fú°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
)

1658  
ext2fs_group_fú°_block2
(
fs
, 
group
);

1664 
_INLINE_
 
blk_t
 
ext2fs_group_œ°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
)

1666  
ext2fs_group_œ°_block2
(
fs
, 
group
);

1669 
_INLINE_
 
blk_t
 
ext2fs_öode_d©a_blocks
(
ext2_fûsys
 
fs
,

1670 
ext2_öode
 *
öode
)

1672  
ext2fs_öode_d©a_blocks2
(
fs
, 
öode
);

1678 
_INLINE_
 
ext2fs_div_˚û
(
a
, 
b
)

1680 i‡(!
a
)

1682  ((
a
 - 1Ë/ 
b
) + 1;

1685 
_INLINE_
 
__u64
 
ext2fs_div64_˚û
(__u64 
a
, __u64 
b
)

1687 i‡(!
a
)

1689  ((
a
 - 1Ë/ 
b
) + 1;

1692 
_INLINE_
 
ext2fs_›í_fûe
(c⁄° *
∑th«me
, 
Êags
, 
mode_t
 
mode
)

1694 
va_li°
 
¨gs
;

1696 i‡(
mode
)

1697 #i‡
deföed
(
HAVE_OPEN64
Ë&& !deföed(
__OSX_AVAILABLE_BUT_DEPRECATED
)

1698  
›í64
(
∑th«me
, 
Êags
, 
mode
);

1700  
›í64
(
∑th«me
, 
Êags
);

1702  
›í
(
∑th«me
, 
Êags
, 
mode
);

1704  
›í
(
∑th«me
, 
Êags
);

1708 
_INLINE_
 
ext2fs_°©
(c⁄° *
∑th
, 
ext2fs_°ru˘_°©
 *
buf
)

1710 #i‡
deföed
(
HAVE_FSTAT64
Ë&& !deföed(
__OSX_AVAILABLE_BUT_DEPRECATED
)

1711  
°©64
(
∑th
, 
buf
);

1713  
°©
(
∑th
, 
buf
);

1717 
_INLINE_
 
ext2fs_f°©
(
fd
, 
ext2fs_°ru˘_°©
 *
buf
)

1719 #i‡
deföed
(
HAVE_FSTAT64
Ë&& !deföed(
__OSX_AVAILABLE_BUT_DEPRECATED
)

1720  
f°©64
(
fd
, 
buf
);

1722  
f°©
(
fd
, 
buf
);

1726 #unde‡
_INLINE_


1729 #ifde‡
__˝lu•lus


	@/usr/include/ext2fs/ext3_extents.h

11 #i‚de‡
_LINUX_EXT3_EXTENTS


12 
	#_LINUX_EXT3_EXTENTS


	)

25 
	sext3_exã¡
 {

26 
__u32
 
	mì_block
;

27 
__u16
 
	mì_Àn
;

28 
__u16
 
	mì_°¨t_hi
;

29 
__u32
 
	mì_°¨t
;

36 
	sext3_exã¡_idx
 {

37 
__u32
 
	mei_block
;

38 
__u32
 
	mei_Àaf
;

40 
__u16
 
	mei_Àaf_hi
;

41 
__u16
 
	mei_unu£d
;

47 
	sext3_exã¡_hódî
 {

48 
__u16
 
	meh_magic
;

49 
__u16
 
	meh_íåõs
;

50 
__u16
 
	meh_max
;

51 
__u16
 
	meh_dïth
;

52 
__u32
 
	meh_gíî©i⁄
;

55 
	#EXT3_EXT_MAGIC
 0xf30a

	)

62 
	sext3_ext_∑th
 {

63 
__u32
 
	mp_block
;

64 
__u16
 
	mp_dïth
;

65 
ext3_exã¡
 *
	mp_ext
;

66 
ext3_exã¡_idx
 *
	mp_idx
;

67 
ext3_exã¡_hódî
 *
	mp_hdr
;

68 
buf„r_hód
 *
	mp_bh
;

88 
	#EXT_INIT_MAX_LEN
 (1UL << 15)

	)

89 
	#EXT_UNINIT_MAX_LEN
 (
EXT_INIT_MAX_LEN
 - 1)

	)

91 
	#EXT_FIRST_EXTENT
(
__hdr__
) \

92 ((
ext3_exã¡
 *Ë(((*Ë(
__hdr__
)) + \

93 (
ext3_exã¡_hódî
)))

	)

94 
	#EXT_FIRST_INDEX
(
__hdr__
) \

95 ((
ext3_exã¡_idx
 *Ë(((*Ë(
__hdr__
)) + \

96 (
ext3_exã¡_hódî
)))

	)

97 
	#EXT_HAS_FREE_INDEX
(
__∑th__
) \

98 ((
__∑th__
)->
p_hdr
->
eh_íåõs
 < (__∑th__)->p_hdr->
eh_max
)

	)

99 
	#EXT_LAST_EXTENT
(
__hdr__
) \

100 (
	`EXT_FIRST_EXTENT
((
__hdr__
)Ë+ (__hdr__)->
eh_íåõs
 - 1)

	)

101 
	#EXT_LAST_INDEX
(
__hdr__
) \

102 (
	`EXT_FIRST_INDEX
((
__hdr__
)Ë+ (__hdr__)->
eh_íåõs
 - 1)

	)

103 
	#EXT_MAX_EXTENT
(
__hdr__
) \

104 (
	`EXT_FIRST_EXTENT
((
__hdr__
)Ë+ (__hdr__)->
eh_max
 - 1)

	)

105 
	#EXT_MAX_INDEX
(
__hdr__
) \

106 (
	`EXT_FIRST_INDEX
((
__hdr__
)Ë+ (__hdr__)->
eh_max
 - 1)

	)

	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/linux/fd.h

1 #i‚de‡
_LINUX_FD_H


2 
	#_LINUX_FD_H


	)

4 
	~<löux/io˘l.h
>

13 
	sÊ›py_°ru˘
 {

14 
	msize
,

15 
	m£˘
,

16 
	mhód
,

17 
	måack
,

18 
	m°ªtch
;

22 
	#FD_STRETCH
 1

	)

23 
	#FD_SWAPSIDES
 2

	)

24 
	#FD_ZEROBASED
 4

	)

25 
	#FD_SECTBASEMASK
 0x3FC

	)

26 
	#FD_MKSECTBASE
(
s
Ë(((sË^ 1Ë<< 2)

	)

27 
	#FD_SECTBASE
(
Ê›py
Ë((((Ê›py)->
°ªtch
 & 
FD_SECTBASEMASK
Ë>> 2Ë^ 1)

	)

29 
	mg≠
,

31 
	møã
,

32 
	#FD_2M
 0x4

	)

33 
	#FD_SIZECODEMASK
 0x38

	)

34 
	#FD_SIZECODE
(
Ê›py
Ë(((((Ê›py)->
øã
&
FD_SIZECODEMASK
)>> 3)+ 2Ë%8)

	)

35 
	#FD_SECTSIZE
(
Ê›py
Ë–(Ê›py)->
øã
 & 
FD_2M
 ? \

36 512 : 128 << 
	`FD_SIZECODE
(
Ê›py
Ë)

	)

37 
	#FD_PERP
 0x40

	)

39 
	m•ec1
,

40 
	mfmt_g≠
;

41 c⁄° * 
	m«me
;

48 
	#FDCLRPRM
 
	`_IO
(2, 0x41)

	)

51 
	#FDSETPRM
 
	`_IOW
(2, 0x42, 
Ê›py_°ru˘
)

	)

52 
	#FDSETMEDIAPRM
 
FDSETPRM


	)

55 
	#FDDEFPRM
 
	`_IOW
(2, 0x43, 
Ê›py_°ru˘
)

	)

56 
	#FDGETPRM
 
	`_IOR
(2, 0x04, 
Ê›py_°ru˘
)

	)

57 
	#FDDEFMEDIAPRM
 
FDDEFPRM


	)

58 
	#FDGETMEDIAPRM
 
FDGETPRM


	)

62 
	#FDMSGON
 
	`_IO
(2,0x45)

	)

63 
	#FDMSGOFF
 
	`_IO
(2,0x46)

	)

70 
	#FD_FILL_BYTE
 0xF6

	)

72 
	sf‹m©_des¸
 {

73 
	mdevi˚
,
	mhód
,
	måack
;

76 
	#FDFMTBEG
 
	`_IO
(2,0x47)

	)

78 
	#FDFMTTRK
 
	`_IOW
(2,0x48, 
f‹m©_des¸
)

	)

80 
	#FDFMTEND
 
	`_IO
(2,0x49)

	)

87 
	sÊ›py_max_îr‹s
 {

89 
	mab‹t
,

90 
	mªad_åack
,

92 
	mª£t
,

93 
	mªˇl
,

101 
	mªp‹tög
;

105 
	#FDSETEMSGTRESH
 
	`_IO
(2,0x4a)

	)

108 
	#FDFLUSH
 
	`_IO
(2,0x4b)

	)

112 
	#FDSETMAXERRS
 
	`_IOW
(2, 0x4c, 
Ê›py_max_îr‹s
)

	)

113 
	#FDGETMAXERRS
 
	`_IOR
(2, 0x0e, 
Ê›py_max_îr‹s
)

	)

118 
	tÊ›py_drive_«me
[16];

119 
	#FDGETDRVTYP
 
	`_IOR
(2, 0x0f, 
Ê›py_drive_«me
)

	)

126 
	sÊ›py_drive_∑øms
 {

127 sig√d 
	mcmos
;

132 
	mmax_då
;

133 
	mh…
;

134 
	mhut
;

136 
	m§t
;

138 
	m•öup
;

140 
	m•ödown
;

141 
	m•ödown_off£t
;

143 
	m£À˘_dñay
;

144 
	mΩs
;

145 
	måacks
;

146 
	mtimeout
;

148 
	möãæóve_£˘
;

151 
Ê›py_max_îr‹s
 
	mmax_îr‹s
;

153 
	mÊags
;

160 
	#FTD_MSG
 0x10

	)

161 
	#FD_BROKEN_DCL
 0x20

	)

162 
	#FD_DEBUG
 0x02

	)

163 
	#FD_SILENT_DCL_CLEAR
 0x4

	)

164 
	#FD_INVERTED_DCL
 0x80

	)

167 
	mªad_åack
;

174 
	mautodëe˘
[8];

176 
	mcheck‰eq
;

178 
	m«tive_f‹m©
;

182 
	mFD_NEED_TWADDLE_BIT
,

183 
	mFD_VERIFY_BIT
,

184 
	mFD_DISK_NEWCHANGE_BIT
,

186 
	mFD_UNUSED_BIT
,

187 
	mFD_DISK_CHANGED_BIT
,

188 
	mFD_DISK_WRITABLE_BIT


191 
	#FDSETDRVPRM
 
	`_IOW
(2, 0x90, 
Ê›py_drive_∑øms
)

	)

192 
	#FDGETDRVPRM
 
	`_IOR
(2, 0x11, 
Ê›py_drive_∑øms
)

	)

199 
	sÊ›py_drive_°ru˘
 {

200 
	mÊags
;

202 
	#FD_NEED_TWADDLE
 (1 << 
FD_NEED_TWADDLE_BIT
)

	)

203 
	#FD_VERIFY
 (1 << 
FD_VERIFY_BIT
)

	)

204 
	#FD_DISK_NEWCHANGE
 (1 << 
FD_DISK_NEWCHANGE_BIT
)

	)

205 
	#FD_DISK_CHANGED
 (1 << 
FD_DISK_CHANGED_BIT
)

	)

206 
	#FD_DISK_WRITABLE
 (1 << 
FD_DISK_WRITABLE_BIT
)

	)

208 
	m•öup_d©e
;

209 
	m£À˘_d©e
;

210 
	mfú°_ªad_d©e
;

211 
	m¥obed_f‹m©
;

212 
	måack
;

213 
	mmaxblock
;

214 
	mmaxåack
;

215 
	mgíî©i⁄
;

222 
	mkìp_d©a
;

225 
	mfd_ªf
;

226 
	mfd_devi˚
;

227 
	mœ°_checked
;

230 *
	mdmabuf
;

231 
	mbufblocks
;

234 
	#FDGETDRVSTAT
 
	`_IOR
(2, 0x12, 
Ê›py_drive_°ru˘
)

	)

235 
	#FDPOLLDRVSTAT
 
	`_IOR
(2, 0x13, 
Ê›py_drive_°ru˘
)

	)

242 
	eª£t_mode
 {

243 
	mFD_RESET_IF_NEEDED
,

244 
	mFD_RESET_IF_RAWCMD
,

245 
	mFD_RESET_ALWAYS


247 
	#FDRESET
 
	`_IO
(2, 0x54)

	)

253 
	sÊ›py_fdc_°©e
 {

254 
	m•ec1
;

255 
	m•ec2
;

256 
	mdå
;

257 
	mvîsi⁄
;

258 
	md‹
;

259 
	maddªss
;

260 
	møwcmd
:2;

261 
	mª£t
:1;

262 
	m√ed_c⁄figuª
:1;

263 
	m≥Ω_mode
:2;

264 
	mhas_fifo
:1;

265 
	mdrivî_vîsi⁄
;

266 
	#FD_DRIVER_VERSION
 0x100

	)

274 
	måack
[4];

285 
	#FDGETFDCSTAT
 
	`_IOR
(2, 0x15, 
Ê›py_fdc_°©e
)

	)

291 
	sÊ›py_wrôe_îr‹s
 {

300 
	mwrôe_îr‹s
;

304 
	mfú°_îr‹_£˘‹
;

305 
	mfú°_îr‹_gíî©i⁄
;

306 
	mœ°_îr‹_£˘‹
;

307 
	mœ°_îr‹_gíî©i⁄
;

309 
	mbad√ss
;

313 
	#FDWERRORCLR
 
	`_IO
(2, 0x56)

	)

315 
	#FDWERRORGET
 
	`_IOR
(2, 0x17, 
Ê›py_wrôe_îr‹s
)

	)

323 
	#FDHAVEBATCHEDRAWCMD


	)

325 
	sÊ›py_øw_cmd
 {

326 
	mÊags
;

327 
	#FD_RAW_READ
 1

	)

328 
	#FD_RAW_WRITE
 2

	)

329 
	#FD_RAW_NO_MOTOR
 4

	)

330 
	#FD_RAW_DISK_CHANGE
 4

	)

331 
	#FD_RAW_INTR
 8

	)

332 
	#FD_RAW_SPIN
 0x10

	)

333 
	#FD_RAW_NO_MOTOR_AFTER
 0x20

	)

335 
	#FD_RAW_NEED_DISK
 0x40

	)

336 
	#FD_RAW_NEED_SEEK
 0x80

	)

339 
	#FD_RAW_MORE
 0x100

	)

340 
	#FD_RAW_STOP_IF_FAILURE
 0x200

	)

341 
	#FD_RAW_STOP_IF_SUCCESS
 0x400

	)

342 
	#FD_RAW_SOFTFAILURE
 0x800

	)

346 
	#FD_RAW_FAILURE
 0x10000

	)

347 
	#FD_RAW_HARDFAILURE
 0x20000

	)

349 *
	md©a
;

350 *
	mkî√l_d©a
;

351 
Ê›py_øw_cmd
 *
	m√xt
;

353 
	mÀngth
;

354 
	mphys_Àngth
;

355 
	mbuf„r_Àngth
;

357 
	møã
;

358 
	mcmd_cou¡
;

359 
	mcmd
[16];

360 
	mª∂y_cou¡
;

361 
	mª∂y
[16];

362 
	måack
;

363 
	mªsu…code
;

365 
	mª£rved1
;

366 
	mª£rved2
;

369 
	#FDRAWCMD
 
	`_IO
(2, 0x58)

	)

373 
	#FDTWADDLE
 
	`_IO
(2, 0x59)

	)

377 
	#FDEJECT
 
	`_IO
(2, 0x5a)

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/blk_ty≥s.h
>

12 
	~<löux/ty≥s.h
>

25 #unde‡
NR_OPEN


26 
	#INR_OPEN_CUR
 1024

	)

27 
	#INR_OPEN_MAX
 4096

	)

29 
	#BLOCK_SIZE_BITS
 10

	)

30 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

32 
	#SEEK_SET
 0

	)

33 
	#SEEK_CUR
 1

	)

34 
	#SEEK_END
 2

	)

35 
	#SEEK_DATA
 3

	)

36 
	#SEEK_HOLE
 4

	)

37 
	#SEEK_MAX
 
SEEK_HOLE


	)

39 
	sf°rim_ønge
 {

40 
__u64
 
	m°¨t
;

41 
__u64
 
	mÀn
;

42 
__u64
 
	mmöÀn
;

46 
	sfûes_°©_°ru˘
 {

47 
	mƒ_fûes
;

48 
	mƒ_‰ì_fûes
;

49 
	mmax_fûes
;

52 
	söodes_°©_t
 {

53 
	mƒ_öodes
;

54 
	mƒ_unu£d
;

55 
	mdummy
[5];

59 
	#NR_FILE
 8192

	)

61 
	#MAY_EXEC
 0x00000001

	)

62 
	#MAY_WRITE
 0x00000002

	)

63 
	#MAY_READ
 0x00000004

	)

64 
	#MAY_APPEND
 0x00000008

	)

65 
	#MAY_ACCESS
 0x00000010

	)

66 
	#MAY_OPEN
 0x00000020

	)

67 
	#MAY_CHDIR
 0x00000040

	)

69 
	#MAY_NOT_BLOCK
 0x00000080

	)

77 
	#FMODE_READ
 ((
fmode_t
)0x1)

	)

79 
	#FMODE_WRITE
 ((
fmode_t
)0x2)

	)

81 
	#FMODE_LSEEK
 ((
fmode_t
)0x4)

	)

83 
	#FMODE_PREAD
 ((
fmode_t
)0x8)

	)

85 
	#FMODE_PWRITE
 ((
fmode_t
)0x10)

	)

87 
	#FMODE_EXEC
 ((
fmode_t
)0x20)

	)

89 
	#FMODE_NDELAY
 ((
fmode_t
)0x40)

	)

91 
	#FMODE_EXCL
 ((
fmode_t
)0x80)

	)

94 
	#FMODE_WRITE_IOCTL
 ((
fmode_t
)0x100)

	)

102 
	#FMODE_NOCMTIME
 ((
fmode_t
)0x800)

	)

105 
	#FMODE_RANDOM
 ((
fmode_t
)0x1000)

	)

108 
	#FMODE_UNSIGNED_OFFSET
 ((
fmode_t
)0x2000)

	)

111 
	#FMODE_PATH
 ((
fmode_t
)0x4000)

	)

114 
	#FMODE_NONOTIFY
 ((
fmode_t
)0x1000000)

	)

158 
	#RW_MASK
 
REQ_WRITE


	)

159 
	#RWA_MASK
 
REQ_RAHEAD


	)

161 
	#READ
 0

	)

162 
	#WRITE
 
RW_MASK


	)

163 
	#READA
 
RWA_MASK


	)

165 
	#READ_SYNC
 (
READ
 | 
REQ_SYNC
)

	)

166 
	#WRITE_SYNC
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
)

	)

167 
	#WRITE_ODIRECT
 (
WRITE
 | 
REQ_SYNC
)

	)

168 
	#WRITE_FLUSH
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
)

	)

169 
	#WRITE_FUA
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FUA
)

	)

170 
	#WRITE_FLUSH_FUA
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
 | 
REQ_FUA
)

	)

172 
	#SEL_IN
 1

	)

173 
	#SEL_OUT
 2

	)

174 
	#SEL_EX
 4

	)

177 
	#FS_REQUIRES_DEV
 1

	)

178 
	#FS_BINARY_MOUNTDATA
 2

	)

179 
	#FS_HAS_SUBTYPE
 4

	)

180 
	#FS_REVAL_DOT
 16384

	)

181 
	#FS_RENAME_DOES_D_MOVE
 32768

	)

188 
	#MS_RDONLY
 1

	)

189 
	#MS_NOSUID
 2

	)

190 
	#MS_NODEV
 4

	)

191 
	#MS_NOEXEC
 8

	)

192 
	#MS_SYNCHRONOUS
 16

	)

193 
	#MS_REMOUNT
 32

	)

194 
	#MS_MANDLOCK
 64

	)

195 
	#MS_DIRSYNC
 128

	)

196 
	#MS_NOATIME
 1024

	)

197 
	#MS_NODIRATIME
 2048

	)

198 
	#MS_BIND
 4096

	)

199 
	#MS_MOVE
 8192

	)

200 
	#MS_REC
 16384

	)

201 
	#MS_VERBOSE
 32768

	)

203 
	#MS_SILENT
 32768

	)

204 
	#MS_POSIXACL
 (1<<16Ë

	)

205 
	#MS_UNBINDABLE
 (1<<17Ë

	)

206 
	#MS_PRIVATE
 (1<<18Ë

	)

207 
	#MS_SLAVE
 (1<<19Ë

	)

208 
	#MS_SHARED
 (1<<20Ë

	)

209 
	#MS_RELATIME
 (1<<21Ë

	)

210 
	#MS_KERNMOUNT
 (1<<22Ë

	)

211 
	#MS_I_VERSION
 (1<<23Ë

	)

212 
	#MS_STRICTATIME
 (1<<24Ë

	)

213 
	#MS_NOSEC
 (1<<28)

	)

214 
	#MS_BORN
 (1<<29)

	)

215 
	#MS_ACTIVE
 (1<<30)

	)

216 
	#MS_NOUSER
 (1<<31)

	)

221 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

226 
	#MS_MGC_VAL
 0xC0ED0000

	)

227 
	#MS_MGC_MSK
 0xffff0000

	)

231 
	#S_SYNC
 1

	)

232 
	#S_NOATIME
 2

	)

233 
	#S_APPEND
 4

	)

234 
	#S_IMMUTABLE
 8

	)

235 
	#S_DEAD
 16

	)

236 
	#S_NOQUOTA
 32

	)

237 
	#S_DIRSYNC
 64

	)

238 
	#S_NOCMTIME
 128

	)

239 
	#S_SWAPFILE
 256

	)

240 
	#S_PRIVATE
 512

	)

241 
	#S_IMA
 1024

	)

242 
	#S_AUTOMOUNT
 2048

	)

243 
	#S_NOSEC
 4096

	)

258 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

260 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

261 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
) || \

262 ((
öode
)->
i_Êags
 & 
S_SYNC
))

	)

263 
	#IS_DIRSYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
|
MS_DIRSYNC
) || \

264 ((
öode
)->
i_Êags
 & (
S_SYNC
|
S_DIRSYNC
)))

	)

265 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

266 
	#IS_NOATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_RDONLY
|
MS_NOATIME
)

	)

267 
	#IS_I_VERSION
(
öode
Ë
	`__IS_FLG
(öode, 
MS_I_VERSION
)

	)

269 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

270 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

271 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

272 
	#IS_POSIXACL
(
öode
Ë
	`__IS_FLG
(öode, 
MS_POSIXACL
)

	)

274 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

275 
	#IS_NOCMTIME
(
öode
Ë((öode)->
i_Êags
 & 
S_NOCMTIME
)

	)

276 
	#IS_SWAPFILE
(
öode
Ë((öode)->
i_Êags
 & 
S_SWAPFILE
)

	)

277 
	#IS_PRIVATE
(
öode
Ë((öode)->
i_Êags
 & 
S_PRIVATE
)

	)

278 
	#IS_IMA
(
öode
Ë((öode)->
i_Êags
 & 
S_IMA
)

	)

279 
	#IS_AUTOMOUNT
(
öode
Ë((öode)->
i_Êags
 & 
S_AUTOMOUNT
)

	)

280 
	#IS_NOSEC
(
öode
Ë((öode)->
i_Êags
 & 
S_NOSEC
)

	)

285 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

286 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

287 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

288 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

289 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

290 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

291 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

292 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

293 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

294 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

295 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

296 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

298 
	#BLKPG
 
	`_IO
(0x12,105)

	)

302 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

303 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

308 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

309 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

310 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

311 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

312 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

313 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

314 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

315 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

316 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

317 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

318 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

319 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

320 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

321 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

323 
	#BMAP_IOCTL
 1

	)

324 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

325 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

326 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

327 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

328 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

330 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

331 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

332 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

333 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

334 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

335 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

336 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

337 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

338 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

343 
	#FS_SECRM_FL
 0x00000001

	)

344 
	#FS_UNRM_FL
 0x00000002

	)

345 
	#FS_COMPR_FL
 0x00000004

	)

346 
	#FS_SYNC_FL
 0x00000008

	)

347 
	#FS_IMMUTABLE_FL
 0x00000010

	)

348 
	#FS_APPEND_FL
 0x00000020

	)

349 
	#FS_NODUMP_FL
 0x00000040

	)

350 
	#FS_NOATIME_FL
 0x00000080

	)

352 
	#FS_DIRTY_FL
 0x00000100

	)

353 
	#FS_COMPRBLK_FL
 0x00000200

	)

354 
	#FS_NOCOMP_FL
 0x00000400

	)

355 
	#FS_ECOMPR_FL
 0x00000800

	)

357 
	#FS_BTREE_FL
 0x00001000

	)

358 
	#FS_INDEX_FL
 0x00001000

	)

359 
	#FS_IMAGIC_FL
 0x00002000

	)

360 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

361 
	#FS_NOTAIL_FL
 0x00008000

	)

362 
	#FS_DIRSYNC_FL
 0x00010000

	)

363 
	#FS_TOPDIR_FL
 0x00020000

	)

364 
	#FS_EXTENT_FL
 0x00080000

	)

365 
	#FS_DIRECTIO_FL
 0x00100000

	)

366 
	#FS_NOCOW_FL
 0x00800000

	)

367 
	#FS_RESERVED_FL
 0x80000000

	)

369 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

370 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

373 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

374 
	#SYNC_FILE_RANGE_WRITE
 2

	)

375 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

26 
	#CLONE_NEWUTS
 0x04000000

	)

27 
	#CLONE_NEWIPC
 0x08000000

	)

28 
	#CLONE_NEWUSER
 0x10000000

	)

29 
	#CLONE_NEWPID
 0x20000000

	)

30 
	#CLONE_NEWNET
 0x40000000

	)

31 
	#CLONE_IO
 0x80000000

	)

36 
	#SCHED_NORMAL
 0

	)

37 
	#SCHED_FIFO
 1

	)

38 
	#SCHED_RR
 2

	)

39 
	#SCHED_BATCH
 3

	)

41 
	#SCHED_IDLE
 5

	)

43 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/linux/unistd.h

1 #i‚de‡
_LINUX_UNISTD_H_


2 
	#_LINUX_UNISTD_H_


	)

7 
	~<asm/uni°d.h
>

	@/usr/include/mntent.h

20 #i‚def 
_MNTENT_H


21 
	#_MNTENT_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_FILE


	)

25 
	~<°dio.h
>

26 
	~<∑ths.h
>

30 
	#MNTTAB
 
_PATH_MNTTAB


	)

33 
	#MOUNTED
 
_PATH_MOUNTED


	)

37 
	#MNTTYPE_IGNORE
 "ign‹e"

	)

38 
	#MNTTYPE_NFS
 "nfs"

	)

39 
	#MNTTYPE_SWAP
 "sw≠"

	)

43 
	#MNTOPT_DEFAULTS
 "deÁu…s"

	)

44 
	#MNTOPT_RO
 "ro"

	)

45 
	#MNTOPT_RW
 "rw"

	)

46 
	#MNTOPT_SUID
 "suid"

	)

47 
	#MNTOPT_NOSUID
 "nosuid"

	)

48 
	#MNTOPT_NOAUTO
 "nﬂuto"

	)

51 
__BEGIN_DECLS


54 
	sm¡ít


56 *
	mm¡_f¢ame
;

57 *
	mm¡_dú
;

58 *
	mm¡_ty≥
;

59 *
	mm¡_›ts
;

60 
	mm¡_‰eq
;

61 
	mm¡_∑s¢o
;

67 
FILE
 *
	$£tm¡ít
 (
__c⁄°
 *
__fûe
, __c⁄° *
__mode
Ë
__THROW
;

72 
m¡ít
 *
	$gëm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

74 #ifde‡
__USE_MISC


76 
m¡ít
 *
	$gëm¡ít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

77 
m¡ít
 *
__ª°ri˘
 
__ªsu…
,

78 *
__ª°ri˘
 
__buf„r
,

79 
__bufsize
Ë
__THROW
;

84 
	$addm¡ít
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

85 
__c⁄°
 
m¡ít
 *
__ª°ri˘
 
__m¡
Ë
__THROW
;

88 
	$ídm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

92 *
	$hasm¡›t
 (
__c⁄°
 
m¡ít
 *
__m¡
,

93 
__c⁄°
 *
__›t
Ë
__THROW
;

96 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 #ifde‡
__GNUC__


400 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

401 (
__exãnsi⁄__
 \

402 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

403 
__a
->
s6_addr32
[0] == 0 \

404 && 
__a
->
s6_addr32
[1] == 0 \

405 && 
__a
->
s6_addr32
[2] == 0 \

406 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

408 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

409 (
__exãnsi⁄__
 \

410 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

411 
__a
->
s6_addr32
[0] == 0 \

412 && 
__a
->
s6_addr32
[1] == 0 \

413 && 
__a
->
s6_addr32
[2] == 0 \

414 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

416 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

417 (
__exãnsi⁄__
 \

418 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

419 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

421 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

422 (
__exãnsi⁄__
 \

423 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

424 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

426 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
s6_addr32
[0] == 0 \

430 && 
__a
->
s6_addr32
[1] == 0 \

431 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

433 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

434 (
__exãnsi⁄__
 \

435 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

436 
__a
->
s6_addr32
[0] == 0 \

437 && 
__a
->
s6_addr32
[1] == 0 \

438 && 
__a
->
s6_addr32
[2] == 0 \

439 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

441 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

442 (
__exãnsi⁄__
 \

443 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

444 
__c⁄°
 
ö6_addr
 *
__b
 = (__c⁄° ö6_add∏*Ë(
b
); \

445 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

446 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

447 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

448 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

450 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

451 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

452 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

453 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

454 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

456 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

457 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

458 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

459 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

460 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

462 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

463 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

464 =
	`ht⁄l
 (0x„800000))

	)

466 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

467 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

468 =
	`ht⁄l
 (0x„c00000))

	)

470 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

471 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

472 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

473 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

475 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

476 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

477 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

478 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

479 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

481 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

482 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

483 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

484 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

485 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

488 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

490 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


492 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

495 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

496 
__THROW
;

500 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

501 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

502 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

504 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

505 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

506 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

508 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

509 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

510 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

512 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

513 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

514 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

516 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

517 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

518 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

521 #ifde‡
__USE_GNU


523 
	sö6_pktöfo


525 
ö6_addr
 
ùi6_addr
;

526 
ùi6_ifödex
;

530 
	sù6_mtuöfo


532 
sockaddr_ö6
 
ù6m_addr
;

533 
uöt32_t
 
ù6m_mtu
;

538 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

539 
__THROW
 
__©åibuã_dïªˇãd__
;

540 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

541 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

542 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

543 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

544 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

545 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

546 
__mu…x
, 
__∂usy
)

547 
__THROW
 
__©åibuã_dïªˇãd__
;

548 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

549 
uöt8_t
 **
__çåp
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

552 
uöt8_t
 **
__çåp
, 
__ty≥
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

558 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

559 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

560 **
__d©abuÂ
Ë
__THROW
;

561 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

562 
__THROW
;

563 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

564 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

565 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

566 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

567 **
__d©abuÂ
Ë
__THROW
;

568 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

569 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

570 **
__d©abuÂ
Ë
__THROW
;

571 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

572 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

577 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

578 
__£gmíts
Ë
__THROW
;

579 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

580 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

581 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

582 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

583 
__THROW
;

589 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

590 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

591 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

592 
__THROW
;

595 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

596 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

597 
uöt32_t
 
__num§c
,

598 
__c⁄°
 
ö_addr
 *
__¶i°
)

599 
__THROW
;

603 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

604 
__c⁄°
 
sockaddr
 *
__group
,

605 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
,

607 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

610 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

611 
__c⁄°
 
sockaddr
 *
__group
,

612 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

613 
uöt32_t
 
__num§c
,

614 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

617 
__END_DECLS


	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/lib/misc/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/sys/file.h

19 #i‚def 
_SYS_FILE_H


20 
	#_SYS_FILE_H
 1

	)

22 
	~<„©uªs.h
>

24 #i‚def 
_FCNTL_H


25 
	~<f˙é.h
>

28 
	g__BEGIN_DECLS


33 #i‚de‡
L_SET


34 
	#L_SET
 0

	)

35 
	#L_INCR
 1

	)

36 
	#L_XTND
 2

	)

41 
	#LOCK_SH
 1

	)

42 
	#LOCK_EX
 2

	)

43 
	#LOCK_UN
 8

	)

46 
	#LOCK_NB
 4

	)

51 
	$Êock
 (
__fd
, 
__›î©i⁄
Ë
__THROW
;

54 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/mount.h

22 #i‚de‡
_SYS_MOUNT_H


23 
	#_SYS_MOUNT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<sys/io˘l.h
>

28 
	#BLOCK_SIZE
 1024

	)

29 
	#BLOCK_SIZE_BITS
 10

	)

36 
	mMS_RDONLY
 = 1,

37 
	#MS_RDONLY
 
MS_RDONLY


	)

38 
	mMS_NOSUID
 = 2,

39 
	#MS_NOSUID
 
MS_NOSUID


	)

40 
	mMS_NODEV
 = 4,

41 
	#MS_NODEV
 
MS_NODEV


	)

42 
	mMS_NOEXEC
 = 8,

43 
	#MS_NOEXEC
 
MS_NOEXEC


	)

44 
	mMS_SYNCHRONOUS
 = 16,

45 
	#MS_SYNCHRONOUS
 
MS_SYNCHRONOUS


	)

46 
	mMS_REMOUNT
 = 32,

47 
	#MS_REMOUNT
 
MS_REMOUNT


	)

48 
	mMS_MANDLOCK
 = 64,

49 
	#MS_MANDLOCK
 
MS_MANDLOCK


	)

50 
	mMS_DIRSYNC
 = 128,

51 
	#MS_DIRSYNC
 
MS_DIRSYNC


	)

52 
	mMS_NOATIME
 = 1024,

53 
	#MS_NOATIME
 
MS_NOATIME


	)

54 
	mMS_NODIRATIME
 = 2048,

55 
	#MS_NODIRATIME
 
MS_NODIRATIME


	)

56 
	mMS_BIND
 = 4096,

57 
	#MS_BIND
 
MS_BIND


	)

58 
	mMS_MOVE
 = 8192,

59 
	#MS_MOVE
 
MS_MOVE


	)

60 
	mMS_REC
 = 16384,

61 
	#MS_REC
 
MS_REC


	)

62 
	mMS_SILENT
 = 32768,

63 
	#MS_SILENT
 
MS_SILENT


	)

64 
	mMS_POSIXACL
 = 1 << 16,

65 
	#MS_POSIXACL
 
MS_POSIXACL


	)

66 
	mMS_UNBINDABLE
 = 1 << 17,

67 
	#MS_UNBINDABLE
 
MS_UNBINDABLE


	)

68 
	mMS_PRIVATE
 = 1 << 18,

69 
	#MS_PRIVATE
 
MS_PRIVATE


	)

70 
	mMS_SLAVE
 = 1 << 19,

71 
	#MS_SLAVE
 
MS_SLAVE


	)

72 
	mMS_SHARED
 = 1 << 20,

73 
	#MS_SHARED
 
MS_SHARED


	)

74 
	mMS_RELATIME
 = 1 << 21,

75 
	#MS_RELATIME
 
MS_RELATIME


	)

76 
	mMS_KERNMOUNT
 = 1 << 22,

77 
	#MS_KERNMOUNT
 
MS_KERNMOUNT


	)

78 
	mMS_I_VERSION
 = 1 << 23,

79 
	#MS_I_VERSION
 
MS_I_VERSION


	)

80 
	mMS_STRICTATIME
 = 1 << 24,

81 
	#MS_STRICTATIME
 
MS_STRICTATIME


	)

82 
	mMS_ACTIVE
 = 1 << 30,

83 
	#MS_ACTIVE
 
MS_ACTIVE


	)

84 
	mMS_NOUSER
 = 1 << 31

85 
	#MS_NOUSER
 
MS_NOUSER


	)

89 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

94 
	#MS_MGC_VAL
 0xc0ed0000

	)

95 
	#MS_MGC_MSK
 0xffff0000

	)

102 
	#BLKROSET
 
	`_IO
(0x12, 93Ë

	)

103 
	#BLKROGET
 
	`_IO
(0x12, 94Ë

	)

104 
	#BLKRRPART
 
	`_IO
(0x12, 95Ë

	)

105 
	#BLKGETSIZE
 
	`_IO
(0x12, 96Ë

	)

106 
	#BLKFLSBUF
 
	`_IO
(0x12, 97Ë

	)

107 
	#BLKRASET
 
	`_IO
(0x12, 98Ë

	)

108 
	#BLKRAGET
 
	`_IO
(0x12, 99Ë

	)

109 
	#BLKFRASET
 
	`_IO
(0x12,100Ë

	)

110 
	#BLKFRAGET
 
	`_IO
(0x12,101Ë

	)

111 
	#BLKSECTSET
 
	`_IO
(0x12,102Ë

	)

112 
	#BLKSECTGET
 
	`_IO
(0x12,103Ë

	)

113 
	#BLKSSZGET
 
	`_IO
(0x12,104Ë

	)

114 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

115 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

116 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

122 
	mMNT_FORCE
 = 1,

123 
	#MNT_FORCE
 
MNT_FORCE


	)

124 
	mMNT_DETACH
 = 2,

125 
	#MNT_DETACH
 
MNT_DETACH


	)

126 
	mMNT_EXPIRE
 = 4,

127 
	#MNT_EXPIRE
 
MNT_EXPIRE


	)

128 
	mUMOUNT_NOFOLLOW
 = 8

129 
	#UMOUNT_NOFOLLOW
 
UMOUNT_NOFOLLOW


	)

133 
__BEGIN_DECLS


136 
	$mou¡
 (
__c⁄°
 *
__•ecül_fûe
, __c⁄° *
__dú
,

137 
__c⁄°
 *
__f°y≥
, 
__rwÊag
,

138 
__c⁄°
 *
__d©a
Ë
__THROW
;

141 
	$umou¡
 (
__c⁄°
 *
__•ecül_fûe
Ë
__THROW
;

144 
	$umou¡2
 (
__c⁄°
 *
__•ecül_fûe
, 
__Êags
Ë
__THROW
;

146 
__END_DECLS


	@/usr/include/sys/param.h

20 #i‚de‡
_SYS_PARAM_H


21 
	#_SYS_PARAM_H
 1

	)

23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<limôs.h
>

28 
	~<löux/limôs.h
>

29 
	~<löux/∑øm.h
>

32 #ifde‡
__undef_ARG_MAX


33 #unde‡
ARG_MAX


34 #unde‡
__undef_ARG_MAX


39 
	#NBBY
 
CHAR_BIT


	)

40 #i‚def 
NGROUPS


41 
	#NGROUPS
 
NGROUPS_MAX


	)

43 
	#MAXSYMLINKS
 20

	)

44 
	#CANBSIZ
 
MAX_CANON


	)

45 
	#MAXPATHLEN
 
PATH_MAX


	)

49 
	#NOFILE
 256

	)

50 
	#NCARGS
 131072

	)

53 
	~<sys/ty≥s.h
>

56 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

57 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

58 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

59 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

62 #i‚de‡
howm™y


63 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

65 #ifde‡
__GNUC__


66 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

67 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

68 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

70 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

72 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

75 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

76 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

80 
	#DEV_BSIZE
 512

	)

	@/usr/include/sys/prctl.h

19 #i‚de‡
_SYS_PRCTL_H


20 
	#_SYS_PRCTL_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<löux/¥˘l.h
>

25 
__BEGIN_DECLS


28 
	$¥˘l
 (
__›ti⁄
, ...Ë
__THROW
;

30 
__END_DECLS


	@/usr/include/sys/queue.h

32 #i‚def 
_SYS_QUEUE_H_


33 
	#_SYS_QUEUE_H_


	)

84 
	#LIST_HEAD
(
«me
, 
ty≥
) \

85 
	s«me
 { \

86 
ty≥
 *
lh_fú°
; \

87 }

	)

89 
	#LIST_HEAD_INITIALIZER
(
hód
) \

90 { 
NULL
 }

	)

92 
	#LIST_ENTRY
(
ty≥
) \

94 
ty≥
 *
À_√xt
; \

95 
ty≥
 **
À_¥ev
; \

96 }

	)

101 
	#LIST_INIT
(
hód
) do { \

102 (
hód
)->
lh_fú°
 = 
NULL
; \

103 }  0)

	)

105 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

106 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
)->fõld.À_√xtË!
NULL
) \

107 (
li°ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

108 &(
ñm
)->
fõld
.
À_√xt
; \

109 (
li°ñm
)->
fõld
.
À_√xt
 = (
ñm
); \

110 (
ñm
)->
fõld
.
À_¥ev
 = &(
li°ñm
)->fõld.
À_√xt
; \

111 }  0)

	)

113 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

114 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

115 (
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
); \

116 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

117 (
li°ñm
)->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
; \

118 }  0)

	)

120 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

121 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
hód
)->
lh_fú°
Ë!
NULL
) \

122 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
;\

123 (
hód
)->
lh_fú°
 = (
ñm
); \

124 (
ñm
)->
fõld
.
À_¥ev
 = &(
hód
)->
lh_fú°
; \

125 }  0)

	)

127 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

128 i‡((
ñm
)->
fõld
.
À_√xt
 !
NULL
) \

129 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

130 (
ñm
)->
fõld
.
À_¥ev
; \

131 *(
ñm
)->
fõld
.
À_¥ev
 = (ñm)->fõld.
À_√xt
; \

132 }  0)

	)

134 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

135 (
v¨
Ë((
hód
)->
lh_fú°
); \

136 (
v¨
); \

137 (
v¨
Ë((v¨)->
fõld
.
À_√xt
))

	)

142 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

143 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

144 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

150 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

151 
	s«me
 { \

152 
ty≥
 *
¶h_fú°
; \

153 }

	)

155 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

156 { 
NULL
 }

	)

158 
	#SLIST_ENTRY
(
ty≥
) \

160 
ty≥
 *
¶e_√xt
; \

161 }

	)

166 
	#SLIST_INIT
(
hód
) do { \

167 (
hód
)->
¶h_fú°
 = 
NULL
; \

168 }  0)

	)

170 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

171 (
ñm
)->
fõld
.
¶e_√xt
 = (
¶i°ñm
)->field.sle_next; \

172 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = (
ñm
); \

173 }  0)

	)

175 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

176 (
ñm
)->
fõld
.
¶e_√xt
 = (
hód
)->
¶h_fú°
; \

177 (
hód
)->
¶h_fú°
 = (
ñm
); \

178 }  0)

	)

180 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

181 (
hód
)->
¶h_fú°
 = (hód)->¶h_fú°->
fõld
.
¶e_√xt
; \

182 }  0)

	)

184 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

185 i‡((
hód
)->
¶h_fú°
 =(
ñm
)) { \

186 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

189 
ty≥
 *
cuªlm
 = (
hód
)->
¶h_fú°
; \

190 
cuªlm
->
fõld
.
¶e_√xt
 !(
ñm
)) \

191 
cuªlm
 = cuªlm->
fõld
.
¶e_√xt
; \

192 
cuªlm
->
fõld
.
¶e_√xt
 = \

193 
cuªlm
->
fõld
.
¶e_√xt
->field.sle_next; \

195 }  0)

	)

197 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

198 (
v¨
Ë(
hód
)->
¶h_fú°
; (v¨); (v¨Ë(v¨)->
fõld
.
¶e_√xt
)

	)

203 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

204 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

205 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

211 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

212 
	s«me
 { \

213 
ty≥
 *
°qh_fú°
; \

214 
ty≥
 **
°qh_œ°
; \

215 }

	)

217 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

218 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

220 
	#STAILQ_ENTRY
(
ty≥
) \

222 
ty≥
 *
°qe_√xt
; \

223 }

	)

228 
	#STAILQ_INIT
(
hód
) do { \

229 (
hód
)->
°qh_fú°
 = 
NULL
; \

230 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

231 }  0)

	)

233 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

234 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
hód
)->
°qh_fú°
Ë=
NULL
) \

235 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

236 (
hód
)->
°qh_fú°
 = (
ñm
); \

237 }  0)

	)

239 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

240 (
ñm
)->
fõld
.
°qe_√xt
 = 
NULL
; \

241 *(
hód
)->
°qh_œ°
 = (
ñm
); \

242 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

243 }  0)

	)

245 
	#STAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

246 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
li°ñm
)->fõld.°qe_√xtË=
NULL
)\

247 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

248 (
li°ñm
)->
fõld
.
°qe_√xt
 = (
ñm
); \

249 }  0)

	)

251 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

252 i‡(((
hód
)->
°qh_fú°
 = (hód)->°qh_fú°->
fõld
.
°qe_√xt
Ë=
NULL
) \

253 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

254 }  0)

	)

256 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

257 i‡((
hód
)->
°qh_fú°
 =(
ñm
)) { \

258 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

260 
ty≥
 *
cuªlm
 = (
hód
)->
°qh_fú°
; \

261 
cuªlm
->
fõld
.
°qe_√xt
 !(
ñm
)) \

262 
cuªlm
 = cuªlm->
fõld
.
°qe_√xt
; \

263 i‡((
cuªlm
->
fõld
.
°qe_√xt
 = \

264 
cuªlm
->
fõld
.
°qe_√xt
->fõld.°qe_√xtË=
NULL
) \

265 (
hód
)->
°qh_œ°
 = &(
cuªlm
)->
fõld
.
°qe_√xt
; \

267 }  0)

	)

269 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

270 (
v¨
Ë((
hód
)->
°qh_fú°
); \

271 (
v¨
); \

272 (
v¨
Ë((v¨)->
fõld
.
°qe_√xt
))

	)

274 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

275 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

276 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

277 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

278 
	`STAILQ_INIT
((
hód2
)); \

280 }  0)

	)

285 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

286 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

287 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

293 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

294 
	s«me
 { \

295 
ty≥
 *
sqh_fú°
; \

296 
ty≥
 **
sqh_œ°
; \

297 }

	)

299 
	#SIMPLEQ_HEAD_INITIALIZER
(
hód
) \

300 { 
NULL
, &(
hód
).
sqh_fú°
 }

	)

302 
	#SIMPLEQ_ENTRY
(
ty≥
) \

304 
ty≥
 *
sqe_√xt
; \

305 }

	)

310 
	#SIMPLEQ_INIT
(
hód
) do { \

311 (
hód
)->
sqh_fú°
 = 
NULL
; \

312 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

313 }  0)

	)

315 
	#SIMPLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

316 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
hód
)->
sqh_fú°
Ë=
NULL
) \

317 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

318 (
hód
)->
sqh_fú°
 = (
ñm
); \

319 }  0)

	)

321 
	#SIMPLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

322 (
ñm
)->
fõld
.
sqe_√xt
 = 
NULL
; \

323 *(
hód
)->
sqh_œ°
 = (
ñm
); \

324 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

325 }  0)

	)

327 
	#SIMPLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

328 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
li°ñm
)->fõld.sqe_√xtË=
NULL
)\

329 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

330 (
li°ñm
)->
fõld
.
sqe_√xt
 = (
ñm
); \

331 }  0)

	)

333 
	#SIMPLEQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

334 i‡(((
hód
)->
sqh_fú°
 = (hód)->sqh_fú°->
fõld
.
sqe_√xt
Ë=
NULL
) \

335 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

336 }  0)

	)

338 
	#SIMPLEQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

339 i‡((
hód
)->
sqh_fú°
 =(
ñm
)) { \

340 
	`SIMPLEQ_REMOVE_HEAD
((
hód
), 
fõld
); \

342 
ty≥
 *
cuªlm
 = (
hód
)->
sqh_fú°
; \

343 
cuªlm
->
fõld
.
sqe_√xt
 !(
ñm
)) \

344 
cuªlm
 = cuªlm->
fõld
.
sqe_√xt
; \

345 i‡((
cuªlm
->
fõld
.
sqe_√xt
 = \

346 
cuªlm
->
fõld
.
sqe_√xt
->fõld.sqe_√xtË=
NULL
) \

347 (
hód
)->
sqh_œ°
 = &(
cuªlm
)->
fõld
.
sqe_√xt
; \

349 }  0)

	)

351 
	#SIMPLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

352 (
v¨
Ë((
hód
)->
sqh_fú°
); \

353 (
v¨
); \

354 (
v¨
Ë((v¨)->
fõld
.
sqe_√xt
))

	)

359 
	#SIMPLEQ_EMPTY
(
hód
Ë((hód)->
sqh_fú°
 =
NULL
)

	)

360 
	#SIMPLEQ_FIRST
(
hód
Ë((hód)->
sqh_fú°
)

	)

361 
	#SIMPLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
sqe_√xt
)

	)

367 
	#_TAILQ_HEAD
(
«me
, 
ty≥
, 
quÆ
) \

368 
	s«me
 { \

369 
quÆ
 
ty≥
 *
tqh_fú°
; \

370 
quÆ
 
ty≥
 *quÆ *
tqh_œ°
; \

371 }

	)

372 
	#TAILQ_HEAD
(
«me
, 
ty≥
Ë
	`_TAILQ_HEAD
“ame, ty≥,)

	)

374 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

375 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

377 
	#_TAILQ_ENTRY
(
ty≥
, 
quÆ
) \

379 
quÆ
 
ty≥
 *
tqe_√xt
; \

380 
quÆ
 
ty≥
 *quÆ *
tqe_¥ev
; \

381 }

	)

382 
	#TAILQ_ENTRY
(
ty≥
Ë
	`_TAILQ_ENTRY
(ty≥,)

	)

387 
	#TAILQ_INIT
(
hód
) do { \

388 (
hód
)->
tqh_fú°
 = 
NULL
; \

389 (
hód
)->
tqh_œ°
 = &(hód)->
tqh_fú°
; \

390 }  0)

	)

392 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

393 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
hód
)->
tqh_fú°
Ë!
NULL
) \

394 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = \

395 &(
ñm
)->
fõld
.
tqe_√xt
; \

397 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

398 (
hód
)->
tqh_fú°
 = (
ñm
); \

399 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
hód
)->
tqh_fú°
; \

400 }  0)

	)

402 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

403 (
ñm
)->
fõld
.
tqe_√xt
 = 
NULL
; \

404 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

405 *(
hód
)->
tqh_œ°
 = (
ñm
); \

406 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

407 }  0)

	)

409 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

410 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
)->fõld.tqe_√xtË!
NULL
)\

411 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

412 &(
ñm
)->
fõld
.
tqe_√xt
; \

414 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

415 (
li°ñm
)->
fõld
.
tqe_√xt
 = (
ñm
); \

416 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
li°ñm
)->fõld.
tqe_√xt
; \

417 }  0)

	)

419 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

420 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

421 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

422 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

423 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

424 }  0)

	)

426 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

427 i‡(((
ñm
)->
fõld
.
tqe_√xt
Ë!
NULL
) \

428 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

429 (
ñm
)->
fõld
.
tqe_¥ev
; \

431 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

432 *(
ñm
)->
fõld
.
tqe_¥ev
 = (ñm)->fõld.
tqe_√xt
; \

433 }  0)

	)

435 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

436 (
v¨
Ë((
hód
)->
tqh_fú°
); \

437 (
v¨
); \

438 (
v¨
Ë((v¨)->
fõld
.
tqe_√xt
))

	)

440 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

441 (
v¨
Ë(*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_last)); \

442 (
v¨
); \

443 (
v¨
Ë(*(((
hód«me
 *)((v¨)->
fõld
.
tqe_¥ev
))->
tqh_œ°
)))

	)

445 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

446 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

447 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

448 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

449 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

450 
	`TAILQ_INIT
((
hód2
)); \

452 }  0)

	)

457 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

458 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

459 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

461 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

462 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

463 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

464 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

470 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

471 
	s«me
 { \

472 
ty≥
 *
cqh_fú°
; \

473 
ty≥
 *
cqh_œ°
; \

474 }

	)

476 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

477 { (*)&
hód
, (*)&hód }

	)

479 
	#CIRCLEQ_ENTRY
(
ty≥
) \

481 
ty≥
 *
cqe_√xt
; \

482 
ty≥
 *
cqe_¥ev
; \

483 }

	)

488 
	#CIRCLEQ_INIT
(
hód
) do { \

489 (
hód
)->
cqh_fú°
 = (*)(head); \

490 (
hód
)->
cqh_œ°
 = (*)(head); \

491 }  0)

	)

493 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

494 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
)->field.cqe_next; \

495 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
); \

496 i‡((
li°ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

497 (
hód
)->
cqh_œ°
 = (
ñm
); \

499 (
li°ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (
ñm
); \

500 (
li°ñm
)->
fõld
.
cqe_√xt
 = (
ñm
); \

501 }  0)

	)

503 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

504 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
); \

505 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
)->field.cqe_prev; \

506 i‡((
li°ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

507 (
hód
)->
cqh_fú°
 = (
ñm
); \

509 (
li°ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (
ñm
); \

510 (
li°ñm
)->
fõld
.
cqe_¥ev
 = (
ñm
); \

511 }  0)

	)

513 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

514 (
ñm
)->
fõld
.
cqe_√xt
 = (
hód
)->
cqh_fú°
; \

515 (
ñm
)->
fõld
.
cqe_¥ev
 = (*)(
hód
); \

516 i‡((
hód
)->
cqh_œ°
 == (*)(head)) \

517 (
hód
)->
cqh_œ°
 = (
ñm
); \

519 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 = (
ñm
); \

520 (
hód
)->
cqh_fú°
 = (
ñm
); \

521 }  0)

	)

523 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

524 (
ñm
)->
fõld
.
cqe_√xt
 = (*)(
hód
); \

525 (
ñm
)->
fõld
.
cqe_¥ev
 = (
hód
)->
cqh_œ°
; \

526 i‡((
hód
)->
cqh_fú°
 == (*)(head)) \

527 (
hód
)->
cqh_fú°
 = (
ñm
); \

529 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 = (
ñm
); \

530 (
hód
)->
cqh_œ°
 = (
ñm
); \

531 }  0)

	)

533 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

534 i‡((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

535 (
hód
)->
cqh_œ°
 = (
ñm
)->
fõld
.
cqe_¥ev
; \

537 (
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = \

538 (
ñm
)->
fõld
.
cqe_¥ev
; \

539 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

540 (
hód
)->
cqh_fú°
 = (
ñm
)->
fõld
.
cqe_√xt
; \

542 (
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = \

543 (
ñm
)->
fõld
.
cqe_√xt
; \

544 }  0)

	)

546 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

547 (
v¨
Ë((
hód
)->
cqh_fú°
); \

548 (
v¨
Ë!(c⁄° *)(
hód
); \

549 (
v¨
Ë((v¨)->
fõld
.
cqe_√xt
))

	)

551 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

552 (
v¨
Ë((
hód
)->
cqh_œ°
); \

553 (
v¨
Ë!(c⁄° *)(
hód
); \

554 (
v¨
Ë((v¨)->
fõld
.
cqe_¥ev
))

	)

559 
	#CIRCLEQ_EMPTY
(
hód
Ë((hód)->
cqh_fú°
 =(*)(hód))

	)

560 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

561 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

562 
	#CIRCLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

563 
	#CIRCLEQ_PREV
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

565 
	#CIRCLEQ_LOOP_NEXT
(
hód
, 
ñm
, 
fõld
) \

566 (((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

567 ? ((
hód
)->
cqh_fú°
) \

568 : (
ñm
->
fõld
.
cqe_√xt
))

	)

569 
	#CIRCLEQ_LOOP_PREV
(
hód
, 
ñm
, 
fõld
) \

570 (((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

571 ? ((
hód
)->
cqh_œ°
) \

572 : (
ñm
->
fõld
.
cqe_¥ev
))

	)

	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


60 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

61 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

62 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

69 #ifde‡
__USE_XOPEN


70 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

71 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

73 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

74 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

76 } 
	tfd_£t
;

79 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

81 #ifde‡
__USE_MISC


83 
__fd_mask
 
	tfd_mask
;

86 
	#NFDBITS
 
__NFDBITS


	)

91 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

92 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

93 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

94 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

97 
__BEGIN_DECLS


107 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

108 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

109 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

110 
timevÆ
 *
__ª°ri˘
 
__timeout
);

112 #ifde‡
__USE_XOPEN2K


119 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

120 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

121 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

122 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

123 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


129 
	~<bôs/£À˘2.h
>

132 
	g__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

149 #ñi‡
deföed
 
__USE_XOPEN2K


150 
	#S_ISSOCK
(
mode
Ë0

	)

157 #ifdef 
__USE_POSIX199309


158 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

159 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

160 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

166 
	#S_ISUID
 
__S_ISUID


	)

167 
	#S_ISGID
 
__S_ISGID


	)

169 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


171 
	#S_ISVTX
 
__S_ISVTX


	)

174 
	#S_IRUSR
 
__S_IREAD


	)

175 
	#S_IWUSR
 
__S_IWRITE


	)

176 
	#S_IXUSR
 
__S_IEXEC


	)

178 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

180 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


181 
	#S_IREAD
 
S_IRUSR


	)

182 
	#S_IWRITE
 
S_IWUSR


	)

183 
	#S_IEXEC
 
S_IXUSR


	)

186 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

187 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

188 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

190 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

192 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

193 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

194 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

196 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

199 #ifdef 
__USE_BSD


201 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

202 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

203 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

205 
	#S_BLKSIZE
 512

	)

209 #i‚de‡
__USE_FILE_OFFSET64


211 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

212 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

216 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

218 #ifde‡
__REDIRECT_NTH


219 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

220 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

221 
	`__n⁄nuŒ
 ((1, 2));

222 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

223 
	`__n⁄nuŒ
 ((2));

225 
	#°©
 
°©64


	)

226 
	#f°©
 
f°©64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

231 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

232 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

235 #ifde‡
__USE_ATFILE


239 #i‚de‡
__USE_FILE_OFFSET64


240 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

242 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

244 #ifde‡
__REDIRECT_NTH


245 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

246 
°©
 *
__ª°ri˘
 
__buf
,

247 
__Êag
),

248 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

250 
	#f°©©
 
f°©©64


	)

254 #ifde‡
__USE_LARGEFILE64


255 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

256 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

257 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

261 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


262 #i‚de‡
__USE_FILE_OFFSET64


265 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

266 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
l°©
,

270 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

271 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 
	#l°©
 
l°©64


	)

277 #ifde‡
__USE_LARGEFILE64


278 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

279 
°©64
 *
__ª°ri˘
 
__buf
)

280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_BSD


293 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


299 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

302 #ifde‡
__USE_ATFILE


305 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

306 
__Êag
)

307 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

314 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

316 #ifdef 
__USE_GNU


319 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

323 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

326 #ifde‡
__USE_ATFILE


330 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

331 
__THROW
 
	`__n⁄nuŒ
 ((2));

337 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


338 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1));

341 #ifde‡
__USE_ATFILE


345 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

346 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

352 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_ATFILE


359 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2));

363 #ifde‡
__USE_ATFILE


366 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

367 
__c⁄°
 
time•ec
 
__times
[2],

368 
__Êags
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2));

372 #ifde‡
__USE_XOPEN2K8


374 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

392 #i‚de‡
_STAT_VER


393 
	#_STAT_VER
 0

	)

395 #i‚de‡
_MKNOD_VER


396 
	#_MKNOD_VER
 0

	)

400 #i‚de‡
__USE_FILE_OFFSET64


401 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

402 
__THROW
 
	`__n⁄nuŒ
 ((3));

403 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

407 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

408 
°©
 *
__°©_buf
, 
__Êag
)

409 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

411 #ifde‡
__REDIRECT_NTH


412 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

413 
°©
 *
__°©_buf
), 
__fx°©64
)

414 
	`__n⁄nuŒ
 ((3));

415 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__x°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
), 
__lx°©64
)

420 
	`__n⁄nuŒ
 ((2, 3));

421 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

422 
__c⁄°
 *
__fûíame
,

423 
°©
 *
__°©_buf
, 
__Êag
),

424 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

427 
	#__fx°©
 
__fx°©64


	)

428 
	#__x°©
 
__x°©64


	)

429 
	#__lx°©
 
__lx°©64


	)

433 #ifde‡
__USE_LARGEFILE64


434 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

435 
__THROW
 
	`__n⁄nuŒ
 ((3));

436 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

441 
°©64
 *
__°©_buf
, 
__Êag
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

444 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

445 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

447 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

448 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

449 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

451 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES_IN_LIBC


454 
__exã∫_ölöe
 

455 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

457  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

458 
	}
}

460 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
__exã∫_ölöe
 

462 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

464  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

465 
	}
}

468 
__exã∫_ölöe
 

469 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

471  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

472 
	}
}

474 #ifde‡
__USE_ATFILE


475 
__exã∫_ölöe
 

476 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

477 
__Êag
))

479  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

480 
	}
}

483 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


484 
__exã∫_ölöe
 

485 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

487  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

488 
	}
}

491 #ifde‡
__USE_ATFILE


492 
__exã∫_ölöe
 

493 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

494 
__dev_t
 
__dev
))

496  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

497 
	}
}

500 #i‡
deföed
 
__USE_LARGEFILE64
 \

501 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

502 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

503 
__exã∫_ölöe
 

504 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

506  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

507 
	}
}

509 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


510 
__exã∫_ölöe
 

511 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

513  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

514 
	}
}

517 
__exã∫_ölöe
 

518 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

520  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

521 
	}
}

523 #ifde‡
__USE_ATFILE


524 
__exã∫_ölöe
 

525 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

526 
__Êag
))

528  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

529 
	}
}

536 
	g__END_DECLS


	@/usr/include/sys/syscall.h

19 #i‚de‡
_SYSCALL_H


20 
	#_SYSCALL_H
 1

	)

25 
	~<asm/uni°d.h
>

27 #i‚de‡
_LIBC


32 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/sys/utsname.h

23 #i‚def 
_SYS_UTSNAME_H


24 
	#_SYS_UTSNAME_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ut¢ame.h
>

32 #i‚de‡
_UTSNAME_SYSNAME_LENGTH


33 
	#_UTSNAME_SYSNAME_LENGTH
 
_UTSNAME_LENGTH


	)

35 #i‚de‡
_UTSNAME_NODENAME_LENGTH


36 
	#_UTSNAME_NODENAME_LENGTH
 
_UTSNAME_LENGTH


	)

38 #i‚de‡
_UTSNAME_RELEASE_LENGTH


39 
	#_UTSNAME_RELEASE_LENGTH
 
_UTSNAME_LENGTH


	)

41 #i‚de‡
_UTSNAME_VERSION_LENGTH


42 
	#_UTSNAME_VERSION_LENGTH
 
_UTSNAME_LENGTH


	)

44 #i‚de‡
_UTSNAME_MACHINE_LENGTH


45 
	#_UTSNAME_MACHINE_LENGTH
 
_UTSNAME_LENGTH


	)

49 
	sut¢ame


52 
	msy¢ame
[
_UTSNAME_SYSNAME_LENGTH
];

55 
	mnodíame
[
_UTSNAME_NODENAME_LENGTH
];

58 
	mªÀa£
[
_UTSNAME_RELEASE_LENGTH
];

60 
	mvîsi⁄
[
_UTSNAME_VERSION_LENGTH
];

63 
	mmachöe
[
_UTSNAME_MACHINE_LENGTH
];

65 #i‡
_UTSNAME_DOMAIN_LENGTH
 - 0

67 #ifde‡
__USE_GNU


68 
	mdomaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

70 
	m__domaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

75 #ifde‡
__USE_SVID


77 
	#SYS_NMLN
 
_UTSNAME_LENGTH


	)

82 
	$u«me
 (
ut¢ame
 *
__«me
Ë
__THROW
;

85 
__END_DECLS


	@/usr/include/syscall.h

1 
	~<sys/sysˇŒ.h
>

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/utime.h

23 #i‚def 
_UTIME_H


24 
	#_UTIME_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

34 
	~<time.h
>

38 
	sutimbuf


40 
__time_t
 
	ma˘ime
;

41 
__time_t
 
	mmodtime
;

46 
	$utime
 (
__c⁄°
 *
__fûe
,

47 
__c⁄°
 
utimbuf
 *
__fûe_times
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1));

50 
__END_DECLS


	@crc16.h

15 #i‚de‡
__CRC16_H


16 
	#__CRC16_H


	)

22 
	t¸c16_t
;

24 
¸c16_t
 
ext2fs_¸c16
(¸c16_à
¸c
, c⁄° *
buf„r
, 
Àn
);

	@e2image.h

16 
	sext2_image_hdr
 {

17 
__u32
 
	mmagic_numbî
;

18 
	mmagic_des¸ùt‹
[16];

19 
	mfs_ho°«me
[64];

20 
	mfs_√èddr
[32];

21 
__u32
 
	mfs_√èddr_ty≥
;

22 
__u32
 
	mfs_devi˚
;

23 
	mfs_devi˚_«me
[64];

24 
	mfs_uuid
[16];

25 
__u32
 
	mfs_blocksize
;

26 
__u32
 
	mfs_ª£rved
[8];

28 
__u32
 
	mimage_devi˚
;

29 
__u32
 
	mimage_öode
;

30 
__u32
 
	mimage_time
;

31 
__u32
 
	mimage_ª£rved
[8];

33 
__u32
 
	moff£t_su≥r
;

34 
__u32
 
	moff£t_öode
;

35 
__u32
 
	moff£t_öodem≠
;

36 
__u32
 
	moff£t_blockm≠
;

37 
__u32
 
	moff£t_ª£rved
[8];

	@ext2_err.h

6 
	~<ë/com_îr.h
>

8 
	#EXT2_ET_BASE
 (2133571328L)

	)

9 
	#EXT2_ET_MAGIC_EXT2FS_FILSYS
 (2133571329L)

	)

10 
	#EXT2_ET_MAGIC_BADBLOCKS_LIST
 (2133571330L)

	)

11 
	#EXT2_ET_MAGIC_BADBLOCKS_ITERATE
 (2133571331L)

	)

12 
	#EXT2_ET_MAGIC_INODE_SCAN
 (2133571332L)

	)

13 
	#EXT2_ET_MAGIC_IO_CHANNEL
 (2133571333L)

	)

14 
	#EXT2_ET_MAGIC_UNIX_IO_CHANNEL
 (2133571334L)

	)

15 
	#EXT2_ET_MAGIC_IO_MANAGER
 (2133571335L)

	)

16 
	#EXT2_ET_MAGIC_BLOCK_BITMAP
 (2133571336L)

	)

17 
	#EXT2_ET_MAGIC_INODE_BITMAP
 (2133571337L)

	)

18 
	#EXT2_ET_MAGIC_GENERIC_BITMAP
 (2133571338L)

	)

19 
	#EXT2_ET_MAGIC_TEST_IO_CHANNEL
 (2133571339L)

	)

20 
	#EXT2_ET_MAGIC_DBLIST
 (2133571340L)

	)

21 
	#EXT2_ET_MAGIC_ICOUNT
 (2133571341L)

	)

22 
	#EXT2_ET_MAGIC_PQ_IO_CHANNEL
 (2133571342L)

	)

23 
	#EXT2_ET_MAGIC_EXT2_FILE
 (2133571343L)

	)

24 
	#EXT2_ET_MAGIC_E2IMAGE
 (2133571344L)

	)

25 
	#EXT2_ET_MAGIC_INODE_IO_CHANNEL
 (2133571345L)

	)

26 
	#EXT2_ET_MAGIC_EXTENT_HANDLE
 (2133571346L)

	)

27 
	#EXT2_ET_BAD_MAGIC
 (2133571347L)

	)

28 
	#EXT2_ET_REV_TOO_HIGH
 (2133571348L)

	)

29 
	#EXT2_ET_RO_FILSYS
 (2133571349L)

	)

30 
	#EXT2_ET_GDESC_READ
 (2133571350L)

	)

31 
	#EXT2_ET_GDESC_WRITE
 (2133571351L)

	)

32 
	#EXT2_ET_GDESC_BAD_BLOCK_MAP
 (2133571352L)

	)

33 
	#EXT2_ET_GDESC_BAD_INODE_MAP
 (2133571353L)

	)

34 
	#EXT2_ET_GDESC_BAD_INODE_TABLE
 (2133571354L)

	)

35 
	#EXT2_ET_INODE_BITMAP_WRITE
 (2133571355L)

	)

36 
	#EXT2_ET_INODE_BITMAP_READ
 (2133571356L)

	)

37 
	#EXT2_ET_BLOCK_BITMAP_WRITE
 (2133571357L)

	)

38 
	#EXT2_ET_BLOCK_BITMAP_READ
 (2133571358L)

	)

39 
	#EXT2_ET_INODE_TABLE_WRITE
 (2133571359L)

	)

40 
	#EXT2_ET_INODE_TABLE_READ
 (2133571360L)

	)

41 
	#EXT2_ET_NEXT_INODE_READ
 (2133571361L)

	)

42 
	#EXT2_ET_UNEXPECTED_BLOCK_SIZE
 (2133571362L)

	)

43 
	#EXT2_ET_DIR_CORRUPTED
 (2133571363L)

	)

44 
	#EXT2_ET_SHORT_READ
 (2133571364L)

	)

45 
	#EXT2_ET_SHORT_WRITE
 (2133571365L)

	)

46 
	#EXT2_ET_DIR_NO_SPACE
 (2133571366L)

	)

47 
	#EXT2_ET_NO_INODE_BITMAP
 (2133571367L)

	)

48 
	#EXT2_ET_NO_BLOCK_BITMAP
 (2133571368L)

	)

49 
	#EXT2_ET_BAD_INODE_NUM
 (2133571369L)

	)

50 
	#EXT2_ET_BAD_BLOCK_NUM
 (2133571370L)

	)

51 
	#EXT2_ET_EXPAND_DIR_ERR
 (2133571371L)

	)

52 
	#EXT2_ET_TOOSMALL
 (2133571372L)

	)

53 
	#EXT2_ET_BAD_BLOCK_MARK
 (2133571373L)

	)

54 
	#EXT2_ET_BAD_BLOCK_UNMARK
 (2133571374L)

	)

55 
	#EXT2_ET_BAD_BLOCK_TEST
 (2133571375L)

	)

56 
	#EXT2_ET_BAD_INODE_MARK
 (2133571376L)

	)

57 
	#EXT2_ET_BAD_INODE_UNMARK
 (2133571377L)

	)

58 
	#EXT2_ET_BAD_INODE_TEST
 (2133571378L)

	)

59 
	#EXT2_ET_FUDGE_BLOCK_BITMAP_END
 (2133571379L)

	)

60 
	#EXT2_ET_FUDGE_INODE_BITMAP_END
 (2133571380L)

	)

61 
	#EXT2_ET_BAD_IND_BLOCK
 (2133571381L)

	)

62 
	#EXT2_ET_BAD_DIND_BLOCK
 (2133571382L)

	)

63 
	#EXT2_ET_BAD_TIND_BLOCK
 (2133571383L)

	)

64 
	#EXT2_ET_NEQ_BLOCK_BITMAP
 (2133571384L)

	)

65 
	#EXT2_ET_NEQ_INODE_BITMAP
 (2133571385L)

	)

66 
	#EXT2_ET_BAD_DEVICE_NAME
 (2133571386L)

	)

67 
	#EXT2_ET_MISSING_INODE_TABLE
 (2133571387L)

	)

68 
	#EXT2_ET_CORRUPT_SUPERBLOCK
 (2133571388L)

	)

69 
	#EXT2_ET_BAD_GENERIC_MARK
 (2133571389L)

	)

70 
	#EXT2_ET_BAD_GENERIC_UNMARK
 (2133571390L)

	)

71 
	#EXT2_ET_BAD_GENERIC_TEST
 (2133571391L)

	)

72 
	#EXT2_ET_SYMLINK_LOOP
 (2133571392L)

	)

73 
	#EXT2_ET_CALLBACK_NOTHANDLED
 (2133571393L)

	)

74 
	#EXT2_ET_BAD_BLOCK_IN_INODE_TABLE
 (2133571394L)

	)

75 
	#EXT2_ET_UNSUPP_FEATURE
 (2133571395L)

	)

76 
	#EXT2_ET_RO_UNSUPP_FEATURE
 (2133571396L)

	)

77 
	#EXT2_ET_LLSEEK_FAILED
 (2133571397L)

	)

78 
	#EXT2_ET_NO_MEMORY
 (2133571398L)

	)

79 
	#EXT2_ET_INVALID_ARGUMENT
 (2133571399L)

	)

80 
	#EXT2_ET_BLOCK_ALLOC_FAIL
 (2133571400L)

	)

81 
	#EXT2_ET_INODE_ALLOC_FAIL
 (2133571401L)

	)

82 
	#EXT2_ET_NO_DIRECTORY
 (2133571402L)

	)

83 
	#EXT2_ET_TOO_MANY_REFS
 (2133571403L)

	)

84 
	#EXT2_ET_FILE_NOT_FOUND
 (2133571404L)

	)

85 
	#EXT2_ET_FILE_RO
 (2133571405L)

	)

86 
	#EXT2_ET_DB_NOT_FOUND
 (2133571406L)

	)

87 
	#EXT2_ET_DIR_EXISTS
 (2133571407L)

	)

88 
	#EXT2_ET_UNIMPLEMENTED
 (2133571408L)

	)

89 
	#EXT2_ET_CANCEL_REQUESTED
 (2133571409L)

	)

90 
	#EXT2_ET_FILE_TOO_BIG
 (2133571410L)

	)

91 
	#EXT2_ET_JOURNAL_NOT_BLOCK
 (2133571411L)

	)

92 
	#EXT2_ET_NO_JOURNAL_SB
 (2133571412L)

	)

93 
	#EXT2_ET_JOURNAL_TOO_SMALL
 (2133571413L)

	)

94 
	#EXT2_ET_JOURNAL_UNSUPP_VERSION
 (2133571414L)

	)

95 
	#EXT2_ET_LOAD_EXT_JOURNAL
 (2133571415L)

	)

96 
	#EXT2_ET_NO_JOURNAL
 (2133571416L)

	)

97 
	#EXT2_ET_DIRHASH_UNSUPP
 (2133571417L)

	)

98 
	#EXT2_ET_BAD_EA_BLOCK_NUM
 (2133571418L)

	)

99 
	#EXT2_ET_TOO_MANY_INODES
 (2133571419L)

	)

100 
	#EXT2_ET_NOT_IMAGE_FILE
 (2133571420L)

	)

101 
	#EXT2_ET_RES_GDT_BLOCKS
 (2133571421L)

	)

102 
	#EXT2_ET_RESIZE_INODE_CORRUPT
 (2133571422L)

	)

103 
	#EXT2_ET_SET_BMAP_NO_IND
 (2133571423L)

	)

104 
	#EXT2_ET_TDB_SUCCESS
 (2133571424L)

	)

105 
	#EXT2_ET_TDB_ERR_CORRUPT
 (2133571425L)

	)

106 
	#EXT2_ET_TDB_ERR_IO
 (2133571426L)

	)

107 
	#EXT2_ET_TDB_ERR_LOCK
 (2133571427L)

	)

108 
	#EXT2_ET_TDB_ERR_OOM
 (2133571428L)

	)

109 
	#EXT2_ET_TDB_ERR_EXISTS
 (2133571429L)

	)

110 
	#EXT2_ET_TDB_ERR_NOLOCK
 (2133571430L)

	)

111 
	#EXT2_ET_TDB_ERR_EINVAL
 (2133571431L)

	)

112 
	#EXT2_ET_TDB_ERR_NOEXIST
 (2133571432L)

	)

113 
	#EXT2_ET_TDB_ERR_RDONLY
 (2133571433L)

	)

114 
	#EXT2_ET_DBLIST_EMPTY
 (2133571434L)

	)

115 
	#EXT2_ET_RO_BLOCK_ITERATE
 (2133571435L)

	)

116 
	#EXT2_ET_MAGIC_EXTENT_PATH
 (2133571436L)

	)

117 
	#EXT2_ET_MAGIC_RESERVED_10
 (2133571437L)

	)

118 
	#EXT2_ET_MAGIC_RESERVED_11
 (2133571438L)

	)

119 
	#EXT2_ET_MAGIC_RESERVED_12
 (2133571439L)

	)

120 
	#EXT2_ET_MAGIC_RESERVED_13
 (2133571440L)

	)

121 
	#EXT2_ET_MAGIC_RESERVED_14
 (2133571441L)

	)

122 
	#EXT2_ET_MAGIC_RESERVED_15
 (2133571442L)

	)

123 
	#EXT2_ET_MAGIC_RESERVED_16
 (2133571443L)

	)

124 
	#EXT2_ET_MAGIC_RESERVED_17
 (2133571444L)

	)

125 
	#EXT2_ET_MAGIC_RESERVED_18
 (2133571445L)

	)

126 
	#EXT2_ET_MAGIC_RESERVED_19
 (2133571446L)

	)

127 
	#EXT2_ET_EXTENT_HEADER_BAD
 (2133571447L)

	)

128 
	#EXT2_ET_EXTENT_INDEX_BAD
 (2133571448L)

	)

129 
	#EXT2_ET_EXTENT_LEAF_BAD
 (2133571449L)

	)

130 
	#EXT2_ET_EXTENT_NO_SPACE
 (2133571450L)

	)

131 
	#EXT2_ET_INODE_NOT_EXTENT
 (2133571451L)

	)

132 
	#EXT2_ET_EXTENT_NO_NEXT
 (2133571452L)

	)

133 
	#EXT2_ET_EXTENT_NO_PREV
 (2133571453L)

	)

134 
	#EXT2_ET_EXTENT_NO_UP
 (2133571454L)

	)

135 
	#EXT2_ET_EXTENT_NO_DOWN
 (2133571455L)

	)

136 
	#EXT2_ET_NO_CURRENT_NODE
 (2133571456L)

	)

137 
	#EXT2_ET_OP_NOT_SUPPORTED
 (2133571457L)

	)

138 
	#EXT2_ET_CANT_INSERT_EXTENT
 (2133571458L)

	)

139 
	#EXT2_ET_CANT_SPLIT_EXTENT
 (2133571459L)

	)

140 
	#EXT2_ET_EXTENT_NOT_FOUND
 (2133571460L)

	)

141 
	#EXT2_ET_EXTENT_NOT_SUPPORTED
 (2133571461L)

	)

142 
	#EXT2_ET_EXTENT_INVALID_LENGTH
 (2133571462L)

	)

143 
	#EXT2_ET_IO_CHANNEL_NO_SUPPORT_64
 (2133571463L)

	)

144 
	#EXT2_NO_MTAB_FILE
 (2133571464L)

	)

145 c⁄° 
îr‹_èbÀ
 
ë_ext2_îr‹_èbÀ
;

146 
öôülize_ext2_îr‹_èbÀ
();

149 
öôülize_ext2_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

151 
	#ERROR_TABLE_BASE_ext2
 (2133571328L)

	)

154 
	#öô_ext2_îr_tbl
 
öôülize_ext2_îr‹_èbÀ


	)

155 
	#ext2_îr_ba£
 
ERROR_TABLE_BASE_ext2


	)

	@ext2_ext_attr.h

9 #i‚de‡
_EXT2_EXT_ATTR_H


10 
	#_EXT2_EXT_ATTR_H


	)

12 
	#EXT2_EXT_ATTR_MAGIC_v1
 0xEA010000

	)

13 
	#EXT2_EXT_ATTR_MAGIC
 0xEA020000

	)

16 
	#EXT2_EXT_ATTR_REFCOUNT_MAX
 1024

	)

18 
	sext2_ext_©å_hódî
 {

19 
__u32
 
	mh_magic
;

20 
__u32
 
	mh_ªfcou¡
;

21 
__u32
 
	mh_blocks
;

22 
__u32
 
	mh_hash
;

23 
__u32
 
	mh_ª£rved
[4];

26 
	sext2_ext_©å_íåy
 {

27 
__u8
 
	me_«me_Àn
;

28 
__u8
 
	me_«me_ödex
;

29 
__u16
 
	me_vÆue_offs
;

30 
__u32
 
	me_vÆue_block
;

31 
__u32
 
	me_vÆue_size
;

32 
__u32
 
	me_hash
;

34 
	me_«me
[0];

38 
	#EXT2_EXT_ATTR_PAD_BITS
 2

	)

39 
	#EXT2_EXT_ATTR_PAD
 ((Ë1<<
EXT2_EXT_ATTR_PAD_BITS
)

	)

40 
	#EXT2_EXT_ATTR_ROUND
 (
EXT2_EXT_ATTR_PAD
-1)

	)

41 
	#EXT2_EXT_ATTR_LEN
(
«me_Àn
) \

42 (((
«me_Àn
Ë+ 
EXT2_EXT_ATTR_ROUND
 + \

43 (
ext2_ext_©å_íåy
)Ë& ~
EXT2_EXT_ATTR_ROUND
)

	)

44 
	#EXT2_EXT_ATTR_NEXT
(
íåy
) \

45 –(
ext2_ext_©å_íåy
 *)( \

46 (*)(
íåy
Ë+ 
	`EXT2_EXT_ATTR_LEN
(”¡ry)->
e_«me_Àn
)Ë)

	)

47 
	#EXT2_EXT_ATTR_SIZE
(
size
) \

48 (((
size
Ë+ 
EXT2_EXT_ATTR_ROUND
Ë& ~EXT2_EXT_ATTR_ROUND)

	)

49 
	#EXT2_EXT_IS_LAST_ENTRY
(
íåy
Ë(*((
__u32
 *)”¡ry)Ë=0UL)

	)

50 
	#EXT2_EXT_ATTR_NAME
(
íåy
) \

51 (((*Ë(
íåy
)Ë+ (
ext2_ext_©å_íåy
))

	)

52 
	#EXT2_XATTR_LEN
(
«me_Àn
) \

53 (((
«me_Àn
Ë+ 
EXT2_EXT_ATTR_ROUND
 + \

54 (
ext2_x©å_íåy
)Ë& ~
EXT2_EXT_ATTR_ROUND
)

	)

55 
	#EXT2_XATTR_SIZE
(
size
) \

56 (((
size
Ë+ 
EXT2_EXT_ATTR_ROUND
Ë& ~EXT2_EXT_ATTR_ROUND)

	)

58 #ifde‡
__KERNEL__


59 #ifde‡
CONFIG_EXT2_FS_EXT_ATTR


60 
ext2_gë_ext_©å
(
öode
 *, c⁄° *, *, 
size_t
, );

61 
ext2_£t_ext_©å
(
öode
 *, c⁄° *, *, 
size_t
, );

62 
ext2_ext_©å_‰ì_öode
(
öode
 *inode);

63 
ext2_ext_©å_put_su≥r
(
su≥r_block
 *
sb
);

64 
ext2_ext_©å_öô
();

65 
ext2_ext_©å_d⁄e
();

67 
	#ext2_gë_ext_©å
 
NULL


	)

68 
	#ext2_£t_ext_©å
 
NULL


	)

	@ext2_fs.h

16 #i‚de‡
_LINUX_EXT2_FS_H


17 
	#_LINUX_EXT2_FS_H


	)

19 
	~<ext2fs/ext2_ty≥s.h
>

28 #unde‡
EXT2FS_DEBUG


33 
	#EXT2_PREALLOCATE


	)

34 
	#EXT2_DEFAULT_PREALLOC_BLOCKS
 8

	)

39 
	#EXT2FS_DATE
 "95/08/09"

	)

40 
	#EXT2FS_VERSION
 "0.5b"

	)

45 
	#EXT2_BAD_INO
 1

	)

46 
	#EXT2_ROOT_INO
 2

	)

47 
	#EXT2_ACL_IDX_INO
 3

	)

48 
	#EXT2_ACL_DATA_INO
 4

	)

49 
	#EXT2_BOOT_LOADER_INO
 5

	)

50 
	#EXT2_UNDEL_DIR_INO
 6

	)

51 
	#EXT2_RESIZE_INO
 7

	)

52 
	#EXT2_JOURNAL_INO
 8

	)

55 
	#EXT2_GOOD_OLD_FIRST_INO
 11

	)

60 
	#EXT2_SUPER_MAGIC
 0xEF53

	)

62 #ifde‡
__KERNEL__


63 
	#EXT2_SB
(
sb
Ë(&((sb)->
u
.
ext2_sb
))

	)

68 
	#EXT2_SB
(
sb
Ë(sb)

	)

74 
	#EXT2_LINK_MAX
 65000

	)

79 
	#EXT2_MIN_BLOCK_LOG_SIZE
 10

	)

80 
	#EXT2_MAX_BLOCK_LOG_SIZE
 16

	)

81 
	#EXT2_MIN_BLOCK_SIZE
 (1 << 
EXT2_MIN_BLOCK_LOG_SIZE
)

	)

82 
	#EXT2_MAX_BLOCK_SIZE
 (1 << 
EXT2_MAX_BLOCK_LOG_SIZE
)

	)

83 #ifde‡
__KERNEL__


84 
	#EXT2_BLOCK_SIZE
(
s
Ë((s)->
s_blocksize
)

	)

85 
	#EXT2_BLOCK_SIZE_BITS
(
s
Ë((s)->
s_blocksize_bôs
)

	)

86 
	#EXT2_ADDR_PER_BLOCK_BITS
(
s
Ë(
	`EXT2_SB
(s)->
addr_≥r_block_bôs
)

	)

87 
	#EXT2_INODE_SIZE
(
s
Ë(
	`EXT2_SB
(s)->
s_öode_size
)

	)

88 
	#EXT2_FIRST_INO
(
s
Ë(
	`EXT2_SB
(s)->
s_fú°_öo
)

	)

90 
	#EXT2_BLOCK_SIZE
(
s
Ë(
EXT2_MIN_BLOCK_SIZE
 << (s)->
s_log_block_size
)

	)

91 
	#EXT2_BLOCK_SIZE_BITS
(
s
Ë((s)->
s_log_block_size
 + 10)

	)

92 
	#EXT2_INODE_SIZE
(
s
Ë(((s)->
s_ªv_Àvñ
 =
EXT2_GOOD_OLD_REV
) ? \

93 
EXT2_GOOD_OLD_INODE_SIZE
 : (
s
)->
s_öode_size
)

	)

94 
	#EXT2_FIRST_INO
(
s
Ë(((s)->
s_ªv_Àvñ
 =
EXT2_GOOD_OLD_REV
) ? \

95 
EXT2_GOOD_OLD_FIRST_INO
 : (
s
)->
s_fú°_öo
)

	)

97 
	#EXT2_ADDR_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/ (
__u32
))

	)

102 
	#EXT2_MIN_FRAG_SIZE
 
EXT2_MIN_BLOCK_SIZE


	)

103 
	#EXT2_MAX_FRAG_SIZE
 
EXT2_MAX_BLOCK_SIZE


	)

104 
	#EXT2_MIN_FRAG_LOG_SIZE
 
EXT2_MIN_BLOCK_LOG_SIZE


	)

105 #ifde‡
__KERNEL__


106 
	#EXT2_FRAG_SIZE
(
s
Ë(
	`EXT2_SB
(s)->
s_‰ag_size
)

	)

107 
	#EXT2_FRAGS_PER_BLOCK
(
s
Ë(
	`EXT2_SB
(s)->
s_‰ags_≥r_block
)

	)

109 
	#EXT2_FRAG_SIZE
(
s
Ë(
EXT2_MIN_FRAG_SIZE
 << (s)->
s_log_‰ag_size
)

	)

110 
	#EXT2_FRAGS_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/ 
	`EXT2_FRAG_SIZE
(s))

	)

116 
	sext2_a˛_hódî


118 
__u32
 
	ma˛h_size
;

119 
__u32
 
	ma˛h_fûe_cou¡
;

120 
__u32
 
	ma˛h_a˛e_cou¡
;

121 
__u32
 
	ma˛h_fú°_a˛e
;

124 
	sext2_a˛_íåy


126 
__u32
 
	ma˛e_size
;

127 
__u16
 
	ma˛e_≥rms
;

128 
__u16
 
	ma˛e_ty≥
;

129 
__u16
 
	ma˛e_èg
;

130 
__u16
 
	ma˛e_∑d1
;

131 
__u32
 
	ma˛e_√xt
;

138 
	sext2_group_desc


140 
__u32
 
	mbg_block_bôm≠
;

141 
__u32
 
	mbg_öode_bôm≠
;

142 
__u32
 
	mbg_öode_èbÀ
;

143 
__u16
 
	mbg_‰ì_blocks_cou¡
;

144 
__u16
 
	mbg_‰ì_öodes_cou¡
;

145 
__u16
 
	mbg_u£d_dús_cou¡
;

146 
__u16
 
	mbg_Êags
;

147 
__u32
 
	mbg_ª£rved
[2];

148 
__u16
 
	mbg_ôabÀ_unu£d
;

149 
__u16
 
	mbg_checksum
;

152 
	sext4_group_desc


154 
__u32
 
	mbg_block_bôm≠
;

155 
__u32
 
	mbg_öode_bôm≠
;

156 
__u32
 
	mbg_öode_èbÀ
;

157 
__u16
 
	mbg_‰ì_blocks_cou¡
;

158 
__u16
 
	mbg_‰ì_öodes_cou¡
;

159 
__u16
 
	mbg_u£d_dús_cou¡
;

160 
__u16
 
	mbg_Êags
;

161 
__u32
 
	mbg_ª£rved
[2];

162 
__u16
 
	mbg_ôabÀ_unu£d
;

163 
__u16
 
	mbg_checksum
;

164 
__u32
 
	mbg_block_bôm≠_hi
;

165 
__u32
 
	mbg_öode_bôm≠_hi
;

166 
__u32
 
	mbg_öode_èbÀ_hi
;

167 
__u16
 
	mbg_‰ì_blocks_cou¡_hi
;

168 
__u16
 
	mbg_‰ì_öodes_cou¡_hi
;

169 
__u16
 
	mbg_u£d_dús_cou¡_hi
;

170 
__u16
 
	mbg_∑d
;

171 
__u32
 
	mbg_ª£rved2
[3];

174 
	#EXT2_BG_INODE_UNINIT
 0x0001

	)

175 
	#EXT2_BG_BLOCK_UNINIT
 0x0002

	)

176 
	#EXT2_BG_INODE_ZEROED
 0x0004

	)

190 
	sext2_dx_roŸ_öfo
 {

191 
__u32
 
	mª£rved_zîo
;

192 
__u8
 
	mhash_vîsi⁄
;

193 
__u8
 
	möfo_Àngth
;

194 
__u8
 
	mödúe˘_Àvñs
;

195 
__u8
 
	munu£d_Êags
;

198 
	#EXT2_HASH_LEGACY
 0

	)

199 
	#EXT2_HASH_HALF_MD4
 1

	)

200 
	#EXT2_HASH_TEA
 2

	)

201 
	#EXT2_HASH_LEGACY_UNSIGNED
 3

	)

202 
	#EXT2_HASH_HALF_MD4_UNSIGNED
 4

	)

203 
	#EXT2_HASH_TEA_UNSIGNED
 5

	)

205 
	#EXT2_HASH_FLAG_INCOMPAT
 0x1

	)

207 
	sext2_dx_íåy
 {

208 
__u32
 
	mhash
;

209 
__u32
 
	mblock
;

212 
	sext2_dx_cou¡limô
 {

213 
__u16
 
	mlimô
;

214 
__u16
 
	mcou¡
;

221 
	#EXT2_MIN_DESC_SIZE
 32

	)

222 
	#EXT2_MIN_DESC_SIZE_64BIT
 64

	)

223 
	#EXT2_MAX_DESC_SIZE
 
EXT2_MIN_BLOCK_SIZE


	)

224 
	#EXT2_DESC_SIZE
(
s
) \

225 ((
	`EXT2_SB
(
s
)->
s_„©uª_öcom∑t
 & 
EXT4_FEATURE_INCOMPAT_64BIT
) ? \

226 (
s
)->
s_desc_size
 : 
EXT2_MIN_DESC_SIZE
)

	)

228 
	#EXT2_BLOCKS_PER_GROUP
(
s
Ë(
	`EXT2_SB
(s)->
s_blocks_≥r_group
)

	)

229 
	#EXT2_INODES_PER_GROUP
(
s
Ë(
	`EXT2_SB
(s)->
s_öodes_≥r_group
)

	)

230 
	#EXT2_INODES_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(s)/
	`EXT2_INODE_SIZE
(s))

	)

232 
	#EXT2_MAX_BLOCKS_PER_GROUP
(
s
Ë((1 << 16Ë- 8)

	)

233 
	#EXT2_MAX_INODES_PER_GROUP
(
s
Ë((1 << 16Ë- 
	`EXT2_INODES_PER_BLOCK
(s))

	)

234 #ifde‡
__KERNEL__


235 
	#EXT2_DESC_PER_BLOCK
(
s
Ë(
	`EXT2_SB
(s)->
s_desc_≥r_block
)

	)

236 
	#EXT2_DESC_PER_BLOCK_BITS
(
s
Ë(
	`EXT2_SB
(s)->
s_desc_≥r_block_bôs
)

	)

238 
	#EXT2_DESC_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/ 
	`EXT2_DESC_SIZE
(s))

	)

244 
	#EXT2_NDIR_BLOCKS
 12

	)

245 
	#EXT2_IND_BLOCK
 
EXT2_NDIR_BLOCKS


	)

246 
	#EXT2_DIND_BLOCK
 (
EXT2_IND_BLOCK
 + 1)

	)

247 
	#EXT2_TIND_BLOCK
 (
EXT2_DIND_BLOCK
 + 1)

	)

248 
	#EXT2_N_BLOCKS
 (
EXT2_TIND_BLOCK
 + 1)

	)

253 
	#EXT2_SECRM_FL
 0x00000001

	)

254 
	#EXT2_UNRM_FL
 0x00000002

	)

255 
	#EXT2_COMPR_FL
 0x00000004

	)

256 
	#EXT2_SYNC_FL
 0x00000008

	)

257 
	#EXT2_IMMUTABLE_FL
 0x00000010

	)

258 
	#EXT2_APPEND_FL
 0x00000020

	)

259 
	#EXT2_NODUMP_FL
 0x00000040

	)

260 
	#EXT2_NOATIME_FL
 0x00000080

	)

262 
	#EXT2_DIRTY_FL
 0x00000100

	)

263 
	#EXT2_COMPRBLK_FL
 0x00000200

	)

264 
	#EXT2_NOCOMPR_FL
 0x00000400

	)

265 
	#EXT2_ECOMPR_FL
 0x00000800

	)

267 
	#EXT2_BTREE_FL
 0x00001000

	)

268 
	#EXT2_INDEX_FL
 0x00001000

	)

269 
	#EXT2_IMAGIC_FL
 0x00002000

	)

270 
	#EXT3_JOURNAL_DATA_FL
 0x00004000

	)

271 
	#EXT2_NOTAIL_FL
 0x00008000

	)

272 
	#EXT2_DIRSYNC_FL
 0x00010000

	)

273 
	#EXT2_TOPDIR_FL
 0x00020000

	)

274 
	#EXT4_HUGE_FILE_FL
 0x00040000

	)

275 
	#EXT4_EXTENTS_FL
 0x00080000

	)

276 
	#EXT2_RESERVED_FL
 0x80000000

	)

278 
	#EXT2_FL_USER_VISIBLE
 0x000BDFFF

	)

279 
	#EXT2_FL_USER_MODIFIABLE
 0x000080FF

	)

286 
	sext2_√w_group_öput
 {

287 
__u32
 
	mgroup
;

288 
__u32
 
	mblock_bôm≠
;

289 
__u32
 
	möode_bôm≠
;

290 
__u32
 
	möode_èbÀ
;

291 
__u32
 
	mblocks_cou¡
;

292 
__u16
 
	mª£rved_blocks
;

293 
__u16
 
	munu£d
;

296 
	sext4_√w_group_öput
 {

297 
__u32
 
	mgroup
;

298 
__u64
 
	mblock_bôm≠
;

299 
__u64
 
	möode_bôm≠
;

300 
__u64
 
	möode_èbÀ
;

301 
__u32
 
	mblocks_cou¡
;

302 
__u16
 
	mª£rved_blocks
;

303 
__u16
 
	munu£d
;

306 #ifde‡
__GNU__


307 
	#_IOT_ext2_√w_group_öput
 
	`_IOT
 (
	`_IOTS
(
__u32
), 5, _IOTS(
__u16
), 2, 0, 0)

	)

310 
	#EXT2_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

311 
	#EXT2_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

312 
	#EXT2_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

313 
	#EXT2_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

314 
	#EXT2_IOC_GETVERSION_NEW
 
	`_IOR
('f', 3, )

	)

315 
	#EXT2_IOC_SETVERSION_NEW
 
	`_IOW
('f', 4, )

	)

316 
	#EXT2_IOC_GROUP_EXTEND
 
	`_IOW
('f', 7, )

	)

317 
	#EXT2_IOC_GROUP_ADD
 
	`_IOW
('f', 8,
ext2_√w_group_öput
)

	)

318 
	#EXT4_IOC_GROUP_ADD
 
	`_IOW
('f', 8,
ext4_√w_group_öput
)

	)

323 
	sext2_öode
 {

324 
__u16
 
	mi_mode
;

325 
__u16
 
	mi_uid
;

326 
__u32
 
	mi_size
;

327 
__u32
 
	mi_©ime
;

328 
__u32
 
	mi_˘ime
;

329 
__u32
 
	mi_mtime
;

330 
__u32
 
	mi_dtime
;

331 
__u16
 
	mi_gid
;

332 
__u16
 
	mi_löks_cou¡
;

333 
__u32
 
	mi_blocks
;

334 
__u32
 
	mi_Êags
;

337 
__u32
 
	ml_i_vîsi⁄
;

338 } 
	mlöux1
;

340 
__u32
 
	mh_i_å™¶©‹
;

341 } 
	mhurd1
;

342 } 
	mosd1
;

343 
__u32
 
	mi_block
[
EXT2_N_BLOCKS
];

344 
__u32
 
	mi_gíî©i⁄
;

345 
__u32
 
	mi_fûe_a˛
;

346 
__u32
 
	mi_dú_a˛
;

347 
__u32
 
	mi_Áddr
;

350 
__u16
 
	ml_i_blocks_hi
;

351 
__u16
 
	ml_i_fûe_a˛_high
;

352 
__u16
 
	ml_i_uid_high
;

353 
__u16
 
	ml_i_gid_high
;

354 
__u32
 
	ml_i_ª£rved2
;

355 } 
	mlöux2
;

357 
__u8
 
	mh_i_‰ag
;

358 
__u8
 
	mh_i_fsize
;

359 
__u16
 
	mh_i_mode_high
;

360 
__u16
 
	mh_i_uid_high
;

361 
__u16
 
	mh_i_gid_high
;

362 
__u32
 
	mh_i_auth‹
;

363 } 
	mhurd2
;

364 } 
	mosd2
;

370 
	sext2_öode_œrge
 {

371 
__u16
 
	mi_mode
;

372 
__u16
 
	mi_uid
;

373 
__u32
 
	mi_size
;

374 
__u32
 
	mi_©ime
;

375 
__u32
 
	mi_˘ime
;

376 
__u32
 
	mi_mtime
;

377 
__u32
 
	mi_dtime
;

378 
__u16
 
	mi_gid
;

379 
__u16
 
	mi_löks_cou¡
;

380 
__u32
 
	mi_blocks
;

381 
__u32
 
	mi_Êags
;

384 
__u32
 
	ml_i_vîsi⁄
;

385 } 
	mlöux1
;

387 
__u32
 
	mh_i_å™¶©‹
;

388 } 
	mhurd1
;

389 } 
	mosd1
;

390 
__u32
 
	mi_block
[
EXT2_N_BLOCKS
];

391 
__u32
 
	mi_gíî©i⁄
;

392 
__u32
 
	mi_fûe_a˛
;

393 
__u32
 
	mi_dú_a˛
;

394 
__u32
 
	mi_Áddr
;

397 
__u16
 
	ml_i_blocks_hi
;

398 
__u16
 
	ml_i_fûe_a˛_high
;

399 
__u16
 
	ml_i_uid_high
;

400 
__u16
 
	ml_i_gid_high
;

401 
__u32
 
	ml_i_ª£rved2
;

402 } 
	mlöux2
;

404 
__u8
 
	mh_i_‰ag
;

405 
__u8
 
	mh_i_fsize
;

406 
__u16
 
	mh_i_mode_high
;

407 
__u16
 
	mh_i_uid_high
;

408 
__u16
 
	mh_i_gid_high
;

409 
__u32
 
	mh_i_auth‹
;

410 } 
	mhurd2
;

411 } 
	mosd2
;

412 
__u16
 
	mi_exåa_isize
;

413 
__u16
 
	mi_∑d1
;

414 
__u32
 
	mi_˘ime_exåa
;

415 
__u32
 
	mi_mtime_exåa
;

416 
__u32
 
	mi_©ime_exåa
;

417 
__u32
 
	mi_¸time
;

418 
__u32
 
	mi_¸time_exåa
;

419 
__u32
 
	mi_vîsi⁄_hi
;

422 
	#i_size_high
 
i_dú_a˛


	)

424 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
__löux__
)

425 
	#i_ª£rved1
 
osd1
.
löux1
.
l_i_ª£rved1


	)

426 
	#i_‰ag
 
osd2
.
löux2
.
l_i_‰ag


	)

427 
	#i_fsize
 
osd2
.
löux2
.
l_i_fsize


	)

428 
	#i_uid_low
 
i_uid


	)

429 
	#i_gid_low
 
i_gid


	)

430 
	#i_uid_high
 
osd2
.
löux2
.
l_i_uid_high


	)

431 
	#i_gid_high
 
osd2
.
löux2
.
l_i_gid_high


	)

432 
	#i_ª£rved2
 
osd2
.
löux2
.
l_i_ª£rved2


	)

434 #i‡
deföed
(
__GNU__
)

436 
	#i_å™¶©‹
 
osd1
.
hurd1
.
h_i_å™¶©‹


	)

437 
	#i_‰ag
 
osd2
.
hurd2
.
h_i_‰ag
;

	)

438 
	#i_fsize
 
osd2
.
hurd2
.
h_i_fsize
;

	)

439 
	#i_uid_high
 
osd2
.
hurd2
.
h_i_uid_high


	)

440 
	#i_gid_high
 
osd2
.
hurd2
.
h_i_gid_high


	)

441 
	#i_auth‹
 
osd2
.
hurd2
.
h_i_auth‹


	)

446 
	#öode_uid
(
öode
Ë((öode).
i_uid
 | (öode).
osd2
.
löux2
.
l_i_uid_high
 << 16)

	)

447 
	#öode_gid
(
öode
Ë((öode).
i_gid
 | (öode).
osd2
.
löux2
.
l_i_gid_high
 << 16)

	)

448 
	#ext2fs_£t_i_uid_high
(
öode
,
x
Ë((öode).
osd2
.
löux2
.
l_i_uid_high
 = (x))

	)

449 
	#ext2fs_£t_i_gid_high
(
öode
,
x
Ë((öode).
osd2
.
löux2
.
l_i_gid_high
 = (x))

	)

454 
	#EXT2_VALID_FS
 0x0001

	)

455 
	#EXT2_ERROR_FS
 0x0002

	)

456 
	#EXT3_ORPHAN_FS
 0x0004

	)

461 
	#EXT2_FLAGS_SIGNED_HASH
 0x0001

	)

462 
	#EXT2_FLAGS_UNSIGNED_HASH
 0x0002

	)

463 
	#EXT2_FLAGS_TEST_FILESYS
 0x0004

	)

468 
	#EXT2_MOUNT_CHECK
 0x0001

	)

469 
	#EXT2_MOUNT_GRPID
 0x0004

	)

470 
	#EXT2_MOUNT_DEBUG
 0x0008

	)

471 
	#EXT2_MOUNT_ERRORS_CONT
 0x0010

	)

472 
	#EXT2_MOUNT_ERRORS_RO
 0x0020

	)

473 
	#EXT2_MOUNT_ERRORS_PANIC
 0x0040

	)

474 
	#EXT2_MOUNT_MINIX_DF
 0x0080

	)

475 
	#EXT2_MOUNT_NO_UID32
 0x0200

	)

477 
	#˛ór_›t
(
o
, 
›t
Ëÿ&~
EXT2_MOUNT_
##
	)
opt

478 
	#£t_›t
(
o
, 
›t
Ëÿ|
EXT2_MOUNT_
##
	)
opt

479 
	#ã°_›t
(
sb
, 
›t
Ë(
	`EXT2_SB
(sb)->
s_mou¡_›t
 & \

480 
EXT2_MOUNT_
##
›t
)

	)

484 
	#EXT2_DFL_MAX_MNT_COUNT
 20

	)

485 
	#EXT2_DFL_CHECKINTERVAL
 0

	)

490 
	#EXT2_ERRORS_CONTINUE
 1

	)

491 
	#EXT2_ERRORS_RO
 2

	)

492 
	#EXT2_ERRORS_PANIC
 3

	)

493 
	#EXT2_ERRORS_DEFAULT
 
EXT2_ERRORS_CONTINUE


	)

498 
	sext2_su≥r_block
 {

499 
__u32
 
	ms_öodes_cou¡
;

500 
__u32
 
	ms_blocks_cou¡
;

501 
__u32
 
	ms_r_blocks_cou¡
;

502 
__u32
 
	ms_‰ì_blocks_cou¡
;

503 
__u32
 
	ms_‰ì_öodes_cou¡
;

504 
__u32
 
	ms_fú°_d©a_block
;

505 
__u32
 
	ms_log_block_size
;

506 
__s32
 
	ms_log_‰ag_size
;

507 
__u32
 
	ms_blocks_≥r_group
;

508 
__u32
 
	ms_‰ags_≥r_group
;

509 
__u32
 
	ms_öodes_≥r_group
;

510 
__u32
 
	ms_mtime
;

511 
__u32
 
	ms_wtime
;

512 
__u16
 
	ms_m¡_cou¡
;

513 
__s16
 
	ms_max_m¡_cou¡
;

514 
__u16
 
	ms_magic
;

515 
__u16
 
	ms_°©e
;

516 
__u16
 
	ms_îr‹s
;

517 
__u16
 
	ms_mö‹_ªv_Àvñ
;

518 
__u32
 
	ms_œ°check
;

519 
__u32
 
	ms_checköãrvÆ
;

520 
__u32
 
	ms_¸ót‹_os
;

521 
__u32
 
	ms_ªv_Àvñ
;

522 
__u16
 
	ms_def_ªsuid
;

523 
__u16
 
	ms_def_ªsgid
;

537 
__u32
 
	ms_fú°_öo
;

538 
__u16
 
	ms_öode_size
;

539 
__u16
 
	ms_block_group_ƒ
;

540 
__u32
 
	ms_„©uª_com∑t
;

541 
__u32
 
	ms_„©uª_öcom∑t
;

542 
__u32
 
	ms_„©uª_ro_com∑t
;

543 
__u8
 
	ms_uuid
[16];

544 
	ms_vﬁume_«me
[16];

545 
	ms_œ°_mou¡ed
[64];

546 
__u32
 
	ms_Æg‹ôhm_ußge_bôm≠
;

551 
__u8
 
	ms_¥óŒoc_blocks
;

552 
__u8
 
	ms_¥óŒoc_dú_blocks
;

553 
__u16
 
	ms_ª£rved_gdt_blocks
;

557 
__u8
 
	ms_jou∫Æ_uuid
[16];

558 
__u32
 
	ms_jou∫Æ_öum
;

559 
__u32
 
	ms_jou∫Æ_dev
;

560 
__u32
 
	ms_œ°_‹ph™
;

561 
__u32
 
	ms_hash_£ed
[4];

562 
__u8
 
	ms_def_hash_vîsi⁄
;

563 
__u8
 
	ms_j∆_backup_ty≥
;

564 
__u16
 
	ms_desc_size
;

565 
__u32
 
	ms_deÁu…_mou¡_›ts
;

566 
__u32
 
	ms_fú°_mëa_bg
;

567 
__u32
 
	ms_mkfs_time
;

568 
__u32
 
	ms_j∆_blocks
[17];

569 
__u32
 
	ms_blocks_cou¡_hi
;

570 
__u32
 
	ms_r_blocks_cou¡_hi
;

571 
__u32
 
	ms_‰ì_blocks_hi
;

572 
__u16
 
	ms_mö_exåa_isize
;

573 
__u16
 
	ms_w™t_exåa_isize
;

574 
__u32
 
	ms_Êags
;

575 
__u16
 
	ms_øid_°ride
;

576 
__u16
 
	ms_mmp_öãrvÆ
;

577 
__u64
 
	ms_mmp_block
;

578 
__u32
 
	ms_øid_°rùe_width
;

579 
__u8
 
	ms_log_groups_≥r_Êex
;

580 
__u8
 
	ms_ª£rved_ch¨_∑d
;

581 
__u16
 
	ms_ª£rved_∑d
;

582 
__u64
 
	ms_kbyãs_wrôãn
;

583 
__u32
 
	ms_ª£rved
[160];

589 
	#EXT2_OS_LINUX
 0

	)

590 
	#EXT2_OS_HURD
 1

	)

591 
	#EXT2_OBSO_OS_MASIX
 2

	)

592 
	#EXT2_OS_FREEBSD
 3

	)

593 
	#EXT2_OS_LITES
 4

	)

598 
	#EXT2_GOOD_OLD_REV
 0

	)

599 
	#EXT2_DYNAMIC_REV
 1

	)

601 
	#EXT2_CURRENT_REV
 
EXT2_GOOD_OLD_REV


	)

602 
	#EXT2_MAX_SUPP_REV
 
EXT2_DYNAMIC_REV


	)

604 
	#EXT2_GOOD_OLD_INODE_SIZE
 128

	)

609 
	#EXT3_JNL_BACKUP_BLOCKS
 1

	)

615 
	#EXT2_HAS_COMPAT_FEATURE
(
sb
,
mask
) \

616 –
	`EXT2_SB
(
sb
)->
s_„©uª_com∑t
 & (
mask
Ë)

	)

617 
	#EXT2_HAS_RO_COMPAT_FEATURE
(
sb
,
mask
) \

618 –
	`EXT2_SB
(
sb
)->
s_„©uª_ro_com∑t
 & (
mask
Ë)

	)

619 
	#EXT2_HAS_INCOMPAT_FEATURE
(
sb
,
mask
) \

620 –
	`EXT2_SB
(
sb
)->
s_„©uª_öcom∑t
 & (
mask
Ë)

	)

622 
	#EXT2_FEATURE_COMPAT_DIR_PREALLOC
 0x0001

	)

623 
	#EXT2_FEATURE_COMPAT_IMAGIC_INODES
 0x0002

	)

624 
	#EXT3_FEATURE_COMPAT_HAS_JOURNAL
 0x0004

	)

625 
	#EXT2_FEATURE_COMPAT_EXT_ATTR
 0x0008

	)

626 
	#EXT2_FEATURE_COMPAT_RESIZE_INODE
 0x0010

	)

627 
	#EXT2_FEATURE_COMPAT_DIR_INDEX
 0x0020

	)

628 
	#EXT2_FEATURE_COMPAT_LAZY_BG
 0x0040

	)

630 
	#EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
 0x0001

	)

631 
	#EXT2_FEATURE_RO_COMPAT_LARGE_FILE
 0x0002

	)

633 
	#EXT4_FEATURE_RO_COMPAT_HUGE_FILE
 0x0008

	)

634 
	#EXT4_FEATURE_RO_COMPAT_GDT_CSUM
 0x0010

	)

635 
	#EXT4_FEATURE_RO_COMPAT_DIR_NLINK
 0x0020

	)

636 
	#EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE
 0x0040

	)

638 
	#EXT2_FEATURE_INCOMPAT_COMPRESSION
 0x0001

	)

639 
	#EXT2_FEATURE_INCOMPAT_FILETYPE
 0x0002

	)

640 
	#EXT3_FEATURE_INCOMPAT_RECOVER
 0x0004

	)

641 
	#EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
 0x0008

	)

642 
	#EXT2_FEATURE_INCOMPAT_META_BG
 0x0010

	)

643 
	#EXT3_FEATURE_INCOMPAT_EXTENTS
 0x0040

	)

644 
	#EXT4_FEATURE_INCOMPAT_64BIT
 0x0080

	)

645 
	#EXT4_FEATURE_INCOMPAT_MMP
 0x0100

	)

646 
	#EXT4_FEATURE_INCOMPAT_FLEX_BG
 0x0200

	)

649 
	#EXT2_FEATURE_COMPAT_SUPP
 0

	)

650 
	#EXT2_FEATURE_INCOMPAT_SUPP
 (
EXT2_FEATURE_INCOMPAT_FILETYPE
)

	)

651 
	#EXT2_FEATURE_RO_COMPAT_SUPP
 (
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
| \

652 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
| \

653 
EXT4_FEATURE_RO_COMPAT_DIR_NLINK
| \

654 
EXT2_FEATURE_RO_COMPAT_BTREE_DIR
)

	)

659 
	#EXT2_DEF_RESUID
 0

	)

660 
	#EXT2_DEF_RESGID
 0

	)

665 
	#EXT2_DEFM_DEBUG
 0x0001

	)

666 
	#EXT2_DEFM_BSDGROUPS
 0x0002

	)

667 
	#EXT2_DEFM_XATTR_USER
 0x0004

	)

668 
	#EXT2_DEFM_ACL
 0x0008

	)

669 
	#EXT2_DEFM_UID16
 0x0010

	)

670 
	#EXT3_DEFM_JMODE
 0x0060

	)

671 
	#EXT3_DEFM_JMODE_DATA
 0x0020

	)

672 
	#EXT3_DEFM_JMODE_ORDERED
 0x0040

	)

673 
	#EXT3_DEFM_JMODE_WBACK
 0x0060

	)

678 
	#EXT2_NAME_LEN
 255

	)

680 
	sext2_dú_íåy
 {

681 
__u32
 
	möode
;

682 
__u16
 
	mªc_Àn
;

683 
__u16
 
	m«me_Àn
;

684 
	m«me
[
EXT2_NAME_LEN
];

693 
	sext2_dú_íåy_2
 {

694 
__u32
 
	möode
;

695 
__u16
 
	mªc_Àn
;

696 
__u8
 
	m«me_Àn
;

697 
__u8
 
	mfûe_ty≥
;

698 
	m«me
[
EXT2_NAME_LEN
];

705 
	#EXT2_FT_UNKNOWN
 0

	)

706 
	#EXT2_FT_REG_FILE
 1

	)

707 
	#EXT2_FT_DIR
 2

	)

708 
	#EXT2_FT_CHRDEV
 3

	)

709 
	#EXT2_FT_BLKDEV
 4

	)

710 
	#EXT2_FT_FIFO
 5

	)

711 
	#EXT2_FT_SOCK
 6

	)

712 
	#EXT2_FT_SYMLINK
 7

	)

714 
	#EXT2_FT_MAX
 8

	)

721 
	#EXT2_DIR_PAD
 4

	)

722 
	#EXT2_DIR_ROUND
 (
EXT2_DIR_PAD
 - 1)

	)

723 
	#EXT2_DIR_REC_LEN
(
«me_Àn
Ë((“ame_ÀnË+ 8 + 
EXT2_DIR_ROUND
) & \

724 ~
EXT2_DIR_ROUND
)

	)

731 
	#EXT2_MMP_MAGIC
 0x004D4D50

	)

732 
	#EXT2_MMP_CLEAN
 0xFF4D4D50

	)

733 
	#EXT2_MMP_FSCK_ON
 0xE24D4D50

	)

735 
	smmp_°ru˘
 {

736 
__u32
 
	mmmp_magic
;

737 
__u32
 
	mmmp_£q
;

738 
__u64
 
	mmmp_time
;

739 
	mmmp_nodíame
[64];

740 
	mmmp_bdev«me
[32];

741 
__u16
 
	mmmp_öãrvÆ
;

742 
__u16
 
	mmmp_∑d1
;

743 
__u32
 
	mmmp_∑d2
;

749 
	#EXT2_MMP_DEF_INTERVAL
 5

	)

	@ext2_io.h

12 #i‚de‡
_EXT2FS_EXT2_IO_H


13 
	#_EXT2FS_EXT2_IO_H


	)

18 #i‡
deföed
(
__GNUC__
Ë|| deföed(
HAS_LONG_LONG
)

19 
	text2_loff_t
;

21 
	text2_loff_t
;

25 
ext2_loff_t
 
ext2fs_Œ£ek
 (,Éxt2_loff_t, );

27 
°ru˘_io_m™agî
 *
	tio_m™agî
;

28 
°ru˘_io_ch™√l
 *
	tio_ch™√l
;

29 
°ru˘_io_°©s
 *
	tio_°©s
;

31 
	#CHANNEL_FLAGS_WRITETHROUGH
 0x01

	)

33 
	s°ru˘_io_ch™√l
 {

34 
îrcode_t
 
	mmagic
;

35 
io_m™agî
 
	mm™agî
;

36 *
	m«me
;

37 
	mblock_size
;

38 
îrcode_t
 (*
ªad_îr‹
)(
io_ch™√l
 
	mch™√l
,

39 
	mblock
,

40 
	mcou¡
,

41 *
	md©a
,

42 
size_t
 
	msize
,

43 
	ma˘uÆ_byãs_ªad
,

44 
îrcode_t
 
	mîr‹
);

45 
îrcode_t
 (*
wrôe_îr‹
)(
io_ch™√l
 
	mch™√l
,

46 
	mblock
,

47 
	mcou¡
,

48 c⁄° *
	md©a
,

49 
size_t
 
	msize
,

50 
	ma˘uÆ_byãs_wrôãn
,

51 
îrcode_t
 
	mîr‹
);

52 
	mªfcou¡
;

53 
	mÊags
;

54 
	mª£rved
[14];

55 *
	m¥iv©e_d©a
;

56 *
	m≠p_d©a
;

59 
	s°ru˘_io_°©s
 {

60 
	mnum_fõlds
;

61 
	mª£rved
;

62 
	mbyãs_ªad
;

63 
	mbyãs_wrôãn
;

66 
	s°ru˘_io_m™agî
 {

67 
îrcode_t
 
	mmagic
;

68 c⁄° *
	m«me
;

69 
îrcode_t
 (*
›í
)(c⁄° *
	m«me
, 
	mÊags
, 
io_ch™√l
 *
	mch™√l
);

70 
îrcode_t
 (*
˛o£
)(
io_ch™√l
 
	mch™√l
);

71 
îrcode_t
 (*
£t_blksize
)(
io_ch™√l
 
	mch™√l
, 
	mblksize
);

72 
îrcode_t
 (*
ªad_blk
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

73 
	mcou¡
, *
	md©a
);

74 
îrcode_t
 (*
wrôe_blk
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

75 
	mcou¡
, c⁄° *
	md©a
);

76 
îrcode_t
 (*
Êush
)(
io_ch™√l
 
	mch™√l
);

77 
îrcode_t
 (*
wrôe_byã
)(
io_ch™√l
 
	mch™√l
, 
	moff£t
,

78 
	mcou¡
, c⁄° *
	md©a
);

79 
îrcode_t
 (*
£t_›ti⁄
)(
io_ch™√l
 
	mch™√l
, c⁄° *
	m›ti⁄
,

80 c⁄° *
	m¨g
);

81 
îrcode_t
 (*
gë_°©s
)(
io_ch™√l
 
	mch™√l
, 
io_°©s
 *
	mio_°©s
);

82 
îrcode_t
 (*
ªad_blk64
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

83 
	mcou¡
, *
	md©a
);

84 
îrcode_t
 (*
wrôe_blk64
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

85 
	mcou¡
, c⁄° *
	md©a
);

86 
	mª£rved
[16];

89 
	#IO_FLAG_RW
 0x0001

	)

90 
	#IO_FLAG_EXCLUSIVE
 0x0002

	)

95 
	#io_ch™√l_˛o£
(
c
Ë((c)->
m™agî
->
	`˛o£
((c)))

	)

96 
	#io_ch™√l_£t_blksize
(
c
,
s
Ë((c)->
m™agî
->
	`£t_blksize
((c),s))

	)

97 
	#io_ch™√l_ªad_blk
(
c
,
b
,
n
,
d
Ë((c)->
m™agî
->
	`ªad_blk
((c),b,n,d))

	)

98 
	#io_ch™√l_wrôe_blk
(
c
,
b
,
n
,
d
Ë((c)->
m™agî
->
	`wrôe_blk
((c),b,n,d))

	)

99 
	#io_ch™√l_Êush
(
c
Ë((c)->
m™agî
->
	`Êush
((c)))

	)

100 
	#io_ch™√l_bumpcou¡
(
c
Ë((c)->
ªfcou¡
++)

	)

103 
îrcode_t
 
io_ch™√l_£t_›ti⁄s
(
io_ch™√l
 
ch™√l
,

104 c⁄° *
›ti⁄s
);

105 
îrcode_t
 
io_ch™√l_wrôe_byã
(
io_ch™√l
 
ch™√l
,

106 
off£t
,

107 
cou¡
, c⁄° *
d©a
);

108 
îrcode_t
 
io_ch™√l_ªad_blk64
(
io_ch™√l
 
ch™√l
,

109 
block
,

110 
cou¡
, *
d©a
);

111 
îrcode_t
 
io_ch™√l_wrôe_blk64
(
io_ch™√l
 
ch™√l
,

112 
block
,

113 
cou¡
, c⁄° *
d©a
);

116 
io_m™agî
 
unix_io_m™agî
;

119 
io_m™agî
 
undo_io_m™agî
;

120 
îrcode_t
 
£t_undo_io_backög_m™agî
(
io_m™agî
 
m™agî
);

121 
îrcode_t
 
£t_undo_io_backup_fûe
(*
fûe_«me
);

124 
io_m™agî
 
ã°_io_m™agî
, 
ã°_io_backög_m™agî
;

125 (*
ã°_io_cb_ªad_blk
)

126 (
block
, 
cou¡
, 
îrcode_t
 
îr
);

127 (*
ã°_io_cb_wrôe_blk
)

128 (
block
, 
cou¡
, 
îrcode_t
 
îr
);

129 (*
ã°_io_cb_£t_blksize
)

130 (
blksize
, 
îrcode_t
 
îr
);

	@ext2fs.h

12 #i‚de‡
_EXT2FS_EXT2FS_H


13 
	#_EXT2FS_EXT2FS_H


	)

15 #ifde‡
__GNUC__


16 
	#EXT2FS_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

18 
	#EXT2FS_ATTR
(
x
)

	)

21 #ifde‡
__˝lu•lus


28 #i‡(!
deföed
(
__GNUC__
Ë&& !deföed(
__WATCOMC__
))

29 
	#NO_INLINE_FUNCS


	)

39 
	#SUPERBLOCK_OFFSET
 1024

	)

40 
	#SUPERBLOCK_SIZE
 1024

	)

46 
	#EXT2_LIB_CURRENT_REV
 
EXT2_DYNAMIC_REV


	)

48 #ifde‡
HAVE_SYS_TYPES_H


49 
	~<sys/ty≥s.h
>

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<°rög.h
>

56 #i‡
EXT2_FLAT_INCLUDES


57 
	~"e2_ty≥s.h
"

58 
	~"ext2_fs.h
"

59 
	~"ext3_exã¡s.h
"

61 
	~<ext2fs/ext2_ty≥s.h
>

62 
	~<ext2fs/ext2_fs.h
>

63 
	~<ext2fs/ext3_exã¡s.h
>

66 
__u32
 
	text2_öo_t
;

67 
__u32
 
	tblk_t
;

68 
__u64
 
	tblk64_t
;

69 
__u32
 
	tdgΩ_t
;

70 
__u32
 
	text2_off_t
;

71 
__s64
 
	te2_blk˙t_t
;

72 
__u32
 
	text2_dúhash_t
;

74 #i‡
EXT2_FLAT_INCLUDES


75 
	~"com_îr.h
"

76 
	~"ext2_io.h
"

77 
	~"ext2_îr.h
"

78 
	~"ext2_ext_©å.h
"

80 
	~<ë/com_îr.h
>

81 
	~<ext2fs/ext2_io.h
>

82 
	~<ext2fs/ext2_îr.h
>

83 
	~<ext2fs/ext2_ext_©å.h
>

89 #ifde‡
_MSC_VER


90 
	#EXT2_QSORT_TYPE
 
__cde˛


	)

92 
	#EXT2_QSORT_TYPE
 

	)

95 
°ru˘_ext2_fûsys
 *
	text2_fûsys
;

97 
	#EXT2FS_MARK_ERROR
 0

	)

98 
	#EXT2FS_UNMARK_ERROR
 1

	)

99 
	#EXT2FS_TEST_ERROR
 2

	)

101 
ext2fs_°ru˘_gíîic_bôm≠
 *
	text2fs_gíîic_bôm≠
;

102 
ext2fs_°ru˘_gíîic_bôm≠
 *
	text2fs_öode_bôm≠
;

103 
ext2fs_°ru˘_gíîic_bôm≠
 *
	text2fs_block_bôm≠
;

105 
	#EXT2_FIRST_INODE
(
s
Ë
	`EXT2_FIRST_INO
(s)

	)

112 
ext2_°ru˘_u32_li°
 *
	text2_badblocks_li°
;

113 
ext2_°ru˘_u32_ôî©e
 *
	text2_badblocks_ôî©e
;

115 
ext2_°ru˘_u32_li°
 *
	text2_u32_li°
;

116 
ext2_°ru˘_u32_ôî©e
 *
	text2_u32_ôî©e
;

119 
ext2_°ru˘_u32_li°
 *
	tbadblocks_li°
;

120 
ext2_°ru˘_u32_ôî©e
 *
	tbadblocks_ôî©e
;

122 
	#BADBLOCKS_FLAG_DIRTY
 1

	)

127 
	sext2_db_íåy
 {

128 
ext2_öo_t
 
öo
;

129 
blk_t
 
blk
;

130 
block˙t
;

133 
ext2_°ru˘_dbli°
 *
	text2_dbli°
;

135 
	#DBLIST_ABORT
 1

	)

141 
	#EXT2_FILE_WRITE
 0x0001

	)

142 
	#EXT2_FILE_CREATE
 0x0002

	)

144 
	#EXT2_FILE_MASK
 0x00FF

	)

146 
	#EXT2_FILE_BUF_DIRTY
 0x4000

	)

147 
	#EXT2_FILE_BUF_VALID
 0x2000

	)

149 
ext2_fûe
 *
	text2_fûe_t
;

151 
	#EXT2_SEEK_SET
 0

	)

152 
	#EXT2_SEEK_CUR
 1

	)

153 
	#EXT2_SEEK_END
 2

	)

158 
	#EXT2_FLAG_RW
 0x01

	)

159 
	#EXT2_FLAG_CHANGED
 0x02

	)

160 
	#EXT2_FLAG_DIRTY
 0x04

	)

161 
	#EXT2_FLAG_VALID
 0x08

	)

162 
	#EXT2_FLAG_IB_DIRTY
 0x10

	)

163 
	#EXT2_FLAG_BB_DIRTY
 0x20

	)

164 
	#EXT2_FLAG_SWAP_BYTES
 0x40

	)

165 
	#EXT2_FLAG_SWAP_BYTES_READ
 0x80

	)

166 
	#EXT2_FLAG_SWAP_BYTES_WRITE
 0x100

	)

167 
	#EXT2_FLAG_MASTER_SB_ONLY
 0x200

	)

168 
	#EXT2_FLAG_FORCE
 0x400

	)

169 
	#EXT2_FLAG_SUPER_ONLY
 0x800

	)

170 
	#EXT2_FLAG_JOURNAL_DEV_OK
 0x1000

	)

171 
	#EXT2_FLAG_IMAGE_FILE
 0x2000

	)

172 
	#EXT2_FLAG_EXCLUSIVE
 0x4000

	)

173 
	#EXT2_FLAG_SOFTSUPP_FEATURES
 0x8000

	)

174 
	#EXT2_FLAG_NOFREE_ON_ERROR
 0x10000

	)

180 
	#EXT2_NEW_INODE_FL
 0x80000000

	)

187 
	#EXT2_MKJOURNAL_V1_SUPER
 0x0000001

	)

189 
	s°ru˘_ext2_fûsys
 {

190 
îrcode_t
 
magic
;

191 
io_ch™√l
 
io
;

192 
Êags
;

193 * 
devi˚_«me
;

194 
ext2_su≥r_block
 * 
su≥r
;

195 
blocksize
;

196 
‰agsize
;

197 
dgΩ_t
 
group_desc_cou¡
;

198 
desc_blocks
;

199 
ext2_group_desc
 * 
group_desc
;

200 
öode_blocks_≥r_group
;

201 
ext2fs_öode_bôm≠
 
öode_m≠
;

202 
ext2fs_block_bôm≠
 
block_m≠
;

203 
îrcode_t
 (*
gë_blocks
)(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
blk_t
 *
blocks
);

204 
îrcode_t
 (*
check_dúe˘‹y
)(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
);

205 
îrcode_t
 (*
wrôe_bôm≠s
)(
ext2_fûsys
 
fs
);

206 
îrcode_t
 (*
ªad_öode
)(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

207 
ext2_öode
 *
öode
);

208 
îrcode_t
 (*
wrôe_öode
)(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

209 
ext2_öode
 *
öode
);

210 
ext2_badblocks_li°
 
badblocks
;

211 
ext2_dbli°
 
dbli°
;

212 
__u32
 
°ride
;

213 
ext2_su≥r_block
 * 
‹ig_su≥r
;

214 
ext2_image_hdr
 * 
image_hódî
;

215 
__u32
 
umask
;

216 
time_t
 
now
;

220 
__u32
 
ª£rved
[7];

225 * 
¥iv_d©a
;

230 
ext2_öode_ˇche
 *
iˇche
;

231 
io_ch™√l
 
image_io
;

236 
îrcode_t
 (*
gë_Æloc_block
)(
ext2_fûsys
 
fs
, 
blk64_t
 
gﬂl
,

237 
blk64_t
 *
ªt
);

238 (*
block_Æloc_°©s
)(
ext2_fûsys
 
fs
, 
blk64_t
 
blk
, 
öu£
);

241 #i‡
EXT2_FLAT_INCLUDES


242 
	~"e2_bô›s.h
"

244 
	~<ext2fs/bô›s.h
>

250 
	#BLOCK_CHANGED
 1

	)

251 
	#BLOCK_ABORT
 2

	)

252 
	#BLOCK_ERROR
 4

	)

278 
	#BLOCK_FLAG_APPEND
 1

	)

279 
	#BLOCK_FLAG_HOLE
 1

	)

280 
	#BLOCK_FLAG_DEPTH_TRAVERSE
 2

	)

281 
	#BLOCK_FLAG_DATA_ONLY
 4

	)

282 
	#BLOCK_FLAG_READ_ONLY
 8

	)

284 
	#BLOCK_FLAG_NO_LARGE
 0x1000

	)

289 
	#BLOCK_COUNT_IND
 (-1)

	)

290 
	#BLOCK_COUNT_DIND
 (-2)

	)

291 
	#BLOCK_COUNT_TIND
 (-3)

	)

292 
	#BLOCK_COUNT_TRANSLATOR
 (-4)

	)

298 
	#EXT2_BMOVE_GET_DBLIST
 0x0001

	)

299 
	#EXT2_BMOVE_DEBUG
 0x0002

	)

306 
	#EXT2_EXTENT_FLAGS_LEAF
 0x0001

	)

307 
	#EXT2_EXTENT_FLAGS_UNINIT
 0x0002

	)

308 
	#EXT2_EXTENT_FLAGS_SECOND_VISIT
 0x0004

	)

310 
	sext2fs_exã¡
 {

311 
blk64_t
 
e_pblk
;

312 
blk64_t
 
e_lblk
;

313 
__u32
 
e_Àn
;

314 
__u32
 
e_Êags
;

317 
ext2_exã¡_h™dÀ
 *
	text2_exã¡_h™dÀ_t
;

318 
ext2_exã¡_∑th
 *
	text2_exã¡_∑th_t
;

323 
	#EXT2_EXTENT_CURRENT
 0x0000

	)

324 
	#EXT2_EXTENT_MOVE_MASK
 0x000F

	)

325 
	#EXT2_EXTENT_ROOT
 0x0001

	)

326 
	#EXT2_EXTENT_LAST_LEAF
 0x0002

	)

327 
	#EXT2_EXTENT_FIRST_SIB
 0x0003

	)

328 
	#EXT2_EXTENT_LAST_SIB
 0x0004

	)

329 
	#EXT2_EXTENT_NEXT_SIB
 0x0005

	)

330 
	#EXT2_EXTENT_PREV_SIB
 0x0006

	)

331 
	#EXT2_EXTENT_NEXT_LEAF
 0x0007

	)

332 
	#EXT2_EXTENT_PREV_LEAF
 0x0008

	)

333 
	#EXT2_EXTENT_NEXT
 0x0009

	)

334 
	#EXT2_EXTENT_PREV
 0x000A

	)

335 
	#EXT2_EXTENT_UP
 0x000B

	)

336 
	#EXT2_EXTENT_DOWN
 0x000C

	)

337 
	#EXT2_EXTENT_DOWN_AND_LAST
 0x000D

	)

342 
	#EXT2_EXTENT_INSERT_AFTER
 0x0001

	)

343 
	#EXT2_EXTENT_INSERT_NOSPLIT
 0x0002

	)

348 
	#EXT2_EXTENT_DELETE_KEEP_EMPTY
 0x001

	)

353 
	#EXT2_EXTENT_SET_BMAP_UNINIT
 0x0001

	)

358 
	sext2_exã¡_öfo
 {

359 
cuº_íåy
;

360 
cuº_Àvñ
;

361 
num_íåõs
;

362 
max_íåõs
;

363 
max_dïth
;

364 
byãs_avaû
;

365 
blk64_t
 
max_lblk
;

366 
blk64_t
 
max_pblk
;

367 
__u32
 
max_Àn
;

368 
__u32
 
max_unöô_Àn
;

374 
	#EXT2_DIRBLOCK_V2_STRUCT
 0x0001

	)

379 
	#DIRENT_CHANGED
 1

	)

380 
	#DIRENT_ABORT
 2

	)

381 
	#DIRENT_ERROR
 3

	)

387 
	#DIRENT_FLAG_INCLUDE_EMPTY
 1

	)

388 
	#DIRENT_FLAG_INCLUDE_REMOVED
 2

	)

390 
	#DIRENT_DOT_FILE
 1

	)

391 
	#DIRENT_DOT_DOT_FILE
 2

	)

392 
	#DIRENT_OTHER_FILE
 3

	)

393 
	#DIRENT_DELETED_FILE
 4

	)

398 
ext2_°ru˘_öode_sˇn
 *
	text2_öode_sˇn
;

403 
	#EXT2_SF_CHK_BADBLOCKS
 0x0001

	)

404 
	#EXT2_SF_BAD_INODE_BLK
 0x0002

	)

405 
	#EXT2_SF_BAD_EXTRA_BYTES
 0x0004

	)

406 
	#EXT2_SF_SKIP_MISSING_ITABLE
 0x0008

	)

407 
	#EXT2_SF_DO_LAZY
 0x0010

	)

412 
	#EXT2_MF_MOUNTED
 1

	)

413 
	#EXT2_MF_ISROOT
 2

	)

414 
	#EXT2_MF_READONLY
 4

	)

415 
	#EXT2_MF_SWAP
 8

	)

416 
	#EXT2_MF_BUSY
 16

	)

423 
	#LINUX_S_IFMT
 00170000

	)

424 
	#LINUX_S_IFSOCK
 0140000

	)

425 
	#LINUX_S_IFLNK
 0120000

	)

426 
	#LINUX_S_IFREG
 0100000

	)

427 
	#LINUX_S_IFBLK
 0060000

	)

428 
	#LINUX_S_IFDIR
 0040000

	)

429 
	#LINUX_S_IFCHR
 0020000

	)

430 
	#LINUX_S_IFIFO
 0010000

	)

431 
	#LINUX_S_ISUID
 0004000

	)

432 
	#LINUX_S_ISGID
 0002000

	)

433 
	#LINUX_S_ISVTX
 0001000

	)

435 
	#LINUX_S_IRWXU
 00700

	)

436 
	#LINUX_S_IRUSR
 00400

	)

437 
	#LINUX_S_IWUSR
 00200

	)

438 
	#LINUX_S_IXUSR
 00100

	)

440 
	#LINUX_S_IRWXG
 00070

	)

441 
	#LINUX_S_IRGRP
 00040

	)

442 
	#LINUX_S_IWGRP
 00020

	)

443 
	#LINUX_S_IXGRP
 00010

	)

445 
	#LINUX_S_IRWXO
 00007

	)

446 
	#LINUX_S_IROTH
 00004

	)

447 
	#LINUX_S_IWOTH
 00002

	)

448 
	#LINUX_S_IXOTH
 00001

	)

450 
	#LINUX_S_ISLNK
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFLNK
)

	)

451 
	#LINUX_S_ISREG
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFREG
)

	)

452 
	#LINUX_S_ISDIR
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFDIR
)

	)

453 
	#LINUX_S_ISCHR
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFCHR
)

	)

454 
	#LINUX_S_ISBLK
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFBLK
)

	)

455 
	#LINUX_S_ISFIFO
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFIFO
)

	)

456 
	#LINUX_S_ISSOCK
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFSOCK
)

	)

461 
	#EXT2_I_SIZE
(
i
Ë((i)->
i_size
 | ((
__u64
Ë(i)->
i_size_high
 << 32))

	)

466 
	#EXT2_ICOUNT_OPT_INCREMENT
 0x01

	)

468 
ext2_icou¡
 *
	text2_icou¡_t
;

473 
	#BMAP_ALLOC
 0x0001

	)

474 
	#BMAP_SET
 0x0002

	)

479 
	#BMAP_RET_UNINIT
 0x0001

	)

484 
	#IMAGER_FLAG_INODEMAP
 1

	)

485 
	#IMAGER_FLAG_SPARSEWRITE
 2

	)

491 
	#EXT2_CHECK_MAGIC
(, 
code
) \

492 i‡(()->
magic
 !(
code
)Ë (code)

	)

498 
	#EXT2FS_COMPRESSED_BLKADDR
 ((
blk_t
Ë-1)

	)

499 
	#HOLE_BLKADDR
(
_b
Ë((_bË=0 || (_bË=
EXT2FS_COMPRESSED_BLKADDR
)

	)

504 
	#EXT2_LIB_FEATURE_COMPAT_SUPP
 (
EXT2_FEATURE_COMPAT_DIR_PREALLOC
|\

505 
EXT2_FEATURE_COMPAT_IMAGIC_INODES
|\

506 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
|\

507 
EXT2_FEATURE_COMPAT_RESIZE_INODE
|\

508 
EXT2_FEATURE_COMPAT_DIR_INDEX
|\

509 
EXT2_FEATURE_COMPAT_EXT_ATTR
)

	)

512 #ifde‡
ENABLE_COMPRESSION


513 #i‚de‡
I_KNOW_THAT_COMPRESSION_IS_EXPERIMENTAL


519 
	#EXT2_LIB_FEATURE_INCOMPAT_SUPP
 (
EXT2_FEATURE_INCOMPAT_FILETYPE
|\

520 
EXT2_FEATURE_INCOMPAT_COMPRESSION
|\

521 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
|\

522 
EXT2_FEATURE_INCOMPAT_META_BG
|\

523 
EXT3_FEATURE_INCOMPAT_RECOVER
|\

524 
EXT3_FEATURE_INCOMPAT_EXTENTS
|\

525 
EXT4_FEATURE_INCOMPAT_FLEX_BG
)

	)

527 
	#EXT2_LIB_FEATURE_INCOMPAT_SUPP
 (
EXT2_FEATURE_INCOMPAT_FILETYPE
|\

528 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
|\

529 
EXT2_FEATURE_INCOMPAT_META_BG
|\

530 
EXT3_FEATURE_INCOMPAT_RECOVER
|\

531 
EXT3_FEATURE_INCOMPAT_EXTENTS
|\

532 
EXT4_FEATURE_INCOMPAT_FLEX_BG
)

	)

534 
	#EXT2_LIB_FEATURE_RO_COMPAT_SUPP
 (
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
|\

535 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
|\

536 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
|\

537 
EXT4_FEATURE_RO_COMPAT_DIR_NLINK
|\

538 
EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE
|\

539 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
)

	)

545 
	#EXT2_LIB_SOFTSUPP_INCOMPAT
 (0)

	)

546 
	#EXT2_LIB_SOFTSUPP_RO_COMPAT
 (0)

	)

553 
îrcode_t
 
ext2fs_√w_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, 
mode
,

554 
ext2fs_öode_bôm≠
 
m≠
, 
ext2_öo_t
 *
ªt
);

555 
îrcode_t
 
ext2fs_√w_block
(
ext2_fûsys
 
fs
, 
blk_t
 
gﬂl
,

556 
ext2fs_block_bôm≠
 
m≠
, 
blk_t
 *
ªt
);

557 
îrcode_t
 
ext2fs_gë_‰ì_blocks
(
ext2_fûsys
 
fs
, 
blk_t
 
°¨t
,

558 
blk_t
 
föish
, 
num
,

559 
ext2fs_block_bôm≠
 
m≠
,

560 
blk_t
 *
ªt
);

561 
îrcode_t
 
ext2fs_Æloc_block
(
ext2_fûsys
 
fs
, 
blk_t
 
gﬂl
,

562 *
block_buf
, 
blk_t
 *
ªt
);

563 
ext2fs_£t_Æloc_block_ˇŒback
(
ext2_fûsys
 
fs
,

564 
îrcode_t
 (*
func
)(
ext2_fûsys
 
fs
,

565 
blk64_t
 
gﬂl
,

566 
blk64_t
 *
ªt
),

567 
îrcode_t
 (**
ﬁd
)(
ext2_fûsys
 
fs
,

568 
blk64_t
 
gﬂl
,

569 
blk64_t
 *
ªt
));

572 
ext2fs_ª£rve_su≥r_™d_bgd
(
ext2_fûsys
 
fs
,

573 
dgΩ_t
 
group
,

574 
ext2fs_block_bôm≠
 
bm≠
);

575 
ext2fs_£t_block_Æloc_°©s_ˇŒback
(
ext2_fûsys
 
fs
,

576 (*
func
)(
ext2_fûsys
 
fs
,

577 
blk64_t
 
blk
,

578 
öu£
),

579 (**
ﬁd
)(
ext2_fûsys
 
fs
,

580 
blk64_t
 
blk
,

581 
öu£
));

584 
ext2fs_öode_Æloc_°©s
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
öu£
);

585 
ext2fs_öode_Æloc_°©s2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

586 
öu£
, 
isdú
);

587 
ext2fs_block_Æloc_°©s
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, 
öu£
);

590 
îrcode_t
 
ext2fs_Æloˇã_èbÀs
(
ext2_fûsys
 
fs
);

591 
îrcode_t
 
ext2fs_Æloˇã_group_èbÀ
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
,

592 
ext2fs_block_bôm≠
 
bm≠
);

595 
îrcode_t
 
ext2fs_u32_li°_¸óã
(
ext2_u32_li°
 *
ªt
, 
size
);

596 
îrcode_t
 
ext2fs_u32_li°_add
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

597 
ext2fs_u32_li°_föd
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

598 
ext2fs_u32_li°_ã°
(
ext2_u32_li°
 
bb
, 
blk_t
 
blk
);

599 
îrcode_t
 
ext2fs_u32_li°_ôî©e_begö
(
ext2_u32_li°
 
bb
,

600 
ext2_u32_ôî©e
 *
ªt
);

601 
ext2fs_u32_li°_ôî©e
(
ext2_u32_ôî©e
 
ôî
, 
blk_t
 *
blk
);

602 
ext2fs_u32_li°_ôî©e_íd
(
ext2_u32_ôî©e
 
ôî
);

603 
îrcode_t
 
ext2fs_u32_c›y
(
ext2_u32_li°
 
§c
,Éxt2_u32_li° *
de°
);

604 
ext2fs_u32_li°_equÆ
(
ext2_u32_li°
 
bb1
,Éxt2_u32_li° 
bb2
);

606 
îrcode_t
 
ext2fs_badblocks_li°_¸óã
(
ext2_badblocks_li°
 *
ªt
,

607 
size
);

608 
îrcode_t
 
ext2fs_badblocks_li°_add
(
ext2_badblocks_li°
 
bb
,

609 
blk_t
 
blk
);

610 
ext2fs_badblocks_li°_ã°
(
ext2_badblocks_li°
 
bb
,

611 
blk_t
 
blk
);

612 
ext2fs_u32_li°_dñ
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

613 
ext2fs_badblocks_li°_dñ
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

614 
îrcode_t


615 
ext2fs_badblocks_li°_ôî©e_begö
(
ext2_badblocks_li°
 
bb
,

616 
ext2_badblocks_ôî©e
 *
ªt
);

617 
ext2fs_badblocks_li°_ôî©e
(
ext2_badblocks_ôî©e
 
ôî
,

618 
blk_t
 *
blk
);

619 
ext2fs_badblocks_li°_ôî©e_íd
(
ext2_badblocks_ôî©e
 
ôî
);

620 
îrcode_t
 
ext2fs_badblocks_c›y
(
ext2_badblocks_li°
 
§c
,

621 
ext2_badblocks_li°
 *
de°
);

622 
ext2fs_badblocks_equÆ
(
ext2_badblocks_li°
 
bb1
,

623 
ext2_badblocks_li°
 
bb2
);

624 
ext2fs_u32_li°_cou¡
(
ext2_u32_li°
 
bb
);

627 
îrcode_t
 
badblocks_li°_¸óã
(
badblocks_li°
 *
ªt
, 
size
);

628 
îrcode_t
 
badblocks_li°_add
(
badblocks_li°
 
bb
, 
blk_t
 
blk
);

629 
badblocks_li°_ã°
(
badblocks_li°
 
bb
, 
blk_t
 
blk
);

630 
îrcode_t
 
badblocks_li°_ôî©e_begö
(
badblocks_li°
 
bb
,

631 
badblocks_ôî©e
 *
ªt
);

632 
badblocks_li°_ôî©e
(
badblocks_ôî©e
 
ôî
, 
blk_t
 *
blk
);

633 
badblocks_li°_ôî©e_íd
(
badblocks_ôî©e
 
ôî
);

634 
badblocks_li°_‰ì
(
badblocks_li°
 
bb
);

637 
îrcode_t
 
ext2fs_upd©e_bb_öode
(
ext2_fûsys
 
fs
,

638 
ext2_badblocks_li°
 
bb_li°
);

641 
ext2fs_‰ì_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
);

642 
ext2fs_‰ì_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
);

643 
îrcode_t
 
ext2fs_c›y_bôm≠
(
ext2fs_gíîic_bôm≠
 
§c
,

644 
ext2fs_gíîic_bôm≠
 *
de°
);

645 
îrcode_t
 
ext2fs_wrôe_öode_bôm≠
(
ext2_fûsys
 
fs
);

646 
îrcode_t
 
ext2fs_wrôe_block_bôm≠
 (
ext2_fûsys
 
fs
);

647 
îrcode_t
 
ext2fs_ªad_öode_bôm≠
 (
ext2_fûsys
 
fs
);

648 
îrcode_t
 
ext2fs_ªad_block_bôm≠
(
ext2_fûsys
 
fs
);

649 
îrcode_t
 
ext2fs_Æloˇã_block_bôm≠
(
ext2_fûsys
 
fs
,

650 c⁄° *
des¸
,

651 
ext2fs_block_bôm≠
 *
ªt
);

652 
îrcode_t
 
ext2fs_Æloˇã_öode_bôm≠
(
ext2_fûsys
 
fs
,

653 c⁄° *
des¸
,

654 
ext2fs_öode_bôm≠
 *
ªt
);

655 
îrcode_t
 
ext2fs_fudge_öode_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
,

656 
ext2_öo_t
 
íd
,Éxt2_öo_à*
€nd
);

657 
îrcode_t
 
ext2fs_fudge_block_bôm≠_íd
(
ext2fs_block_bôm≠
 
bôm≠
,

658 
blk_t
 
íd
, blk_à*
€nd
);

659 
ext2fs_˛ór_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
);

660 
ext2fs_˛ór_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
);

661 
îrcode_t
 
ext2fs_ªad_bôm≠s
(
ext2_fûsys
 
fs
);

662 
îrcode_t
 
ext2fs_wrôe_bôm≠s
(
ext2_fûsys
 
fs
);

663 
îrcode_t
 
ext2fs_ªsize_öode_bôm≠
(
__u32
 
√w_íd
, __u32 
√w_ªÆ_íd
,

664 
ext2fs_öode_bôm≠
 
bm≠
);

665 
îrcode_t
 
ext2fs_ªsize_block_bôm≠
(
__u32
 
√w_íd
, __u32 
√w_ªÆ_íd
,

666 
ext2fs_block_bôm≠
 
bm≠
);

667 
îrcode_t
 
ext2fs_com∑ª_block_bôm≠
(
ext2fs_block_bôm≠
 
bm1
,

668 
ext2fs_block_bôm≠
 
bm2
);

669 
îrcode_t
 
ext2fs_com∑ª_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bm1
,

670 
ext2fs_öode_bôm≠
 
bm2
);

671 
îrcode_t
 
ext2fs_£t_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bm≠
,

672 
ext2_öo_t
 
°¨t
, 
num
,

673 *
ö
);

674 
îrcode_t
 
ext2fs_gë_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bm≠
,

675 
ext2_öo_t
 
°¨t
, 
num
,

676 *
out
);

677 
îrcode_t
 
ext2fs_£t_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bm≠
,

678 
blk_t
 
°¨t
, 
num
,

679 *
ö
);

680 
îrcode_t
 
ext2fs_gë_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bm≠
,

681 
blk_t
 
°¨t
, 
num
,

682 *
out
);

686 
îrcode_t
 
ext2fs_block_ôî©e
(
ext2_fûsys
 
fs
,

687 
ext2_öo_t
 
öo
,

688 
Êags
,

689 *
block_buf
,

690 (*
func
)(
ext2_fûsys
 
fs
,

691 
blk_t
 *
blockƒ
,

692 
block˙t
,

693 *
¥iv_d©a
),

694 *
¥iv_d©a
);

695 
îrcode_t
 
ext2fs_block_ôî©e2
(
ext2_fûsys
 
fs
,

696 
ext2_öo_t
 
öo
,

697 
Êags
,

698 *
block_buf
,

699 (*
func
)(
ext2_fûsys
 
fs
,

700 
blk_t
 *
blockƒ
,

701 
e2_blk˙t_t
 
block˙t
,

702 
blk_t
 
ªf_blk
,

703 
ªf_off£t
,

704 *
¥iv_d©a
),

705 *
¥iv_d©a
);

708 
îrcode_t
 
ext2fs_bm≠
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

709 
ext2_öode
 *
öode
,

710 *
block_buf
, 
bm≠_Êags
,

711 
blk_t
 
block
, blk_à*
phys_blk
);

712 
îrcode_t
 
ext2fs_bm≠2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

713 
ext2_öode
 *
öode
,

714 *
block_buf
, 
bm≠_Êags
, 
blk64_t
 
block
,

715 *
ªt_Êags
, 
blk64_t
 *
phys_blk
);

719 
îrcode_t
 
ext2fs_move_blocks
(
ext2_fûsys
 
fs
,

720 
ext2fs_block_bôm≠
 
ª£rve
,

721 
ext2fs_block_bôm≠
 
Æloc_m≠
,

722 
Êags
);

726 
îrcode_t
 
ext2fs_check_desc
(
ext2_fûsys
 
fs
);

729 
îrcode_t
 
ext2fs_˛o£
(
ext2_fûsys
 
fs
);

730 
îrcode_t
 
ext2fs_Êush
(
ext2_fûsys
 
fs
);

731 
ext2fs_bg_has_su≥r
(
ext2_fûsys
 
fs
, 
group_block
);

732 
ext2fs_su≥r_™d_bgd_loc
(
ext2_fûsys
 
fs
,

733 
dgΩ_t
 
group
,

734 
blk_t
 *
ªt_su≥r_blk
,

735 
blk_t
 *
ªt_ﬁd_desc_blk
,

736 
blk_t
 *
ªt_√w_desc_blk
,

737 *
ªt_mëa_bg
);

738 
ext2fs_upd©e_dy«mic_ªv
(
ext2_fûsys
 
fs
);

741 
ext2fs_group_desc_csum_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

742 
ext2fs_group_desc_csum_vîify
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

743 
îrcode_t
 
ext2fs_£t_gdt_csum
(
ext2_fûsys
 
fs
);

747 
îrcode_t
 
ext2fs_gë_num_dús
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 *
ªt_num_dús
);

748 
îrcode_t
 
ext2fs_öô_dbli°
(
ext2_fûsys
 
fs
, 
ext2_dbli°
 *
ªt_dbli°
);

749 
îrcode_t
 
ext2fs_add_dú_block
(
ext2_dbli°
 
dbli°
, 
ext2_öo_t
 
öo
,

750 
blk_t
 
blk
, 
block˙t
);

751 
ext2fs_dbli°_s‹t
(
ext2_dbli°
 
dbli°
,

752 
EXT2_QSORT_TYPE
 (*
s‹tfunc
)(const *,

754 
îrcode_t
 
ext2fs_dbli°_ôî©e
(
ext2_dbli°
 
dbli°
,

755 (*
func
)(
ext2_fûsys
 
fs
, 
ext2_db_íåy
 *
db_öfo
,

756 *
¥iv_d©a
),

757 *
¥iv_d©a
);

758 
îrcode_t
 
ext2fs_£t_dú_block
(
ext2_dbli°
 
dbli°
, 
ext2_öo_t
 
öo
,

759 
blk_t
 
blk
, 
block˙t
);

760 
îrcode_t
 
ext2fs_c›y_dbli°
(
ext2_dbli°
 
§c
,

761 
ext2_dbli°
 *
de°
);

762 
ext2fs_dbli°_cou¡
(
ext2_dbli°
 
dbli°
);

763 
îrcode_t
 
ext2fs_dbli°_gë_œ°
(
ext2_dbli°
 
dbli°
,

764 
ext2_db_íåy
 **
íåy
);

765 
îrcode_t
 
ext2fs_dbli°_dr›_œ°
(
ext2_dbli°
 
dbli°
);

768 
îrcode_t


769 
ext2fs_dbli°_dú_ôî©e
(
ext2_dbli°
 
dbli°
,

770 
Êags
,

771 *
block_buf
,

772 (*
func
)(
ext2_öo_t
 
dú
,

773 
íåy
,

774 
ext2_dú_íåy
 *
dúít
,

775 
off£t
,

776 
blocksize
,

777 *
buf
,

778 *
¥iv_d©a
),

779 *
¥iv_d©a
);

782 
îrcode_t
 
ext2fs_ªad_dú_block
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

783 *
buf
);

784 
îrcode_t
 
ext2fs_ªad_dú_block2
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

785 *
buf
, 
Êags
);

786 
îrcode_t
 
ext2fs_wrôe_dú_block
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

787 *
buf
);

788 
îrcode_t
 
ext2fs_wrôe_dú_block2
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

789 *
buf
, 
Êags
);

792 
îrcode_t
 
ext2fs_dúhash
(
vîsi⁄
, c⁄° *
«me
, 
Àn
,

793 c⁄° 
__u32
 *
£ed
,

794 
ext2_dúhash_t
 *
ªt_hash
,

795 
ext2_dúhash_t
 *
ªt_mö‹_hash
);

799 
îrcode_t
 
ext2fs_gë_ªc_Àn
(
ext2_fûsys
 
fs
,

800 
ext2_dú_íåy
 *
dúít
,

801 *
ªc_Àn
);

802 
îrcode_t
 
ext2fs_£t_ªc_Àn
(
ext2_fûsys
 
fs
,

803 
Àn
,

804 
ext2_dú_íåy
 *
dúít
);

805 
îrcode_t
 
ext2fs_dú_ôî©e
(
ext2_fûsys
 
fs
,

806 
ext2_öo_t
 
dú
,

807 
Êags
,

808 *
block_buf
,

809 (*
func
)(
ext2_dú_íåy
 *
dúít
,

810 
off£t
,

811 
blocksize
,

812 *
buf
,

813 *
¥iv_d©a
),

814 *
¥iv_d©a
);

815 
îrcode_t
 
ext2fs_dú_ôî©e2
(
ext2_fûsys
 
fs
,

816 
ext2_öo_t
 
dú
,

817 
Êags
,

818 *
block_buf
,

819 (*
func
)(
ext2_öo_t
 
dú
,

820 
íåy
,

821 
ext2_dú_íåy
 *
dúít
,

822 
off£t
,

823 
blocksize
,

824 *
buf
,

825 *
¥iv_d©a
),

826 *
¥iv_d©a
);

829 
îrcode_t
 
ext2fs_dup_h™dÀ
(
ext2_fûsys
 
§c
,Éxt2_fûsy†*
de°
);

832 
îrcode_t
 
ext2fs_ex∑nd_dú
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
);

835 
__u32
 
ext2fs_ext_©å_hash_íåy
(
ext2_ext_©å_íåy
 *
íåy
,

836 *
d©a
);

837 
îrcode_t
 
ext2fs_ªad_ext_©å
(
ext2_fûsys
 
fs
, 
blk_t
 
block
, *
buf
);

838 
îrcode_t
 
ext2fs_wrôe_ext_©å
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

839 *
buf
);

840 
îrcode_t
 
ext2fs_adju°_ó_ªfcou¡
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
,

841 *
block_buf
,

842 
adju°
, 
__u32
 *
√wcou¡
);

845 
îrcode_t
 
ext2fs_exã¡_hódî_vîify
(*
±r
, 
size
);

846 
îrcode_t
 
ext2fs_exã¡_›í
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

847 
ext2_exã¡_h™dÀ_t
 *
h™dÀ
);

848 
îrcode_t
 
ext2fs_exã¡_›í2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

849 
ext2_öode
 *
öode
,

850 
ext2_exã¡_h™dÀ_t
 *
ªt_h™dÀ
);

851 
ext2fs_exã¡_‰ì
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
);

852 
îrcode_t
 
ext2fs_exã¡_gë
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

853 
Êags
, 
ext2fs_exã¡
 *
exã¡
);

854 
îrcode_t
 
ext2fs_exã¡_ª∂a˚
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
,

855 
ext2fs_exã¡
 *
exã¡
);

856 
îrcode_t
 
ext2fs_exã¡_ö£π
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
,

857 
ext2fs_exã¡
 *
exã¡
);

858 
îrcode_t
 
ext2fs_exã¡_£t_bm≠
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

859 
blk64_t
 
logiˇl
, blk64_à
physiˇl
,

860 
Êags
);

861 
îrcode_t
 
ext2fs_exã¡_dñëe
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
);

862 
îrcode_t
 
ext2fs_exã¡_gë_öfo
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

863 
ext2_exã¡_öfo
 *
öfo
);

864 
îrcode_t
 
ext2fs_exã¡_gŸo
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

865 
blk64_t
 
blk
);

868 
îrcode_t
 
ext2fs_fûe_›í2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

869 
ext2_öode
 *
öode
,

870 
Êags
, 
ext2_fûe_t
 *
ªt
);

871 
îrcode_t
 
ext2fs_fûe_›í
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

872 
Êags
, 
ext2_fûe_t
 *
ªt
);

873 
ext2_fûsys
 
ext2fs_fûe_gë_fs
(
ext2_fûe_t
 
fûe
);

874 
îrcode_t
 
ext2fs_fûe_˛o£
(
ext2_fûe_t
 
fûe
);

875 
îrcode_t
 
ext2fs_fûe_Êush
(
ext2_fûe_t
 
fûe
);

876 
îrcode_t
 
ext2fs_fûe_ªad
(
ext2_fûe_t
 
fûe
, *
buf
,

877 
w™ãd
, *
gŸ
);

878 
îrcode_t
 
ext2fs_fûe_wrôe
(
ext2_fûe_t
 
fûe
, c⁄° *
buf
,

879 
nbyãs
, *
wrôãn
);

880 
îrcode_t
 
ext2fs_fûe_Œ£ek
(
ext2_fûe_t
 
fûe
, 
__u64
 
off£t
,

881 
whí˚
, 
__u64
 *
ªt_pos
);

882 
îrcode_t
 
ext2fs_fûe_l£ek
(
ext2_fûe_t
 
fûe
, 
ext2_off_t
 
off£t
,

883 
whí˚
, 
ext2_off_t
 *
ªt_pos
);

884 
îrcode_t
 
ext2fs_fûe_gë_lsize
(
ext2_fûe_t
 
fûe
, 
__u64
 *
ªt_size
);

885 
ext2_off_t
 
ext2fs_fûe_gë_size
(
ext2_fûe_t
 
fûe
);

886 
îrcode_t
 
ext2fs_fûe_£t_size
(
ext2_fûe_t
 
fûe
, 
ext2_off_t
 
size
);

889 *
ext2fs_föd_block_devi˚
(
dev_t
 
devi˚
);

892 
îrcode_t
 
ext2fs_sync_devi˚
(
fd
, 
Êushb
);

895 
ext2fs_‰ì
(
ext2_fûsys
 
fs
);

896 
ext2fs_‰ì_dbli°
(
ext2_dbli°
 
dbli°
);

897 
ext2fs_badblocks_li°_‰ì
(
ext2_badblocks_li°
 
bb
);

898 
ext2fs_u32_li°_‰ì
(
ext2_u32_li°
 
bb
);

901 
ext2fs_‰ì_gíîic_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
);

902 
îrcode_t
 
ext2fs_make_gíîic_bôm≠
”ºcode_à
magic
, 
ext2_fûsys
 
fs
,

903 
__u32
 
°¨t
, __u32 
íd
,

904 
__u32
 
ªÆ_íd
,

905 c⁄° *
des¸
, *
öô_m≠
,

906 
ext2fs_gíîic_bôm≠
 *
ªt
);

907 
îrcode_t
 
ext2fs_Æloˇã_gíîic_bôm≠
(
__u32
 
°¨t
,

908 
__u32
 
íd
,

909 
__u32
 
ªÆ_íd
,

910 c⁄° *
des¸
,

911 
ext2fs_gíîic_bôm≠
 *
ªt
);

912 
îrcode_t
 
ext2fs_c›y_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
§c
,

913 
ext2fs_gíîic_bôm≠
 *
de°
);

914 
ext2fs_˛ór_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

915 
îrcode_t
 
ext2fs_fudge_gíîic_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
,

916 
îrcode_t
 
magic
,

917 
îrcode_t
 
√q
,

918 
ext2_öo_t
 
íd
,

919 
ext2_öo_t
 *
€nd
);

920 
ext2fs_£t_gíîic_bôm≠_∑ddög
(
ext2fs_gíîic_bôm≠
 
m≠
);

921 
îrcode_t
 
ext2fs_ªsize_gíîic_bôm≠
”ºcode_à
magic
,

922 
__u32
 
√w_íd
,

923 
__u32
 
√w_ªÆ_íd
,

924 
ext2fs_gíîic_bôm≠
 
bm≠
);

925 
îrcode_t
 
ext2fs_com∑ª_gíîic_bôm≠
”ºcode_à
magic
,Éºcode_à
√q
,

926 
ext2fs_gíîic_bôm≠
 
bm1
,

927 
ext2fs_gíîic_bôm≠
 
bm2
);

928 
îrcode_t
 
ext2fs_gë_gíîic_bôm≠_ønge
(
ext2fs_gíîic_bôm≠
 
bm≠
,

929 
îrcode_t
 
magic
,

930 
__u32
 
°¨t
, __u32 
num
,

931 *
out
);

932 
îrcode_t
 
ext2fs_£t_gíîic_bôm≠_ønge
(
ext2fs_gíîic_bôm≠
 
bm≠
,

933 
îrcode_t
 
magic
,

934 
__u32
 
°¨t
, __u32 
num
,

935 *
ö
);

938 
îrcode_t
 
ext2fs_gë_devi˚_size
(c⁄° *
fûe
, 
blocksize
,

939 
blk_t
 *
ªtblocks
);

940 
îrcode_t
 
ext2fs_gë_devi˚_size2
(c⁄° *
fûe
, 
blocksize
,

941 
blk64_t
 *
ªtblocks
);

944 
îrcode_t
 
ext2fs_gë_devi˚_£˘size
(c⁄° *
fûe
, *
£˘size
);

947 
îrcode_t
 
ext2fs_iblk_add_blocks
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
,

948 
blk64_t
 
num_blocks
);

949 
îrcode_t
 
ext2fs_iblk_sub_blocks
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
,

950 
blk64_t
 
num_blocks
);

951 
îrcode_t
 
ext2fs_iblk_£t
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
, 
blk64_t
 
b
);

954 
îrcode_t
 
ext2fs_image_öode_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

955 
îrcode_t
 
ext2fs_image_öode_ªad
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

956 
îrcode_t
 
ext2fs_image_su≥r_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

957 
îrcode_t
 
ext2fs_image_su≥r_ªad
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

958 
îrcode_t
 
ext2fs_image_bôm≠_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

959 
îrcode_t
 
ext2fs_image_bôm≠_ªad
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

962 
îrcode_t
 
ext2fs_ªad_öd_block
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, *
buf
);

963 
îrcode_t
 
ext2fs_wrôe_öd_block
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, *
buf
);

966 
îrcode_t
 
ext2fs_öôülize
(c⁄° *
«me
, 
Êags
,

967 
ext2_su≥r_block
 *
∑øm
,

968 
io_m™agî
 
m™agî
, 
ext2_fûsys
 *
ªt_fs
);

971 
ext2fs_‰ì_icou¡
(
ext2_icou¡_t
 
icou¡
);

972 
îrcode_t
 
ext2fs_¸óã_icou¡_tdb
(
ext2_fûsys
 
fs
, *
tdb_dú
,

973 
Êags
, 
ext2_icou¡_t
 *
ªt
);

974 
îrcode_t
 
ext2fs_¸óã_icou¡2
(
ext2_fûsys
 
fs
, 
Êags
,

975 
size
,

976 
ext2_icou¡_t
 
höt
,Éxt2_icou¡_à*
ªt
);

977 
îrcode_t
 
ext2fs_¸óã_icou¡
(
ext2_fûsys
 
fs
, 
Êags
,

978 
size
,

979 
ext2_icou¡_t
 *
ªt
);

980 
îrcode_t
 
ext2fs_icou¡_„tch
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

981 
__u16
 *
ªt
);

982 
îrcode_t
 
ext2fs_icou¡_ö¸emít
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

983 
__u16
 *
ªt
);

984 
îrcode_t
 
ext2fs_icou¡_de¸emít
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

985 
__u16
 *
ªt
);

986 
îrcode_t
 
ext2fs_icou¡_°‹e
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

987 
__u16
 
cou¡
);

988 
ext2_öo_t
 
ext2fs_gë_icou¡_size
(
ext2_icou¡_t
 
icou¡
);

989 
îrcode_t
 
ext2fs_icou¡_vÆid©e
(
ext2_icou¡_t
 
icou¡
, 
FILE
 *);

992 
îrcode_t
 
ext2fs_Êush_iˇche
(
ext2_fûsys
 
fs
);

993 
îrcode_t
 
ext2fs_gë_√xt_öode_fuŒ
(
ext2_öode_sˇn
 
sˇn
,

994 
ext2_öo_t
 *
öo
,

995 
ext2_öode
 *
öode
,

996 
bufsize
);

997 
îrcode_t
 
ext2fs_›í_öode_sˇn
(
ext2_fûsys
 
fs
, 
buf„r_blocks
,

998 
ext2_öode_sˇn
 *
ªt_sˇn
);

999 
ext2fs_˛o£_öode_sˇn
(
ext2_öode_sˇn
 
sˇn
);

1000 
îrcode_t
 
ext2fs_gë_√xt_öode
(
ext2_öode_sˇn
 
sˇn
, 
ext2_öo_t
 *
öo
,

1001 
ext2_öode
 *
öode
);

1002 
îrcode_t
 
ext2fs_öode_sˇn_gŸo_blockgroup
(
ext2_öode_sˇn
 
sˇn
,

1003 
group
);

1004 
ext2fs_£t_öode_ˇŒback


1005 (
ext2_öode_sˇn
 
sˇn
,

1006 
îrcode_t
 (*
d⁄e_group
)(
ext2_fûsys
 
fs
,

1007 
ext2_öode_sˇn
 
sˇn
,

1008 
dgΩ_t
 
group
,

1009 * 
¥iv_d©a
),

1010 *
d⁄e_group_d©a
);

1011 
ext2fs_öode_sˇn_Êags
(
ext2_öode_sˇn
 
sˇn
, 
£t_Êags
,

1012 
˛ór_Êags
);

1013 
îrcode_t
 
ext2fs_ªad_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1014 
ext2_öode
 * 
öode
,

1015 
bufsize
);

1016 
îrcode_t
 
ext2fs_ªad_öode
 (
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1017 
ext2_öode
 * 
öode
);

1018 
îrcode_t
 
ext2fs_wrôe_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1019 
ext2_öode
 * 
öode
,

1020 
bufsize
);

1021 
îrcode_t
 
ext2fs_wrôe_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1022 
ext2_öode
 * 
öode
);

1023 
îrcode_t
 
ext2fs_wrôe_√w_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1024 
ext2_öode
 * 
öode
);

1025 
îrcode_t
 
ext2fs_gë_blocks
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
blk_t
 *
blocks
);

1026 
îrcode_t
 
ext2fs_check_dúe˘‹y
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
);

1029 
io_m™agî
 
öode_io_m™agî
;

1030 
îrcode_t
 
ext2fs_öode_io_öã∫
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1031 **
«me
);

1032 
îrcode_t
 
ext2fs_öode_io_öã∫2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1033 
ext2_öode
 *
öode
,

1034 **
«me
);

1037 
îrcode_t
 
ext2fs_check_if_mou¡ed
(c⁄° *
fûe
, *
mou¡_Êags
);

1038 
îrcode_t
 
ext2fs_check_mou¡_poöt
(c⁄° *
devi˚
, *
mou¡_Êags
,

1039 *
mçt
, 
méí
);

1042 
îrcode_t
 
ext2fs_lookup
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

1043 
«mñí
, *
buf
, 
ext2_öo_t
 *
öode
);

1044 
îrcode_t
 
ext2fs_«mei
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

1045 c⁄° *
«me
, 
ext2_öo_t
 *
öode
);

1046 
îrcode_t
 
ext2fs_«mei_fﬁlow
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

1047 c⁄° *
«me
, 
ext2_öo_t
 *
öode
);

1048 
îrcode_t
 
ext2fs_fﬁlow_lök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

1049 
ext2_öo_t
 
öode
,Éxt2_öo_à*
ªs_öode
);

1052 
ext2fs_«tive_Êag
();

1055 
îrcode_t
 
ext2fs_√w_dú_block
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú_öo
,

1056 
ext2_öo_t
 
∑ª¡_öo
, **
block
);

1059 
îrcode_t
 
ext2fs_mkdú
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
∑ª¡
,Éxt2_öo_à
öum
,

1060 c⁄° *
«me
);

1063 
îrcode_t
 
ext2fs_zîo_blocks
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, 
num
,

1064 
blk_t
 *
ªt_blk
, *
ªt_cou¡
);

1065 
îrcode_t
 
ext2fs_¸óã_jou∫Æ_su≥rblock
(
ext2_fûsys
 
fs
,

1066 
__u32
 
size
, 
Êags
,

1067 **
ªt_jsb
);

1068 
îrcode_t
 
ext2fs_add_jou∫Æ_devi˚
(
ext2_fûsys
 
fs
,

1069 
ext2_fûsys
 
jou∫Æ_dev
);

1070 
îrcode_t
 
ext2fs_add_jou∫Æ_öode
(
ext2_fûsys
 
fs
, 
blk_t
 
size
,

1071 
Êags
);

1072 
ext2fs_deÁu…_jou∫Æ_size
(
__u64
 
blocks
);

1075 
îrcode_t
 
ext2fs_›í
(c⁄° *
«me
, 
Êags
, 
su≥rblock
,

1076 
block_size
, 
io_m™agî
 
m™agî
,

1077 
ext2_fûsys
 *
ªt_fs
);

1078 
îrcode_t
 
ext2fs_›í2
(c⁄° *
«me
, c⁄° *
io_›ti⁄s
,

1079 
Êags
, 
su≥rblock
,

1080 
block_size
, 
io_m™agî
 
m™agî
,

1081 
ext2_fûsys
 *
ªt_fs
);

1082 
blk_t
 
ext2fs_des¸ùt‹_block_loc
(
ext2_fûsys
 
fs
, blk_à
group_block
,

1083 
dgΩ_t
 
i
);

1084 
îrcode_t
 
ext2fs_gë_d©a_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 *
ﬁd_io
);

1085 
îrcode_t
 
ext2fs_£t_d©a_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 
√w_io
);

1086 
îrcode_t
 
ext2fs_ªwrôe_to_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 
√w_io
);

1089 
îrcode_t
 
ext2fs_gë_∑th«me
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
,Éxt2_öo_à
öo
,

1090 **
«me
);

1093 
îrcode_t
 
ext2fs_lök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

1094 
ext2_öo_t
 
öo
, 
Êags
);

1095 
îrcode_t
 
ext2fs_u∆ök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

1096 
ext2_öo_t
 
öo
, 
Êags
);

1099 
îrcode_t
 
ext2fs_ªad_bb_öode
(
ext2_fûsys
 
fs
,

1100 
ext2_badblocks_li°
 *
bb_li°
);

1103 
îrcode_t
 
ext2fs_ªad_bb_FILE2
(
ext2_fûsys
 
fs
, 
FILE
 *
f
,

1104 
ext2_badblocks_li°
 *
bb_li°
,

1105 *
¥iv_d©a
,

1106 (*
övÆid
)(
ext2_fûsys
 
fs
,

1107 
blk_t
 
blk
,

1108 *
bad°r
,

1109 *
¥iv_d©a
));

1110 
îrcode_t
 
ext2fs_ªad_bb_FILE
(
ext2_fûsys
 
fs
, 
FILE
 *
f
,

1111 
ext2_badblocks_li°
 *
bb_li°
,

1112 (*
övÆid
)(
ext2_fûsys
 
fs
,

1113 
blk_t
 
blk
));

1116 
îrcode_t
 
ext2fs_¸óã_ªsize_öode
(
ext2_fûsys
 
fs
);

1119 
ext2fs_sw≠_ext_©å
(*
to
, *
‰om
, 
bufsize
,

1120 
has_hódî
);

1121 
ext2fs_sw≠_ext_©å_hódî
(
ext2_ext_©å_hódî
 *
to_hódî
,

1122 
ext2_ext_©å_hódî
 *
‰om_hdr
);

1123 
ext2fs_sw≠_ext_©å_íåy
(
ext2_ext_©å_íåy
 *
to_íåy
,

1124 
ext2_ext_©å_íåy
 *
‰om_íåy
);

1125 
ext2fs_sw≠_su≥r
(
ext2_su≥r_block
 * 
su≥r
);

1126 
ext2fs_sw≠_group_desc
(
ext2_group_desc
 *
gdp
);

1127 
ext2fs_sw≠_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öode_œrge
 *
t
,

1128 
ext2_öode_œrge
 *
f
, 
ho°‹dî
,

1129 
bufsize
);

1130 
ext2fs_sw≠_öode
(
ext2_fûsys
 
fs
,
ext2_öode
 *
t
,

1131 
ext2_öode
 *
f
, 
ho°‹dî
);

1134 
ext2fs_öode_has_vÆid_blocks
(
ext2_öode
 *
öode
);

1137 
ext2fs_∑r£_vîsi⁄_°rög
(c⁄° *
vî_°rög
);

1138 
ext2fs_gë_libøry_vîsi⁄
(c⁄° **
vî_°rög
,

1139 c⁄° **
d©e_°rög
);

1142 
îrcode_t
 
ext2fs_wrôe_bb_FILE
(
ext2_badblocks_li°
 
bb_li°
,

1143 
Êags
,

1144 
FILE
 *
f
);

1148 
îrcode_t
 
ext2fs_gë_mem
(
size
, *
±r
);

1149 
îrcode_t
 
ext2fs_gë_¨øy
(
cou¡
, 
size
, *
±r
);

1150 
îrcode_t
 
ext2fs_‰ì_mem
(*
±r
);

1151 
îrcode_t
 
ext2fs_ªsize_mem
(
ﬁd_size
,

1152 
size
, *
±r
);

1153 
ext2fs_m¨k_su≥r_dúty
(
ext2_fûsys
 
fs
);

1154 
ext2fs_m¨k_ch™ged
(
ext2_fûsys
 
fs
);

1155 
ext2fs_ã°_ch™ged
(
ext2_fûsys
 
fs
);

1156 
ext2fs_m¨k_vÆid
(
ext2_fûsys
 
fs
);

1157 
ext2fs_unm¨k_vÆid
(
ext2_fûsys
 
fs
);

1158 
ext2fs_ã°_vÆid
(
ext2_fûsys
 
fs
);

1159 
ext2fs_m¨k_ib_dúty
(
ext2_fûsys
 
fs
);

1160 
ext2fs_m¨k_bb_dúty
(
ext2_fûsys
 
fs
);

1161 
ext2fs_ã°_ib_dúty
(
ext2_fûsys
 
fs
);

1162 
ext2fs_ã°_bb_dúty
(
ext2_fûsys
 
fs
);

1163 
ext2fs_group_of_blk
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
);

1164 
ext2fs_group_of_öo
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
);

1165 
blk_t
 
ext2fs_group_fú°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

1166 
blk_t
 
ext2fs_group_œ°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

1167 
blk_t
 
ext2fs_öode_d©a_blocks
(
ext2_fûsys
 
fs
,

1168 
ext2_öode
 *
öode
);

1169 
ext2fs_div_˚û
(
a
, 
b
);

1177 #i‡(
deföed
(
INCLUDE_INLINE_FUNCS
Ë|| !deföed(
NO_INLINE_FUNCS
))

1178 #ifde‡
INCLUDE_INLINE_FUNCS


1179 
	#_INLINE_
 

	)

1181 #ifde‡
__GNUC__


1182 
	#_INLINE_
 
__ölöe__


	)

1184 
	#_INLINE_
 
ölöe


	)

1188 #i‚de‡
EXT2_CUSTOM_MEMORY_ROUTINES


1189 
	~<°rög.h
>

1193 
_INLINE_
 
îrcode_t
 
ext2fs_gë_mem
(
size
, *
±r
)

1195 *
µ
;

1197 
µ
 = 
mÆloc
(
size
);

1198 i‡(!
µ
)

1199  
EXT2_ET_NO_MEMORY
;

1200 
mem˝y
(
±r
, &
µ
,  (pp));

1204 
_INLINE_
 
îrcode_t
 
ext2fs_gë_¨øy
(
cou¡
, 
size
, *
±r
)

1206 i‡(
cou¡
 && (-1UL)/cou¡<
size
)

1207  
EXT2_ET_NO_MEMORY
;

1208  
ext2fs_gë_mem
(
cou¡
*
size
, 
±r
);

1214 
_INLINE_
 
îrcode_t
 
ext2fs_‰ì_mem
(*
±r
)

1216 *
p
;

1218 
mem˝y
(&
p
, 
±r
, (p));

1219 
‰ì
(
p
);

1220 
p
 = 0;

1221 
mem˝y
(
±r
, &
p
, (p));

1228 
_INLINE_
 
îrcode_t
 
ext2fs_ªsize_mem
(
EXT2FS_ATTR
((
unu£d
)Ë
ﬁd_size
,

1229 
size
, *
±r
)

1231 *
p
;

1235 
mem˝y
(&
p
, 
±r
, (p));

1236 
p
 = 
ªÆloc
’, 
size
);

1237 i‡(!
p
)

1238  
EXT2_ET_NO_MEMORY
;

1239 
mem˝y
(
±r
, &
p
, (p));

1247 
_INLINE_
 
ext2fs_m¨k_su≥r_dúty
(
ext2_fûsys
 
fs
)

1249 
fs
->
Êags
 |
EXT2_FLAG_DIRTY
 | 
EXT2_FLAG_CHANGED
;

1255 
_INLINE_
 
ext2fs_m¨k_ch™ged
(
ext2_fûsys
 
fs
)

1257 
fs
->
Êags
 |
EXT2_FLAG_CHANGED
;

1263 
_INLINE_
 
ext2fs_ã°_ch™ged
(
ext2_fûsys
 
fs
)

1265  (
fs
->
Êags
 & 
EXT2_FLAG_CHANGED
);

1271 
_INLINE_
 
ext2fs_m¨k_vÆid
(
ext2_fûsys
 
fs
)

1273 
fs
->
Êags
 |
EXT2_FLAG_VALID
;

1279 
_INLINE_
 
ext2fs_unm¨k_vÆid
(
ext2_fûsys
 
fs
)

1281 
fs
->
Êags
 &~
EXT2_FLAG_VALID
;

1287 
_INLINE_
 
ext2fs_ã°_vÆid
(
ext2_fûsys
 
fs
)

1289  (
fs
->
Êags
 & 
EXT2_FLAG_VALID
);

1295 
_INLINE_
 
ext2fs_m¨k_ib_dúty
(
ext2_fûsys
 
fs
)

1297 
fs
->
Êags
 |
EXT2_FLAG_IB_DIRTY
 | 
EXT2_FLAG_CHANGED
;

1303 
_INLINE_
 
ext2fs_m¨k_bb_dúty
(
ext2_fûsys
 
fs
)

1305 
fs
->
Êags
 |
EXT2_FLAG_BB_DIRTY
 | 
EXT2_FLAG_CHANGED
;

1311 
_INLINE_
 
ext2fs_ã°_ib_dúty
(
ext2_fûsys
 
fs
)

1313  (
fs
->
Êags
 & 
EXT2_FLAG_IB_DIRTY
);

1319 
_INLINE_
 
ext2fs_ã°_bb_dúty
(
ext2_fûsys
 
fs
)

1321  (
fs
->
Êags
 & 
EXT2_FLAG_BB_DIRTY
);

1327 
_INLINE_
 
ext2fs_group_of_blk
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
)

1329  (
blk
 - 
fs
->
su≥r
->
s_fú°_d©a_block
) /

1330 
fs
->
su≥r
->
s_blocks_≥r_group
;

1336 
_INLINE_
 
ext2fs_group_of_öo
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
)

1338  (
öo
 - 1Ë/ 
fs
->
su≥r
->
s_öodes_≥r_group
;

1344 
_INLINE_
 
blk_t
 
ext2fs_group_fú°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
)

1346  
fs
->
su≥r
->
s_fú°_d©a_block
 +

1347 (
group
 * 
fs
->
su≥r
->
s_blocks_≥r_group
);

1353 
_INLINE_
 
blk_t
 
ext2fs_group_œ°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
)

1355  (
group
 =
fs
->
group_desc_cou¡
 - 1 ?

1356 
fs
->
su≥r
->
s_blocks_cou¡
 - 1 :

1357 
ext2fs_group_fú°_block
(
fs
, 
group
) +

1358 (
fs
->
su≥r
->
s_blocks_≥r_group
 - 1));

1361 
_INLINE_
 
blk_t
 
ext2fs_öode_d©a_blocks
(
ext2_fûsys
 
fs
,

1362 
ext2_öode
 *
öode
)

1364  
öode
->
i_blocks
 -

1365 (
öode
->
i_fûe_a˛
 ? 
fs
->
blocksize
 >> 9 : 0);

1371 
_INLINE_
 
ext2fs_div_˚û
(
a
, 
b
)

1373 i‡(!
a
)

1375  ((
a
 - 1Ë/ 
b
) + 1;

1377 #unde‡
_INLINE_


1380 #ifde‡
__˝lu•lus


	@ext2fsP.h

12 
	~"ext2fs.h
"

17 
	sext2_°ru˘_u32_li°
 {

18 
	mmagic
;

19 
	mnum
;

20 
	msize
;

21 
__u32
 *
	mli°
;

22 
	mbadblocks_Êags
;

25 
	sext2_°ru˘_u32_ôî©e
 {

26 
	mmagic
;

27 
ext2_u32_li°
 
	mbb
;

28 
	m±r
;

35 
	sext2_°ru˘_dbli°
 {

36 
	mmagic
;

37 
ext2_fûsys
 
	mfs
;

38 
ext2_öo_t
 
	msize
;

39 
ext2_öo_t
 
	mcou¡
;

40 
	ms‹ãd
;

41 
ext2_db_íåy
 * 
	mli°
;

47 
	sdú_c⁄ãxt
 {

48 
ext2_öo_t
 
	mdú
;

49 
	mÊags
;

50 *
	mbuf
;

51 (*
	mfunc
)(
ext2_öo_t
 
	mdú
,

52 
	míåy
,

53 
ext2_dú_íåy
 *
	mdúít
,

54 
	moff£t
,

55 
	mblocksize
,

56 *
	mbuf
,

57 *
	m¥iv_d©a
);

58 *
	m¥iv_d©a
;

59 
îrcode_t
 
	mîrcode
;

65 
	sext2_öode_ˇche
 {

66 * 
	mbuf„r
;

67 
blk_t
 
	mbuf„r_blk
;

68 
	mˇche_œ°
;

69 
	mˇche_size
;

70 
	mªfcou¡
;

71 
ext2_öode_ˇche_ít
 *
	mˇche
;

74 
	sext2_öode_ˇche_ít
 {

75 
ext2_öo_t
 
	möo
;

76 
ext2_öode
 
	möode
;

81 
ext2fs_¥o˚ss_dú_block
(
ext2_fûsys
 
fs
,

82 
blk_t
 *
blockƒ
,

83 
e2_blk˙t_t
 
block˙t
,

84 
blk_t
 
ªf_block
,

85 
ªf_off£t
,

86 *
¥iv_d©a
);

	@ext3_extents.h

19 #i‚de‡
_LINUX_EXT3_EXTENTS


20 
	#_LINUX_EXT3_EXTENTS


	)

33 
	sext3_exã¡
 {

34 
__u32
 
	mì_block
;

35 
__u16
 
	mì_Àn
;

36 
__u16
 
	mì_°¨t_hi
;

37 
__u32
 
	mì_°¨t
;

44 
	sext3_exã¡_idx
 {

45 
__u32
 
	mei_block
;

46 
__u32
 
	mei_Àaf
;

48 
__u16
 
	mei_Àaf_hi
;

49 
__u16
 
	mei_unu£d
;

55 
	sext3_exã¡_hódî
 {

56 
__u16
 
	meh_magic
;

57 
__u16
 
	meh_íåõs
;

58 
__u16
 
	meh_max
;

59 
__u16
 
	meh_dïth
;

60 
__u32
 
	meh_gíî©i⁄
;

63 
	#EXT3_EXT_MAGIC
 0xf30a

	)

70 
	sext3_ext_∑th
 {

71 
__u32
 
	mp_block
;

72 
__u16
 
	mp_dïth
;

73 
ext3_exã¡
 *
	mp_ext
;

74 
ext3_exã¡_idx
 *
	mp_idx
;

75 
ext3_exã¡_hódî
 *
	mp_hdr
;

76 
buf„r_hód
 *
	mp_bh
;

96 
	#EXT_INIT_MAX_LEN
 (1UL << 15)

	)

97 
	#EXT_UNINIT_MAX_LEN
 (
EXT_INIT_MAX_LEN
 - 1)

	)

99 
	#EXT_FIRST_EXTENT
(
__hdr__
) \

100 ((
ext3_exã¡
 *Ë(((*Ë(
__hdr__
)) + \

101 (
ext3_exã¡_hódî
)))

	)

102 
	#EXT_FIRST_INDEX
(
__hdr__
) \

103 ((
ext3_exã¡_idx
 *Ë(((*Ë(
__hdr__
)) + \

104 (
ext3_exã¡_hódî
)))

	)

105 
	#EXT_HAS_FREE_INDEX
(
__∑th__
) \

106 ((
__∑th__
)->
p_hdr
->
eh_íåõs
 < (__∑th__)->p_hdr->
eh_max
)

	)

107 
	#EXT_LAST_EXTENT
(
__hdr__
) \

108 (
	`EXT_FIRST_EXTENT
((
__hdr__
)Ë+ (__hdr__)->
eh_íåõs
 - 1)

	)

109 
	#EXT_LAST_INDEX
(
__hdr__
) \

110 (
	`EXT_FIRST_INDEX
((
__hdr__
)Ë+ (__hdr__)->
eh_íåõs
 - 1)

	)

111 
	#EXT_MAX_EXTENT
(
__hdr__
) \

112 (
	`EXT_FIRST_EXTENT
((
__hdr__
)Ë+ (__hdr__)->
eh_max
 - 1)

	)

113 
	#EXT_MAX_INDEX
(
__hdr__
) \

114 (
	`EXT_FIRST_INDEX
((
__hdr__
)Ë+ (__hdr__)->
eh_max
 - 1)

	)

	@jfs_compat.h

2 #i‚de‡
_JFS_COMPAT_H


3 
	#_JFS_COMPAT_H


	)

5 
	~"kî√l-li°.h
"

6 
	~<î∫o.h
>

7 #ifde‡
HAVE_NETINET_IN_H


8 
	~<√töë/ö.h
>

11 
	#¥ötk
 
¥ötf


	)

12 
	#KERN_ERR
 ""

	)

13 
	#KERN_DEBUG
 ""

	)

15 
	#READ
 0

	)

16 
	#WRITE
 1

	)

18 
	#˝u_to_be32
(
n
Ë
	`ht⁄l
“)

	)

19 
	#be32_to_˝u
(
n
Ë
	`¡ohl
“)

	)

21 
	ttid_t
;

22 
jou∫Æ_s
 
	tjou∫Æ_t
;

24 
	gbuf„r_hód
;

25 
	göode
;

27 
	sjou∫Æ_s


29 
	mj_Êags
;

30 
	mj_î∫o
;

31 
buf„r_hód
 * 
	mj_sb_buf„r
;

32 
jou∫Æ_su≥rblock_s
 *
	mj_su≥rblock
;

33 
	mj_f‹m©_vîsi⁄
;

34 
	mj_hód
;

35 
	mj_èû
;

36 
	mj_‰ì
;

37 
	mj_fú°
, 
	mj_œ°
;

38 
kdev_t
 
	mj_dev
;

39 
kdev_t
 
	mj_fs_dev
;

40 
	mj_blocksize
;

41 
	mj_blk_off£t
;

42 
	mj_maxÀn
;

43 
öode
 * 
	mj_öode
;

44 
tid_t
 
	mj_èû_£quí˚
;

45 
tid_t
 
	mj_å™ß˘i⁄_£quí˚
;

46 
__u8
 
	mj_uuid
[16];

47 
jbd_ªvoke_èbÀ_s
 *
	mj_ªvoke
;

48 
tid_t
 
	mj_Áûed_commô
;

51 
	#J_ASSERT
(
as£π
) \

52 dÿ{ i‡(!(
as£π
)) { \

53 
	`¥ötf
 ("Assertion failure in %s()át %sÜine %d: " \

55 
__FUNCTION__
, 
__FILE__
, 
__LINE__
, #assert); \

56 
	`Áèl_îr‹
(
e2fsck_globÆ_˘x
, 0); \

57 } } 0)

	)

59 
	#is_jou∫Æ_ab‹t
(
x
Ë0

	)

61 
	#BUFFER_TRACE
(
bh
, 
öfo
Ëdÿ{} 0)

	)

64 #ifde‡
NO_INLINE_FUNCS


65 
	#ölöe


	)

	@jfs_user.h

1 #i‚de‡
_JFS_USER_H


2 
	#_JFS_USER_H


	)

4 
	tkdev_t
;

6 
	~"kî√l-jbd.h
"

	@kernel-jbd.h

16 #i‚de‡
_LINUX_JBD_H


17 
	#_LINUX_JBD_H


	)

19 #i‡
deföed
(
CONFIG_JBD
Ë|| deföed(
CONFIG_JBD_MODULE
Ë|| !deföed(
__KERNEL__
)

22 #i‚de‡
__KERNEL__


23 
	~"jfs_com∑t.h
"

24 
	#JFS_DEBUG


	)

25 
	#jfs_debug
 
jbd_debug


	)

28 
	~<löux/jou∫Æ-hód.h
>

29 
	~<löux/°ddef.h
>

30 
	~<asm/£m≠h‹e.h
>

33 #i‚de‡
__GNUC__


34 
	#__FUNCTION__
 ""

	)

37 
	#jou∫Æ_oom_ªåy
 1

	)

39 #ifde‡
__STDC__


40 #ifde‡
CONFIG_JBD_DEBUG


46 
	#JBD_EXPENSIVE_CHECKING


	)

47 
jou∫Æ_íabÀ_debug
;

49 
	#jbd_debug
(
n
, 
f
, 
a
...) \

51 i‡((
n
Ë<
jou∫Æ_íabÀ_debug
) { \

52 
	`¥ötk
 (
KERN_DEBUG
 "(%s, %d): %s: ", \

53 
__FILE__
, 
__LINE__
, 
__FUNCTION__
); \

54 
	`¥ötk
 (
f
, ## 
a
); \

56 } 0)

	)

58 #ifde‡
__GNUC__


59 
	#jbd_debug
(
f
, 
a
...Ë

	)

61 
	#jbd_debug
(
f
, ...Ë

	)

65 
	#jbd_debug
(
x
Ë

	)

68 * 
__jbd_kmÆloc
 (*
whîe
, 
size_t
 
size
, 
Êags
, 
ªåy
);

69 
	#jbd_kmÆloc
(
size
, 
Êags
) \

70 
	`__jbd_kmÆloc
(
__FUNCTION__
, (
size
), (
Êags
), 
jou∫Æ_oom_ªåy
)

	)

71 
	#jbd_ªp_kmÆloc
(
size
, 
Êags
) \

72 
	`__jbd_kmÆloc
(
__FUNCTION__
, (
size
), (
Êags
), 1)

	)

74 
	#JFS_MIN_JOURNAL_BLOCKS
 1024

	)

76 #ifde‡
__KERNEL__


77 
h™dÀ_s
 
	th™dÀ_t
;

78 
jou∫Æ_s
 
	tjou∫Æ_t
;

85 
	#JFS_MAGIC_NUMBER
 0xc03b3998U

	)

95 
	#JFS_DESCRIPTOR_BLOCK
 1

	)

96 
	#JFS_COMMIT_BLOCK
 2

	)

97 
	#JFS_SUPERBLOCK_V1
 3

	)

98 
	#JFS_SUPERBLOCK_V2
 4

	)

99 
	#JFS_REVOKE_BLOCK
 5

	)

104 
	sjou∫Æ_hódî_s


106 
__u32
 
	mh_magic
;

107 
__u32
 
	mh_blockty≥
;

108 
__u32
 
	mh_£quí˚
;

109 } 
	tjou∫Æ_hódî_t
;

114 
	#JBD2_CRC32_CHKSUM
 1

	)

115 
	#JBD2_MD5_CHKSUM
 2

	)

116 
	#JBD2_SHA1_CHKSUM
 3

	)

118 
	#JBD2_CRC32_CHKSUM_SIZE
 4

	)

120 
	#JBD2_CHECKSUM_BYTES
 (32 / (
__u32
))

	)

124 
	scommô_hódî
 {

125 
__u32
 
	mh_magic
;

126 
__u32
 
	mh_blockty≥
;

127 
__u32
 
	mh_£quí˚
;

128 
	mh_chksum_ty≥
;

129 
	mh_chksum_size
;

130 
	mh_∑ddög
[2];

131 
__u32
 
	mh_chksum
[
JBD2_CHECKSUM_BYTES
];

132 
__u64
 
	mh_commô_£c
;

133 
__u32
 
	mh_commô_n£c
;

139 
	sjou∫Æ_block_èg_s


141 
__u32
 
	mt_blockƒ
;

142 
__u32
 
	mt_Êags
;

143 
__u32
 
	mt_blockƒ_high
;

144 } 
	tjou∫Æ_block_èg_t
;

146 
	#JBD_TAG_SIZE64
 ((
jou∫Æ_block_èg_t
))

	)

147 
	#JBD_TAG_SIZE32
 (8)

	)

153 
	sjou∫Æ_ªvoke_hódî_s


155 
jou∫Æ_hódî_t
 
	mr_hódî
;

156 
	mr_cou¡
;

157 } 
	tjou∫Æ_ªvoke_hódî_t
;

161 
	#JFS_FLAG_ESCAPE
 1

	)

162 
	#JFS_FLAG_SAME_UUID
 2

	)

163 
	#JFS_FLAG_DELETED
 4

	)

164 
	#JFS_FLAG_LAST_TAG
 8

	)

170 
	sjou∫Æ_su≥rblock_s


173 
jou∫Æ_hódî_t
 
	ms_hódî
;

177 
__u32
 
	ms_blocksize
;

178 
__u32
 
	ms_maxÀn
;

179 
__u32
 
	ms_fú°
;

183 
__u32
 
	ms_£quí˚
;

184 
__u32
 
	ms_°¨t
;

188 
__s32
 
	ms_î∫o
;

192 
__u32
 
	ms_„©uª_com∑t
;

193 
__u32
 
	ms_„©uª_öcom∑t
;

194 
__u32
 
	ms_„©uª_ro_com∑t
;

196 
__u8
 
	ms_uuid
[16];

199 
__u32
 
	ms_ƒ_u£rs
;

201 
__u32
 
	ms_dynsu≥r
;

204 
__u32
 
	ms_max_å™ß˘i⁄
;

205 
__u32
 
	ms_max_å™s_d©a
;

208 
__u32
 
	ms_∑ddög
[44];

211 
__u8
 
	ms_u£rs
[16*48];

213 } 
	tjou∫Æ_su≥rblock_t
;

215 
	#JFS_HAS_COMPAT_FEATURE
(
j
,
mask
) \

216 ((
j
)->
j_f‹m©_vîsi⁄
 >= 2 && \

217 ((
j
)->
j_su≥rblock
->
s_„©uª_com∑t
 & 
	`˝u_to_be32
((
mask
))))

	)

218 
	#JFS_HAS_RO_COMPAT_FEATURE
(
j
,
mask
) \

219 ((
j
)->
j_f‹m©_vîsi⁄
 >= 2 && \

220 ((
j
)->
j_su≥rblock
->
s_„©uª_ro_com∑t
 & 
	`˝u_to_be32
((
mask
))))

	)

221 
	#JFS_HAS_INCOMPAT_FEATURE
(
j
,
mask
) \

222 ((
j
)->
j_f‹m©_vîsi⁄
 >= 2 && \

223 ((
j
)->
j_su≥rblock
->
s_„©uª_öcom∑t
 & 
	`˝u_to_be32
((
mask
))))

	)

225 
	#JFS_FEATURE_COMPAT_CHECKSUM
 0x00000001

	)

227 
	#JFS_FEATURE_INCOMPAT_REVOKE
 0x00000001

	)

229 
	#JFS_FEATURE_INCOMPAT_REVOKE
 0x00000001

	)

230 
	#JFS_FEATURE_INCOMPAT_64BIT
 0x00000002

	)

231 
	#JFS_FEATURE_INCOMPAT_ASYNC_COMMIT
 0x00000004

	)

234 
	#JFS_KNOWN_COMPAT_FEATURES
 0

	)

235 
	#JFS_KNOWN_ROCOMPAT_FEATURES
 0

	)

236 
	#JFS_KNOWN_INCOMPAT_FEATURES
 (
JFS_FEATURE_INCOMPAT_REVOKE
|\

237 
JFS_FEATURE_INCOMPAT_ASYNC_COMMIT
)

	)

239 #ifde‡
__KERNEL__


241 
	~<löux/fs.h
>

242 
	~<löux/sched.h
>

244 
	#JBD_ASSERTIONS


	)

245 #ifde‡
JBD_ASSERTIONS


246 
	#J_ASSERT
(
as£π
) \

248 i‡(!(
as£π
)) { \

249 
	`¥ötk
 (
KERN_EMERG
 \

251 
__FUNCTION__
, 
__FILE__
, 
__LINE__
, #assert); \

252 
	`BUG
(); \

254 } 0)

	)

256 #i‡
deföed
(
CONFIG_BUFFER_DEBUG
)

257 
buf„r_as£πi⁄_Áûuª
(
buf„r_hód
 *
bh
);

258 
	#J_ASSERT_BH
(
bh
, 
ex¥
) \

260 i‡(!(
ex¥
)) \

261 
	`buf„r_as£πi⁄_Áûuª
(
bh
); \

262 
	`J_ASSERT
(
ex¥
); \

263 } 0)

	)

264 
	#J_ASSERT_JH
(
jh
, 
ex¥
Ë
	`J_ASSERT_BH
(
	`jh2bh
(jh),Éx¥)

	)

266 
	#J_ASSERT_BH
(
bh
, 
ex¥
Ë
	`J_ASSERT
”x¥)

	)

267 
	#J_ASSERT_JH
(
jh
, 
ex¥
Ë
	`J_ASSERT
”x¥)

	)

271 
	#J_ASSERT
(
as£π
)

	)

274 
	ejbd_°©e_bôs
 {

275 
	mBH_JWrôe


276 
BH_Priv©eSèπ
,

277 
	mBH_Fªed
,

278 
	mBH_Revoked
,

279 
	mBH_RevokeVÆid
,

280 
	mBH_JBDDúty
,

284 
ölöe
 
	$buf„r_jbd
(
buf„r_hód
 *
bh
)

286  
	`__buf„r_°©e
(
bh
, 
JBD
);

287 
	}
}

289 
ölöe
 
buf„r_hód
 *
	$jh2bh
(
jou∫Æ_hód
 *
jh
)

291  
jh
->
b_bh
;

292 
	}
}

294 
ölöe
 
jou∫Æ_hód
 *
	$bh2jh
(
buf„r_hód
 *
bh
)

296  
bh
->
b_¥iv©e
;

297 
	}
}

299 
	gjbd_ªvoke_èbÀ_s
;

314 
	sh™dÀ_s


317 
å™ß˘i⁄_t
 * 
	mh_å™ß˘i⁄
;

320 
	mh_buf„r_¸edôs
;

323 
	mh_ªf
;

327 
	mh_îr
;

330 
	mh_sync
: 1;

331 
	mh_jd©a
: 1;

332 
	mh_ab‹ãd
: 1;

352 
	så™ß˘i⁄_s


355 
jou∫Æ_t
 * 
	mt_jou∫Æ
;

358 
tid_t
 
	mt_tid
;

362 
	mT_RUNNING
,

363 
	mT_LOCKED
,

364 
	mT_RUNDOWN
,

365 
	mT_FLUSH
,

366 
	mT_COMMIT
,

367 
	mT_FINISHED


368 } 
	mt_°©e
;

371 
	mt_log_°¨t
;

375 
öode
 * 
	mt_ûi°
;

378 
	mt_ƒ_buf„rs
;

382 
jou∫Æ_hód
 * 
	mt_ª£rved_li°
;

386 
jou∫Æ_hód
 * 
	mt_buf„rs
;

393 
jou∫Æ_hód
 * 
	mt_sync_d©Æi°
;

400 
jou∫Æ_hód
 * 
	mt_async_d©Æi°
;

405 
jou∫Æ_hód
 * 
	mt_f‹gë
;

412 
jou∫Æ_hód
 * 
	mt_checkpoöt_li°
;

416 
jou∫Æ_hód
 * 
	mt_iobuf_li°
;

422 
jou∫Æ_hód
 * 
	mt_shadow_li°
;

426 
jou∫Æ_hód
 * 
	mt_log_li°
;

429 
	mt_upd©es
;

433 
	mt_out°™dög_¸edôs
;

440 
å™ß˘i⁄_t
 *
	mt_˝√xt
, *
	mt_˝¥ev
;

444 
	mt_expúes
;

447 
	mt_h™dÀ_cou¡
;

458 
	sjou∫Æ_s


461 
	mj_Êags
;

465 
	mj_î∫o
;

468 
buf„r_hód
 * 
	mj_sb_buf„r
;

469 
jou∫Æ_su≥rblock_t
 * 
	mj_su≥rblock
;

472 
	mj_f‹m©_vîsi⁄
;

475 
	mj_b¨rõr_cou¡
;

478 
£m≠h‹e
 
	mj_b¨rõr
;

481 
å™ß˘i⁄_t
 * 
	mj_ru¬ög_å™ß˘i⁄
;

484 
å™ß˘i⁄_t
 * 
	mj_commôtög_å™ß˘i⁄
;

489 
å™ß˘i⁄_t
 * 
	mj_checkpoöt_å™ß˘i⁄s
;

493 
waô_queue_hód_t
 
	mj_waô_å™ß˘i⁄_locked
;

496 
waô_queue_hód_t
 
	mj_waô_log•a˚
;

499 
waô_queue_hód_t
 
	mj_waô_d⁄e_commô
;

502 
waô_queue_hód_t
 
	mj_waô_checkpoöt
;

505 
waô_queue_hód_t
 
	mj_waô_commô
;

508 
waô_queue_hód_t
 
	mj_waô_upd©es
;

511 
£m≠h‹e
 
	mj_checkpoöt_£m
;

514 
£m≠h‹e
 
	mj_£m
;

517 
	mj_hód
;

521 
	mj_èû
;

524 
	mj_‰ì
;

528 
	mj_fú°
, 
	mj_œ°
;

532 
kdev_t
 
	mj_dev
;

533 
	mj_blocksize
;

534 
	mj_blk_off£t
;

538 
kdev_t
 
	mj_fs_dev
;

541 
	mj_maxÀn
;

546 
öode
 * 
	mj_öode
;

549 
tid_t
 
	mj_èû_£quí˚
;

551 
tid_t
 
	mj_å™ß˘i⁄_£quí˚
;

553 
tid_t
 
	mj_commô_£quí˚
;

555 
tid_t
 
	mj_commô_ªque°
;

563 
__u8
 
	mj_uuid
[16];

566 
èsk_°ru˘
 * 
	mj_èsk
;

570 
	mj_max_å™ß˘i⁄_buf„rs
;

574 
	mj_commô_öãrvÆ
;

577 
timî_li°
 * 
	mj_commô_timî
;

578 
	mj_commô_timî_a˘ive
;

581 
li°_hód
 
	mj_Æl_jou∫Æs
;

585 
jbd_ªvoke_èbÀ_s
 *
	mj_ªvoke
;

588 
	mj_Áûed_commô
;

594 
	#JFS_UNMOUNT
 0x001

	)

595 
	#JFS_ABORT
 0x002

	)

596 
	#JFS_ACK_ERR
 0x004

	)

597 
	#JFS_FLUSHED
 0x008

	)

598 
	#JFS_LOADED
 0x010

	)

606 
__jou∫Æ_unfûe_buf„r
(
jou∫Æ_hód
 *);

607 
jou∫Æ_unfûe_buf„r
(
jou∫Æ_hód
 *);

608 
__jou∫Æ_ªfûe_buf„r
(
jou∫Æ_hód
 *);

609 
jou∫Æ_ªfûe_buf„r
(
jou∫Æ_hód
 *);

610 
__jou∫Æ_fûe_buf„r
(
jou∫Æ_hód
 *, 
å™ß˘i⁄_t
 *, );

611 
__jou∫Æ_‰ì_buf„r
(
jou∫Æ_hód
 *
bh
);

612 
jou∫Æ_fûe_buf„r
(
jou∫Æ_hód
 *, 
å™ß˘i⁄_t
 *, );

613 
__jou∫Æ_˛ón_d©a_li°
(
å™ß˘i⁄_t
 *
å™ß˘i⁄
);

616 
jou∫Æ_hód
 * 
jou∫Æ_gë_des¸ùt‹_buf„r
(
jou∫Æ_t
 *);

617 
jou∫Æ_√xt_log_block
(
jou∫Æ_t
 *);

620 
jou∫Æ_commô_å™ß˘i⁄
(
jou∫Æ_t
 *);

623 
__jou∫Æ_˛ón_checkpoöt_li°
(
jou∫Æ_t
 *
jou∫Æ
);

624 
jou∫Æ_ªmove_checkpoöt
(
jou∫Æ_hód
 *);

625 
__jou∫Æ_ªmove_checkpoöt
(
jou∫Æ_hód
 *);

626 
jou∫Æ_ö£π_checkpoöt
(
jou∫Æ_hód
 *, 
å™ß˘i⁄_t
 *);

627 
__jou∫Æ_ö£π_checkpoöt
(
jou∫Æ_hód
 *,
å™ß˘i⁄_t
 *);

631 
jou∫Æ_wrôe_mëad©a_buf„r
(
å™ß˘i⁄_t
 *
å™ß˘i⁄
,

632 
jou∫Æ_hód
 *
jh_ö
,

633 
jou∫Æ_hód
 **
jh_out
,

634 
blockƒ
);

637 
__waô_⁄_jou∫Æ
 (
jou∫Æ_t
 *);

653 
ölöe
 
	$lock_jou∫Æ
(
jou∫Æ_t
 *
jou∫Æ
)

655 
	`down
(&
jou∫Æ
->
j_£m
);

656 
	}
}

659 
ölöe
 
	$åy_lock_jou∫Æ
(
jou∫Æ_t
 * 
jou∫Æ
)

661  
	`down_åylock
(&
jou∫Æ
->
j_£m
);

662 
	}
}

664 
ölöe
 
	$u∆ock_jou∫Æ
(
jou∫Æ_t
 * 
jou∫Æ
)

666 
	`up
(&
jou∫Æ
->
j_£m
);

667 
	}
}

670 
ölöe
 
h™dÀ_t
 *
	$jou∫Æ_cuºít_h™dÀ
()

672  
cuºít
->
jou∫Æ_öfo
;

673 
	}
}

681 
h™dÀ_t
 *
jou∫Æ_°¨t
(
jou∫Æ_t
 *, 
nblocks
);

682 
h™dÀ_t
 *
jou∫Æ_åy_°¨t
(
jou∫Æ_t
 *, 
nblocks
);

683 
jou∫Æ_ª°¨t
 (
h™dÀ_t
 *, 
nblocks
);

684 
jou∫Æ_exãnd
 (
h™dÀ_t
 *, 
nblocks
);

685 
jou∫Æ_gë_wrôe_ac˚ss
 (
h™dÀ_t
 *, 
buf„r_hód
 *);

686 
jou∫Æ_gë_¸óã_ac˚ss
 (
h™dÀ_t
 *, 
buf„r_hód
 *);

687 
jou∫Æ_gë_undo_ac˚ss
 (
h™dÀ_t
 *, 
buf„r_hód
 *);

688 
jou∫Æ_dúty_d©a
 (
h™dÀ_t
 *,

689 
buf„r_hód
 *, 
async
);

690 
jou∫Æ_dúty_mëad©a
 (
h™dÀ_t
 *, 
buf„r_hód
 *);

691 
jou∫Æ_ªÀa£_buf„r
 (
h™dÀ_t
 *, 
buf„r_hód
 *);

692 
jou∫Æ_f‹gë
 (
h™dÀ_t
 *, 
buf„r_hód
 *);

693 
jou∫Æ_sync_buf„r
 (
buf„r_hód
 *);

694 
jou∫Æ_Êush∑ge
(
jou∫Æ_t
 *, 
∑ge
 *, );

695 
jou∫Æ_åy_to_‰ì_buf„rs
(
jou∫Æ_t
 *, 
∑ge
 *, );

696 
jou∫Æ_°›
(
h™dÀ_t
 *);

697 
jou∫Æ_Êush
 (
jou∫Æ_t
 *);

699 
jou∫Æ_lock_upd©es
 (
jou∫Æ_t
 *);

700 
jou∫Æ_u∆ock_upd©es
 (
jou∫Æ_t
 *);

702 
jou∫Æ_t
 * 
jou∫Æ_öô_dev
(
kdev_t
 
dev
, kdev_à
fs_dev
,

703 
°¨t
, 
Àn
, 
bsize
);

704 
jou∫Æ_t
 * 
jou∫Æ_öô_öode
 (
öode
 *);

705 
jou∫Æ_upd©e_f‹m©
 (
jou∫Æ_t
 *);

706 
jou∫Æ_check_u£d_„©uªs


707 (
jou∫Æ_t
 *, , , );

708 
jou∫Æ_check_avaûabÀ_„©uªs


709 (
jou∫Æ_t
 *, , , );

710 
jou∫Æ_£t_„©uªs


711 (
jou∫Æ_t
 *, , , );

712 
jou∫Æ_¸óã
 (
jou∫Æ_t
 *);

713 
jou∫Æ_lﬂd
 (
jou∫Æ_t
 *
jou∫Æ
);

714 
jou∫Æ_de°roy
 (
jou∫Æ_t
 *);

715 
jou∫Æ_ªcovî
 (
jou∫Æ_t
 *
jou∫Æ
);

716 
jou∫Æ_wùe
 (
jou∫Æ_t
 *, );

717 
jou∫Æ_skù_ªcovîy
 (
jou∫Æ_t
 *);

718 
jou∫Æ_upd©e_su≥rblock
 (
jou∫Æ_t
 *, );

719 
__jou∫Æ_ab‹t
 (
jou∫Æ_t
 *);

720 
jou∫Æ_ab‹t
 (
jou∫Æ_t
 *, );

721 
jou∫Æ_î∫o
 (
jou∫Æ_t
 *);

722 
jou∫Æ_ack_îr
 (
jou∫Æ_t
 *);

723 
jou∫Æ_˛ór_îr
 (
jou∫Æ_t
 *);

724 
jou∫Æ_bm≠
(
jou∫Æ_t
 *
jou∫Æ
, 
blockƒ
);

725 
jou∫Æ_f‹˚_commô
(
jou∫Æ_t
 *
jou∫Æ
);

730 
jou∫Æ_hód


731 *
jou∫Æ_add_jou∫Æ_hód
(
buf„r_hód
 *
bh
);

732 
jou∫Æ_ªmove_jou∫Æ_hód
(
buf„r_hód
 *
bh
);

733 
__jou∫Æ_ªmove_jou∫Æ_hód
(
buf„r_hód
 *
bh
);

734 
jou∫Æ_u∆ock_jou∫Æ_hód
(
jou∫Æ_hód
 *
jh
);

737 
	#JOURNAL_REVOKE_DEFAULT_HASH
 256

	)

738 
jou∫Æ_öô_ªvoke
(
jou∫Æ_t
 *, );

739 
jou∫Æ_de°roy_ªvoke_ˇches
();

740 
jou∫Æ_öô_ªvoke_ˇches
();

742 
jou∫Æ_de°roy_ªvoke
(
jou∫Æ_t
 *);

743 
jou∫Æ_ªvoke
 (
h™dÀ_t
 *,

744 , 
buf„r_hód
 *);

745 
jou∫Æ_ˇn˚l_ªvoke
(
h™dÀ_t
 *, 
jou∫Æ_hód
 *);

746 
jou∫Æ_wrôe_ªvoke_ªc‹ds
(
jou∫Æ_t
 *, 
å™ß˘i⁄_t
 *);

749 
jou∫Æ_£t_ªvoke
(
jou∫Æ_t
 *, , 
tid_t
);

750 
jou∫Æ_ã°_ªvoke
(
jou∫Æ_t
 *, , 
tid_t
);

751 
jou∫Æ_˛ór_ªvoke
(
jou∫Æ_t
 *);

752 
jou∫Æ_bªl£_¨øy
(
buf„r_hód
 *
b
[], 
n
);

760 
log_•a˚_À·
 (
jou∫Æ_t
 *);

761 
tid_t
 
log_°¨t_commô
 (
jou∫Æ_t
 *, 
å™ß˘i⁄_t
 *);

762 
log_waô_commô
 (
jou∫Æ_t
 *, 
tid_t
);

763 
log_do_checkpoöt
 (
jou∫Æ_t
 *, );

765 
log_waô_f‹_•a˚
(
jou∫Æ_t
 *, 
nblocks
);

766 
__jou∫Æ_dr›_å™ß˘i⁄
(
jou∫Æ_t
 *, 
å™ß˘i⁄_t
 *);

767 
˛ónup_jou∫Æ_èû
(
jou∫Æ_t
 *);

770 
shrök_jou∫Æ_mem‹y
();

774 
	#jbd_ENOSYS
() \

776 
	`¥ötk
 (
KERN_ERR
 "JBD unim∂emíãd fun˘i⁄ " 
__FUNCTION__
); \

777 
cuºít
->
°©e
 = 
TASK_UNINTERRUPTIBLE
; \

778 
	`scheduÀ
(); \

779 } 1)

	)

791 
ölöe
 
	$is_jou∫Æ_ab‹ãd
(
jou∫Æ_t
 *
jou∫Æ
)

793  
jou∫Æ
->
j_Êags
 & 
JFS_ABORT
;

794 
	}
}

796 
ölöe
 
	$is_h™dÀ_ab‹ãd
(
h™dÀ_t
 *
h™dÀ
)

798 i‡(
h™dÀ
->
h_ab‹ãd
)

800  
	`is_jou∫Æ_ab‹ãd
(
h™dÀ
->
h_å™ß˘i⁄
->
t_jou∫Æ
);

801 
	}
}

803 
ölöe
 
	$jou∫Æ_ab‹t_h™dÀ
(
h™dÀ_t
 *
h™dÀ
)

805 
h™dÀ
->
h_ab‹ãd
 = 1;

806 
	}
}

809 #i‚de‡
BUG


810 
	#BUG
() do { \

811 
	`¥ötk
("kî√»BUGáà%s:%d!\n", 
__FILE__
, 
__LINE__
); \

813 } 0)

	)

818 
jou∫Æ_ªcovî
 (
jou∫Æ_t
 *
jou∫Æ
);

819 
jou∫Æ_skù_ªcovîy
 (
jou∫Æ_t
 *);

822 
jou∫Æ_öô_ªvoke
(
jou∫Æ_t
 *, );

823 
jou∫Æ_de°roy_ªvoke_ˇches
();

824 
jou∫Æ_öô_ªvoke_ˇches
();

827 
jou∫Æ_£t_ªvoke
(
jou∫Æ_t
 *, , 
tid_t
);

828 
jou∫Æ_ã°_ªvoke
(
jou∫Æ_t
 *, , 
tid_t
);

829 
jou∫Æ_˛ór_ªvoke
(
jou∫Æ_t
 *);

830 
jou∫Æ_bªl£_¨øy
(
buf„r_hód
 *
b
[], 
n
);

832 
jou∫Æ_de°roy_ªvoke
(
jou∫Æ_t
 *);

835 
ölöe
 
	$tid_gt
(
tid_t
 
x
,Åid_à
y
Ë
	`EXT2FS_ATTR
((
unu£d
));

836 
ölöe
 
	$tid_geq
(
tid_t
 
x
,Åid_à
y
Ë
	`EXT2FS_ATTR
((
unu£d
));

841 
ölöe
 
	$tid_gt
(
tid_t
 
x
,Åid_à
y
)

843 
dif„ªn˚
 = (
x
 - 
y
);

844  (
dif„ªn˚
 > 0);

845 
	}
}

847 
ölöe
 
	$tid_geq
(
tid_t
 
x
,Åid_à
y
)

849 
dif„ªn˚
 = (
x
 - 
y
);

850  (
dif„ªn˚
 >= 0);

851 
	}
}

853 
jou∫Æ_blocks_≥r_∑ge
(
öode
 *inode);

860 
	#BJ_N⁄e
 0

	)

861 
	#BJ_SyncD©a
 1

	)

862 
	#BJ_AsyncD©a
 2

	)

863 
	#BJ_Mëad©a
 3

	)

864 
	#BJ_F‹gë
 4

	)

865 
	#BJ_IO
 5

	)

866 
	#BJ_Shadow
 6

	)

867 
	#BJ_LogCé
 7

	)

868 
	#BJ_Re£rved
 8

	)

869 
	#BJ_Ty≥s
 9

	)

871 
jbd_blocks_≥r_∑ge
(
öode
 *inode);

873 #ifde‡
__KERNEL__


875 
•ölock_t
 
jh_•li˚_lock
;

880 
	#SPLICE_LOCK
(
ex¥1
, 
ex¥2
) \

882 
ªt
 = (
ex¥1
); \

883 i‡(
ªt
) { \

884 
	`•ö_lock
(&
jh_•li˚_lock
); \

885 
ªt
 = (
ex¥1
Ë&& (
ex¥2
); \

886 
	`•ö_u∆ock
(&
jh_•li˚_lock
); \

888 
ªt
; \

889 })

	)

901 
ölöe
 
	$buf„r_jli°_eq
(
buf„r_hód
 *
bh
, 
li°
)

903  
	`SPLICE_LOCK
(
	`buf„r_jbd
(
bh
), 
	`bh2jh
(bh)->
b_jli°
 =
li°
);

904 
	}
}

907 
ölöe
 
	$buf„r_jdúty
(
buf„r_hód
 *
bh
)

909  
	`buf„r_jbd
(
bh
Ë&& 
	`__buf„r_°©e
(bh, 
JBDDúty
);

910 
	}
}

913 
ölöe
 
	$buf„r_jbd_d©a
(
buf„r_hód
 *
bh
)

915  
	`SPLICE_LOCK
(
	`buf„r_jbd
(
bh
),

916 
	`bh2jh
(
bh
)->
b_jli°
 =
BJ_SyncD©a
 ||

917 
	`bh2jh
(
bh
)->
b_jli°
 =
BJ_AsyncD©a
);

918 
	}
}

920 #ifde‡
CONFIG_SMP


921 
	#as£π_•ö_locked
(
lock
Ë
	`J_ASSERT
(
	`•ö_is_locked
÷ock))

	)

923 
	#as£π_•ö_locked
(
lock
Ëdÿ{} 0)

	)

926 
	#buf„r_åa˚_öô
(
bh
Ëdÿ{} 0)

	)

927 
	#¥öt_buf„r_fõlds
(
bh
Ëdÿ{} 0)

	)

928 
	#¥öt_buf„r_åa˚
(
bh
Ëdÿ{} 0)

	)

929 
	#BUFFER_TRACE
(
bh
, 
öfo
Ëdÿ{} 0)

	)

930 
	#BUFFER_TRACE2
(
bh
, 
bh2
, 
öfo
Ëdÿ{} 0)

	)

931 
	#JBUFFER_TRACE
(
jh
, 
öfo
Ëdÿ{} 0)

	)

942 #i‡
deföed
(
__KERNEL__
Ë&& !(deföed(
CONFIG_JBD
Ë|| deföed(
CONFIG_JBD_MODULE
))

944 
	#J_ASSERT
(
ex¥
Ëdÿ{} 0)

	)

945 
	#J_ASSERT_BH
(
bh
, 
ex¥
Ëdÿ{} 0)

	)

946 
	#buf„r_jbd
(
bh
Ë0

	)

947 
	#buf„r_jli°_eq
(
bh
, 
vÆ
Ë0

	)

948 
	#jou∫Æ_buf„r_jou∫Æ_Ãu
(
bh
Ë0

	)

	@kernel-list.h

1 #i‚de‡
_LINUX_LIST_H


2 
	#_LINUX_LIST_H


	)

14 
	sli°_hód
 {

15 
li°_hód
 *
	m√xt
, *
	m¥ev
;

18 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

20 
	#LIST_HEAD
(
«me
) \

21 
li°_hód
 
«me
 = { &«me, &«mê}

	)

23 
	#INIT_LIST_HEAD
(
±r
) do { \

24 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

25 } 0)

	)

27 #i‡(!
deföed
(
__GNUC__
Ë&& !deföed(
__WATCOMC__
))

28 
	#__ölöe__


	)

37 
__ölöe__
 
	$__li°_add
(
li°_hód
 * 
√w
,

38 
li°_hód
 * 
¥ev
,

39 
li°_hód
 * 
√xt
)

41 
√xt
->
¥ev
 = 
√w
;

42 
√w
->
√xt
 =Çext;

43 
√w
->
¥ev
 =Örev;

44 
¥ev
->
√xt
 = 
√w
;

45 
	}
}

50 
__ölöe__
 
	$li°_add
(
li°_hód
 *
√w
, li°_hód *
hód
)

52 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

53 
	}
}

58 
__ölöe__
 
	$li°_add_èû
(
li°_hód
 *
√w
, li°_hód *
hód
)

60 
	`__li°_add
(
√w
, 
hód
->
¥ev
, head);

61 
	}
}

70 
__ölöe__
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
,

71 
li°_hód
 * 
√xt
)

73 
√xt
->
¥ev
 =Örev;

74 
¥ev
->
√xt
 =Çext;

75 
	}
}

77 
__ölöe__
 
	$li°_dñ
(
li°_hód
 *
íåy
)

79 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

80 
	}
}

82 
__ölöe__
 
	$li°_em±y
(
li°_hód
 *
hód
)

84  
hód
->
√xt
 == head;

85 
	}
}

90 
__ölöe__
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

92 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

94 i‡(
fú°
 !
li°
) {

95 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

96 
li°_hód
 *
©
 = 
hód
->
√xt
;

98 
fú°
->
¥ev
 = 
hód
;

99 
hód
->
√xt
 = 
fú°
;

101 
œ°
->
√xt
 = 
©
;

102 
©
->
¥ev
 = 
œ°
;

104 
	}
}

106 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

107 ((
ty≥
 *)((*)(
±r
)-()(&(—y≥ *)0)->
membî
)))

	)

109 
	#li°_f‹_óch
(
pos
, 
hód
) \

110 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

	@tdb.h

1 #i‚de‡
__TDB_H__


2 
	#__TDB_H__


	)

30 #ifde‡ 
__˝lu•lus


36 
	#TDB_REPLACE
 1

	)

37 
	#TDB_INSERT
 2

	)

38 
	#TDB_MODIFY
 3

	)

41 
	#TDB_DEFAULT
 0

	)

42 
	#TDB_CLEAR_IF_FIRST
 1

	)

43 
	#TDB_INTERNAL
 2

	)

44 
	#TDB_NOLOCK
 4

	)

45 
	#TDB_NOMMAP
 8

	)

46 
	#TDB_CONVERT
 16

	)

47 
	#TDB_BIGENDIAN
 32

	)

48 
	#TDB_NOSYNC
 64

	)

49 
	#TDB_SEQNUM
 128

	)

51 
	#TDB_ERRCODE
(
code
, 
ªt
Ë((
tdb
->
ecode
 = (code)),Ñë)

	)

54 
	eTDB_ERROR
 {
TDB_SUCCESS
=0, 
TDB_ERR_CORRUPT
, 
TDB_ERR_IO
, 
TDB_ERR_LOCK
,

55 
TDB_ERR_OOM
, 
TDB_ERR_EXISTS
, 
TDB_ERR_NOLOCK
, 
TDB_ERR_LOCK_TIMEOUT
,

56 
TDB_ERR_NOEXIST
, 
TDB_ERR_EINVAL
, 
TDB_ERR_RDONLY
};

59 
	etdb_debug_Àvñ
 {
TDB_DEBUG_FATAL
 = 0, 
TDB_DEBUG_ERROR
,

60 
TDB_DEBUG_WARNING
, 
TDB_DEBUG_TRACE
};

62 
	sTDB_DATA
 {

63 *
d±r
;

64 
size_t
 
dsize
;

65 } 
	tTDB_DATA
;

67 #i‚de‡
PRINTF_ATTRIBUTE


68 #i‡(
__GNUC__
 >= 3)

73 
	#PRINTF_ATTRIBUTE
(
a1
, 
a2
Ë
	`__©åibuã__
 ((
	`f‹m©
 (
__¥ötf__
,á1,á2)))

	)

75 
	#PRINTF_ATTRIBUTE
(
a1
, 
a2
)

	)

80 
	#tdb_›í
 
ext2fs_tdb_›í


	)

81 
	#tdb_›í_ex
 
ext2fs_tdb_›í_ex


	)

82 
	#tdb_£t_max_dód
 
ext2fs_tdb_£t_max_dód


	)

83 
	#tdb_ª›í
 
ext2fs_tdb_ª›í


	)

84 
	#tdb_ª›í_Æl
 
ext2fs_tdb_ª›í_Æl


	)

85 
	#tdb_£t_loggög_fun˘i⁄
 
ext2fs_tdb_£t_loggög_fun˘i⁄


	)

86 
	#tdb_îr‹
 
ext2fs_tdb_îr‹


	)

87 
	#tdb_îr‹°r
 
ext2fs_tdb_îr‹°r


	)

88 
	#tdb_„tch
 
ext2fs_tdb_„tch


	)

89 
	#tdb_∑r£_ªc‹d
 
ext2fs_tdb_∑r£_ªc‹d


	)

90 
	#tdb_dñëe
 
ext2fs_tdb_dñëe


	)

91 
	#tdb_°‹e
 
ext2fs_tdb_°‹e


	)

92 
	#tdb_≠≥nd
 
ext2fs_tdb_≠≥nd


	)

93 
	#tdb_˛o£
 
ext2fs_tdb_˛o£


	)

94 
	#tdb_fú°key
 
ext2fs_tdb_fú°key


	)

95 
	#tdb_√xtkey
 
ext2fs_tdb_√xtkey


	)

96 
	#tdb_åavî£
 
ext2fs_tdb_åavî£


	)

97 
	#tdb_åavî£_ªad
 
ext2fs_tdb_åavî£_ªad


	)

98 
	#tdb_exi°s
 
ext2fs_tdb_exi°s


	)

99 
	#tdb_lockÆl
 
ext2fs_tdb_lockÆl


	)

100 
	#tdb_u∆ockÆl
 
ext2fs_tdb_u∆ockÆl


	)

101 
	#tdb_lockÆl_ªad
 
ext2fs_tdb_lockÆl_ªad


	)

102 
	#tdb_u∆ockÆl_ªad
 
ext2fs_tdb_u∆ockÆl_ªad


	)

103 
	#tdb_«me
 
ext2fs_tdb_«me


	)

104 
	#tdb_fd
 
ext2fs_tdb_fd


	)

105 
	#tdb_log_‚
 
ext2fs_tdb_log_‚


	)

106 
	#tdb_gë_loggög_¥iv©e
 
ext2fs_tdb_gë_loggög_¥iv©e


	)

107 
	#tdb_å™ß˘i⁄_°¨t
 
ext2fs_tdb_å™ß˘i⁄_°¨t


	)

108 
	#tdb_å™ß˘i⁄_commô
 
ext2fs_tdb_å™ß˘i⁄_commô


	)

109 
	#tdb_å™ß˘i⁄_ˇn˚l
 
ext2fs_tdb_å™ß˘i⁄_ˇn˚l


	)

110 
	#tdb_å™ß˘i⁄_ªcovî
 
ext2fs_tdb_å™ß˘i⁄_ªcovî


	)

111 
	#tdb_gë_£qnum
 
ext2fs_tdb_gë_£qnum


	)

112 
	#tdb_hash_size
 
ext2fs_tdb_hash_size


	)

113 
	#tdb_m≠_size
 
ext2fs_tdb_m≠_size


	)

114 
	#tdb_gë_Êags
 
ext2fs_tdb_gë_Êags


	)

115 
	#tdb_chaölock
 
ext2fs_tdb_chaölock


	)

116 
	#tdb_chaöu∆ock
 
ext2fs_tdb_chaöu∆ock


	)

117 
	#tdb_chaölock_ªad
 
ext2fs_tdb_chaölock_ªad


	)

118 
	#tdb_chaöu∆ock_ªad
 
ext2fs_tdb_chaöu∆ock_ªad


	)

119 
	#tdb_dump_Æl
 
ext2fs_tdb_dump_Æl


	)

120 
	#tdb_¥öt‰ìli°
 
ext2fs_tdb_¥öt‰ìli°


	)

121 
	#tdb_vÆid©e_‰ìli°
 
ext2fs_tdb_vÆid©e_‰ìli°


	)

122 
	#tdb_chaölock_m¨k
 
ext2fs_tdb_chaölock_m¨k


	)

123 
	#tdb_chaölock_n⁄block
 
ext2fs_tdb_chaölock_n⁄block


	)

124 
	#tdb_chaölock_unm¨k
 
ext2fs_tdb_chaölock_unm¨k


	)

125 
	#tdb_íabÀ_£qnum
 
ext2fs_tdb_íabÀ_£qnum


	)

126 
	#tdb_ö¸emít_£qnum_n⁄block
 
ext2fs_tdb_ö¸emít_£qnum_n⁄block


	)

127 
	#tdb_lock_n⁄block
 
ext2fs_tdb_lock_n⁄block


	)

128 
	#tdb_lockÆl_m¨k
 
ext2fs_tdb_lockÆl_m¨k


	)

129 
	#tdb_lockÆl_n⁄block
 
ext2fs_tdb_lockÆl_n⁄block


	)

130 
	#tdb_lockÆl_ªad_n⁄block
 
ext2fs_tdb_lockÆl_ªad_n⁄block


	)

131 
	#tdb_lockÆl_unm¨k
 
ext2fs_tdb_lockÆl_unm¨k


	)

134 
tdb_c⁄ãxt
 
	tTDB_CONTEXT
;

136 (*
tdb_åavî£_func
)(
	ttdb_c⁄ãxt
 *, 
	tTDB_DATA
, TDB_DATA, *);

137 (*
tdb_log_func
)(
	ttdb_c⁄ãxt
 *, 
	ttdb_debug_Àvñ
, c⁄° *, ...Ë
	tPRINTF_ATTRIBUTE
(3, 4);

138 (*
	ttdb_hash_func
)(
	tTDB_DATA
 *
	tkey
);

140 
	stdb_loggög_c⁄ãxt
 {

141 
tdb_log_func
 
log_‚
;

142 *
log_¥iv©e
;

145 
tdb_c⁄ãxt
 *
tdb_›í
(c⁄° *
«me
, 
hash_size
, 
tdb_Êags
,

146 
›í_Êags
, 
mode_t
 
mode
);

147 
tdb_c⁄ãxt
 *
tdb_›í_ex
(c⁄° *
«me
, 
hash_size
, 
tdb_Êags
,

148 
›í_Êags
, 
mode_t
 
mode
,

149 c⁄° 
tdb_loggög_c⁄ãxt
 *
log_˘x
,

150 
tdb_hash_func
 
hash_‚
);

151 
tdb_£t_max_dód
(
tdb_c⁄ãxt
 *
tdb
, 
max_dód
);

153 
tdb_ª›í
(
tdb_c⁄ãxt
 *
tdb
);

154 
tdb_ª›í_Æl
(
∑ª¡_l⁄glived
);

155 
tdb_£t_loggög_fun˘i⁄
(
tdb_c⁄ãxt
 *
tdb
, c⁄° 
tdb_loggög_c⁄ãxt
 *
log_˘x
);

156 
TDB_ERROR
 
tdb_îr‹
(
tdb_c⁄ãxt
 *
tdb
);

157 c⁄° *
tdb_îr‹°r
(
tdb_c⁄ãxt
 *
tdb
);

158 
TDB_DATA
 
tdb_„tch
(
tdb_c⁄ãxt
 *
tdb
, TDB_DATA 
key
);

159 
tdb_∑r£_ªc‹d
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
,

160 (*
∑r£r
)(
TDB_DATA
 
key
, TDB_DATA 
d©a
,

161 *
¥iv©e_d©a
),

162 *
¥iv©e_d©a
);

163 
tdb_dñëe
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

164 
tdb_°‹e
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, TDB_DATA 
dbuf
, 
Êag
);

165 
tdb_≠≥nd
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, TDB_DATA 
√w_dbuf
);

166 
tdb_˛o£
(
tdb_c⁄ãxt
 *
tdb
);

167 
TDB_DATA
 
tdb_fú°key
(
tdb_c⁄ãxt
 *
tdb
);

168 
TDB_DATA
 
tdb_√xtkey
(
tdb_c⁄ãxt
 *
tdb
, TDB_DATA 
key
);

169 
tdb_åavî£
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_åavî£_func
 
‚
, *);

170 
tdb_åavî£_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_åavî£_func
 
‚
, *);

171 
tdb_exi°s
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

172 
tdb_lockÆl
(
tdb_c⁄ãxt
 *
tdb
);

173 
tdb_lockÆl_n⁄block
(
tdb_c⁄ãxt
 *
tdb
);

174 
tdb_u∆ockÆl
(
tdb_c⁄ãxt
 *
tdb
);

175 
tdb_lockÆl_ªad
(
tdb_c⁄ãxt
 *
tdb
);

176 
tdb_lockÆl_ªad_n⁄block
(
tdb_c⁄ãxt
 *
tdb
);

177 
tdb_u∆ockÆl_ªad
(
tdb_c⁄ãxt
 *
tdb
);

178 
tdb_lockÆl_m¨k
(
tdb_c⁄ãxt
 *
tdb
);

179 
tdb_lockÆl_unm¨k
(
tdb_c⁄ãxt
 *
tdb
);

180 c⁄° *
tdb_«me
(
tdb_c⁄ãxt
 *
tdb
);

181 
tdb_fd
(
tdb_c⁄ãxt
 *
tdb
);

182 
tdb_log_func
 
tdb_log_‚
(
tdb_c⁄ãxt
 *
tdb
);

183 *
tdb_gë_loggög_¥iv©e
(
tdb_c⁄ãxt
 *
tdb
);

184 
tdb_å™ß˘i⁄_°¨t
(
tdb_c⁄ãxt
 *
tdb
);

185 
tdb_å™ß˘i⁄_commô
(
tdb_c⁄ãxt
 *
tdb
);

186 
tdb_å™ß˘i⁄_ˇn˚l
(
tdb_c⁄ãxt
 *
tdb
);

187 
tdb_å™ß˘i⁄_ªcovî
(
tdb_c⁄ãxt
 *
tdb
);

188 
tdb_gë_£qnum
(
tdb_c⁄ãxt
 *
tdb
);

189 
tdb_hash_size
(
tdb_c⁄ãxt
 *
tdb
);

190 
size_t
 
tdb_m≠_size
(
tdb_c⁄ãxt
 *
tdb
);

191 
tdb_gë_Êags
(
tdb_c⁄ãxt
 *
tdb
);

192 
tdb_íabÀ_£qnum
(
tdb_c⁄ãxt
 *
tdb
);

193 
tdb_ö¸emít_£qnum_n⁄block
(
tdb_c⁄ãxt
 *
tdb
);

196 
tdb_chaölock
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

197 
tdb_chaölock_n⁄block
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

198 
tdb_chaöu∆ock
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

199 
tdb_chaölock_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

200 
tdb_chaöu∆ock_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

201 
tdb_chaölock_m¨k
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

202 
tdb_chaölock_unm¨k
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

205 
tdb_dump_Æl
(
tdb_c⁄ãxt
 *
tdb
);

206 
tdb_¥öt‰ìli°
(
tdb_c⁄ãxt
 *
tdb
);

207 
tdb_vÆid©e_‰ìli°
(
tdb_c⁄ãxt
 *
tdb
, *
≤um_íåõs
);

209 
TDB_DATA
 
tdb_nuŒ
;

211 #ifde‡ 
__˝lu•lus


	@version.h

10 
	#E2FSPROGS_VERSION
 "1.41.9"

	)

11 
	#E2FSPROGS_DATE
 "30-May-2009"

	)

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/unistd.h

1 #ifde‡
__i386__


2 
	~<asm/uni°d_32.h
>

4 
	~<asm/uni°d_64.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

27 #ifde‡
__USE_GNU


28 
	~<bôs/uio.h
>

34 
	#O_ACCMODE
 0003

	)

35 
	#O_RDONLY
 00

	)

36 
	#O_WRONLY
 01

	)

37 
	#O_RDWR
 02

	)

38 
	#O_CREAT
 0100

	)

39 
	#O_EXCL
 0200

	)

40 
	#O_NOCTTY
 0400

	)

41 
	#O_TRUNC
 01000

	)

42 
	#O_APPEND
 02000

	)

43 
	#O_NONBLOCK
 04000

	)

44 
	#O_NDELAY
 
O_NONBLOCK


	)

45 
	#O_SYNC
 04010000

	)

46 
	#O_FSYNC
 
O_SYNC


	)

47 
	#O_ASYNC
 020000

	)

49 #ifde‡
__USE_XOPEN2K8


50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_CLOEXEC
 02000000

	)

54 #ifde‡
__USE_GNU


55 
	#O_DIRECT
 040000

	)

56 
	#O_NOATIME
 01000000

	)

57 
	#O_PATH
 010000000

	)

63 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


64 
	#O_DSYNC
 010000

	)

65 
	#O_RSYNC
 
O_SYNC


	)

68 #ifde‡
__USE_LARGEFILE64


69 #i‡
__WORDSIZE
 == 64

70 
	#O_LARGEFILE
 0

	)

72 
	#O_LARGEFILE
 0100000

	)

77 
	#F_DUPFD
 0

	)

78 
	#F_GETFD
 1

	)

79 
	#F_SETFD
 2

	)

80 
	#F_GETFL
 3

	)

81 
	#F_SETFL
 4

	)

82 #i‡
__WORDSIZE
 == 64

83 
	#F_GETLK
 5

	)

84 
	#F_SETLK
 6

	)

85 
	#F_SETLKW
 7

	)

87 
	#F_GETLK64
 5

	)

88 
	#F_SETLK64
 6

	)

89 
	#F_SETLKW64
 7

	)

91 #i‚de‡
__USE_FILE_OFFSET64


92 
	#F_GETLK
 5

	)

93 
	#F_SETLK
 6

	)

94 
	#F_SETLKW
 7

	)

96 
	#F_GETLK
 
F_GETLK64


	)

97 
	#F_SETLK
 
F_SETLK64


	)

98 
	#F_SETLKW
 
F_SETLKW64


	)

100 
	#F_GETLK64
 12

	)

101 
	#F_SETLK64
 13

	)

102 
	#F_SETLKW64
 14

	)

105 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


106 
	#F_SETOWN
 8

	)

107 
	#F_GETOWN
 9

	)

110 #ifde‡
__USE_GNU


111 
	#F_SETSIG
 10

	)

112 
	#F_GETSIG
 11

	)

113 
	#F_SETOWN_EX
 15

	)

114 
	#F_GETOWN_EX
 16

	)

117 #ifde‡
__USE_GNU


118 
	#F_SETLEASE
 1024

	)

119 
	#F_GETLEASE
 1025

	)

120 
	#F_NOTIFY
 1026

	)

121 
	#F_SETPIPE_SZ
 1031

	)

122 
	#F_GETPIPE_SZ
 1032

	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#F_DUPFD_CLOEXEC
 1030

	)

130 
	#FD_CLOEXEC
 1

	)

133 
	#F_RDLCK
 0

	)

134 
	#F_WRLCK
 1

	)

135 
	#F_UNLCK
 2

	)

138 
	#F_EXLCK
 4

	)

139 
	#F_SHLCK
 8

	)

141 #ifde‡
__USE_BSD


143 
	#LOCK_SH
 1

	)

144 
	#LOCK_EX
 2

	)

145 
	#LOCK_NB
 4

	)

147 
	#LOCK_UN
 8

	)

150 #ifde‡
__USE_GNU


151 
	#LOCK_MAND
 32

	)

152 
	#LOCK_READ
 64

	)

153 
	#LOCK_WRITE
 128

	)

154 
	#LOCK_RW
 192

	)

157 #ifde‡
__USE_GNU


159 
	#DN_ACCESS
 0x00000001

	)

160 
	#DN_MODIFY
 0x00000002

	)

161 
	#DN_CREATE
 0x00000004

	)

162 
	#DN_DELETE
 0x00000008

	)

163 
	#DN_RENAME
 0x00000010

	)

164 
	#DN_ATTRIB
 0x00000020

	)

165 
	#DN_MULTISHOT
 0x80000000

	)

168 
	sÊock


170 
	ml_ty≥
;

171 
	ml_whí˚
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
__off_t
 
	ml_°¨t
;

174 
__off_t
 
	ml_Àn
;

176 
__off64_t
 
	ml_°¨t
;

177 
__off64_t
 
	ml_Àn
;

179 
__pid_t
 
	ml_pid
;

182 #ifde‡
__USE_LARGEFILE64


183 
	sÊock64


185 
	ml_ty≥
;

186 
	ml_whí˚
;

187 
__off64_t
 
	ml_°¨t
;

188 
__off64_t
 
	ml_Àn
;

189 
__pid_t
 
	ml_pid
;

193 #ifde‡
__USE_GNU


195 
	e__pid_ty≥


197 
	mF_OWNER_TID
 = 0,

198 
	mF_OWNER_PID
,

199 
	mF_OWNER_PGRP
,

200 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


204 
	sf_ow√r_ex


206 
__pid_ty≥
 
	mty≥
;

207 
__pid_t
 
	mpid
;

213 #ifdef 
__USE_BSD


214 
	#FAPPEND
 
O_APPEND


	)

215 
	#FFSYNC
 
O_FSYNC


	)

216 
	#FASYNC
 
O_ASYNC


	)

217 
	#FNONBLOCK
 
O_NONBLOCK


	)

218 
	#FNDELAY
 
O_NDELAY


	)

222 #ifde‡
__USE_XOPEN2K


223 
	#POSIX_FADV_NORMAL
 0

	)

224 
	#POSIX_FADV_RANDOM
 1

	)

225 
	#POSIX_FADV_SEQUENTIAL
 2

	)

226 
	#POSIX_FADV_WILLNEED
 3

	)

227 
	#POSIX_FADV_DONTNEED
 4

	)

228 
	#POSIX_FADV_NOREUSE
 5

	)

232 #ifde‡
__USE_GNU


234 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

237 
	#SYNC_FILE_RANGE_WRITE
 2

	)

240 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

245 
	#SPLICE_F_MOVE
 1

	)

246 
	#SPLICE_F_NONBLOCK
 2

	)

249 
	#SPLICE_F_MORE
 4

	)

250 
	#SPLICE_F_GIFT
 8

	)

254 
	sfûe_h™dÀ


256 
	mh™dÀ_byãs
;

257 
	mh™dÀ_ty≥
;

259 
	mf_h™dÀ
[0];

263 
	#MAX_HANDLE_SZ
 128

	)

267 #ifde‡
__USE_ATFILE


268 
	#AT_FDCWD
 -100

	)

271 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

272 
	#AT_REMOVEDIR
 0x200

	)

274 
	#AT_SYMLINK_FOLLOW
 0x400

	)

275 
	#AT_NO_AUTOMOUNT
 0x800

	)

277 
	#AT_EMPTY_PATH
 0x1000

	)

278 
	#AT_EACCESS
 0x200

	)

282 
	g__BEGIN_DECLS


284 #ifde‡
__USE_GNU


287 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

288 
__THROW
;

295 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

296 
__Êags
);

303 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

304 
size_t
 
__cou¡
, 
__Êags
);

310 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

311 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

312 
__Êags
);

318 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

319 
__Êags
);

325 #i‚de‡
__USE_FILE_OFFSET64


326 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

330 
__off64_t
 
__Àn
),

331 
ÁŒoˇã64
);

333 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

336 #ifde‡
__USE_LARGEFILE64


337 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

338 
__off64_t
 
__Àn
);

343 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

344 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

345 
__Êags
Ë
__THROW
;

351 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

352 
__Êags
);

356 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

67 
	#IP_MTU
 14

	)

68 
	#IP_FREEBIND
 15

	)

69 
	#IP_IPSEC_POLICY
 16

	)

70 
	#IP_XFRM_POLICY
 17

	)

71 
	#IP_PASSSEC
 18

	)

72 
	#IP_TRANSPARENT
 19

	)

73 
	#IP_MULTICAST_ALL
 49

	)

76 
	#IP_ORIGDSTADDR
 20

	)

77 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

79 
	#IP_MINTTL
 21

	)

83 
	#IP_PMTUDISC_DONT
 0

	)

84 
	#IP_PMTUDISC_WANT
 1

	)

85 
	#IP_PMTUDISC_DO
 2

	)

86 
	#IP_PMTUDISC_PROBE
 3

	)

89 
	#SOL_IP
 0

	)

91 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

92 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

93 
	#IP_MAX_MEMBERSHIPS
 20

	)

95 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


99 
	sù_›ts


101 
ö_addr
 
	mù_d°
;

102 
	mù_›ts
[40];

106 
	sù_mªqn


108 
ö_addr
 
	mimr_mu…üddr
;

109 
ö_addr
 
	mimr_addªss
;

110 
	mimr_ifödex
;

114 
	sö_pktöfo


116 
	mùi_ifödex
;

117 
ö_addr
 
	mùi_•ec_d°
;

118 
ö_addr
 
	mùi_addr
;

125 
	#IPV6_ADDRFORM
 1

	)

126 
	#IPV6_2292PKTINFO
 2

	)

127 
	#IPV6_2292HOPOPTS
 3

	)

128 
	#IPV6_2292DSTOPTS
 4

	)

129 
	#IPV6_2292RTHDR
 5

	)

130 
	#IPV6_2292PKTOPTIONS
 6

	)

131 
	#IPV6_CHECKSUM
 7

	)

132 
	#IPV6_2292HOPLIMIT
 8

	)

134 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

136 
	#IPV6_NEXTHOP
 9

	)

137 
	#IPV6_AUTHHDR
 10

	)

138 
	#IPV6_UNICAST_HOPS
 16

	)

139 
	#IPV6_MULTICAST_IF
 17

	)

140 
	#IPV6_MULTICAST_HOPS
 18

	)

141 
	#IPV6_MULTICAST_LOOP
 19

	)

142 
	#IPV6_JOIN_GROUP
 20

	)

143 
	#IPV6_LEAVE_GROUP
 21

	)

144 
	#IPV6_ROUTER_ALERT
 22

	)

145 
	#IPV6_MTU_DISCOVER
 23

	)

146 
	#IPV6_MTU
 24

	)

147 
	#IPV6_RECVERR
 25

	)

148 
	#IPV6_V6ONLY
 26

	)

149 
	#IPV6_JOIN_ANYCAST
 27

	)

150 
	#IPV6_LEAVE_ANYCAST
 28

	)

151 
	#IPV6_IPSEC_POLICY
 34

	)

152 
	#IPV6_XFRM_POLICY
 35

	)

154 
	#IPV6_RECVPKTINFO
 49

	)

155 
	#IPV6_PKTINFO
 50

	)

156 
	#IPV6_RECVHOPLIMIT
 51

	)

157 
	#IPV6_HOPLIMIT
 52

	)

158 
	#IPV6_RECVHOPOPTS
 53

	)

159 
	#IPV6_HOPOPTS
 54

	)

160 
	#IPV6_RTHDRDSTOPTS
 55

	)

161 
	#IPV6_RECVRTHDR
 56

	)

162 
	#IPV6_RTHDR
 57

	)

163 
	#IPV6_RECVDSTOPTS
 58

	)

164 
	#IPV6_DSTOPTS
 59

	)

166 
	#IPV6_RECVTCLASS
 66

	)

167 
	#IPV6_TCLASS
 67

	)

170 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

171 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

172 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

173 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

176 
	#IPV6_PMTUDISC_DONT
 0

	)

177 
	#IPV6_PMTUDISC_WANT
 1

	)

178 
	#IPV6_PMTUDISC_DO
 2

	)

179 
	#IPV6_PMTUDISC_PROBE
 3

	)

182 
	#SOL_IPV6
 41

	)

183 
	#SOL_ICMPV6
 58

	)

186 
	#IPV6_RTHDR_LOOSE
 0

	)

187 
	#IPV6_RTHDR_STRICT
 1

	)

189 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/mman.h

21 #i‚de‡
_SYS_MMAN_H


34 
	#PROT_READ
 0x1

	)

35 
	#PROT_WRITE
 0x2

	)

36 
	#PROT_EXEC
 0x4

	)

37 
	#PROT_NONE
 0x0

	)

38 
	#PROT_GROWSDOWN
 0x01000000

	)

40 
	#PROT_GROWSUP
 0x02000000

	)

44 
	#MAP_SHARED
 0x01

	)

45 
	#MAP_PRIVATE
 0x02

	)

46 #ifde‡
__USE_MISC


47 
	#MAP_TYPE
 0x0‡

	)

51 
	#MAP_FIXED
 0x10

	)

52 #ifde‡
__USE_MISC


53 
	#MAP_FILE
 0

	)

54 
	#MAP_ANONYMOUS
 0x20

	)

55 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

56 
	#MAP_32BIT
 0x40

	)

60 #ifde‡
__USE_MISC


61 
	#MAP_GROWSDOWN
 0x00100

	)

62 
	#MAP_DENYWRITE
 0x00800

	)

63 
	#MAP_EXECUTABLE
 0x01000

	)

64 
	#MAP_LOCKED
 0x02000

	)

65 
	#MAP_NORESERVE
 0x04000

	)

66 
	#MAP_POPULATE
 0x08000

	)

67 
	#MAP_NONBLOCK
 0x10000

	)

68 
	#MAP_STACK
 0x20000

	)

69 
	#MAP_HUGETLB
 0x40000

	)

73 
	#MS_ASYNC
 1

	)

74 
	#MS_SYNC
 4

	)

75 
	#MS_INVALIDATE
 2

	)

78 
	#MCL_CURRENT
 1

	)

79 
	#MCL_FUTURE
 2

	)

83 #ifde‡
__USE_GNU


84 
	#MREMAP_MAYMOVE
 1

	)

85 
	#MREMAP_FIXED
 2

	)

89 #ifde‡
__USE_BSD


90 
	#MADV_NORMAL
 0

	)

91 
	#MADV_RANDOM
 1

	)

92 
	#MADV_SEQUENTIAL
 2

	)

93 
	#MADV_WILLNEED
 3

	)

94 
	#MADV_DONTNEED
 4

	)

95 
	#MADV_REMOVE
 9

	)

96 
	#MADV_DONTFORK
 10

	)

97 
	#MADV_DOFORK
 11

	)

98 
	#MADV_MERGEABLE
 12

	)

99 
	#MADV_UNMERGEABLE
 13

	)

100 
	#MADV_HUGEPAGE
 14

	)

101 
	#MADV_NOHUGEPAGE
 15

	)

102 
	#MADV_HWPOISON
 100

	)

106 #ifde‡
__USE_XOPEN2K


107 
	#POSIX_MADV_NORMAL
 0

	)

108 
	#POSIX_MADV_RANDOM
 1

	)

109 
	#POSIX_MADV_SEQUENTIAL
 2

	)

110 
	#POSIX_MADV_WILLNEED
 3

	)

111 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

106 
	m__RLIMIT_RTTIME
 = 15,

107 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

109 
	m__RLIMIT_NLIMITS
 = 16,

110 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


111 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

112 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

116 #i‚de‡
__USE_FILE_OFFSET64


117 
	#RLIM_INFINITY
 (()(~0UL))

	)

119 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

122 #ifde‡
__USE_LARGEFILE64


123 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

127 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

128 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

132 #i‚de‡
__USE_FILE_OFFSET64


133 
__æim_t
 
	tæim_t
;

135 
__æim64_t
 
	tæim_t
;

137 #ifde‡
__USE_LARGEFILE64


138 
__æim64_t
 
	tæim64_t
;

141 
	sæimô


144 
æim_t
 
	mæim_cur
;

146 
æim_t
 
	mæim_max
;

149 #ifde‡
__USE_LARGEFILE64


150 
	sæimô64


153 
æim64_t
 
	mæim_cur
;

155 
æim64_t
 
	mæim_max
;

160 
	e__rußge_who


163 
	mRUSAGE_SELF
 = 0,

164 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

167 
	mRUSAGE_CHILDREN
 = -1

168 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

170 #ifde‡
__USE_GNU


173 
	mRUSAGE_THREAD
 = 1

174 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

176 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

180 
	#__√ed_timevÆ


	)

181 
	~<bôs/time.h
>

184 
	srußge


187 
timevÆ
 
	mru_utime
;

189 
timevÆ
 
	mru_°ime
;

191 
	mru_maxrss
;

194 
	mru_ixrss
;

196 
	mru_idrss
;

198 
	mru_i§ss
;

201 
	mru_möÊt
;

203 
	mru_majÊt
;

205 
	mru_nsw≠
;

208 
	mru_öblock
;

210 
	mru_oublock
;

212 
	mru_msg¢d
;

214 
	mru_msgrcv
;

216 
	mru_nsig«ls
;

220 
	mru_nvcsw
;

223 
	mru_nivcsw
;

227 
	#PRIO_MIN
 -20

	)

228 
	#PRIO_MAX
 20

	)

232 
	e__¥i‹ôy_which


234 
	mPRIO_PROCESS
 = 0,

235 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

236 
	mPRIO_PGRP
 = 1,

237 
	#PRIO_PGRP
 
PRIO_PGRP


	)

238 
	mPRIO_USER
 = 2

239 
	#PRIO_USER
 
PRIO_USER


	)

243 
	g__BEGIN_DECLS


245 #ifde‡
__USE_GNU


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

249 
__c⁄°
 
æimô
 *
__√w_limô
,

250 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

252 #ifde‡
__REDIRECT_NTH


253 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

254 
__æimô_ªsour˚
 
__ªsour˚
,

255 
__c⁄°
 
æimô
 *
__√w_limô
,

256 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

258 
	#¥limô
 
¥limô64


	)

261 #ifde‡
__USE_LARGEFILE64


262 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

263 
__c⁄°
 
æimô64
 *
__√w_limô
,

264 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

268 
__END_DECLS


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
) \

60 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

61 
	#__FD_CLR
(
d
, 
£t
) \

62 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

63 
	#__FD_ISSET
(
d
, 
£t
) \

64 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

20 #i‚de‡
_SYS_SELECT_H


25 
__fdñt_chk
 (
__d
);

26 
	$__fdñt_w¨n
 (
__d
)

27 
	`__w¨«âr
 ("bit outside of fd_set selected");

28 #unde‡
__FD_ELT


29 
	#__FD_ELT
(
d
) \

30 
__exãnsi⁄__
 \

31 ({ 
__d
 = (
d
); \

32 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

33 ? (
__d
 >
__FD_SETSIZE
 \

34 ? 
	`__fdñt_w¨n
 (
__d
Ë: (__d / 
__NFDBITS
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STAT_H


24 
	#_BITS_STAT_H
 1

	)

27 
	#_STAT_VER_KERNEL
 0

	)

29 #i‡
__WORDSIZE
 == 32

30 
	#_STAT_VER_SVR4
 2

	)

31 
	#_STAT_VER_LINUX
 3

	)

34 
	#_MKNOD_VER_LINUX
 1

	)

35 
	#_MKNOD_VER_SVR4
 2

	)

36 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‡
__WORDSIZE
 == 32

50 
	m__∑d1
;

52 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‡
__WORDSIZE
 == 32

58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #i‡
__WORDSIZE
 == 64

67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‡
__WORDSIZE
 == 32

71 
	m__∑d2
;

73 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
	m°_˘imí£c
;

105 #i‡
__WORDSIZE
 == 64

106 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #i‡
__WORDSIZE
 == 64

123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #i‡
__WORDSIZE
 == 64

135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

155 
	#°_©ime
 
°_©im
.
tv_£c


	)

156 
	#°_mtime
 
°_mtim
.
tv_£c


	)

157 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

159 
__time_t
 
	m°_©ime
;

160 
	m°_©imí£c
;

161 
__time_t
 
	m°_mtime
;

162 
	m°_mtimí£c
;

163 
__time_t
 
	m°_˘ime
;

164 
	m°_˘imí£c
;

166 #i‡
__WORDSIZE
 == 64

167 
	m__unu£d
[3];

169 
__öo64_t
 
	m°_öo
;

175 
	#_STATBUF_ST_BLKSIZE


	)

176 
	#_STATBUF_ST_RDEV


	)

178 
	#_STATBUF_ST_NSEC


	)

182 
	#__S_IFMT
 0170000

	)

185 
	#__S_IFDIR
 0040000

	)

186 
	#__S_IFCHR
 0020000

	)

187 
	#__S_IFBLK
 0060000

	)

188 
	#__S_IFREG
 0100000

	)

189 
	#__S_IFIFO
 0010000

	)

190 
	#__S_IFLNK
 0120000

	)

191 
	#__S_IFSOCK
 0140000

	)

195 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

196 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

197 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

201 
	#__S_ISUID
 04000

	)

202 
	#__S_ISGID
 02000

	)

203 
	#__S_ISVTX
 01000

	)

204 
	#__S_IREAD
 0400

	)

205 
	#__S_IWRITE
 0200

	)

206 
	#__S_IEXEC
 0100

	)

208 #ifde‡
__USE_ATFILE


209 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

210 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


7 
	~<bôs/w‹dsize.h
>

9 #i‡
__WORDSIZE
 == 32

10 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

11 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

12 
	#SYS__sys˘l
 
__NR__sys˘l


	)

13 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

14 
	#SYS_ac˘
 
__NR_ac˘


	)

15 
	#SYS_add_key
 
__NR_add_key


	)

16 
	#SYS_adjtimex
 
__NR_adjtimex


	)

17 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

18 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

19 
	#SYS_bdÊush
 
__NR_bdÊush


	)

20 
	#SYS_bªak
 
__NR_bªak


	)

21 
	#SYS_brk
 
__NR_brk


	)

22 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

23 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

24 
	#SYS_chdú
 
__NR_chdú


	)

25 
	#SYS_chmod
 
__NR_chmod


	)

26 
	#SYS_chown
 
__NR_chown


	)

27 
	#SYS_chown32
 
__NR_chown32


	)

28 
	#SYS_chroŸ
 
__NR_chroŸ


	)

29 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

30 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

31 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

32 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

33 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

34 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

35 
	#SYS_˛o£
 
__NR_˛o£


	)

36 
	#SYS_¸ót
 
__NR_¸ót


	)

37 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

38 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

39 
	#SYS_dup
 
__NR_dup


	)

40 
	#SYS_dup2
 
__NR_dup2


	)

41 
	#SYS_dup3
 
__NR_dup3


	)

42 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

43 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

44 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

45 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

46 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

47 
	#SYS_evítfd
 
__NR_evítfd


	)

48 
	#SYS_evítfd2
 
__NR_evítfd2


	)

49 
	#SYS_execve
 
__NR_execve


	)

50 
	#SYS_exô
 
__NR_exô


	)

51 
	#SYS_exô_group
 
__NR_exô_group


	)

52 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

53 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

54 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

55 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

56 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

57 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

58 
	#SYS_fchdú
 
__NR_fchdú


	)

59 
	#SYS_fchmod
 
__NR_fchmod


	)

60 
	#SYS_fchmod©
 
__NR_fchmod©


	)

61 
	#SYS_fchown
 
__NR_fchown


	)

62 
	#SYS_fchown32
 
__NR_fchown32


	)

63 
	#SYS_fchow«t
 
__NR_fchow«t


	)

64 
	#SYS_f˙é
 
__NR_f˙é


	)

65 
	#SYS_f˙é64
 
__NR_f˙é64


	)

66 
	#SYS_fd©async
 
__NR_fd©async


	)

67 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

68 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

69 
	#SYS_Êock
 
__NR_Êock


	)

70 
	#SYS_f‹k
 
__NR_f‹k


	)

71 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

72 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

73 
	#SYS_f°©
 
__NR_f°©


	)

74 
	#SYS_f°©64
 
__NR_f°©64


	)

75 
	#SYS_f°©©64
 
__NR_f°©©64


	)

76 
	#SYS_f°©fs
 
__NR_f°©fs


	)

77 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

78 
	#SYS_fsync
 
__NR_fsync


	)

79 
	#SYS_·ime
 
__NR_·ime


	)

80 
	#SYS_·runˇã
 
__NR_·runˇã


	)

81 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

82 
	#SYS_fuãx
 
__NR_fuãx


	)

83 
	#SYS_futimeßt
 
__NR_futimeßt


	)

84 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

85 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

86 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

87 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

88 
	#SYS_gë˝u
 
__NR_gë˝u


	)

89 
	#SYS_gëcwd
 
__NR_gëcwd


	)

90 
	#SYS_gëdíts
 
__NR_gëdíts


	)

91 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

92 
	#SYS_gëegid
 
__NR_gëegid


	)

93 
	#SYS_gëegid32
 
__NR_gëegid32


	)

94 
	#SYS_gëeuid
 
__NR_gëeuid


	)

95 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

96 
	#SYS_gëgid
 
__NR_gëgid


	)

97 
	#SYS_gëgid32
 
__NR_gëgid32


	)

98 
	#SYS_gëgroups
 
__NR_gëgroups


	)

99 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

100 
	#SYS_gëôimî
 
__NR_gëôimî


	)

101 
	#SYS_gëpgid
 
__NR_gëpgid


	)

102 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

103 
	#SYS_gëpid
 
__NR_gëpid


	)

104 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

105 
	#SYS_gëµid
 
__NR_gëµid


	)

106 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

107 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

108 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

109 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

110 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

111 
	#SYS_gëæimô
 
__NR_gëæimô


	)

112 
	#SYS_gërußge
 
__NR_gërußge


	)

113 
	#SYS_gësid
 
__NR_gësid


	)

114 
	#SYS_gëtid
 
__NR_gëtid


	)

115 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

116 
	#SYS_gëuid
 
__NR_gëuid


	)

117 
	#SYS_gëuid32
 
__NR_gëuid32


	)

118 
	#SYS_gëx©å
 
__NR_gëx©å


	)

119 
	#SYS_gây
 
__NR_gây


	)

120 
	#SYS_idÀ
 
__NR_idÀ


	)

121 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

122 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

123 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

124 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

125 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

126 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

127 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

128 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

129 
	#SYS_io_£tup
 
__NR_io_£tup


	)

130 
	#SYS_io_submô
 
__NR_io_submô


	)

131 
	#SYS_io˘l
 
__NR_io˘l


	)

132 
	#SYS_i›îm
 
__NR_i›îm


	)

133 
	#SYS_i›l
 
__NR_i›l


	)

134 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

135 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

136 
	#SYS_ùc
 
__NR_ùc


	)

137 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

138 
	#SYS_key˘l
 
__NR_key˘l


	)

139 
	#SYS_kûl
 
__NR_kûl


	)

140 
	#SYS_lchown
 
__NR_lchown


	)

141 
	#SYS_lchown32
 
__NR_lchown32


	)

142 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

143 
	#SYS_lök
 
__NR_lök


	)

144 
	#SYS_lök©
 
__NR_lök©


	)

145 
	#SYS_li°x©å
 
__NR_li°x©å


	)

146 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

147 
	#SYS_lock
 
__NR_lock


	)

148 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

149 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

150 
	#SYS_l£ek
 
__NR_l£ek


	)

151 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

152 
	#SYS_l°©
 
__NR_l°©


	)

153 
	#SYS_l°©64
 
__NR_l°©64


	)

154 
	#SYS_madvi£
 
__NR_madvi£


	)

155 
	#SYS_madvi£1
 
__NR_madvi£1


	)

156 
	#SYS_mböd
 
__NR_mböd


	)

157 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

158 
	#SYS_möc‹e
 
__NR_möc‹e


	)

159 
	#SYS_mkdú
 
__NR_mkdú


	)

160 
	#SYS_mkdú©
 
__NR_mkdú©


	)

161 
	#SYS_mknod
 
__NR_mknod


	)

162 
	#SYS_mknod©
 
__NR_mknod©


	)

163 
	#SYS_mlock
 
__NR_mlock


	)

164 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

165 
	#SYS_mm≠
 
__NR_mm≠


	)

166 
	#SYS_mm≠2
 
__NR_mm≠2


	)

167 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

168 
	#SYS_mou¡
 
__NR_mou¡


	)

169 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

170 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

171 
	#SYS_mpx
 
__NR_mpx


	)

172 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

173 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

174 
	#SYS_mq_›í
 
__NR_mq_›í


	)

175 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

176 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

177 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

178 
	#SYS_mªm≠
 
__NR_mªm≠


	)

179 
	#SYS_msync
 
__NR_msync


	)

180 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

181 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

182 
	#SYS_munm≠
 
__NR_munm≠


	)

183 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

184 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

185 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

186 
	#SYS_ni˚
 
__NR_ni˚


	)

187 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

188 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

189 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

190 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

191 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

192 
	#SYS_›í
 
__NR_›í


	)

193 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

194 
	#SYS_›í©
 
__NR_›í©


	)

195 
	#SYS_∑u£
 
__NR_∑u£


	)

196 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

197 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

198 
	#SYS_pùe
 
__NR_pùe


	)

199 
	#SYS_pùe2
 
__NR_pùe2


	)

200 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

201 
	#SYS_pﬁl
 
__NR_pﬁl


	)

202 
	#SYS_µﬁl
 
__NR_µﬁl


	)

203 
	#SYS_¥˘l
 
__NR_¥˘l


	)

204 
	#SYS_¥ód64
 
__NR_¥ód64


	)

205 
	#SYS_¥ódv
 
__NR_¥ódv


	)

206 
	#SYS_¥limô64
 
__NR_¥limô64


	)

207 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

208 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

209 
	#SYS_¥of
 
__NR_¥of


	)

210 
	#SYS_¥ofû
 
__NR_¥ofû


	)

211 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

212 
	#SYS_±ø˚
 
__NR_±ø˚


	)

213 
	#SYS_puçmsg
 
__NR_puçmsg


	)

214 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

215 
	#SYS_pwrôev
 
__NR_pwrôev


	)

216 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

217 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

218 
	#SYS_ªad
 
__NR_ªad


	)

219 
	#SYS_ªadahód
 
__NR_ªadahód


	)

220 
	#SYS_ªaddú
 
__NR_ªaddú


	)

221 
	#SYS_ªadlök
 
__NR_ªadlök


	)

222 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

223 
	#SYS_ªadv
 
__NR_ªadv


	)

224 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

225 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

226 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

227 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

228 
	#SYS_ª«me
 
__NR_ª«me


	)

229 
	#SYS_ª«mót
 
__NR_ª«mót


	)

230 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

231 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

232 
	#SYS_rmdú
 
__NR_rmdú


	)

233 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

234 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

235 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

236 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

237 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

238 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

239 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

240 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

241 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

242 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

243 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

244 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

245 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

246 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

247 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

248 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

249 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

250 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

251 
	#SYS_£À˘
 
__NR_£À˘


	)

252 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

253 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

254 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

255 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

256 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

257 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

258 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

259 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

260 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

261 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

262 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

263 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

264 
	#SYS_£tgid
 
__NR_£tgid


	)

265 
	#SYS_£tgid32
 
__NR_£tgid32


	)

266 
	#SYS_£tgroups
 
__NR_£tgroups


	)

267 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

268 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

269 
	#SYS_£tôimî
 
__NR_£tôimî


	)

270 
	#SYS_£äs
 
__NR_£äs


	)

271 
	#SYS_£çgid
 
__NR_£çgid


	)

272 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

273 
	#SYS_£åegid
 
__NR_£åegid


	)

274 
	#SYS_£åegid32
 
__NR_£åegid32


	)

275 
	#SYS_£åesgid
 
__NR_£åesgid


	)

276 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

277 
	#SYS_£åesuid
 
__NR_£åesuid


	)

278 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

279 
	#SYS_£åeuid
 
__NR_£åeuid


	)

280 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

281 
	#SYS_£ålimô
 
__NR_£ålimô


	)

282 
	#SYS_£tsid
 
__NR_£tsid


	)

283 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

284 
	#SYS_£tuid
 
__NR_£tuid


	)

285 
	#SYS_£tuid32
 
__NR_£tuid32


	)

286 
	#SYS_£tx©å
 
__NR_£tx©å


	)

287 
	#SYS_sgëmask
 
__NR_sgëmask


	)

288 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

289 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

290 
	#SYS_sig«l
 
__NR_sig«l


	)

291 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

292 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

293 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

294 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

295 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

296 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

297 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

298 
	#SYS_•li˚
 
__NR_•li˚


	)

299 
	#SYS_s£tmask
 
__NR_s£tmask


	)

300 
	#SYS_°©
 
__NR_°©


	)

301 
	#SYS_°©64
 
__NR_°©64


	)

302 
	#SYS_°©fs
 
__NR_°©fs


	)

303 
	#SYS_°©fs64
 
__NR_°©fs64


	)

304 
	#SYS_°ime
 
__NR_°ime


	)

305 
	#SYS_°ty
 
__NR_°ty


	)

306 
	#SYS_sw≠off
 
__NR_sw≠off


	)

307 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

308 
	#SYS_symlök
 
__NR_symlök


	)

309 
	#SYS_symlök©
 
__NR_symlök©


	)

310 
	#SYS_sync
 
__NR_sync


	)

311 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

312 
	#SYS_syncfs
 
__NR_syncfs


	)

313 
	#SYS_sysfs
 
__NR_sysfs


	)

314 
	#SYS_sysöfo
 
__NR_sysöfo


	)

315 
	#SYS_sy¶og
 
__NR_sy¶og


	)

316 
	#SYS_ãe
 
__NR_ãe


	)

317 
	#SYS_tgkûl
 
__NR_tgkûl


	)

318 
	#SYS_time
 
__NR_time


	)

319 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

320 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

321 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

322 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

323 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

324 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

325 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

326 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

327 
	#SYS_times
 
__NR_times


	)

328 
	#SYS_tkûl
 
__NR_tkûl


	)

329 
	#SYS_åunˇã
 
__NR_åunˇã


	)

330 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

331 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

332 
	#SYS_ulimô
 
__NR_ulimô


	)

333 
	#SYS_umask
 
__NR_umask


	)

334 
	#SYS_umou¡
 
__NR_umou¡


	)

335 
	#SYS_umou¡2
 
__NR_umou¡2


	)

336 
	#SYS_u«me
 
__NR_u«me


	)

337 
	#SYS_u∆ök
 
__NR_u∆ök


	)

338 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

339 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

340 
	#SYS_u£lib
 
__NR_u£lib


	)

341 
	#SYS_u°©
 
__NR_u°©


	)

342 
	#SYS_utime
 
__NR_utime


	)

343 
	#SYS_utimíßt
 
__NR_utimíßt


	)

344 
	#SYS_utimes
 
__NR_utimes


	)

345 
	#SYS_vf‹k
 
__NR_vf‹k


	)

346 
	#SYS_vh™gup
 
__NR_vh™gup


	)

347 
	#SYS_vm86
 
__NR_vm86


	)

348 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

349 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

350 
	#SYS_v£rvî
 
__NR_v£rvî


	)

351 
	#SYS_waô4
 
__NR_waô4


	)

352 
	#SYS_waôid
 
__NR_waôid


	)

353 
	#SYS_waôpid
 
__NR_waôpid


	)

354 
	#SYS_wrôe
 
__NR_wrôe


	)

355 
	#SYS_wrôev
 
__NR_wrôev


	)

357 #i‡
__WORDSIZE
 == 64

358 
	#SYS__sys˘l
 
__NR__sys˘l


	)

359 
	#SYS_ac˚±
 
__NR_ac˚±


	)

360 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

361 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

362 
	#SYS_ac˘
 
__NR_ac˘


	)

363 
	#SYS_add_key
 
__NR_add_key


	)

364 
	#SYS_adjtimex
 
__NR_adjtimex


	)

365 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

366 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

367 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

368 
	#SYS_böd
 
__NR_böd


	)

369 
	#SYS_brk
 
__NR_brk


	)

370 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

371 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

372 
	#SYS_chdú
 
__NR_chdú


	)

373 
	#SYS_chmod
 
__NR_chmod


	)

374 
	#SYS_chown
 
__NR_chown


	)

375 
	#SYS_chroŸ
 
__NR_chroŸ


	)

376 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

377 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

378 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

379 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

380 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

381 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

382 
	#SYS_˛o£
 
__NR_˛o£


	)

383 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

384 
	#SYS_¸ót
 
__NR_¸ót


	)

385 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

386 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

387 
	#SYS_dup
 
__NR_dup


	)

388 
	#SYS_dup2
 
__NR_dup2


	)

389 
	#SYS_dup3
 
__NR_dup3


	)

390 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

391 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

392 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

393 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

394 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

395 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

396 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

397 
	#SYS_evítfd
 
__NR_evítfd


	)

398 
	#SYS_evítfd2
 
__NR_evítfd2


	)

399 
	#SYS_execve
 
__NR_execve


	)

400 
	#SYS_exô
 
__NR_exô


	)

401 
	#SYS_exô_group
 
__NR_exô_group


	)

402 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

403 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

404 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

405 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

406 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

407 
	#SYS_fchdú
 
__NR_fchdú


	)

408 
	#SYS_fchmod
 
__NR_fchmod


	)

409 
	#SYS_fchmod©
 
__NR_fchmod©


	)

410 
	#SYS_fchown
 
__NR_fchown


	)

411 
	#SYS_fchow«t
 
__NR_fchow«t


	)

412 
	#SYS_f˙é
 
__NR_f˙é


	)

413 
	#SYS_fd©async
 
__NR_fd©async


	)

414 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

415 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

416 
	#SYS_Êock
 
__NR_Êock


	)

417 
	#SYS_f‹k
 
__NR_f‹k


	)

418 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

419 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

420 
	#SYS_f°©
 
__NR_f°©


	)

421 
	#SYS_f°©fs
 
__NR_f°©fs


	)

422 
	#SYS_fsync
 
__NR_fsync


	)

423 
	#SYS_·runˇã
 
__NR_·runˇã


	)

424 
	#SYS_fuãx
 
__NR_fuãx


	)

425 
	#SYS_futimeßt
 
__NR_futimeßt


	)

426 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

427 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

428 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

429 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

430 
	#SYS_gë˝u
 
__NR_gë˝u


	)

431 
	#SYS_gëcwd
 
__NR_gëcwd


	)

432 
	#SYS_gëdíts
 
__NR_gëdíts


	)

433 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

434 
	#SYS_gëegid
 
__NR_gëegid


	)

435 
	#SYS_gëeuid
 
__NR_gëeuid


	)

436 
	#SYS_gëgid
 
__NR_gëgid


	)

437 
	#SYS_gëgroups
 
__NR_gëgroups


	)

438 
	#SYS_gëôimî
 
__NR_gëôimî


	)

439 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

440 
	#SYS_gëpgid
 
__NR_gëpgid


	)

441 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

442 
	#SYS_gëpid
 
__NR_gëpid


	)

443 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

444 
	#SYS_gëµid
 
__NR_gëµid


	)

445 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

446 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

447 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

448 
	#SYS_gëæimô
 
__NR_gëæimô


	)

449 
	#SYS_gërußge
 
__NR_gërußge


	)

450 
	#SYS_gësid
 
__NR_gësid


	)

451 
	#SYS_gësock«me
 
__NR_gësock«me


	)

452 
	#SYS_gësock›t
 
__NR_gësock›t


	)

453 
	#SYS_gëtid
 
__NR_gëtid


	)

454 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

455 
	#SYS_gëuid
 
__NR_gëuid


	)

456 
	#SYS_gëx©å
 
__NR_gëx©å


	)

457 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

458 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

459 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

460 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

461 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

462 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

463 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

464 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

465 
	#SYS_io_£tup
 
__NR_io_£tup


	)

466 
	#SYS_io_submô
 
__NR_io_submô


	)

467 
	#SYS_io˘l
 
__NR_io˘l


	)

468 
	#SYS_i›îm
 
__NR_i›îm


	)

469 
	#SYS_i›l
 
__NR_i›l


	)

470 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

471 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

472 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

473 
	#SYS_key˘l
 
__NR_key˘l


	)

474 
	#SYS_kûl
 
__NR_kûl


	)

475 
	#SYS_lchown
 
__NR_lchown


	)

476 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

477 
	#SYS_lök
 
__NR_lök


	)

478 
	#SYS_lök©
 
__NR_lök©


	)

479 
	#SYS_li°í
 
__NR_li°í


	)

480 
	#SYS_li°x©å
 
__NR_li°x©å


	)

481 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

482 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

483 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

484 
	#SYS_l£ek
 
__NR_l£ek


	)

485 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

486 
	#SYS_l°©
 
__NR_l°©


	)

487 
	#SYS_madvi£
 
__NR_madvi£


	)

488 
	#SYS_mböd
 
__NR_mböd


	)

489 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

490 
	#SYS_möc‹e
 
__NR_möc‹e


	)

491 
	#SYS_mkdú
 
__NR_mkdú


	)

492 
	#SYS_mkdú©
 
__NR_mkdú©


	)

493 
	#SYS_mknod
 
__NR_mknod


	)

494 
	#SYS_mknod©
 
__NR_mknod©


	)

495 
	#SYS_mlock
 
__NR_mlock


	)

496 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

497 
	#SYS_mm≠
 
__NR_mm≠


	)

498 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

499 
	#SYS_mou¡
 
__NR_mou¡


	)

500 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

501 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

502 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

503 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

504 
	#SYS_mq_›í
 
__NR_mq_›í


	)

505 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

506 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

507 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

508 
	#SYS_mªm≠
 
__NR_mªm≠


	)

509 
	#SYS_msg˘l
 
__NR_msg˘l


	)

510 
	#SYS_msggë
 
__NR_msggë


	)

511 
	#SYS_msgrcv
 
__NR_msgrcv


	)

512 
	#SYS_msg¢d
 
__NR_msg¢d


	)

513 
	#SYS_msync
 
__NR_msync


	)

514 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

515 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

516 
	#SYS_munm≠
 
__NR_munm≠


	)

517 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

518 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

519 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

520 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

521 
	#SYS_›í
 
__NR_›í


	)

522 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

523 
	#SYS_›í©
 
__NR_›í©


	)

524 
	#SYS_∑u£
 
__NR_∑u£


	)

525 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

526 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

527 
	#SYS_pùe
 
__NR_pùe


	)

528 
	#SYS_pùe2
 
__NR_pùe2


	)

529 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

530 
	#SYS_pﬁl
 
__NR_pﬁl


	)

531 
	#SYS_µﬁl
 
__NR_µﬁl


	)

532 
	#SYS_¥˘l
 
__NR_¥˘l


	)

533 
	#SYS_¥ód64
 
__NR_¥ód64


	)

534 
	#SYS_¥ódv
 
__NR_¥ódv


	)

535 
	#SYS_¥limô64
 
__NR_¥limô64


	)

536 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

537 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

538 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

539 
	#SYS_±ø˚
 
__NR_±ø˚


	)

540 
	#SYS_puçmsg
 
__NR_puçmsg


	)

541 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

542 
	#SYS_pwrôev
 
__NR_pwrôev


	)

543 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

544 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

545 
	#SYS_ªad
 
__NR_ªad


	)

546 
	#SYS_ªadahód
 
__NR_ªadahód


	)

547 
	#SYS_ªadlök
 
__NR_ªadlök


	)

548 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

549 
	#SYS_ªadv
 
__NR_ªadv


	)

550 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

551 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

552 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

553 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

554 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

555 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

556 
	#SYS_ª«me
 
__NR_ª«me


	)

557 
	#SYS_ª«mót
 
__NR_ª«mót


	)

558 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

559 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

560 
	#SYS_rmdú
 
__NR_rmdú


	)

561 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

562 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

563 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

564 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

565 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

566 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

567 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

568 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

569 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

570 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

571 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

572 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

573 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

574 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

575 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

576 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

577 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

578 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

579 
	#SYS_£curôy
 
__NR_£curôy


	)

580 
	#SYS_£À˘
 
__NR_£À˘


	)

581 
	#SYS_£m˘l
 
__NR_£m˘l


	)

582 
	#SYS_£mgë
 
__NR_£mgë


	)

583 
	#SYS_£m›
 
__NR_£m›


	)

584 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

585 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

586 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

587 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

588 
	#SYS_£ndto
 
__NR_£ndto


	)

589 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

590 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

591 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

592 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

593 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

594 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

595 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

596 
	#SYS_£tgid
 
__NR_£tgid


	)

597 
	#SYS_£tgroups
 
__NR_£tgroups


	)

598 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

599 
	#SYS_£tôimî
 
__NR_£tôimî


	)

600 
	#SYS_£äs
 
__NR_£äs


	)

601 
	#SYS_£çgid
 
__NR_£çgid


	)

602 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

603 
	#SYS_£åegid
 
__NR_£åegid


	)

604 
	#SYS_£åesgid
 
__NR_£åesgid


	)

605 
	#SYS_£åesuid
 
__NR_£åesuid


	)

606 
	#SYS_£åeuid
 
__NR_£åeuid


	)

607 
	#SYS_£ålimô
 
__NR_£ålimô


	)

608 
	#SYS_£tsid
 
__NR_£tsid


	)

609 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

610 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

611 
	#SYS_£tuid
 
__NR_£tuid


	)

612 
	#SYS_£tx©å
 
__NR_£tx©å


	)

613 
	#SYS_shm©
 
__NR_shm©


	)

614 
	#SYS_shm˘l
 
__NR_shm˘l


	)

615 
	#SYS_shmdt
 
__NR_shmdt


	)

616 
	#SYS_shmgë
 
__NR_shmgë


	)

617 
	#SYS_shutdown
 
__NR_shutdown


	)

618 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

619 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

620 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

621 
	#SYS_sockë
 
__NR_sockë


	)

622 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

623 
	#SYS_•li˚
 
__NR_•li˚


	)

624 
	#SYS_°©
 
__NR_°©


	)

625 
	#SYS_°©fs
 
__NR_°©fs


	)

626 
	#SYS_sw≠off
 
__NR_sw≠off


	)

627 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

628 
	#SYS_symlök
 
__NR_symlök


	)

629 
	#SYS_symlök©
 
__NR_symlök©


	)

630 
	#SYS_sync
 
__NR_sync


	)

631 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

632 
	#SYS_syncfs
 
__NR_syncfs


	)

633 
	#SYS_sysfs
 
__NR_sysfs


	)

634 
	#SYS_sysöfo
 
__NR_sysöfo


	)

635 
	#SYS_sy¶og
 
__NR_sy¶og


	)

636 
	#SYS_ãe
 
__NR_ãe


	)

637 
	#SYS_tgkûl
 
__NR_tgkûl


	)

638 
	#SYS_time
 
__NR_time


	)

639 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

640 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

641 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

642 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

643 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

644 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

645 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

646 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

647 
	#SYS_times
 
__NR_times


	)

648 
	#SYS_tkûl
 
__NR_tkûl


	)

649 
	#SYS_åunˇã
 
__NR_åunˇã


	)

650 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

651 
	#SYS_umask
 
__NR_umask


	)

652 
	#SYS_umou¡2
 
__NR_umou¡2


	)

653 
	#SYS_u«me
 
__NR_u«me


	)

654 
	#SYS_u∆ök
 
__NR_u∆ök


	)

655 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

656 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

657 
	#SYS_u£lib
 
__NR_u£lib


	)

658 
	#SYS_u°©
 
__NR_u°©


	)

659 
	#SYS_utime
 
__NR_utime


	)

660 
	#SYS_utimíßt
 
__NR_utimíßt


	)

661 
	#SYS_utimes
 
__NR_utimes


	)

662 
	#SYS_vf‹k
 
__NR_vf‹k


	)

663 
	#SYS_vh™gup
 
__NR_vh™gup


	)

664 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

665 
	#SYS_v£rvî
 
__NR_v£rvî


	)

666 
	#SYS_waô4
 
__NR_waô4


	)

667 
	#SYS_waôid
 
__NR_waôid


	)

668 
	#SYS_wrôe
 
__NR_wrôe


	)

669 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/time.h

24 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


25 #i‚de‡
_STRUCT_TIMEVAL


26 
	#_STRUCT_TIMEVAL
 1

	)

27 
	~<bôs/ty≥s.h
>

31 
	stimevÆ


33 
__time_t
 
	mtv_£c
;

34 
__su£c⁄ds_t
 
	mtv_u£c
;

39 #i‚de‡
__√ed_timevÆ


40 #i‚de‡
_BITS_TIME_H


41 
	#_BITS_TIME_H
 1

	)

49 
	#CLOCKS_PER_SEC
 1000000l

	)

51 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/utsname.h

19 #i‚de‡
_SYS_UTSNAME_H


24 
	#_UTSNAME_LENGTH
 65

	)

29 
	#_UTSNAME_DOMAIN_LENGTH
 
_UTSNAME_LENGTH


	)

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/blk_types.h

5 #i‚de‡
__LINUX_BLK_TYPES_H


6 
	#__LINUX_BLK_TYPES_H


	)

8 #ifde‡
CONFIG_BLOCK


10 
	~<löux/ty≥s.h
>

12 
	gbio_£t
;

13 
	gbio
;

14 
	gbio_öãgrôy_∑ylﬂd
;

15 
	g∑ge
;

16 
	gblock_devi˚
;

17 (
	tbio_íd_io_t
Ë(
	tbio
 *, );

18 (
	tbio_de°ru˘‹_t
Ë(
	tbio
 *);

23 
	sbio_vec
 {

24 
∑ge
 *
bv_∑ge
;

25 
bv_Àn
;

26 
bv_off£t
;

33 
	sbio
 {

34 
£˘‹_t
 
bi_£˘‹
;

36 
bio
 *
bi_√xt
;

37 
block_devi˚
 *
bi_bdev
;

38 
bi_Êags
;

39 
bi_rw
;

43 
bi_v˙t
;

44 
bi_idx
;

49 
bi_phys_£gmíts
;

51 
bi_size
;

57 
bi_£g_‰⁄t_size
;

58 
bi_£g_back_size
;

60 
bi_max_vecs
;

62 
©omic_t
 
bi_˙t
;

64 
bio_vec
 *
bi_io_vec
;

66 
bio_íd_io_t
 *
bi_íd_io
;

68 *
bi_¥iv©e
;

69 #i‡
	`deföed
(
CONFIG_BLK_DEV_INTEGRITY
)

70 
bio_öãgrôy_∑ylﬂd
 *
bi_öãgrôy
;

73 
bio_de°ru˘‹_t
 *
bi_de°ru˘‹
;

80 
bio_vec
 
bi_ölöe_vecs
[0];

86 
	#BIO_UPTODATE
 0

	)

87 
	#BIO_RW_BLOCK
 1

	)

88 
	#BIO_EOF
 2

	)

89 
	#BIO_SEG_VALID
 3

	)

90 
	#BIO_CLONED
 4

	)

91 
	#BIO_BOUNCED
 5

	)

92 
	#BIO_USER_MAPPED
 6

	)

93 
	#BIO_EOPNOTSUPP
 7

	)

94 
	#BIO_NULL_MAPPED
 8

	)

95 
	#BIO_FS_INTEGRITY
 9

	)

96 
	#BIO_QUIET
 10

	)

97 
	#BIO_MAPPED_INTEGRITY
 11

	)

98 
	#bio_Êagged
(
bio
, 
Êag
Ë((bio)->
bi_Êags
 & (1 << (Êag)))

	)

103 
	#BIO_POOL_BITS
 (4)

	)

104 
	#BIO_POOL_NONE
 ((1UL << 
BIO_POOL_BITS
Ë- 1)

	)

105 
	#BIO_POOL_OFFSET
 (
BITS_PER_LONG
 - 
BIO_POOL_BITS
)

	)

106 
	#BIO_POOL_MASK
 (1UL << 
BIO_POOL_OFFSET
)

	)

107 
	#BIO_POOL_IDX
(
bio
Ë((bio)->
bi_Êags
 >> 
BIO_POOL_OFFSET
)

	)

115 
	erq_Êag_bôs
 {

117 
__REQ_WRITE
,

118 
__REQ_FAILFAST_DEV
,

119 
__REQ_FAILFAST_TRANSPORT
,

120 
__REQ_FAILFAST_DRIVER
,

122 
__REQ_SYNC
,

123 
__REQ_META
,

124 
__REQ_PRIO
,

125 
__REQ_DISCARD
,

126 
__REQ_SECURE
,

128 
__REQ_NOIDLE
,

129 
__REQ_FUA
,

130 
__REQ_FLUSH
,

133 
__REQ_RAHEAD
,

134 
__REQ_THROTTLED
,

138 
__REQ_SORTED
,

139 
__REQ_SOFTBARRIER
,

140 
__REQ_NOMERGE
,

141 
__REQ_STARTED
,

142 
__REQ_DONTPREP
,

143 
__REQ_QUEUED
,

144 
__REQ_ELVPRIV
,

145 
__REQ_FAILED
,

146 
__REQ_QUIET
,

147 
__REQ_PREEMPT
,

148 
__REQ_ALLOCED
,

149 
__REQ_COPY_USER
,

150 
__REQ_FLUSH_SEQ
,

151 
__REQ_IO_STAT
,

152 
__REQ_MIXED_MERGE
,

153 
__REQ_NR_BITS
,

156 
	#REQ_WRITE
 (1 << 
__REQ_WRITE
)

	)

157 
	#REQ_FAILFAST_DEV
 (1 << 
__REQ_FAILFAST_DEV
)

	)

158 
	#REQ_FAILFAST_TRANSPORT
 (1 << 
__REQ_FAILFAST_TRANSPORT
)

	)

159 
	#REQ_FAILFAST_DRIVER
 (1 << 
__REQ_FAILFAST_DRIVER
)

	)

160 
	#REQ_SYNC
 (1 << 
__REQ_SYNC
)

	)

161 
	#REQ_META
 (1 << 
__REQ_META
)

	)

162 
	#REQ_PRIO
 (1 << 
__REQ_PRIO
)

	)

163 
	#REQ_DISCARD
 (1 << 
__REQ_DISCARD
)

	)

164 
	#REQ_NOIDLE
 (1 << 
__REQ_NOIDLE
)

	)

166 
	#REQ_FAILFAST_MASK
 \

167 (
REQ_FAILFAST_DEV
 | 
REQ_FAILFAST_TRANSPORT
 | 
REQ_FAILFAST_DRIVER
)

	)

168 
	#REQ_COMMON_MASK
 \

169 (
REQ_WRITE
 | 
REQ_FAILFAST_MASK
 | 
REQ_SYNC
 | 
REQ_META
 | 
REQ_PRIO
 | \

170 
REQ_DISCARD
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
 | 
REQ_FUA
 | 
REQ_SECURE
)

	)

171 
	#REQ_CLONE_MASK
 
REQ_COMMON_MASK


	)

173 
	#REQ_RAHEAD
 (1 << 
__REQ_RAHEAD
)

	)

174 
	#REQ_THROTTLED
 (1 << 
__REQ_THROTTLED
)

	)

176 
	#REQ_SORTED
 (1 << 
__REQ_SORTED
)

	)

177 
	#REQ_SOFTBARRIER
 (1 << 
__REQ_SOFTBARRIER
)

	)

178 
	#REQ_FUA
 (1 << 
__REQ_FUA
)

	)

179 
	#REQ_NOMERGE
 (1 << 
__REQ_NOMERGE
)

	)

180 
	#REQ_STARTED
 (1 << 
__REQ_STARTED
)

	)

181 
	#REQ_DONTPREP
 (1 << 
__REQ_DONTPREP
)

	)

182 
	#REQ_QUEUED
 (1 << 
__REQ_QUEUED
)

	)

183 
	#REQ_ELVPRIV
 (1 << 
__REQ_ELVPRIV
)

	)

184 
	#REQ_FAILED
 (1 << 
__REQ_FAILED
)

	)

185 
	#REQ_QUIET
 (1 << 
__REQ_QUIET
)

	)

186 
	#REQ_PREEMPT
 (1 << 
__REQ_PREEMPT
)

	)

187 
	#REQ_ALLOCED
 (1 << 
__REQ_ALLOCED
)

	)

188 
	#REQ_COPY_USER
 (1 << 
__REQ_COPY_USER
)

	)

189 
	#REQ_FLUSH
 (1 << 
__REQ_FLUSH
)

	)

190 
	#REQ_FLUSH_SEQ
 (1 << 
__REQ_FLUSH_SEQ
)

	)

191 
	#REQ_IO_STAT
 (1 << 
__REQ_IO_STAT
)

	)

192 
	#REQ_MIXED_MERGE
 (1 << 
__REQ_MIXED_MERGE
)

	)

193 
	#REQ_SECURE
 (1 << 
__REQ_SECURE
)

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/prctl.h

1 #i‚de‡
_LINUX_PRCTL_H


2 
	#_LINUX_PRCTL_H


	)

6 
	#PR_SET_PDEATHSIG
 1

	)

7 
	#PR_GET_PDEATHSIG
 2

	)

10 
	#PR_GET_DUMPABLE
 3

	)

11 
	#PR_SET_DUMPABLE
 4

	)

14 
	#PR_GET_UNALIGN
 5

	)

15 
	#PR_SET_UNALIGN
 6

	)

16 
	#PR_UNALIGN_NOPRINT
 1

	)

17 
	#PR_UNALIGN_SIGBUS
 2

	)

21 
	#PR_GET_KEEPCAPS
 7

	)

22 
	#PR_SET_KEEPCAPS
 8

	)

25 
	#PR_GET_FPEMU
 9

	)

26 
	#PR_SET_FPEMU
 10

	)

27 
	#PR_FPEMU_NOPRINT
 1

	)

28 
	#PR_FPEMU_SIGFPE
 2

	)

31 
	#PR_GET_FPEXC
 11

	)

32 
	#PR_SET_FPEXC
 12

	)

33 
	#PR_FP_EXC_SW_ENABLE
 0x80

	)

34 
	#PR_FP_EXC_DIV
 0x010000

	)

35 
	#PR_FP_EXC_OVF
 0x020000

	)

36 
	#PR_FP_EXC_UND
 0x040000

	)

37 
	#PR_FP_EXC_RES
 0x080000

	)

38 
	#PR_FP_EXC_INV
 0x100000

	)

39 
	#PR_FP_EXC_DISABLED
 0

	)

40 
	#PR_FP_EXC_NONRECOV
 1

	)

41 
	#PR_FP_EXC_ASYNC
 2

	)

42 
	#PR_FP_EXC_PRECISE
 3

	)

46 
	#PR_GET_TIMING
 13

	)

47 
	#PR_SET_TIMING
 14

	)

48 
	#PR_TIMING_STATISTICAL
 0

	)

50 
	#PR_TIMING_TIMESTAMP
 1

	)

53 
	#PR_SET_NAME
 15

	)

54 
	#PR_GET_NAME
 16

	)

57 
	#PR_GET_ENDIAN
 19

	)

58 
	#PR_SET_ENDIAN
 20

	)

59 
	#PR_ENDIAN_BIG
 0

	)

60 
	#PR_ENDIAN_LITTLE
 1

	)

61 
	#PR_ENDIAN_PPC_LITTLE
 2

	)

64 
	#PR_GET_SECCOMP
 21

	)

65 
	#PR_SET_SECCOMP
 22

	)

68 
	#PR_CAPBSET_READ
 23

	)

69 
	#PR_CAPBSET_DROP
 24

	)

72 
	#PR_GET_TSC
 25

	)

73 
	#PR_SET_TSC
 26

	)

74 
	#PR_TSC_ENABLE
 1

	)

75 
	#PR_TSC_SIGSEGV
 2

	)

78 
	#PR_GET_SECUREBITS
 27

	)

79 
	#PR_SET_SECUREBITS
 28

	)

85 
	#PR_SET_TIMERSLACK
 29

	)

86 
	#PR_GET_TIMERSLACK
 30

	)

88 
	#PR_TASK_PERF_EVENTS_DISABLE
 31

	)

89 
	#PR_TASK_PERF_EVENTS_ENABLE
 32

	)

95 
	#PR_MCE_KILL
 33

	)

96 
	#PR_MCE_KILL_CLEAR
 0

	)

97 
	#PR_MCE_KILL_SET
 1

	)

99 
	#PR_MCE_KILL_LATE
 0

	)

100 
	#PR_MCE_KILL_EARLY
 1

	)

101 
	#PR_MCE_KILL_DEFAULT
 2

	)

103 
	#PR_MCE_KILL_GET
 34

	)

108 
	#PR_SET_MM
 35

	)

109 
	#PR_SET_MM_START_CODE
 1

	)

110 
	#PR_SET_MM_END_CODE
 2

	)

111 
	#PR_SET_MM_START_DATA
 3

	)

112 
	#PR_SET_MM_END_DATA
 4

	)

113 
	#PR_SET_MM_START_STACK
 5

	)

114 
	#PR_SET_MM_START_BRK
 6

	)

115 
	#PR_SET_MM_BRK
 7

	)

121 
	#PR_SET_PTRACER
 0x59616d61

	)

122 
	#PR_SET_PTRACER_ANY
 (()-1)

	)

136 
	#PR_SET_NO_NEW_PRIVS
 38

	)

137 
	#PR_GET_NO_NEW_PRIVS
 39

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__BEGIN_DECLS


32 
__exãnsi⁄__


33 
	$gnu_dev_maj‹
 (
__dev
)

34 
__THROW
 
__©åibuã_c⁄°__
;

35 
__exãnsi⁄__


36 
	$gnu_dev_mö‹
 (
__dev
)

37 
__THROW
 
__©åibuã_c⁄°__
;

38 
__exãnsi⁄__


39 
	$gnu_dev_makedev
 (
__maj‹
,

40 
__mö‹
)

41 
__THROW
 
__©åibuã_c⁄°__
;

43 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

47  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

53  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

54 
	}
}

56 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

57 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

59  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

60 | (((Ë(
__mö‹
 & ~0xff)) << 12)

61 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

62 
	}
}

64 
	g__END_DECLS


67 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

68 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

69 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H


	)

8 
	#__NR_ª°¨t_sysˇŒ
 0

	)

9 
	#__NR_exô
 1

	)

10 
	#__NR_f‹k
 2

	)

11 
	#__NR_ªad
 3

	)

12 
	#__NR_wrôe
 4

	)

13 
	#__NR_›í
 5

	)

14 
	#__NR_˛o£
 6

	)

15 
	#__NR_waôpid
 7

	)

16 
	#__NR_¸ót
 8

	)

17 
	#__NR_lök
 9

	)

18 
	#__NR_u∆ök
 10

	)

19 
	#__NR_execve
 11

	)

20 
	#__NR_chdú
 12

	)

21 
	#__NR_time
 13

	)

22 
	#__NR_mknod
 14

	)

23 
	#__NR_chmod
 15

	)

24 
	#__NR_lchown
 16

	)

25 
	#__NR_bªak
 17

	)

26 
	#__NR_ﬁd°©
 18

	)

27 
	#__NR_l£ek
 19

	)

28 
	#__NR_gëpid
 20

	)

29 
	#__NR_mou¡
 21

	)

30 
	#__NR_umou¡
 22

	)

31 
	#__NR_£tuid
 23

	)

32 
	#__NR_gëuid
 24

	)

33 
	#__NR_°ime
 25

	)

34 
	#__NR_±ø˚
 26

	)

35 
	#__NR_Æ¨m
 27

	)

36 
	#__NR_ﬁdf°©
 28

	)

37 
	#__NR_∑u£
 29

	)

38 
	#__NR_utime
 30

	)

39 
	#__NR_°ty
 31

	)

40 
	#__NR_gây
 32

	)

41 
	#__NR_ac˚ss
 33

	)

42 
	#__NR_ni˚
 34

	)

43 
	#__NR_·ime
 35

	)

44 
	#__NR_sync
 36

	)

45 
	#__NR_kûl
 37

	)

46 
	#__NR_ª«me
 38

	)

47 
	#__NR_mkdú
 39

	)

48 
	#__NR_rmdú
 40

	)

49 
	#__NR_dup
 41

	)

50 
	#__NR_pùe
 42

	)

51 
	#__NR_times
 43

	)

52 
	#__NR_¥of
 44

	)

53 
	#__NR_brk
 45

	)

54 
	#__NR_£tgid
 46

	)

55 
	#__NR_gëgid
 47

	)

56 
	#__NR_sig«l
 48

	)

57 
	#__NR_gëeuid
 49

	)

58 
	#__NR_gëegid
 50

	)

59 
	#__NR_ac˘
 51

	)

60 
	#__NR_umou¡2
 52

	)

61 
	#__NR_lock
 53

	)

62 
	#__NR_io˘l
 54

	)

63 
	#__NR_f˙é
 55

	)

64 
	#__NR_mpx
 56

	)

65 
	#__NR_£çgid
 57

	)

66 
	#__NR_ulimô
 58

	)

67 
	#__NR_ﬁdﬁdu«me
 59

	)

68 
	#__NR_umask
 60

	)

69 
	#__NR_chroŸ
 61

	)

70 
	#__NR_u°©
 62

	)

71 
	#__NR_dup2
 63

	)

72 
	#__NR_gëµid
 64

	)

73 
	#__NR_gëpgΩ
 65

	)

74 
	#__NR_£tsid
 66

	)

75 
	#__NR_siga˘i⁄
 67

	)

76 
	#__NR_sgëmask
 68

	)

77 
	#__NR_s£tmask
 69

	)

78 
	#__NR_£åeuid
 70

	)

79 
	#__NR_£åegid
 71

	)

80 
	#__NR_sigsu•íd
 72

	)

81 
	#__NR_sig≥ndög
 73

	)

82 
	#__NR_£tho°«me
 74

	)

83 
	#__NR_£ålimô
 75

	)

84 
	#__NR_gëæimô
 76

	)

85 
	#__NR_gërußge
 77

	)

86 
	#__NR_gëtimeofday
 78

	)

87 
	#__NR_£âimeofday
 79

	)

88 
	#__NR_gëgroups
 80

	)

89 
	#__NR_£tgroups
 81

	)

90 
	#__NR_£À˘
 82

	)

91 
	#__NR_symlök
 83

	)

92 
	#__NR_ﬁdl°©
 84

	)

93 
	#__NR_ªadlök
 85

	)

94 
	#__NR_u£lib
 86

	)

95 
	#__NR_sw≠⁄
 87

	)

96 
	#__NR_ªboŸ
 88

	)

97 
	#__NR_ªaddú
 89

	)

98 
	#__NR_mm≠
 90

	)

99 
	#__NR_munm≠
 91

	)

100 
	#__NR_åunˇã
 92

	)

101 
	#__NR_·runˇã
 93

	)

102 
	#__NR_fchmod
 94

	)

103 
	#__NR_fchown
 95

	)

104 
	#__NR_gë¥i‹ôy
 96

	)

105 
	#__NR_£çri‹ôy
 97

	)

106 
	#__NR_¥ofû
 98

	)

107 
	#__NR_°©fs
 99

	)

108 
	#__NR_f°©fs
 100

	)

109 
	#__NR_i›îm
 101

	)

110 
	#__NR_sockëˇŒ
 102

	)

111 
	#__NR_sy¶og
 103

	)

112 
	#__NR_£tôimî
 104

	)

113 
	#__NR_gëôimî
 105

	)

114 
	#__NR_°©
 106

	)

115 
	#__NR_l°©
 107

	)

116 
	#__NR_f°©
 108

	)

117 
	#__NR_ﬁdu«me
 109

	)

118 
	#__NR_i›l
 110

	)

119 
	#__NR_vh™gup
 111

	)

120 
	#__NR_idÀ
 112

	)

121 
	#__NR_vm86ﬁd
 113

	)

122 
	#__NR_waô4
 114

	)

123 
	#__NR_sw≠off
 115

	)

124 
	#__NR_sysöfo
 116

	)

125 
	#__NR_ùc
 117

	)

126 
	#__NR_fsync
 118

	)

127 
	#__NR_sigªtu∫
 119

	)

128 
	#__NR_˛⁄e
 120

	)

129 
	#__NR_£tdomaö«me
 121

	)

130 
	#__NR_u«me
 122

	)

131 
	#__NR_modify_ldt
 123

	)

132 
	#__NR_adjtimex
 124

	)

133 
	#__NR_m¥Ÿe˘
 125

	)

134 
	#__NR_sig¥ocmask
 126

	)

135 
	#__NR_¸óã_moduÀ
 127

	)

136 
	#__NR_öô_moduÀ
 128

	)

137 
	#__NR_dñëe_moduÀ
 129

	)

138 
	#__NR_gë_kî√l_syms
 130

	)

139 
	#__NR_quŸa˘l
 131

	)

140 
	#__NR_gëpgid
 132

	)

141 
	#__NR_fchdú
 133

	)

142 
	#__NR_bdÊush
 134

	)

143 
	#__NR_sysfs
 135

	)

144 
	#__NR_≥rs⁄Æôy
 136

	)

145 
	#__NR_afs_sysˇŒ
 137

	)

146 
	#__NR_£tfsuid
 138

	)

147 
	#__NR_£tfsgid
 139

	)

148 
	#__NR__Œ£ek
 140

	)

149 
	#__NR_gëdíts
 141

	)

150 
	#__NR__√w£À˘
 142

	)

151 
	#__NR_Êock
 143

	)

152 
	#__NR_msync
 144

	)

153 
	#__NR_ªadv
 145

	)

154 
	#__NR_wrôev
 146

	)

155 
	#__NR_gësid
 147

	)

156 
	#__NR_fd©async
 148

	)

157 
	#__NR__sys˘l
 149

	)

158 
	#__NR_mlock
 150

	)

159 
	#__NR_mu∆ock
 151

	)

160 
	#__NR_mlockÆl
 152

	)

161 
	#__NR_mu∆ockÆl
 153

	)

162 
	#__NR_sched_£ç¨am
 154

	)

163 
	#__NR_sched_gë∑øm
 155

	)

164 
	#__NR_sched_£tscheduÀr
 156

	)

165 
	#__NR_sched_gëscheduÀr
 157

	)

166 
	#__NR_sched_yõld
 158

	)

167 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

168 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

169 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

170 
	#__NR_«no¶ìp
 162

	)

171 
	#__NR_mªm≠
 163

	)

172 
	#__NR_£åesuid
 164

	)

173 
	#__NR_gëªsuid
 165

	)

174 
	#__NR_vm86
 166

	)

175 
	#__NR_quîy_moduÀ
 167

	)

176 
	#__NR_pﬁl
 168

	)

177 
	#__NR_nfs£rv˘l
 169

	)

178 
	#__NR_£åesgid
 170

	)

179 
	#__NR_gëªsgid
 171

	)

180 
	#__NR_¥˘l
 172

	)

181 
	#__NR_π_sigªtu∫
 173

	)

182 
	#__NR_π_siga˘i⁄
 174

	)

183 
	#__NR_π_sig¥ocmask
 175

	)

184 
	#__NR_π_sig≥ndög
 176

	)

185 
	#__NR_π_sigtimedwaô
 177

	)

186 
	#__NR_π_sigqueueöfo
 178

	)

187 
	#__NR_π_sigsu•íd
 179

	)

188 
	#__NR_¥ód64
 180

	)

189 
	#__NR_pwrôe64
 181

	)

190 
	#__NR_chown
 182

	)

191 
	#__NR_gëcwd
 183

	)

192 
	#__NR_ˇpgë
 184

	)

193 
	#__NR_ˇp£t
 185

	)

194 
	#__NR_sigÆt°ack
 186

	)

195 
	#__NR_£ndfûe
 187

	)

196 
	#__NR_gëpmsg
 188

	)

197 
	#__NR_puçmsg
 189

	)

198 
	#__NR_vf‹k
 190

	)

199 
	#__NR_ugëæimô
 191

	)

200 
	#__NR_mm≠2
 192

	)

201 
	#__NR_åunˇã64
 193

	)

202 
	#__NR_·runˇã64
 194

	)

203 
	#__NR_°©64
 195

	)

204 
	#__NR_l°©64
 196

	)

205 
	#__NR_f°©64
 197

	)

206 
	#__NR_lchown32
 198

	)

207 
	#__NR_gëuid32
 199

	)

208 
	#__NR_gëgid32
 200

	)

209 
	#__NR_gëeuid32
 201

	)

210 
	#__NR_gëegid32
 202

	)

211 
	#__NR_£åeuid32
 203

	)

212 
	#__NR_£åegid32
 204

	)

213 
	#__NR_gëgroups32
 205

	)

214 
	#__NR_£tgroups32
 206

	)

215 
	#__NR_fchown32
 207

	)

216 
	#__NR_£åesuid32
 208

	)

217 
	#__NR_gëªsuid32
 209

	)

218 
	#__NR_£åesgid32
 210

	)

219 
	#__NR_gëªsgid32
 211

	)

220 
	#__NR_chown32
 212

	)

221 
	#__NR_£tuid32
 213

	)

222 
	#__NR_£tgid32
 214

	)

223 
	#__NR_£tfsuid32
 215

	)

224 
	#__NR_£tfsgid32
 216

	)

225 
	#__NR_pivŸ_roŸ
 217

	)

226 
	#__NR_möc‹e
 218

	)

227 
	#__NR_madvi£
 219

	)

228 
	#__NR_madvi£1
 219

	)

229 
	#__NR_gëdíts64
 220

	)

230 
	#__NR_f˙é64
 221

	)

232 
	#__NR_gëtid
 224

	)

233 
	#__NR_ªadahód
 225

	)

234 
	#__NR_£tx©å
 226

	)

235 
	#__NR_l£tx©å
 227

	)

236 
	#__NR_f£tx©å
 228

	)

237 
	#__NR_gëx©å
 229

	)

238 
	#__NR_lgëx©å
 230

	)

239 
	#__NR_fgëx©å
 231

	)

240 
	#__NR_li°x©å
 232

	)

241 
	#__NR_Œi°x©å
 233

	)

242 
	#__NR_Êi°x©å
 234

	)

243 
	#__NR_ªmovex©å
 235

	)

244 
	#__NR_Ãemovex©å
 236

	)

245 
	#__NR_‰emovex©å
 237

	)

246 
	#__NR_tkûl
 238

	)

247 
	#__NR_£ndfûe64
 239

	)

248 
	#__NR_fuãx
 240

	)

249 
	#__NR_sched_£èfföôy
 241

	)

250 
	#__NR_sched_gëafföôy
 242

	)

251 
	#__NR_£t_thªad_¨ó
 243

	)

252 
	#__NR_gë_thªad_¨ó
 244

	)

253 
	#__NR_io_£tup
 245

	)

254 
	#__NR_io_de°roy
 246

	)

255 
	#__NR_io_gëevíts
 247

	)

256 
	#__NR_io_submô
 248

	)

257 
	#__NR_io_ˇn˚l
 249

	)

258 
	#__NR_Ádvi£64
 250

	)

260 
	#__NR_exô_group
 252

	)

261 
	#__NR_lookup_dcookõ
 253

	)

262 
	#__NR_ïﬁl_¸óã
 254

	)

263 
	#__NR_ïﬁl_˘l
 255

	)

264 
	#__NR_ïﬁl_waô
 256

	)

265 
	#__NR_ªm≠_fûe_∑ges
 257

	)

266 
	#__NR_£t_tid_addªss
 258

	)

267 
	#__NR_timî_¸óã
 259

	)

268 
	#__NR_timî_£âime
 (
__NR_timî_¸óã
+1)

	)

269 
	#__NR_timî_gëtime
 (
__NR_timî_¸óã
+2)

	)

270 
	#__NR_timî_gëovîrun
 (
__NR_timî_¸óã
+3)

	)

271 
	#__NR_timî_dñëe
 (
__NR_timî_¸óã
+4)

	)

272 
	#__NR_˛ock_£âime
 (
__NR_timî_¸óã
+5)

	)

273 
	#__NR_˛ock_gëtime
 (
__NR_timî_¸óã
+6)

	)

274 
	#__NR_˛ock_gëªs
 (
__NR_timî_¸óã
+7)

	)

275 
	#__NR_˛ock_«no¶ìp
 (
__NR_timî_¸óã
+8)

	)

276 
	#__NR_°©fs64
 268

	)

277 
	#__NR_f°©fs64
 269

	)

278 
	#__NR_tgkûl
 270

	)

279 
	#__NR_utimes
 271

	)

280 
	#__NR_Ádvi£64_64
 272

	)

281 
	#__NR_v£rvî
 273

	)

282 
	#__NR_mböd
 274

	)

283 
	#__NR_gë_mempﬁicy
 275

	)

284 
	#__NR_£t_mempﬁicy
 276

	)

285 
	#__NR_mq_›í
 277

	)

286 
	#__NR_mq_u∆ök
 (
__NR_mq_›í
+1)

	)

287 
	#__NR_mq_timed£nd
 (
__NR_mq_›í
+2)

	)

288 
	#__NR_mq_timedª˚ive
 (
__NR_mq_›í
+3)

	)

289 
	#__NR_mq_nŸify
 (
__NR_mq_›í
+4)

	)

290 
	#__NR_mq_gë£èâr
 (
__NR_mq_›í
+5)

	)

291 
	#__NR_kexec_lﬂd
 283

	)

292 
	#__NR_waôid
 284

	)

294 
	#__NR_add_key
 286

	)

295 
	#__NR_ªque°_key
 287

	)

296 
	#__NR_key˘l
 288

	)

297 
	#__NR_i›rio_£t
 289

	)

298 
	#__NR_i›rio_gë
 290

	)

299 
	#__NR_öŸify_öô
 291

	)

300 
	#__NR_öŸify_add_w©ch
 292

	)

301 
	#__NR_öŸify_rm_w©ch
 293

	)

302 
	#__NR_migøã_∑ges
 294

	)

303 
	#__NR_›í©
 295

	)

304 
	#__NR_mkdú©
 296

	)

305 
	#__NR_mknod©
 297

	)

306 
	#__NR_fchow«t
 298

	)

307 
	#__NR_futimeßt
 299

	)

308 
	#__NR_f°©©64
 300

	)

309 
	#__NR_u∆ök©
 301

	)

310 
	#__NR_ª«mót
 302

	)

311 
	#__NR_lök©
 303

	)

312 
	#__NR_symlök©
 304

	)

313 
	#__NR_ªadlök©
 305

	)

314 
	#__NR_fchmod©
 306

	)

315 
	#__NR_Ác˚sßt
 307

	)

316 
	#__NR_p£À˘6
 308

	)

317 
	#__NR_µﬁl
 309

	)

318 
	#__NR_unsh¨e
 310

	)

319 
	#__NR_£t_robu°_li°
 311

	)

320 
	#__NR_gë_robu°_li°
 312

	)

321 
	#__NR_•li˚
 313

	)

322 
	#__NR_sync_fûe_ønge
 314

	)

323 
	#__NR_ãe
 315

	)

324 
	#__NR_vm•li˚
 316

	)

325 
	#__NR_move_∑ges
 317

	)

326 
	#__NR_gë˝u
 318

	)

327 
	#__NR_ïﬁl_pwaô
 319

	)

328 
	#__NR_utimíßt
 320

	)

329 
	#__NR_sig«lfd
 321

	)

330 
	#__NR_timîfd_¸óã
 322

	)

331 
	#__NR_evítfd
 323

	)

332 
	#__NR_ÁŒoˇã
 324

	)

333 
	#__NR_timîfd_£âime
 325

	)

334 
	#__NR_timîfd_gëtime
 326

	)

335 
	#__NR_sig«lfd4
 327

	)

336 
	#__NR_evítfd2
 328

	)

337 
	#__NR_ïﬁl_¸óã1
 329

	)

338 
	#__NR_dup3
 330

	)

339 
	#__NR_pùe2
 331

	)

340 
	#__NR_öŸify_öô1
 332

	)

341 
	#__NR_¥ódv
 333

	)

342 
	#__NR_pwrôev
 334

	)

343 
	#__NR_π_tgsigqueueöfo
 335

	)

344 
	#__NR_≥rf_evít_›í
 336

	)

345 
	#__NR_ªcvmmsg
 337

	)

346 
	#__NR_ÁnŸify_öô
 338

	)

347 
	#__NR_ÁnŸify_m¨k
 339

	)

348 
	#__NR_¥limô64
 340

	)

349 
	#__NR_«me_to_h™dÀ_©
 341

	)

350 
	#__NR_›í_by_h™dÀ_©
 342

	)

351 
	#__NR_˛ock_adjtime
 343

	)

352 
	#__NR_syncfs
 344

	)

353 
	#__NR_£ndmmsg
 345

	)

354 
	#__NR_£äs
 346

	)

355 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

356 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H


	)

4 #i‚de‡
__SYSCALL


5 
	#__SYSCALL
(
a
, 
b
)

	)

15 
	#__NR_ªad
 0

	)

16 
	$__SYSCALL
(
__NR_ªad
, 
sys_ªad
)

17 
	#__NR_wrôe
 1

	)

18 
	$__SYSCALL
(
__NR_wrôe
, 
sys_wrôe
)

19 
	#__NR_›í
 2

	)

20 
	$__SYSCALL
(
__NR_›í
, 
sys_›í
)

21 
	#__NR_˛o£
 3

	)

22 
	$__SYSCALL
(
__NR_˛o£
, 
sys_˛o£
)

23 
	#__NR_°©
 4

	)

24 
	$__SYSCALL
(
__NR_°©
, 
sys_√w°©
)

25 
	#__NR_f°©
 5

	)

26 
	$__SYSCALL
(
__NR_f°©
, 
sys_√wf°©
)

27 
	#__NR_l°©
 6

	)

28 
	$__SYSCALL
(
__NR_l°©
, 
sys_√wl°©
)

29 
	#__NR_pﬁl
 7

	)

30 
	$__SYSCALL
(
__NR_pﬁl
, 
sys_pﬁl
)

32 
	#__NR_l£ek
 8

	)

33 
	$__SYSCALL
(
__NR_l£ek
, 
sys_l£ek
)

34 
	#__NR_mm≠
 9

	)

35 
	$__SYSCALL
(
__NR_mm≠
, 
sys_mm≠
)

36 
	#__NR_m¥Ÿe˘
 10

	)

37 
	$__SYSCALL
(
__NR_m¥Ÿe˘
, 
sys_m¥Ÿe˘
)

38 
	#__NR_munm≠
 11

	)

39 
	$__SYSCALL
(
__NR_munm≠
, 
sys_munm≠
)

40 
	#__NR_brk
 12

	)

41 
	$__SYSCALL
(
__NR_brk
, 
sys_brk
)

42 
	#__NR_π_siga˘i⁄
 13

	)

43 
	$__SYSCALL
(
__NR_π_siga˘i⁄
, 
sys_π_siga˘i⁄
)

44 
	#__NR_π_sig¥ocmask
 14

	)

45 
	$__SYSCALL
(
__NR_π_sig¥ocmask
, 
sys_π_sig¥ocmask
)

46 
	#__NR_π_sigªtu∫
 15

	)

47 
	$__SYSCALL
(
__NR_π_sigªtu∫
, 
°ub_π_sigªtu∫
)

49 
	#__NR_io˘l
 16

	)

50 
	$__SYSCALL
(
__NR_io˘l
, 
sys_io˘l
)

51 
	#__NR_¥ód64
 17

	)

52 
	$__SYSCALL
(
__NR_¥ód64
, 
sys_¥ód64
)

53 
	#__NR_pwrôe64
 18

	)

54 
	$__SYSCALL
(
__NR_pwrôe64
, 
sys_pwrôe64
)

55 
	#__NR_ªadv
 19

	)

56 
	$__SYSCALL
(
__NR_ªadv
, 
sys_ªadv
)

57 
	#__NR_wrôev
 20

	)

58 
	$__SYSCALL
(
__NR_wrôev
, 
sys_wrôev
)

59 
	#__NR_ac˚ss
 21

	)

60 
	$__SYSCALL
(
__NR_ac˚ss
, 
sys_ac˚ss
)

61 
	#__NR_pùe
 22

	)

62 
	$__SYSCALL
(
__NR_pùe
, 
sys_pùe
)

63 
	#__NR_£À˘
 23

	)

64 
	$__SYSCALL
(
__NR_£À˘
, 
sys_£À˘
)

66 
	#__NR_sched_yõld
 24

	)

67 
	$__SYSCALL
(
__NR_sched_yõld
, 
sys_sched_yõld
)

68 
	#__NR_mªm≠
 25

	)

69 
	$__SYSCALL
(
__NR_mªm≠
, 
sys_mªm≠
)

70 
	#__NR_msync
 26

	)

71 
	$__SYSCALL
(
__NR_msync
, 
sys_msync
)

72 
	#__NR_möc‹e
 27

	)

73 
	$__SYSCALL
(
__NR_möc‹e
, 
sys_möc‹e
)

74 
	#__NR_madvi£
 28

	)

75 
	$__SYSCALL
(
__NR_madvi£
, 
sys_madvi£
)

76 
	#__NR_shmgë
 29

	)

77 
	$__SYSCALL
(
__NR_shmgë
, 
sys_shmgë
)

78 
	#__NR_shm©
 30

	)

79 
	$__SYSCALL
(
__NR_shm©
, 
sys_shm©
)

80 
	#__NR_shm˘l
 31

	)

81 
	$__SYSCALL
(
__NR_shm˘l
, 
sys_shm˘l
)

83 
	#__NR_dup
 32

	)

84 
	$__SYSCALL
(
__NR_dup
, 
sys_dup
)

85 
	#__NR_dup2
 33

	)

86 
	$__SYSCALL
(
__NR_dup2
, 
sys_dup2
)

87 
	#__NR_∑u£
 34

	)

88 
	$__SYSCALL
(
__NR_∑u£
, 
sys_∑u£
)

89 
	#__NR_«no¶ìp
 35

	)

90 
	$__SYSCALL
(
__NR_«no¶ìp
, 
sys_«no¶ìp
)

91 
	#__NR_gëôimî
 36

	)

92 
	$__SYSCALL
(
__NR_gëôimî
, 
sys_gëôimî
)

93 
	#__NR_Æ¨m
 37

	)

94 
	$__SYSCALL
(
__NR_Æ¨m
, 
sys_Æ¨m
)

95 
	#__NR_£tôimî
 38

	)

96 
	$__SYSCALL
(
__NR_£tôimî
, 
sys_£tôimî
)

97 
	#__NR_gëpid
 39

	)

98 
	$__SYSCALL
(
__NR_gëpid
, 
sys_gëpid
)

100 
	#__NR_£ndfûe
 40

	)

101 
	$__SYSCALL
(
__NR_£ndfûe
, 
sys_£ndfûe64
)

102 
	#__NR_sockë
 41

	)

103 
	$__SYSCALL
(
__NR_sockë
, 
sys_sockë
)

104 
	#__NR_c⁄√˘
 42

	)

105 
	$__SYSCALL
(
__NR_c⁄√˘
, 
sys_c⁄√˘
)

106 
	#__NR_ac˚±
 43

	)

107 
	$__SYSCALL
(
__NR_ac˚±
, 
sys_ac˚±
)

108 
	#__NR_£ndto
 44

	)

109 
	$__SYSCALL
(
__NR_£ndto
, 
sys_£ndto
)

110 
	#__NR_ªcv‰om
 45

	)

111 
	$__SYSCALL
(
__NR_ªcv‰om
, 
sys_ªcv‰om
)

112 
	#__NR_£ndmsg
 46

	)

113 
	$__SYSCALL
(
__NR_£ndmsg
, 
sys_£ndmsg
)

114 
	#__NR_ªcvmsg
 47

	)

115 
	$__SYSCALL
(
__NR_ªcvmsg
, 
sys_ªcvmsg
)

117 
	#__NR_shutdown
 48

	)

118 
	$__SYSCALL
(
__NR_shutdown
, 
sys_shutdown
)

119 
	#__NR_böd
 49

	)

120 
	$__SYSCALL
(
__NR_böd
, 
sys_böd
)

121 
	#__NR_li°í
 50

	)

122 
	$__SYSCALL
(
__NR_li°í
, 
sys_li°í
)

123 
	#__NR_gësock«me
 51

	)

124 
	$__SYSCALL
(
__NR_gësock«me
, 
sys_gësock«me
)

125 
	#__NR_gë≥î«me
 52

	)

126 
	$__SYSCALL
(
__NR_gë≥î«me
, 
sys_gë≥î«me
)

127 
	#__NR_sockë∑ú
 53

	)

128 
	$__SYSCALL
(
__NR_sockë∑ú
, 
sys_sockë∑ú
)

129 
	#__NR_£tsock›t
 54

	)

130 
	$__SYSCALL
(
__NR_£tsock›t
, 
sys_£tsock›t
)

131 
	#__NR_gësock›t
 55

	)

132 
	$__SYSCALL
(
__NR_gësock›t
, 
sys_gësock›t
)

134 
	#__NR_˛⁄e
 56

	)

135 
	$__SYSCALL
(
__NR_˛⁄e
, 
°ub_˛⁄e
)

136 
	#__NR_f‹k
 57

	)

137 
	$__SYSCALL
(
__NR_f‹k
, 
°ub_f‹k
)

138 
	#__NR_vf‹k
 58

	)

139 
	$__SYSCALL
(
__NR_vf‹k
, 
°ub_vf‹k
)

140 
	#__NR_execve
 59

	)

141 
	$__SYSCALL
(
__NR_execve
, 
°ub_execve
)

142 
	#__NR_exô
 60

	)

143 
	$__SYSCALL
(
__NR_exô
, 
sys_exô
)

144 
	#__NR_waô4
 61

	)

145 
	$__SYSCALL
(
__NR_waô4
, 
sys_waô4
)

146 
	#__NR_kûl
 62

	)

147 
	$__SYSCALL
(
__NR_kûl
, 
sys_kûl
)

148 
	#__NR_u«me
 63

	)

149 
	$__SYSCALL
(
__NR_u«me
, 
sys_√wu«me
)

151 
	#__NR_£mgë
 64

	)

152 
	$__SYSCALL
(
__NR_£mgë
, 
sys_£mgë
)

153 
	#__NR_£m›
 65

	)

154 
	$__SYSCALL
(
__NR_£m›
, 
sys_£m›
)

155 
	#__NR_£m˘l
 66

	)

156 
	$__SYSCALL
(
__NR_£m˘l
, 
sys_£m˘l
)

157 
	#__NR_shmdt
 67

	)

158 
	$__SYSCALL
(
__NR_shmdt
, 
sys_shmdt
)

159 
	#__NR_msggë
 68

	)

160 
	$__SYSCALL
(
__NR_msggë
, 
sys_msggë
)

161 
	#__NR_msg¢d
 69

	)

162 
	$__SYSCALL
(
__NR_msg¢d
, 
sys_msg¢d
)

163 
	#__NR_msgrcv
 70

	)

164 
	$__SYSCALL
(
__NR_msgrcv
, 
sys_msgrcv
)

165 
	#__NR_msg˘l
 71

	)

166 
	$__SYSCALL
(
__NR_msg˘l
, 
sys_msg˘l
)

168 
	#__NR_f˙é
 72

	)

169 
	$__SYSCALL
(
__NR_f˙é
, 
sys_f˙é
)

170 
	#__NR_Êock
 73

	)

171 
	$__SYSCALL
(
__NR_Êock
, 
sys_Êock
)

172 
	#__NR_fsync
 74

	)

173 
	$__SYSCALL
(
__NR_fsync
, 
sys_fsync
)

174 
	#__NR_fd©async
 75

	)

175 
	$__SYSCALL
(
__NR_fd©async
, 
sys_fd©async
)

176 
	#__NR_åunˇã
 76

	)

177 
	$__SYSCALL
(
__NR_åunˇã
, 
sys_åunˇã
)

178 
	#__NR_·runˇã
 77

	)

179 
	$__SYSCALL
(
__NR_·runˇã
, 
sys_·runˇã
)

180 
	#__NR_gëdíts
 78

	)

181 
	$__SYSCALL
(
__NR_gëdíts
, 
sys_gëdíts
)

182 
	#__NR_gëcwd
 79

	)

183 
	$__SYSCALL
(
__NR_gëcwd
, 
sys_gëcwd
)

185 
	#__NR_chdú
 80

	)

186 
	$__SYSCALL
(
__NR_chdú
, 
sys_chdú
)

187 
	#__NR_fchdú
 81

	)

188 
	$__SYSCALL
(
__NR_fchdú
, 
sys_fchdú
)

189 
	#__NR_ª«me
 82

	)

190 
	$__SYSCALL
(
__NR_ª«me
, 
sys_ª«me
)

191 
	#__NR_mkdú
 83

	)

192 
	$__SYSCALL
(
__NR_mkdú
, 
sys_mkdú
)

193 
	#__NR_rmdú
 84

	)

194 
	$__SYSCALL
(
__NR_rmdú
, 
sys_rmdú
)

195 
	#__NR_¸ót
 85

	)

196 
	$__SYSCALL
(
__NR_¸ót
, 
sys_¸ót
)

197 
	#__NR_lök
 86

	)

198 
	$__SYSCALL
(
__NR_lök
, 
sys_lök
)

199 
	#__NR_u∆ök
 87

	)

200 
	$__SYSCALL
(
__NR_u∆ök
, 
sys_u∆ök
)

202 
	#__NR_symlök
 88

	)

203 
	$__SYSCALL
(
__NR_symlök
, 
sys_symlök
)

204 
	#__NR_ªadlök
 89

	)

205 
	$__SYSCALL
(
__NR_ªadlök
, 
sys_ªadlök
)

206 
	#__NR_chmod
 90

	)

207 
	$__SYSCALL
(
__NR_chmod
, 
sys_chmod
)

208 
	#__NR_fchmod
 91

	)

209 
	$__SYSCALL
(
__NR_fchmod
, 
sys_fchmod
)

210 
	#__NR_chown
 92

	)

211 
	$__SYSCALL
(
__NR_chown
, 
sys_chown
)

212 
	#__NR_fchown
 93

	)

213 
	$__SYSCALL
(
__NR_fchown
, 
sys_fchown
)

214 
	#__NR_lchown
 94

	)

215 
	$__SYSCALL
(
__NR_lchown
, 
sys_lchown
)

216 
	#__NR_umask
 95

	)

217 
	$__SYSCALL
(
__NR_umask
, 
sys_umask
)

219 
	#__NR_gëtimeofday
 96

	)

220 
	$__SYSCALL
(
__NR_gëtimeofday
, 
sys_gëtimeofday
)

221 
	#__NR_gëæimô
 97

	)

222 
	$__SYSCALL
(
__NR_gëæimô
, 
sys_gëæimô
)

223 
	#__NR_gërußge
 98

	)

224 
	$__SYSCALL
(
__NR_gërußge
, 
sys_gërußge
)

225 
	#__NR_sysöfo
 99

	)

226 
	$__SYSCALL
(
__NR_sysöfo
, 
sys_sysöfo
)

227 
	#__NR_times
 100

	)

228 
	$__SYSCALL
(
__NR_times
, 
sys_times
)

229 
	#__NR_±ø˚
 101

	)

230 
	$__SYSCALL
(
__NR_±ø˚
, 
sys_±ø˚
)

231 
	#__NR_gëuid
 102

	)

232 
	$__SYSCALL
(
__NR_gëuid
, 
sys_gëuid
)

233 
	#__NR_sy¶og
 103

	)

234 
	$__SYSCALL
(
__NR_sy¶og
, 
sys_sy¶og
)

237 
	#__NR_gëgid
 104

	)

238 
	$__SYSCALL
(
__NR_gëgid
, 
sys_gëgid
)

239 
	#__NR_£tuid
 105

	)

240 
	$__SYSCALL
(
__NR_£tuid
, 
sys_£tuid
)

241 
	#__NR_£tgid
 106

	)

242 
	$__SYSCALL
(
__NR_£tgid
, 
sys_£tgid
)

243 
	#__NR_gëeuid
 107

	)

244 
	$__SYSCALL
(
__NR_gëeuid
, 
sys_gëeuid
)

245 
	#__NR_gëegid
 108

	)

246 
	$__SYSCALL
(
__NR_gëegid
, 
sys_gëegid
)

247 
	#__NR_£çgid
 109

	)

248 
	$__SYSCALL
(
__NR_£çgid
, 
sys_£çgid
)

249 
	#__NR_gëµid
 110

	)

250 
	$__SYSCALL
(
__NR_gëµid
, 
sys_gëµid
)

251 
	#__NR_gëpgΩ
 111

	)

252 
	$__SYSCALL
(
__NR_gëpgΩ
, 
sys_gëpgΩ
)

254 
	#__NR_£tsid
 112

	)

255 
	$__SYSCALL
(
__NR_£tsid
, 
sys_£tsid
)

256 
	#__NR_£åeuid
 113

	)

257 
	$__SYSCALL
(
__NR_£åeuid
, 
sys_£åeuid
)

258 
	#__NR_£åegid
 114

	)

259 
	$__SYSCALL
(
__NR_£åegid
, 
sys_£åegid
)

260 
	#__NR_gëgroups
 115

	)

261 
	$__SYSCALL
(
__NR_gëgroups
, 
sys_gëgroups
)

262 
	#__NR_£tgroups
 116

	)

263 
	$__SYSCALL
(
__NR_£tgroups
, 
sys_£tgroups
)

264 
	#__NR_£åesuid
 117

	)

265 
	$__SYSCALL
(
__NR_£åesuid
, 
sys_£åesuid
)

266 
	#__NR_gëªsuid
 118

	)

267 
	$__SYSCALL
(
__NR_gëªsuid
, 
sys_gëªsuid
)

268 
	#__NR_£åesgid
 119

	)

269 
	$__SYSCALL
(
__NR_£åesgid
, 
sys_£åesgid
)

271 
	#__NR_gëªsgid
 120

	)

272 
	$__SYSCALL
(
__NR_gëªsgid
, 
sys_gëªsgid
)

273 
	#__NR_gëpgid
 121

	)

274 
	$__SYSCALL
(
__NR_gëpgid
, 
sys_gëpgid
)

275 
	#__NR_£tfsuid
 122

	)

276 
	$__SYSCALL
(
__NR_£tfsuid
, 
sys_£tfsuid
)

277 
	#__NR_£tfsgid
 123

	)

278 
	$__SYSCALL
(
__NR_£tfsgid
, 
sys_£tfsgid
)

279 
	#__NR_gësid
 124

	)

280 
	$__SYSCALL
(
__NR_gësid
, 
sys_gësid
)

281 
	#__NR_ˇpgë
 125

	)

282 
	$__SYSCALL
(
__NR_ˇpgë
, 
sys_ˇpgë
)

283 
	#__NR_ˇp£t
 126

	)

284 
	$__SYSCALL
(
__NR_ˇp£t
, 
sys_ˇp£t
)

286 
	#__NR_π_sig≥ndög
 127

	)

287 
	$__SYSCALL
(
__NR_π_sig≥ndög
, 
sys_π_sig≥ndög
)

288 
	#__NR_π_sigtimedwaô
 128

	)

289 
	$__SYSCALL
(
__NR_π_sigtimedwaô
, 
sys_π_sigtimedwaô
)

290 
	#__NR_π_sigqueueöfo
 129

	)

291 
	$__SYSCALL
(
__NR_π_sigqueueöfo
, 
sys_π_sigqueueöfo
)

292 
	#__NR_π_sigsu•íd
 130

	)

293 
	$__SYSCALL
(
__NR_π_sigsu•íd
, 
sys_π_sigsu•íd
)

294 
	#__NR_sigÆt°ack
 131

	)

295 
	$__SYSCALL
(
__NR_sigÆt°ack
, 
°ub_sigÆt°ack
)

296 
	#__NR_utime
 132

	)

297 
	$__SYSCALL
(
__NR_utime
, 
sys_utime
)

298 
	#__NR_mknod
 133

	)

299 
	$__SYSCALL
(
__NR_mknod
, 
sys_mknod
)

302 
	#__NR_u£lib
 134

	)

303 
	$__SYSCALL
(
__NR_u£lib
, 
sys_ni_sysˇŒ
)

304 
	#__NR_≥rs⁄Æôy
 135

	)

305 
	$__SYSCALL
(
__NR_≥rs⁄Æôy
, 
sys_≥rs⁄Æôy
)

307 
	#__NR_u°©
 136

	)

308 
	$__SYSCALL
(
__NR_u°©
, 
sys_u°©
)

309 
	#__NR_°©fs
 137

	)

310 
	$__SYSCALL
(
__NR_°©fs
, 
sys_°©fs
)

311 
	#__NR_f°©fs
 138

	)

312 
	$__SYSCALL
(
__NR_f°©fs
, 
sys_f°©fs
)

313 
	#__NR_sysfs
 139

	)

314 
	$__SYSCALL
(
__NR_sysfs
, 
sys_sysfs
)

316 
	#__NR_gë¥i‹ôy
 140

	)

317 
	$__SYSCALL
(
__NR_gë¥i‹ôy
, 
sys_gë¥i‹ôy
)

318 
	#__NR_£çri‹ôy
 141

	)

319 
	$__SYSCALL
(
__NR_£çri‹ôy
, 
sys_£çri‹ôy
)

320 
	#__NR_sched_£ç¨am
 142

	)

321 
	$__SYSCALL
(
__NR_sched_£ç¨am
, 
sys_sched_£ç¨am
)

322 
	#__NR_sched_gë∑øm
 143

	)

323 
	$__SYSCALL
(
__NR_sched_gë∑øm
, 
sys_sched_gë∑øm
)

324 
	#__NR_sched_£tscheduÀr
 144

	)

325 
	$__SYSCALL
(
__NR_sched_£tscheduÀr
, 
sys_sched_£tscheduÀr
)

326 
	#__NR_sched_gëscheduÀr
 145

	)

327 
	$__SYSCALL
(
__NR_sched_gëscheduÀr
, 
sys_sched_gëscheduÀr
)

328 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

329 
	$__SYSCALL
(
__NR_sched_gë_¥i‹ôy_max
, 
sys_sched_gë_¥i‹ôy_max
)

330 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

331 
	$__SYSCALL
(
__NR_sched_gë_¥i‹ôy_mö
, 
sys_sched_gë_¥i‹ôy_mö
)

332 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

333 
	$__SYSCALL
(
__NR_sched_º_gë_öãrvÆ
, 
sys_sched_º_gë_öãrvÆ
)

335 
	#__NR_mlock
 149

	)

336 
	$__SYSCALL
(
__NR_mlock
, 
sys_mlock
)

337 
	#__NR_mu∆ock
 150

	)

338 
	$__SYSCALL
(
__NR_mu∆ock
, 
sys_mu∆ock
)

339 
	#__NR_mlockÆl
 151

	)

340 
	$__SYSCALL
(
__NR_mlockÆl
, 
sys_mlockÆl
)

341 
	#__NR_mu∆ockÆl
 152

	)

342 
	$__SYSCALL
(
__NR_mu∆ockÆl
, 
sys_mu∆ockÆl
)

344 
	#__NR_vh™gup
 153

	)

345 
	$__SYSCALL
(
__NR_vh™gup
, 
sys_vh™gup
)

347 
	#__NR_modify_ldt
 154

	)

348 
	$__SYSCALL
(
__NR_modify_ldt
, 
sys_modify_ldt
)

350 
	#__NR_pivŸ_roŸ
 155

	)

351 
	$__SYSCALL
(
__NR_pivŸ_roŸ
, 
sys_pivŸ_roŸ
)

353 
	#__NR__sys˘l
 156

	)

354 
	$__SYSCALL
(
__NR__sys˘l
, 
sys_sys˘l
)

356 
	#__NR_¥˘l
 157

	)

357 
	$__SYSCALL
(
__NR_¥˘l
, 
sys_¥˘l
)

358 
	#__NR_¨ch_¥˘l
 158

	)

359 
	$__SYSCALL
(
__NR_¨ch_¥˘l
, 
sys_¨ch_¥˘l
)

361 
	#__NR_adjtimex
 159

	)

362 
	$__SYSCALL
(
__NR_adjtimex
, 
sys_adjtimex
)

364 
	#__NR_£ålimô
 160

	)

365 
	$__SYSCALL
(
__NR_£ålimô
, 
sys_£ålimô
)

367 
	#__NR_chroŸ
 161

	)

368 
	$__SYSCALL
(
__NR_chroŸ
, 
sys_chroŸ
)

370 
	#__NR_sync
 162

	)

371 
	$__SYSCALL
(
__NR_sync
, 
sys_sync
)

373 
	#__NR_ac˘
 163

	)

374 
	$__SYSCALL
(
__NR_ac˘
, 
sys_ac˘
)

376 
	#__NR_£âimeofday
 164

	)

377 
	$__SYSCALL
(
__NR_£âimeofday
, 
sys_£âimeofday
)

379 
	#__NR_mou¡
 165

	)

380 
	$__SYSCALL
(
__NR_mou¡
, 
sys_mou¡
)

381 
	#__NR_umou¡2
 166

	)

382 
	$__SYSCALL
(
__NR_umou¡2
, 
sys_umou¡
)

384 
	#__NR_sw≠⁄
 167

	)

385 
	$__SYSCALL
(
__NR_sw≠⁄
, 
sys_sw≠⁄
)

386 
	#__NR_sw≠off
 168

	)

387 
	$__SYSCALL
(
__NR_sw≠off
, 
sys_sw≠off
)

389 
	#__NR_ªboŸ
 169

	)

390 
	$__SYSCALL
(
__NR_ªboŸ
, 
sys_ªboŸ
)

392 
	#__NR_£tho°«me
 170

	)

393 
	$__SYSCALL
(
__NR_£tho°«me
, 
sys_£tho°«me
)

394 
	#__NR_£tdomaö«me
 171

	)

395 
	$__SYSCALL
(
__NR_£tdomaö«me
, 
sys_£tdomaö«me
)

397 
	#__NR_i›l
 172

	)

398 
	$__SYSCALL
(
__NR_i›l
, 
°ub_i›l
)

399 
	#__NR_i›îm
 173

	)

400 
	$__SYSCALL
(
__NR_i›îm
, 
sys_i›îm
)

402 
	#__NR_¸óã_moduÀ
 174

	)

403 
	$__SYSCALL
(
__NR_¸óã_moduÀ
, 
sys_ni_sysˇŒ
)

404 
	#__NR_öô_moduÀ
 175

	)

405 
	$__SYSCALL
(
__NR_öô_moduÀ
, 
sys_öô_moduÀ
)

406 
	#__NR_dñëe_moduÀ
 176

	)

407 
	$__SYSCALL
(
__NR_dñëe_moduÀ
, 
sys_dñëe_moduÀ
)

408 
	#__NR_gë_kî√l_syms
 177

	)

409 
	$__SYSCALL
(
__NR_gë_kî√l_syms
, 
sys_ni_sysˇŒ
)

410 
	#__NR_quîy_moduÀ
 178

	)

411 
	$__SYSCALL
(
__NR_quîy_moduÀ
, 
sys_ni_sysˇŒ
)

413 
	#__NR_quŸa˘l
 179

	)

414 
	$__SYSCALL
(
__NR_quŸa˘l
, 
sys_quŸa˘l
)

416 
	#__NR_nfs£rv˘l
 180

	)

417 
	$__SYSCALL
(
__NR_nfs£rv˘l
, 
sys_ni_sysˇŒ
)

420 
	#__NR_gëpmsg
 181

	)

421 
	$__SYSCALL
(
__NR_gëpmsg
, 
sys_ni_sysˇŒ
)

422 
	#__NR_puçmsg
 182

	)

423 
	$__SYSCALL
(
__NR_puçmsg
, 
sys_ni_sysˇŒ
)

426 
	#__NR_afs_sysˇŒ
 183

	)

427 
	$__SYSCALL
(
__NR_afs_sysˇŒ
, 
sys_ni_sysˇŒ
)

430 
	#__NR_tuxˇŒ
 184

	)

431 
	$__SYSCALL
(
__NR_tuxˇŒ
, 
sys_ni_sysˇŒ
)

433 
	#__NR_£curôy
 185

	)

434 
	$__SYSCALL
(
__NR_£curôy
, 
sys_ni_sysˇŒ
)

436 
	#__NR_gëtid
 186

	)

437 
	$__SYSCALL
(
__NR_gëtid
, 
sys_gëtid
)

439 
	#__NR_ªadahód
 187

	)

440 
	$__SYSCALL
(
__NR_ªadahód
, 
sys_ªadahód
)

441 
	#__NR_£tx©å
 188

	)

442 
	$__SYSCALL
(
__NR_£tx©å
, 
sys_£tx©å
)

443 
	#__NR_l£tx©å
 189

	)

444 
	$__SYSCALL
(
__NR_l£tx©å
, 
sys_l£tx©å
)

445 
	#__NR_f£tx©å
 190

	)

446 
	$__SYSCALL
(
__NR_f£tx©å
, 
sys_f£tx©å
)

447 
	#__NR_gëx©å
 191

	)

448 
	$__SYSCALL
(
__NR_gëx©å
, 
sys_gëx©å
)

449 
	#__NR_lgëx©å
 192

	)

450 
	$__SYSCALL
(
__NR_lgëx©å
, 
sys_lgëx©å
)

451 
	#__NR_fgëx©å
 193

	)

452 
	$__SYSCALL
(
__NR_fgëx©å
, 
sys_fgëx©å
)

453 
	#__NR_li°x©å
 194

	)

454 
	$__SYSCALL
(
__NR_li°x©å
, 
sys_li°x©å
)

455 
	#__NR_Œi°x©å
 195

	)

456 
	$__SYSCALL
(
__NR_Œi°x©å
, 
sys_Œi°x©å
)

457 
	#__NR_Êi°x©å
 196

	)

458 
	$__SYSCALL
(
__NR_Êi°x©å
, 
sys_Êi°x©å
)

459 
	#__NR_ªmovex©å
 197

	)

460 
	$__SYSCALL
(
__NR_ªmovex©å
, 
sys_ªmovex©å
)

461 
	#__NR_Ãemovex©å
 198

	)

462 
	$__SYSCALL
(
__NR_Ãemovex©å
, 
sys_Ãemovex©å
)

463 
	#__NR_‰emovex©å
 199

	)

464 
	$__SYSCALL
(
__NR_‰emovex©å
, 
sys_‰emovex©å
)

465 
	#__NR_tkûl
 200

	)

466 
	$__SYSCALL
(
__NR_tkûl
, 
sys_tkûl
)

467 
	#__NR_time
 201

	)

468 
	$__SYSCALL
(
__NR_time
, 
sys_time
)

469 
	#__NR_fuãx
 202

	)

470 
	$__SYSCALL
(
__NR_fuãx
, 
sys_fuãx
)

471 
	#__NR_sched_£èfföôy
 203

	)

472 
	$__SYSCALL
(
__NR_sched_£èfföôy
, 
sys_sched_£èfföôy
)

473 
	#__NR_sched_gëafföôy
 204

	)

474 
	$__SYSCALL
(
__NR_sched_gëafföôy
, 
sys_sched_gëafföôy
)

475 
	#__NR_£t_thªad_¨ó
 205

	)

476 
	$__SYSCALL
(
__NR_£t_thªad_¨ó
, 
sys_ni_sysˇŒ
)

477 
	#__NR_io_£tup
 206

	)

478 
	$__SYSCALL
(
__NR_io_£tup
, 
sys_io_£tup
)

479 
	#__NR_io_de°roy
 207

	)

480 
	$__SYSCALL
(
__NR_io_de°roy
, 
sys_io_de°roy
)

481 
	#__NR_io_gëevíts
 208

	)

482 
	$__SYSCALL
(
__NR_io_gëevíts
, 
sys_io_gëevíts
)

483 
	#__NR_io_submô
 209

	)

484 
	$__SYSCALL
(
__NR_io_submô
, 
sys_io_submô
)

485 
	#__NR_io_ˇn˚l
 210

	)

486 
	$__SYSCALL
(
__NR_io_ˇn˚l
, 
sys_io_ˇn˚l
)

487 
	#__NR_gë_thªad_¨ó
 211

	)

488 
	$__SYSCALL
(
__NR_gë_thªad_¨ó
, 
sys_ni_sysˇŒ
)

489 
	#__NR_lookup_dcookõ
 212

	)

490 
	$__SYSCALL
(
__NR_lookup_dcookõ
, 
sys_lookup_dcookõ
)

491 
	#__NR_ïﬁl_¸óã
 213

	)

492 
	$__SYSCALL
(
__NR_ïﬁl_¸óã
, 
sys_ïﬁl_¸óã
)

493 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

494 
	$__SYSCALL
(
__NR_ïﬁl_˘l_ﬁd
, 
sys_ni_sysˇŒ
)

495 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

496 
	$__SYSCALL
(
__NR_ïﬁl_waô_ﬁd
, 
sys_ni_sysˇŒ
)

497 
	#__NR_ªm≠_fûe_∑ges
 216

	)

498 
	$__SYSCALL
(
__NR_ªm≠_fûe_∑ges
, 
sys_ªm≠_fûe_∑ges
)

499 
	#__NR_gëdíts64
 217

	)

500 
	$__SYSCALL
(
__NR_gëdíts64
, 
sys_gëdíts64
)

501 
	#__NR_£t_tid_addªss
 218

	)

502 
	$__SYSCALL
(
__NR_£t_tid_addªss
, 
sys_£t_tid_addªss
)

503 
	#__NR_ª°¨t_sysˇŒ
 219

	)

504 
	$__SYSCALL
(
__NR_ª°¨t_sysˇŒ
, 
sys_ª°¨t_sysˇŒ
)

505 
	#__NR_£mtimed›
 220

	)

506 
	$__SYSCALL
(
__NR_£mtimed›
, 
sys_£mtimed›
)

507 
	#__NR_Ádvi£64
 221

	)

508 
	$__SYSCALL
(
__NR_Ádvi£64
, 
sys_Ádvi£64
)

509 
	#__NR_timî_¸óã
 222

	)

510 
	$__SYSCALL
(
__NR_timî_¸óã
, 
sys_timî_¸óã
)

511 
	#__NR_timî_£âime
 223

	)

512 
	$__SYSCALL
(
__NR_timî_£âime
, 
sys_timî_£âime
)

513 
	#__NR_timî_gëtime
 224

	)

514 
	$__SYSCALL
(
__NR_timî_gëtime
, 
sys_timî_gëtime
)

515 
	#__NR_timî_gëovîrun
 225

	)

516 
	$__SYSCALL
(
__NR_timî_gëovîrun
, 
sys_timî_gëovîrun
)

517 
	#__NR_timî_dñëe
 226

	)

518 
	$__SYSCALL
(
__NR_timî_dñëe
, 
sys_timî_dñëe
)

519 
	#__NR_˛ock_£âime
 227

	)

520 
	$__SYSCALL
(
__NR_˛ock_£âime
, 
sys_˛ock_£âime
)

521 
	#__NR_˛ock_gëtime
 228

	)

522 
	$__SYSCALL
(
__NR_˛ock_gëtime
, 
sys_˛ock_gëtime
)

523 
	#__NR_˛ock_gëªs
 229

	)

524 
	$__SYSCALL
(
__NR_˛ock_gëªs
, 
sys_˛ock_gëªs
)

525 
	#__NR_˛ock_«no¶ìp
 230

	)

526 
	$__SYSCALL
(
__NR_˛ock_«no¶ìp
, 
sys_˛ock_«no¶ìp
)

527 
	#__NR_exô_group
 231

	)

528 
	$__SYSCALL
(
__NR_exô_group
, 
sys_exô_group
)

529 
	#__NR_ïﬁl_waô
 232

	)

530 
	$__SYSCALL
(
__NR_ïﬁl_waô
, 
sys_ïﬁl_waô
)

531 
	#__NR_ïﬁl_˘l
 233

	)

532 
	$__SYSCALL
(
__NR_ïﬁl_˘l
, 
sys_ïﬁl_˘l
)

533 
	#__NR_tgkûl
 234

	)

534 
	$__SYSCALL
(
__NR_tgkûl
, 
sys_tgkûl
)

535 
	#__NR_utimes
 235

	)

536 
	$__SYSCALL
(
__NR_utimes
, 
sys_utimes
)

537 
	#__NR_v£rvî
 236

	)

538 
	$__SYSCALL
(
__NR_v£rvî
, 
sys_ni_sysˇŒ
)

539 
	#__NR_mböd
 237

	)

540 
	$__SYSCALL
(
__NR_mböd
, 
sys_mböd
)

541 
	#__NR_£t_mempﬁicy
 238

	)

542 
	$__SYSCALL
(
__NR_£t_mempﬁicy
, 
sys_£t_mempﬁicy
)

543 
	#__NR_gë_mempﬁicy
 239

	)

544 
	$__SYSCALL
(
__NR_gë_mempﬁicy
, 
sys_gë_mempﬁicy
)

545 
	#__NR_mq_›í
 240

	)

546 
	$__SYSCALL
(
__NR_mq_›í
, 
sys_mq_›í
)

547 
	#__NR_mq_u∆ök
 241

	)

548 
	$__SYSCALL
(
__NR_mq_u∆ök
, 
sys_mq_u∆ök
)

549 
	#__NR_mq_timed£nd
 242

	)

550 
	$__SYSCALL
(
__NR_mq_timed£nd
, 
sys_mq_timed£nd
)

551 
	#__NR_mq_timedª˚ive
 243

	)

552 
	$__SYSCALL
(
__NR_mq_timedª˚ive
, 
sys_mq_timedª˚ive
)

553 
	#__NR_mq_nŸify
 244

	)

554 
	$__SYSCALL
(
__NR_mq_nŸify
, 
sys_mq_nŸify
)

555 
	#__NR_mq_gë£èâr
 245

	)

556 
	$__SYSCALL
(
__NR_mq_gë£èâr
, 
sys_mq_gë£èâr
)

557 
	#__NR_kexec_lﬂd
 246

	)

558 
	$__SYSCALL
(
__NR_kexec_lﬂd
, 
sys_kexec_lﬂd
)

559 
	#__NR_waôid
 247

	)

560 
	$__SYSCALL
(
__NR_waôid
, 
sys_waôid
)

561 
	#__NR_add_key
 248

	)

562 
	$__SYSCALL
(
__NR_add_key
, 
sys_add_key
)

563 
	#__NR_ªque°_key
 249

	)

564 
	$__SYSCALL
(
__NR_ªque°_key
, 
sys_ªque°_key
)

565 
	#__NR_key˘l
 250

	)

566 
	$__SYSCALL
(
__NR_key˘l
, 
sys_key˘l
)

567 
	#__NR_i›rio_£t
 251

	)

568 
	$__SYSCALL
(
__NR_i›rio_£t
, 
sys_i›rio_£t
)

569 
	#__NR_i›rio_gë
 252

	)

570 
	$__SYSCALL
(
__NR_i›rio_gë
, 
sys_i›rio_gë
)

571 
	#__NR_öŸify_öô
 253

	)

572 
	$__SYSCALL
(
__NR_öŸify_öô
, 
sys_öŸify_öô
)

573 
	#__NR_öŸify_add_w©ch
 254

	)

574 
	$__SYSCALL
(
__NR_öŸify_add_w©ch
, 
sys_öŸify_add_w©ch
)

575 
	#__NR_öŸify_rm_w©ch
 255

	)

576 
	$__SYSCALL
(
__NR_öŸify_rm_w©ch
, 
sys_öŸify_rm_w©ch
)

577 
	#__NR_migøã_∑ges
 256

	)

578 
	$__SYSCALL
(
__NR_migøã_∑ges
, 
sys_migøã_∑ges
)

579 
	#__NR_›í©
 257

	)

580 
	$__SYSCALL
(
__NR_›í©
, 
sys_›í©
)

581 
	#__NR_mkdú©
 258

	)

582 
	$__SYSCALL
(
__NR_mkdú©
, 
sys_mkdú©
)

583 
	#__NR_mknod©
 259

	)

584 
	$__SYSCALL
(
__NR_mknod©
, 
sys_mknod©
)

585 
	#__NR_fchow«t
 260

	)

586 
	$__SYSCALL
(
__NR_fchow«t
, 
sys_fchow«t
)

587 
	#__NR_futimeßt
 261

	)

588 
	$__SYSCALL
(
__NR_futimeßt
, 
sys_futimeßt
)

589 
	#__NR_√wf°©©
 262

	)

590 
	$__SYSCALL
(
__NR_√wf°©©
, 
sys_√wf°©©
)

591 
	#__NR_u∆ök©
 263

	)

592 
	$__SYSCALL
(
__NR_u∆ök©
, 
sys_u∆ök©
)

593 
	#__NR_ª«mót
 264

	)

594 
	$__SYSCALL
(
__NR_ª«mót
, 
sys_ª«mót
)

595 
	#__NR_lök©
 265

	)

596 
	$__SYSCALL
(
__NR_lök©
, 
sys_lök©
)

597 
	#__NR_symlök©
 266

	)

598 
	$__SYSCALL
(
__NR_symlök©
, 
sys_symlök©
)

599 
	#__NR_ªadlök©
 267

	)

600 
	$__SYSCALL
(
__NR_ªadlök©
, 
sys_ªadlök©
)

601 
	#__NR_fchmod©
 268

	)

602 
	$__SYSCALL
(
__NR_fchmod©
, 
sys_fchmod©
)

603 
	#__NR_Ác˚sßt
 269

	)

604 
	$__SYSCALL
(
__NR_Ác˚sßt
, 
sys_Ác˚sßt
)

605 
	#__NR_p£À˘6
 270

	)

606 
	$__SYSCALL
(
__NR_p£À˘6
, 
sys_p£À˘6
)

607 
	#__NR_µﬁl
 271

	)

608 
	$__SYSCALL
(
__NR_µﬁl
, 
sys_µﬁl
)

609 
	#__NR_unsh¨e
 272

	)

610 
	$__SYSCALL
(
__NR_unsh¨e
, 
sys_unsh¨e
)

611 
	#__NR_£t_robu°_li°
 273

	)

612 
	$__SYSCALL
(
__NR_£t_robu°_li°
, 
sys_£t_robu°_li°
)

613 
	#__NR_gë_robu°_li°
 274

	)

614 
	$__SYSCALL
(
__NR_gë_robu°_li°
, 
sys_gë_robu°_li°
)

615 
	#__NR_•li˚
 275

	)

616 
	$__SYSCALL
(
__NR_•li˚
, 
sys_•li˚
)

617 
	#__NR_ãe
 276

	)

618 
	$__SYSCALL
(
__NR_ãe
, 
sys_ãe
)

619 
	#__NR_sync_fûe_ønge
 277

	)

620 
	$__SYSCALL
(
__NR_sync_fûe_ønge
, 
sys_sync_fûe_ønge
)

621 
	#__NR_vm•li˚
 278

	)

622 
	$__SYSCALL
(
__NR_vm•li˚
, 
sys_vm•li˚
)

623 
	#__NR_move_∑ges
 279

	)

624 
	$__SYSCALL
(
__NR_move_∑ges
, 
sys_move_∑ges
)

625 
	#__NR_utimíßt
 280

	)

626 
	$__SYSCALL
(
__NR_utimíßt
, 
sys_utimíßt
)

627 
	#__NR_ïﬁl_pwaô
 281

	)

628 
	$__SYSCALL
(
__NR_ïﬁl_pwaô
, 
sys_ïﬁl_pwaô
)

629 
	#__NR_sig«lfd
 282

	)

630 
	$__SYSCALL
(
__NR_sig«lfd
, 
sys_sig«lfd
)

631 
	#__NR_timîfd_¸óã
 283

	)

632 
	$__SYSCALL
(
__NR_timîfd_¸óã
, 
sys_timîfd_¸óã
)

633 
	#__NR_evítfd
 284

	)

634 
	$__SYSCALL
(
__NR_evítfd
, 
sys_evítfd
)

635 
	#__NR_ÁŒoˇã
 285

	)

636 
	$__SYSCALL
(
__NR_ÁŒoˇã
, 
sys_ÁŒoˇã
)

637 
	#__NR_timîfd_£âime
 286

	)

638 
	$__SYSCALL
(
__NR_timîfd_£âime
, 
sys_timîfd_£âime
)

639 
	#__NR_timîfd_gëtime
 287

	)

640 
	$__SYSCALL
(
__NR_timîfd_gëtime
, 
sys_timîfd_gëtime
)

641 
	#__NR_ac˚±4
 288

	)

642 
	$__SYSCALL
(
__NR_ac˚±4
, 
sys_ac˚±4
)

643 
	#__NR_sig«lfd4
 289

	)

644 
	$__SYSCALL
(
__NR_sig«lfd4
, 
sys_sig«lfd4
)

645 
	#__NR_evítfd2
 290

	)

646 
	$__SYSCALL
(
__NR_evítfd2
, 
sys_evítfd2
)

647 
	#__NR_ïﬁl_¸óã1
 291

	)

648 
	$__SYSCALL
(
__NR_ïﬁl_¸óã1
, 
sys_ïﬁl_¸óã1
)

649 
	#__NR_dup3
 292

	)

650 
	$__SYSCALL
(
__NR_dup3
, 
sys_dup3
)

651 
	#__NR_pùe2
 293

	)

652 
	$__SYSCALL
(
__NR_pùe2
, 
sys_pùe2
)

653 
	#__NR_öŸify_öô1
 294

	)

654 
	$__SYSCALL
(
__NR_öŸify_öô1
, 
sys_öŸify_öô1
)

655 
	#__NR_¥ódv
 295

	)

656 
	$__SYSCALL
(
__NR_¥ódv
, 
sys_¥ódv
)

657 
	#__NR_pwrôev
 296

	)

658 
	$__SYSCALL
(
__NR_pwrôev
, 
sys_pwrôev
)

659 
	#__NR_π_tgsigqueueöfo
 297

	)

660 
	$__SYSCALL
(
__NR_π_tgsigqueueöfo
, 
sys_π_tgsigqueueöfo
)

661 
	#__NR_≥rf_evít_›í
 298

	)

662 
	$__SYSCALL
(
__NR_≥rf_evít_›í
, 
sys_≥rf_evít_›í
)

663 
	#__NR_ªcvmmsg
 299

	)

664 
	$__SYSCALL
(
__NR_ªcvmmsg
, 
sys_ªcvmmsg
)

665 
	#__NR_ÁnŸify_öô
 300

	)

666 
	$__SYSCALL
(
__NR_ÁnŸify_öô
, 
sys_ÁnŸify_öô
)

667 
	#__NR_ÁnŸify_m¨k
 301

	)

668 
	$__SYSCALL
(
__NR_ÁnŸify_m¨k
, 
sys_ÁnŸify_m¨k
)

669 
	#__NR_¥limô64
 302

	)

670 
	$__SYSCALL
(
__NR_¥limô64
, 
sys_¥limô64
)

671 
	#__NR_«me_to_h™dÀ_©
 303

	)

672 
	$__SYSCALL
(
__NR_«me_to_h™dÀ_©
, 
sys_«me_to_h™dÀ_©
)

673 
	#__NR_›í_by_h™dÀ_©
 304

	)

674 
	$__SYSCALL
(
__NR_›í_by_h™dÀ_©
, 
sys_›í_by_h™dÀ_©
)

675 
	#__NR_˛ock_adjtime
 305

	)

676 
	$__SYSCALL
(
__NR_˛ock_adjtime
, 
sys_˛ock_adjtime
)

677 
	#__NR_syncfs
 306

	)

678 
	$__SYSCALL
(
__NR_syncfs
, 
sys_syncfs
)

679 
	#__NR_£ndmmsg
 307

	)

680 
	$__SYSCALL
(
__NR_£ndmmsg
, 
sys_£ndmmsg
)

681 
	#__NR_£äs
 308

	)

682 
	$__SYSCALL
(
__NR_£äs
, 
sys_£äs
)

683 
	#__NR_gë˝u
 309

	)

684 
	$__SYSCALL
(
__NR_gë˝u
, 
sys_gë˝u
)

685 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

686 
	$__SYSCALL
(
__NR_¥o˚ss_vm_ªadv
, 
sys_¥o˚ss_vm_ªadv
)

687 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

688 
	$__SYSCALL
(
__NR_¥o˚ss_vm_wrôev
, 
sys_¥o˚ss_vm_wrôev
)

690 #i‚de‡
__NO_STUBS


691 
	#__ARCH_WANT_OLD_READDIR


	)

692 
	#__ARCH_WANT_OLD_STAT


	)

693 
	#__ARCH_WANT_SYS_ALARM


	)

694 
	#__ARCH_WANT_SYS_GETHOSTNAME


	)

695 
	#__ARCH_WANT_SYS_PAUSE


	)

696 
	#__ARCH_WANT_SYS_SGETMASK


	)

697 
	#__ARCH_WANT_SYS_SIGNAL


	)

698 
	#__ARCH_WANT_SYS_UTIME


	)

699 
	#__ARCH_WANT_SYS_WAITPID


	)

700 
	#__ARCH_WANT_SYS_SOCKETCALL


	)

701 
	#__ARCH_WANT_SYS_FADVISE64


	)

702 
	#__ARCH_WANT_SYS_GETPGRP


	)

703 
	#__ARCH_WANT_SYS_LLSEEK


	)

704 
	#__ARCH_WANT_SYS_NICE


	)

705 
	#__ARCH_WANT_SYS_OLD_GETRLIMIT


	)

706 
	#__ARCH_WANT_SYS_OLD_UNAME


	)

707 
	#__ARCH_WANT_SYS_OLDUMOUNT


	)

708 
	#__ARCH_WANT_SYS_SIGPENDING


	)

709 
	#__ARCH_WANT_SYS_SIGPROCMASK


	)

710 
	#__ARCH_WANT_SYS_RT_SIGACTION


	)

711 
	#__ARCH_WANT_SYS_RT_SIGSUSPEND


	)

712 
	#__ARCH_WANT_SYS_TIME


	)

713 
	#__ARCH_WANT_COMPAT_SYS_TIME


	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_CAIF
 37

	)

113 
	#PF_ALG
 38

	)

114 
	#PF_NFC
 39

	)

115 
	#PF_MAX
 40

	)

118 
	#AF_UNSPEC
 
PF_UNSPEC


	)

119 
	#AF_LOCAL
 
PF_LOCAL


	)

120 
	#AF_UNIX
 
PF_UNIX


	)

121 
	#AF_FILE
 
PF_FILE


	)

122 
	#AF_INET
 
PF_INET


	)

123 
	#AF_AX25
 
PF_AX25


	)

124 
	#AF_IPX
 
PF_IPX


	)

125 
	#AF_APPLETALK
 
PF_APPLETALK


	)

126 
	#AF_NETROM
 
PF_NETROM


	)

127 
	#AF_BRIDGE
 
PF_BRIDGE


	)

128 
	#AF_ATMPVC
 
PF_ATMPVC


	)

129 
	#AF_X25
 
PF_X25


	)

130 
	#AF_INET6
 
PF_INET6


	)

131 
	#AF_ROSE
 
PF_ROSE


	)

132 
	#AF_DEC√t
 
PF_DEC√t


	)

133 
	#AF_NETBEUI
 
PF_NETBEUI


	)

134 
	#AF_SECURITY
 
PF_SECURITY


	)

135 
	#AF_KEY
 
PF_KEY


	)

136 
	#AF_NETLINK
 
PF_NETLINK


	)

137 
	#AF_ROUTE
 
PF_ROUTE


	)

138 
	#AF_PACKET
 
PF_PACKET


	)

139 
	#AF_ASH
 
PF_ASH


	)

140 
	#AF_ECONET
 
PF_ECONET


	)

141 
	#AF_ATMSVC
 
PF_ATMSVC


	)

142 
	#AF_RDS
 
PF_RDS


	)

143 
	#AF_SNA
 
PF_SNA


	)

144 
	#AF_IRDA
 
PF_IRDA


	)

145 
	#AF_PPPOX
 
PF_PPPOX


	)

146 
	#AF_WANPIPE
 
PF_WANPIPE


	)

147 
	#AF_LLC
 
PF_LLC


	)

148 
	#AF_CAN
 
PF_CAN


	)

149 
	#AF_TIPC
 
PF_TIPC


	)

150 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

151 
	#AF_IUCV
 
PF_IUCV


	)

152 
	#AF_RXRPC
 
PF_RXRPC


	)

153 
	#AF_ISDN
 
PF_ISDN


	)

154 
	#AF_PHONET
 
PF_PHONET


	)

155 
	#AF_IEEE802154
 
PF_IEEE802154


	)

156 
	#AF_CAIF
 
PF_CAIF


	)

157 
	#AF_ALG
 
PF_ALG


	)

158 
	#AF_NFC
 
PF_NFC


	)

159 
	#AF_MAX
 
PF_MAX


	)

165 
	#SOL_RAW
 255

	)

166 
	#SOL_DECNET
 261

	)

167 
	#SOL_X25
 262

	)

168 
	#SOL_PACKET
 263

	)

169 
	#SOL_ATM
 264

	)

170 
	#SOL_AAL
 265

	)

171 
	#SOL_IRDA
 266

	)

174 
	#SOMAXCONN
 128

	)

177 
	~<bôs/sockaddr.h
>

180 
	ssockaddr


182 
__SOCKADDR_COMMON
 (
ß_
);

183 
	mß_d©a
[14];

189 
	#__ss_Æig¡y≥
 

	)

190 
	#_SS_SIZE
 128

	)

191 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

193 
	ssockaddr_°‹age


195 
__SOCKADDR_COMMON
 (
ss_
);

196 
__ss_Æig¡y≥
 
	m__ss_Æign
;

197 
	m__ss_∑ddög
[
_SS_PADSIZE
];

204 
	mMSG_OOB
 = 0x01,

205 
	#MSG_OOB
 
MSG_OOB


	)

206 
	mMSG_PEEK
 = 0x02,

207 
	#MSG_PEEK
 
MSG_PEEK


	)

208 
	mMSG_DONTROUTE
 = 0x04,

209 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

210 #ifde‡
__USE_GNU


212 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

213 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

215 
	mMSG_CTRUNC
 = 0x08,

216 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

217 
	mMSG_PROXY
 = 0x10,

218 
	#MSG_PROXY
 
MSG_PROXY


	)

219 
	mMSG_TRUNC
 = 0x20,

220 
	#MSG_TRUNC
 
MSG_TRUNC


	)

221 
	mMSG_DONTWAIT
 = 0x40,

222 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

223 
	mMSG_EOR
 = 0x80,

224 
	#MSG_EOR
 
MSG_EOR


	)

225 
	mMSG_WAITALL
 = 0x100,

226 
	#MSG_WAITALL
 
MSG_WAITALL


	)

227 
	mMSG_FIN
 = 0x200,

228 
	#MSG_FIN
 
MSG_FIN


	)

229 
	mMSG_SYN
 = 0x400,

230 
	#MSG_SYN
 
MSG_SYN


	)

231 
	mMSG_CONFIRM
 = 0x800,

232 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

233 
	mMSG_RST
 = 0x1000,

234 
	#MSG_RST
 
MSG_RST


	)

235 
	mMSG_ERRQUEUE
 = 0x2000,

236 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

237 
	mMSG_NOSIGNAL
 = 0x4000,

238 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

239 
	mMSG_MORE
 = 0x8000,

240 
	#MSG_MORE
 
MSG_MORE


	)

241 
	mMSG_WAITFORONE
 = 0x10000,

242 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

244 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

247 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

253 
	smsghdr


255 *
	mmsg_«me
;

256 
sockÀn_t
 
	mmsg_«mñí
;

258 
iovec
 *
	mmsg_iov
;

259 
size_t
 
	mmsg_iovÀn
;

261 *
	mmsg_c⁄åﬁ
;

262 
size_t
 
	mmsg_c⁄åﬁÀn
;

267 
	mmsg_Êags
;

270 #ifde‡
__USE_GNU


272 
	smmsghdr


274 
msghdr
 
	mmsg_hdr
;

275 
	mmsg_Àn
;

280 
	scmsghdr


282 
size_t
 
	mcmsg_Àn
;

287 
	mcmsg_Àvñ
;

288 
	mcmsg_ty≥
;

289 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

290 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

295 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

296 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

298 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

300 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

301 
	#CMSG_FIRSTHDR
(
mhdr
) \

302 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

303 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

304 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

305 & (
size_t
Ë~( (size_tË- 1))

	)

306 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

307 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

308 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

310 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

311 
cmsghdr
 *
__cmsg
Ë
__THROW
;

312 #ifde‡
__USE_EXTERN_INLINES


313 #i‚de‡
_EXTERN_INLINE


314 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

316 
_EXTERN_INLINE
 
cmsghdr
 *

317 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

319 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

321  (
cmsghdr
 *) 0;

323 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

324 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

325 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


326 + 
__mhdr
->
msg_c⁄åﬁÀn
)

327 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

328 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

330  (
cmsghdr
 *) 0;

331  
__cmsg
;

332 
	}
}

339 
	mSCM_RIGHTS
 = 0x01

340 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

341 #ifde‡
__USE_GNU


342 , 
	mSCM_CREDENTIALS
 = 0x02

343 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

347 #ifde‡
__USE_GNU


349 
	su¸ed


351 
pid_t
 
	mpid
;

352 
uid_t
 
	muid
;

353 
gid_t
 
	mgid
;

358 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


359 #i‚de‡
FIOGETOWN


360 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

362 #i‚de‡
FIOSETOWN


363 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

365 #i‚de‡
SIOCATMARK


366 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

368 #i‚de‡
SIOCGPGRP


369 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

371 #i‚de‡
SIOCGSTAMP


372 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

374 #i‚de‡
SIOCGSTAMPNS


375 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

377 #i‚de‡
SIOCSPGRP


378 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

383 
	~<asm/sockë.h
>

385 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


386 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


387 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


388 #unde‡
FIOGETOWN


390 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


391 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


392 #unde‡
FIOSETOWN


394 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


395 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


396 #unde‡
SIOCATMARK


398 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


399 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


400 #unde‡
SIOCGPGRP


402 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


403 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


404 #unde‡
SIOCGSTAMP


406 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


407 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


408 #unde‡
SIOCGSTAMPNS


410 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


411 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


412 #unde‡
SIOCSPGRP


417 
	slögî


419 
	ml_⁄off
;

420 
	ml_lögî
;

424 
__BEGIN_DECLS


431 
ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

432 
__vÀn
, 
__Êags
,

433 
__c⁄°
 
time•ec
 *
__tmo
);

439 
£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

440 
__vÀn
, 
__Êags
);

442 
	g__END_DECLS


	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/timex.h

19 #i‚def 
_BITS_TIMEX_H


20 
	#_BITS_TIMEX_H
 1

	)

24 
	stimex


26 
	mmodes
;

27 
	moff£t
;

28 
	m‰eq
;

29 
	mmaxîr‹
;

30 
	me°îr‹
;

31 
	m°©us
;

32 
	mc⁄°™t
;

33 
	m¥ecisi⁄
;

34 
	mtﬁî™˚
;

35 
timevÆ
 
	mtime
;

36 
	mtick
;

38 
	mµs‰eq
;

39 
	mjôãr
;

40 
	mshi·
;

41 
	m°abû
;

42 
	mjô˙t
;

43 
	mˇl˙t
;

44 
	mîr˙t
;

45 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

52 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


53 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

55 
__BEGIN_DECLS


58 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, 
__c⁄°
 
iovec
 *
__lvec
,

59 
__liov˙t
,

60 
__c⁄°
 
iovec
 *
__rvec
,

61 
__riov˙t
,

62 
__Êags
)

63 
__THROW
;

66 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, 
__c⁄°
 
iovec
 *
__lvec
,

67 
__liov˙t
,

68 
__c⁄°
 
iovec
 *
__rvec
,

69 
__riov˙t
,

70 
__Êags
)

71 
__THROW
;

73 
__END_DECLS


	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


44 
	#__LEAF
 , 
__Àaf__


	)

45 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

47 
	#__LEAF


	)

48 
	#__LEAF_ATTR


	)

56 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

57 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

58 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

59 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

61 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

62 
	#__THROW
 
	`throw
 ()

	)

63 
	#__THROWNL
 
	`throw
 ()

	)

64 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

74 
	#__ölöe


	)

76 
	#__THROW


	)

77 
	#__THROWNL


	)

78 
	#__NTH
(
f˘
Ë
	)
fct

80 
	#__c⁄°
 c⁄°

	)

81 
	#__sig√d
 sig√d

	)

82 
	#__vﬁ©ûe
 vﬁ©ûe

	)

88 
	#__P
(
¨gs
Ë
	)
args

89 
	#__PMT
(
¨gs
Ë
	)
args

94 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

95 
	#__STRING
(
x
Ë#x

	)

98 
	#__±r_t
 *

	)

99 
	#__l⁄g_doubÀ_t
 

	)

103 #ifdef 
__˝lu•lus


104 
	#__BEGIN_DECLS
 "C" {

	)

105 
	#__END_DECLS
 }

	)

107 
	#__BEGIN_DECLS


	)

108 
	#__END_DECLS


	)

117 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


118 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

119 
	#__END_NAMESPACE_STD
 }

	)

120 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

121 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

122 
	#__END_NAMESPACE_C99
 }

	)

123 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

128 
	#__BEGIN_NAMESPACE_STD


	)

129 
	#__END_NAMESPACE_STD


	)

130 
	#__USING_NAMESPACE_STD
(
«me
)

	)

131 
	#__BEGIN_NAMESPACE_C99


	)

132 
	#__END_NAMESPACE_C99


	)

133 
	#__USING_NAMESPACE_C99
(
«me
)

	)

138 #i‚de‡
__BOUNDED_POINTERS__


139 
	#__bounded


	)

140 
	#__unbounded


	)

141 
	#__±rvÆue


	)

146 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

147 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

149 #i‡
__GNUC_PREREQ
 (4,3)

150 
	#__w¨nde˛
(
«me
, 
msg
) \

151 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

152 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

153 
	#__îr‹de˛
(
«me
, 
msg
) \

154 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

156 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

157 
	#__w¨«âr
(
msg
)

	)

158 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

162 #i‡
__GNUC_PREREQ
 (2,97)

164 
	#__Êex¨r
 []

	)

166 #ifde‡
__GNUC__


167 
	#__Êex¨r
 [0]

	)

169 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

170 
	#__Êex¨r
 []

	)

173 
	#__Êex¨r
 [1]

	)

189 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

191 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

192 #ifde‡
__˝lu•lus


193 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

194 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

195 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

196 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

198 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

199 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

200 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

201 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

203 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

204 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

217 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

218 
	#__©åibuã__
(
xyz
Ë

	)

224 #i‡
__GNUC_PREREQ
 (2,96)

225 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

227 
	#__©åibuã_mÆloc__


	)

233 #i‡
__GNUC_PREREQ
 (2,96)

234 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

236 
	#__©åibuã_puª__


	)

240 #i‡
__GNUC_PREREQ
 (2,5)

241 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

243 
	#__©åibuã_c⁄°__


	)

249 #i‡
__GNUC_PREREQ
 (3,1)

250 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

251 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

253 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

254 
	#__©åibuã_noölöe__


	)

258 #i‡
__GNUC_PREREQ
 (3,2)

259 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

261 
	#__©åibuã_dïªˇãd__


	)

270 #i‡
__GNUC_PREREQ
 (2,8)

271 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

273 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

280 #i‡
__GNUC_PREREQ
 (2,97)

281 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

282 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

284 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

289 #i‡
__GNUC_PREREQ
 (3,3)

290 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

292 
	#__n⁄nuŒ
(
∑øms
)

	)

297 #i‡
__GNUC_PREREQ
 (3,4)

298 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

299 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

300 #i‡
__USE_FORTIFY_LEVEL
 > 0

301 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

304 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

306 #i‚de‡
__wur


307 
	#__wur


	)

311 #i‡
__GNUC_PREREQ
 (3,2)

312 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

314 
	#__Æways_ölöe
 
__ölöe


	)

319 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

320 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


321 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

322 #i‡
__GNUC_PREREQ
 (4,3)

323 
	#__exã∫_Æways_ölöe
 \

324 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

326 
	#__exã∫_Æways_ölöe
 \

327 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

330 
	#__exã∫_ölöe
 
__ölöe


	)

331 #i‡
__GNUC_PREREQ
 (4,3)

332 
	#__exã∫_Æways_ölöe
 \

333 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

335 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #i‡
__GNUC_PREREQ
 (4,3)

343 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

344 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

351 #i‡!
__GNUC_PREREQ
 (2,8)

352 
	#__exãnsi⁄__


	)

356 #i‡!
__GNUC_PREREQ
 (2,92)

357 
	#__ª°ri˘


	)

363 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


364 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

366 #ifde‡
__GNUC__


367 
	#__ª°ri˘_¨r


	)

369 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

370 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

373 
	#__ª°ri˘_¨r


	)

378 
	~<bôs/w‹dsize.h
>

380 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


381 
	#__LDBL_COMPAT
 1

	)

382 #ifde‡
__REDIRECT


383 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

384 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

385 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

386 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

387 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

388 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

389 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

390 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

391 
	#__LDBL_REDIR_DECL
(
«me
) \

392 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

394 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

395 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

396 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

399 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


400 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

401 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

402 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

403 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

404 
	#__LDBL_REDIR_DECL
(
«me
)

	)

405 #ifde‡
__REDIRECT


406 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

407 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

78 
	#FIONCLEX
 0x5450

	)

79 
	#FIOCLEX
 0x5451

	)

80 
	#FIOASYNC
 0x5452

	)

81 
	#TIOCSERCONFIG
 0x5453

	)

82 
	#TIOCSERGWILD
 0x5454

	)

83 
	#TIOCSERSWILD
 0x5455

	)

84 
	#TIOCGLCKTRMIOS
 0x5456

	)

85 
	#TIOCSLCKTRMIOS
 0x5457

	)

86 
	#TIOCSERGSTRUCT
 0x5458

	)

87 
	#TIOCSERGETLSR
 0x5459

	)

88 
	#TIOCSERGETMULTI
 0x545A

	)

89 
	#TIOCSERSETMULTI
 0x545B

	)

91 
	#TIOCMIWAIT
 0x545C

	)

92 
	#TIOCGICOUNT
 0x545D

	)

98 #i‚de‡
FIOQSIZE


99 
	#FIOQSIZE
 0x5460

	)

103 
	#TIOCPKT_DATA
 0

	)

104 
	#TIOCPKT_FLUSHREAD
 1

	)

105 
	#TIOCPKT_FLUSHWRITE
 2

	)

106 
	#TIOCPKT_STOP
 4

	)

107 
	#TIOCPKT_START
 8

	)

108 
	#TIOCPKT_NOSTOP
 16

	)

109 
	#TIOCPKT_DOSTOP
 32

	)

110 
	#TIOCPKT_IOCTL
 64

	)

112 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 #i‚de‡
EXEC_PAGESIZE


10 
	#EXEC_PAGESIZE
 4096

	)

13 #i‚de‡
NOGROUP


14 
	#NOGROUP
 (-1)

	)

17 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

4 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

30 
	t__kî√l_uid32_t
;

31 
	t__kî√l_gid32_t
;

33 
	t__kî√l_ﬁd_uid_t
;

34 
	t__kî√l_ﬁd_gid_t
;

35 
	t__kî√l_ﬁd_dev_t
;

37 #ifde‡
__GNUC__


38 
	t__kî√l_loff_t
;

42 
	mvÆ
[2];

43 } 
	t__kî√l_fsid_t
;

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

31 #ifde‡
__GNUC__


32 
	t__kî√l_loff_t
;

36 
	mvÆ
[2];

37 } 
	t__kî√l_fsid_t
;

39 
	t__kî√l_ﬁd_uid_t
;

40 
	t__kî√l_ﬁd_gid_t
;

41 
__kî√l_uid_t
 
	t__kî√l_uid32_t
;

42 
__kî√l_gid_t
 
	t__kî√l_gid32_t
;

44 
	t__kî√l_ﬁd_dev_t
;

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LIBM_BIG
 1

	)

34 
	#__OPTION_EGLIBC_LOCALES
 1

	)

35 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

36 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

37 
	#__OPTION_EGLIBC_NIS
 1

	)

38 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

39 
	#__OPTION_EGLIBC_RCMD
 1

	)

40 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

41 
	#__OPTION_EGLIBC_SPAWN
 1

	)

42 
	#__OPTION_EGLIBC_STREAMS
 1

	)

43 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

44 
	#__OPTION_EGLIBC_UTMP
 1

	)

45 
	#__OPTION_EGLIBC_UTMPX
 1

	)

46 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

47 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

48 
	#__OPTION_POSIX_REGEXP
 1

	)

49 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

50 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_GNU


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_GNU


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

97 
__END_DECLS


101 #i‡!
deföed
 
__deföed_sched∑øm
 \

102 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

103 
	#__deföed_sched∑øm
 1

	)

105 
	s__sched_∑øm


107 
__sched_¥i‹ôy
;

109 #unde‡
__√ed_sched∑øm


113 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


114 
	#__˝u_£t_t_deföed


	)

116 
	#__CPU_SETSIZE
 1024

	)

117 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

120 
	t__˝u_mask
;

123 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

124 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

129 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

130 } 
	t˝u_£t_t
;

133 #i‡
	`__GNUC_PREREQ
 (2, 91)

134 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

137 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

139 
size_t
 
__i
; \

140 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

141 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

142 
__i
 = 0; __ò< 
__imax
; ++__i) \

143 
__bôs
[
__i
] = 0; \

144 
	}
} 0)

	)

146 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

147 (
__exãnsi⁄__
 \

148 ({ 
size_t
 
__˝u
 = (
˝u
); \

149 
__˝u
 < 8 * (
£tsize
) \

150 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

151 |
	`__CPUMASK
 (
__˝u
)) \

152 : 0; }))

	)

153 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

154 (
__exãnsi⁄__
 \

155 ({ 
size_t
 
__˝u
 = (
˝u
); \

156 
__˝u
 < 8 * (
£tsize
) \

157 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

158 &~
	`__CPUMASK
 (
__˝u
)) \

159 : 0; }))

	)

160 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

161 (
__exãnsi⁄__
 \

162 ({ 
size_t
 
__˝u
 = (
˝u
); \

163 
__˝u
 < 8 * (
£tsize
) \

164 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

165 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

166 : 0; }))

	)

168 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

169 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

171 #i‡
__GNUC_PREREQ
 (2, 91)

172 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

173 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

175 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

176 (
__exãnsi⁄__
 \

177 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

178 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

179 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

180 
size_t
 
__i
; \

181 
__i
 = 0; __ò< 
__imax
; ++__i) \

182 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

184 
__i
 =
__imax
; }))

	)

187 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

188 (
__exãnsi⁄__
 \

189 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

190 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

191 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

192 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

193 
size_t
 
__i
; \

194 
__i
 = 0; __ò< 
__imax
; ++__i) \

195 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

196 
__de°
; }))

	)

198 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

199 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

200 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

201 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

203 
__BEGIN_DECLS


205 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

206 
__THROW
;

207 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

208 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

210 
__END_DECLS


	@
1
.
1
/usr/include
251
9816
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/alloc.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/alloc_sb.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/alloc_stats.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/alloc_tables.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/badblocks.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/bb_compat.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/bb_inode.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/bitmaps.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/bitops.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/bitops.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/block.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/bmap.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/check_desc.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/closefs.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/crc16.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/crc16.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/csum.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/dblist.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/dblist_dir.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/dir_iterate.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/dirblock.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/dirhash.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/dupfs.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/e2image.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/expanddir.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2_err.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2_err.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2_ext_attr.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2_fs.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2_io.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2_types.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2fs.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext2fsP.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext3_extents.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ext_attr.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/extent.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/fileio.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/finddev.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/freefs.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/gen_bitmap.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/get_pathname.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/getsectsize.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/getsize.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/i_block.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/icount.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/imager.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ind_block.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/initialize.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/inline.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/inode.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/inode_io.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/io_manager.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/ismounted.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/jfs_compat.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/jfs_user.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/kernel-jbd.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/kernel-list.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/link.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/llseek.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/lookup.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/mkdir.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/mkjournal.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/namei.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/native.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/newdir.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/openfs.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/read_bb.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/read_bb_file.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/res_gdt.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/rw_bitmaps.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/swapfs.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/tdb.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/tdb.h
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/test_io.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/undo_io.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/unix_io.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/unlink.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/valid_blk.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/version.c
/home/wlcraze/workspace/fuse-ext2-0.0.7/fuse-ext2/ext2fs/version.h
/usr/include/assert.h
/usr/include/com_err.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/e2p/e2p.h
/usr/include/errno.h
/usr/include/et/com_err.h
/usr/include/ext2fs/bitops.h
/usr/include/ext2fs/ext2_err.h
/usr/include/ext2fs/ext2_ext_attr.h
/usr/include/ext2fs/ext2_fs.h
/usr/include/ext2fs/ext2_io.h
/usr/include/ext2fs/ext2_types.h
/usr/include/ext2fs/ext2fs.h
/usr/include/ext2fs/ext3_extents.h
/usr/include/fcntl.h
/usr/include/linux/fd.h
/usr/include/linux/fs.h
/usr/include/linux/sched.h
/usr/include/linux/stddef.h
/usr/include/linux/unistd.h
/usr/include/mntent.h
/usr/include/netinet/in.h
/usr/include/paths.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/file.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/mount.h
/usr/include/sys/param.h
/usr/include/sys/prctl.h
/usr/include/sys/queue.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/stat.h
/usr/include/sys/syscall.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/utsname.h
/usr/include/syscall.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/utime.h
crc16.h
e2image.h
ext2_err.h
ext2_ext_attr.h
ext2_fs.h
ext2_io.h
ext2fs.h
ext2fsP.h
ext3_extents.h
jfs_compat.h
jfs_user.h
kernel-jbd.h
kernel-list.h
tdb.h
version.h
/usr/include/alloca.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/mman.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/utsname.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/limits.h
/usr/include/linux/blk_types.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/prctl.h
/usr/include/linux/types.h
/usr/include/stdint.h
/usr/include/sys/socket.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/asm/param.h
/usr/include/asm/types.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/predefs.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/posix_types.h
/usr/include/sys/cdefs.h
/usr/include/sys/uio.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types.h
/usr/include/asm/socket.h
/usr/include/bits/libc-lock.h
/usr/include/bits/sockaddr.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/socket.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/sockios.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/sockios.h
/usr/include/bits/sched.h
